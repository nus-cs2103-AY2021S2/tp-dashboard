[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-2/tp/actions)","lastModifiedDate":"2021-02-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp/branch/master/graph/badge.svg?token\u003d1H94FQ5BPQ)](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp)","lastModifiedDate":"2021-02-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"* DietLAH! is **a diet tracking app that is meant to allow users to easily track and maintain their meals so that they are able to maintain their ideal weight and body shape**.\u003cbr\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"* While the app has a GUI, inputs and feedback are primarily given via a command-line interface. This allows users to work on the app quickly and efficiently as they get used to the inputs.","lastModifiedDate":"2021-02-28"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"* The app currently consists of three main components:","lastModifiedDate":"2021-02-28"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"  * BMI Tracker","lastModifiedDate":"2021-02-28"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"  * Diet Plan Selector","lastModifiedDate":"2021-02-28"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"  * Macronutrients Tracker (for meals)","lastModifiedDate":"2021-02-28"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"* The software is written in JDK 11.","lastModifiedDate":"2021-03-03"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"* For the detailed documentation of this project, see the **[DietLAH! Product Website](https://ay2021s2-cs2103t-t12-2.github.io/tp/)**.","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2021-02-28"}],"authorContributionMap":{"SoonKeatNeo":8,"sjq-sohjunqi":1,"-":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027","lastModifiedDate":"2019-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"run {","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2018-04-11"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"SoonKeatNeo":4,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-02-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"We are a team from NUS School of Computing completing this as a module requirement for CS2103/T.","lastModifiedDate":"2021-02-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"You can reach us by creating a new issue on our [GitHub issues page](https://github.com/AY2021S2-CS2103T-T12-2/tp/issues).","lastModifiedDate":"2021-02-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"### Soh Jun Qi","lastModifiedDate":"2021-02-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/sjq-sohjunqi.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/sjq-sohjunqi)]","lastModifiedDate":"2021-02-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"* Role: Team Lead","lastModifiedDate":"2021-02-27"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Testing (Primary), Documentation (Primary), Model (Primary), UI (Primary), Parsing (Secondary)","lastModifiedDate":"2021-02-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"### Kuah Wei Liang","lastModifiedDate":"2021-02-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"\u003cimg src\u003d\"images/weilianglol.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/WeiLiangLOL/)]","lastModifiedDate":"2021-02-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"* Role: Assistant Team Lead","lastModifiedDate":"2021-02-27"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Processing (Primary), Testing (Secondary), Code quality (Secondary)","lastModifiedDate":"2021-02-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"### Song Soon Wee","lastModifiedDate":"2021-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/ssoonwee.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/ssoonwee)]","lastModifiedDate":"2021-02-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Parsing (Primary), UI (Secondary), Model (Secondary)","lastModifiedDate":"2021-02-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"### Neo Soon Keat","lastModifiedDate":"2021-02-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/soonkeatneo.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/SoonKeatNeo)]","lastModifiedDate":"2021-02-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Code quality (Primary), Processing (Secondary), Storage (Secondary)","lastModifiedDate":"2021-02-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"### Jason Lim","lastModifiedDate":"2021-02-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/jasaaanlim.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/jasaaanlim)]","lastModifiedDate":"2021-02-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Storage (Primary), Documentation (Secondary), Processing (Secondary)","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"SoonKeatNeo":3,"sjq-sohjunqi":21,"-":31}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-02-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"## Table of Contents","lastModifiedDate":"2021-03-04"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"\u003c!--ts--\u003e","lastModifiedDate":"2021-03-04"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"* [Design](#design)","lastModifiedDate":"2021-03-25"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"* [Implementation](#implementation)","lastModifiedDate":"2021-03-25"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"  * [User Object](#user-object)","lastModifiedDate":"2021-03-25"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"  * [Food Object](#food-object)","lastModifiedDate":"2021-03-25"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    * [Add food item feature](#add-food-item-feature)","lastModifiedDate":"2021-03-25"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    * [Update food item feature](#update-food-item-feature)","lastModifiedDate":"2021-03-25"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    * [List food item feature](#list-food-item-feature)","lastModifiedDate":"2021-03-25"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    * [Delete food item feature](#delete-food-item-feature)","lastModifiedDate":"2021-03-25"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"  * [FoodIntake Object](#foodintake-object)","lastModifiedDate":"2021-03-25"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"* [Product Scope](#product-scope)","lastModifiedDate":"2021-03-04"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"* [User Stories](#user-stories)","lastModifiedDate":"2021-03-04"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"* [Use Cases](#use-cases)","lastModifiedDate":"2021-03-04"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"  * [Calculate BMI](#use-case-calculate-bmi)","lastModifiedDate":"2021-03-04"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"  * [Query height and weight](#use-case-query-height-and-weight)","lastModifiedDate":"2021-03-04"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"  * [Update height and weight](#use-case-update-height-and-weight)","lastModifiedDate":"2021-03-04"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"  * [Add food item as consumption](#use-case-add-food-item-as-consumption)","lastModifiedDate":"2021-03-04"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"  * [Get diet recommendation](#use-case-get-diet-recommendation)","lastModifiedDate":"2021-03-04"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"  * [View diet plan](#use-case-view-diet-plan)","lastModifiedDate":"2021-03-04"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"  * [Add food item as an intake](#use-case-add-food-item-as-an-intake)","lastModifiedDate":"2021-03-04"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"  * [Display current food intake for the day](#use-case-display-current-food-intake-for-the-day)","lastModifiedDate":"2021-03-04"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"* [Non-Functional Requirements](#non-functional-requirements)","lastModifiedDate":"2021-03-04"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"* [Glossary](#glossary) ","lastModifiedDate":"2021-03-04"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"\u003c!--te--\u003e","lastModifiedDate":"2021-03-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2021-03-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component.","lastModifiedDate":"2021-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e\u003c/div\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2021-03-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2021-03-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2021-03-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2021-03-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2021-03-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2021-03-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2021-03-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2021-03-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2021-03-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"Each of the four components,","lastModifiedDate":"2021-03-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-03-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface.","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2021-03-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2021-03-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2021-03-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2021-03-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-03-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class.","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-03-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2021-03-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component.","lastModifiedDate":"2021-03-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-03-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2021-03-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"**API** :","lastModifiedDate":"2021-03-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-03-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-03-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`.","lastModifiedDate":"2021-03-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person).","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`.","lastModifiedDate":"2021-03-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user.","lastModifiedDate":"2021-03-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-03-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2021-03-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-03-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2021-03-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"The `Model`,","lastModifiedDate":"2021-03-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences.","lastModifiedDate":"2021-03-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"* stores the address book data.","lastModifiedDate":"2021-03-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-03-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components.","lastModifiedDate":"2021-03-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-03-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2021-03-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)","lastModifiedDate":"2021-03-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2021-03-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back.","lastModifiedDate":"2021-03-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back.","lastModifiedDate":"2021-03-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2021-03-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2021-03-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":144,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2021-03-25"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2021-03-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"SoonKeatNeo"},"content":"### User Object","lastModifiedDate":"2021-03-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":150,"author":{"gitId":"SoonKeatNeo"},"content":"The User object is where the majority of the user\u0027s information and parameters are stored. ","lastModifiedDate":"2021-03-25"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":152,"author":{"gitId":"SoonKeatNeo"},"content":"The \u0027User\u0027 object contains the following components:","lastModifiedDate":"2021-03-25"},{"lineNumber":153,"author":{"gitId":"SoonKeatNeo"},"content":"1. `age`: Represents the Integer value holding the age of the user","lastModifiedDate":"2021-03-25"},{"lineNumber":154,"author":{"gitId":"SoonKeatNeo"},"content":"2. `bmi`: Represents the Bmi object, which holds the height and weight values of the user (in double)","lastModifiedDate":"2021-03-25"},{"lineNumber":155,"author":{"gitId":"SoonKeatNeo"},"content":"3. `gender`: Represents the String value holding the gender of the user","lastModifiedDate":"2021-03-25"},{"lineNumber":156,"author":{"gitId":"SoonKeatNeo"},"content":"4. `IdealWeight`: Represents the Double value providing the ideal weight of the user","lastModifiedDate":"2021-03-25"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":158,"author":{"gitId":"SoonKeatNeo"},"content":"Some of the actions that can be performed with the User component are:","lastModifiedDate":"2021-03-25"},{"lineNumber":159,"author":{"gitId":"SoonKeatNeo"},"content":"1. Set and retrieve the user\u0027s chosen diet plan (Active Diet Plan)","lastModifiedDate":"2021-03-25"},{"lineNumber":160,"author":{"gitId":"SoonKeatNeo"},"content":"2. Update and retrieve the list of Food items that the user has stored","lastModifiedDate":"2021-03-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":163,"author":{"gitId":"ssoonwee"},"content":"### Food Object","lastModifiedDate":"2021-03-25"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":165,"author":{"gitId":"ssoonwee"},"content":"The food object stores the name of the food and its nutrient values (Carbohydrates, Fats and Proteins).","lastModifiedDate":"2021-03-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"The \u0027Food\u0027 contains the following components:","lastModifiedDate":"2021-03-25"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"1. `name`: Represents the name of the food item stored in the food component","lastModifiedDate":"2021-03-25"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"2. `carbos`: Represents the carbo values that is associated with the food item stored in the food component","lastModifiedDate":"2021-03-25"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"3. `fats`: Represents the fat values that is associated with the food item stored in the food component","lastModifiedDate":"2021-03-25"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"4. `proteins`: Represents the proteins values that is associated with the food item stored in the food component","lastModifiedDate":"2021-03-25"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"5. `kilocalories`: Represents the kilocalories values that is associated with the food item stored in the food component","lastModifiedDate":"2021-03-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":174,"author":{"gitId":"ssoonwee"},"content":"There are some actions that can be performed with the Food component. ","lastModifiedDate":"2021-03-25"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"1. Update respective nutrients\u0027 values.","lastModifiedDate":"2021-03-25"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":"2. Calculate total kilocalories\u0027 values. ","lastModifiedDate":"2021-03-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"Below is the Sequence Flow Diagram when a Food gets added to the UniqueFoodList through the Add-Command: to-do","lastModifiedDate":"2021-03-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":180,"author":{"gitId":"ssoonwee"},"content":"#### Design consideration:","lastModifiedDate":"2021-03-25"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":182,"author":{"gitId":"ssoonwee"},"content":"##### Aspect: How the components within `Food` are added or changed","lastModifiedDate":"2021-03-25"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":"* Current Choice: ","lastModifiedDate":"2021-03-25"},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":"  * The food components are not immutable and its nutrients value will update each time an update command is passed. ","lastModifiedDate":"2021-03-25"},{"lineNumber":185,"author":{"gitId":"ssoonwee"},"content":"* Pros:","lastModifiedDate":"2021-03-25"},{"lineNumber":186,"author":{"gitId":"ssoonwee"},"content":"  * Faster as food objects do not have to be created everytime when a change is done","lastModifiedDate":"2021-03-25"},{"lineNumber":187,"author":{"gitId":"ssoonwee"},"content":"  * Flexible to changes since only an update command is called to change the value","lastModifiedDate":"2021-03-25"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"* Cons:","lastModifiedDate":"2021-03-25"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"  * More prone to bugs as the components can be changed freely","lastModifiedDate":"2021-03-25"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"* Alternative 1: Make Food components immutable.","lastModifiedDate":"2021-03-25"},{"lineNumber":191,"author":{"gitId":"ssoonwee"},"content":"  * Pros:","lastModifiedDate":"2021-03-25"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"    * Less prone to bugs","lastModifiedDate":"2021-03-25"},{"lineNumber":193,"author":{"gitId":"ssoonwee"},"content":"  * Cons:","lastModifiedDate":"2021-03-25"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"    * More overhead to update items as a new object is created everytime","lastModifiedDate":"2021-03-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"### Add food item feature","lastModifiedDate":"2021-03-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"#### Description:","lastModifiedDate":"2021-03-25"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"This command adds a valid food item into the unique food list. Users are able to add a food item in with the valid input to the command below. If a food item with a similar name is added, this command will not allow it and an error will be shown to ask the user if they want to update the value instead.","lastModifiedDate":"2021-03-25"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":201,"author":{"gitId":"ssoonwee"},"content":"Example: `food_add n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":203,"author":{"gitId":"ssoonwee"},"content":"#### Implementation: ","lastModifiedDate":"2021-03-25"},{"lineNumber":204,"author":{"gitId":"ssoonwee"},"content":"Once the user types in the command to add food, the parser will check for all the required prefixes. If all required prefixes are present and the input values are valid, `AddFoodItemCommand` object is created. `AddFoodItemCommand` is a class that extends `Command` abstract class. `AddFoodItemCommand` implements the `execute()` method from the `Command` abstract class. Upon execution, the command will check with the food list whether it has a food item that has a similar name. If there is, it will prompt an error that the food item exist and suggest updating the food item value instead. Otherwise, a new food item object will be created and added into the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":206,"author":{"gitId":"ssoonwee"},"content":"Below is an example of a usage scenario:","lastModifiedDate":"2021-03-25"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":208,"author":{"gitId":"ssoonwee"},"content":"Step 1: The user launches the application and executes `food_add n/chocolate c/100 f/100 p/100` to create the food item. ","lastModifiedDate":"2021-03-25"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":210,"author":{"gitId":"ssoonwee"},"content":"Step 2: The food item is added to the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":212,"author":{"gitId":"ssoonwee"},"content":"The following sequence diagram shows how the add operation works:","lastModifiedDate":"2021-03-25"},{"lineNumber":213,"author":{"gitId":"SoonKeatNeo"},"content":"Diagram flow to be inserted here","lastModifiedDate":"2021-03-25"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":215,"author":{"gitId":"ssoonwee"},"content":"### Update food item feature","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":217,"author":{"gitId":"ssoonwee"},"content":"#### Description:","lastModifiedDate":"2021-03-25"},{"lineNumber":218,"author":{"gitId":"ssoonwee"},"content":"This command updates a valid food item with the new value(s) specified in the unique food list. Food item has to exist in the food list and nutrient values specified has to be different from original before an update is permitted. ","lastModifiedDate":"2021-03-25"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":220,"author":{"gitId":"ssoonwee"},"content":"Example: `food_update n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-25"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":222,"author":{"gitId":"ssoonwee"},"content":"#### Implementation: ","lastModifiedDate":"2021-03-25"},{"lineNumber":223,"author":{"gitId":"ssoonwee"},"content":"Once the user types in the command to update food, the parser will check for the presence of the name prefix and the presence of at least one of the nutrient prefix. If the required prefixes and valid value(s) are present, the `UpdateFoodItemCommand` object is created and a temporary food item object is created with the new values. `UpdateFoodItemCommand` is a class that extends `Command` abstract class. `UpdateFoodItemCommand` implements the `execute()` method from the `Command` abstract class. Upon execution, the command will check with the food list whether it has a food item that has a similar name. If there is, it will check for any difference of the original values with the new value(s). If there is at least 1 difference, the food item in the food list will be updated to the new value(s). Otherwise, it will prompt for the user to modify at least 1 of the food item\u0027s value to be different from original.    ","lastModifiedDate":"2021-03-25"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":225,"author":{"gitId":"ssoonwee"},"content":"Below is an example of a usage scenario:","lastModifiedDate":"2021-03-25"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"ssoonwee"},"content":"Step 1: The user launches the application and executes `food_update n/chocolate c/200 f/200 p/200` to update the specified food item. ","lastModifiedDate":"2021-03-25"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":229,"author":{"gitId":"ssoonwee"},"content":"Step 2: The food item specified will have its value(s) updated to the new value(s) in the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":231,"author":{"gitId":"ssoonwee"},"content":"The following sequence diagram shows how the update operation works:","lastModifiedDate":"2021-03-25"},{"lineNumber":232,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":233,"author":{"gitId":"ssoonwee"},"content":"### List food item feature","lastModifiedDate":"2021-03-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":235,"author":{"gitId":"ssoonwee"},"content":"#### Description:","lastModifiedDate":"2021-03-25"},{"lineNumber":236,"author":{"gitId":"ssoonwee"},"content":"This command lists all the food item(s) in the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":238,"author":{"gitId":"ssoonwee"},"content":"Example: `food_list`","lastModifiedDate":"2021-03-25"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":240,"author":{"gitId":"ssoonwee"},"content":"#### Implementation: ","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"ssoonwee"},"content":"Once the user types in the command, the list of food items in the food list will be displayed.`ListFoodItemCommand` is a class that extends `Command` abstract class. `ListFoodItemCommand` implements the `execute()` method from the `Command` abstract class. Upon execution, the command will list all the food items stored in the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":243,"author":{"gitId":"ssoonwee"},"content":"Below is an example of a usage scenario:","lastModifiedDate":"2021-03-25"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":245,"author":{"gitId":"ssoonwee"},"content":"Step 1: The user launches the application and executes `food_list`. ","lastModifiedDate":"2021-03-25"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":247,"author":{"gitId":"ssoonwee"},"content":"Step 2: The food item(s) in the food list will be displayed.","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":249,"author":{"gitId":"ssoonwee"},"content":"The following sequence diagram shows how the delete operation works:","lastModifiedDate":"2021-03-25"},{"lineNumber":250,"author":{"gitId":"ssoonwee"},"content":" ","lastModifiedDate":"2021-03-25"},{"lineNumber":251,"author":{"gitId":"ssoonwee"},"content":"### Delete food item feature","lastModifiedDate":"2021-03-25"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":253,"author":{"gitId":"ssoonwee"},"content":"#### Description:","lastModifiedDate":"2021-03-25"},{"lineNumber":254,"author":{"gitId":"ssoonwee"},"content":"This command deletes a valid food item from the unique food list. Food item has to exist in the food list before the deletion can be carried out.","lastModifiedDate":"2021-03-25"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":256,"author":{"gitId":"ssoonwee"},"content":"Example: `food_delete n/FOOD_NAME`","lastModifiedDate":"2021-03-25"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":258,"author":{"gitId":"ssoonwee"},"content":"#### Implementation: ","lastModifiedDate":"2021-03-25"},{"lineNumber":259,"author":{"gitId":"ssoonwee"},"content":"Once the user types in the command to delete food, the parser will check for the required name prefix. If the name prefix is present, the `DeleteFoodItemCommand` object is created with the food name captured from the parser. `DeleteFoodItemCommand` is a class that extends `Command` abstract class. `DeleteFoodItemCommand` implements the `execute()` method from the `Command` abstract class. Upon execution, the command will check with the food list whether it has a food item that has a similar name. If there is, it will delete the food item from the list. Otherwise, it will prompt an error that the food item is not found.","lastModifiedDate":"2021-03-25"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":261,"author":{"gitId":"ssoonwee"},"content":"Below is an example of a usage scenario:","lastModifiedDate":"2021-03-25"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":263,"author":{"gitId":"ssoonwee"},"content":"Step 1: The user launches the application and executes `food_delete n/chocolate`. ","lastModifiedDate":"2021-03-25"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":265,"author":{"gitId":"ssoonwee"},"content":"Step 2: The food item specified will be deleted from the food list.","lastModifiedDate":"2021-03-25"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":267,"author":{"gitId":"ssoonwee"},"content":"The following sequence diagram shows how the delete operation works:","lastModifiedDate":"2021-03-25"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":269,"author":{"gitId":"jasaaanlim"},"content":"### FoodIntake Object","lastModifiedDate":"2021-03-25"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":271,"author":{"gitId":"jasaaanlim"},"content":"The FoodIntake class stores a `LocalDate` and `Food` object representing the date and food associated with a particular FoodIntake.","lastModifiedDate":"2021-03-25"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":273,"author":{"gitId":"jasaaanlim"},"content":"1. `date` : Represents the date that the FoodIntake was recorded","lastModifiedDate":"2021-03-25"},{"lineNumber":274,"author":{"gitId":"jasaaanlim"},"content":"2. `food` : Represents the `Food` object associated with the FoodIntake record","lastModifiedDate":"2021-03-25"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":276,"author":{"gitId":"jasaaanlim"},"content":"The `Food` object associated with each `FoodIntake` object is independent of the `UniqueFoodList` and editing a `Food` in the `UniqueFoodList` will not affect old FoodIntake values, and vice versa.","lastModifiedDate":"2021-03-25"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":278,"author":{"gitId":"jasaaanlim"},"content":"There are two constructors for the creation of a FoodIntake object.","lastModifiedDate":"2021-03-25"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":280,"author":{"gitId":"jasaaanlim"},"content":"1. `public FoodIntake(LocalDate date, Food temporaryFood)` : Creates a FoodIntake object given the `LocalDate` and `Food` object - used during normal FoodIntake creation","lastModifiedDate":"2021-03-25"},{"lineNumber":281,"author":{"gitId":"jasaaanlim"},"content":"2. `public FoodIntake(LocalDate date, String name, double carbos, double fats, double proteins)` : Creates a FoodIntake object given the `LocalDate` and individual food name and nutrient values - used when loading to file and saving duplicate FoodIntake Food names.","lastModifiedDate":"2021-03-25"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":283,"author":{"gitId":"jasaaanlim"},"content":"#### Design consideration:","lastModifiedDate":"2021-03-25"},{"lineNumber":284,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":285,"author":{"gitId":"jasaaanlim"},"content":"The FoodIntake class makes use of a Food object as it can be directly retrieved from the UniqueFoodList which stores a list of Food objects.","lastModifiedDate":"2021-03-25"},{"lineNumber":286,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":287,"author":{"gitId":"jasaaanlim"},"content":"An alternative would be to store them as separate String and Double values, however, this makes the design less intuitive and harder to related to the `Food` class.","lastModifiedDate":"2021-03-25"},{"lineNumber":288,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":289,"author":{"gitId":"jasaaanlim"},"content":"Two constructors were used to get-around the restrictions by the Food name field. By default, the Food name can only contain alphabets and spaces, however, when adding a new FoodIntake item to the FoodIntakeList, duplicate Food names are appended with a numerical duplicate count (e.g. Chicken rice 2). As such, the second constructor allows for Food names with numerical values and is used when loading the FoodIntake list from file, and when adding a duplicate FoodIntake with a duplicate Food name.","lastModifiedDate":"2021-03-25"},{"lineNumber":290,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":291,"author":{"gitId":"jasaaanlim"},"content":"### FoodIntakeList Class","lastModifiedDate":"2021-03-25"},{"lineNumber":292,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":293,"author":{"gitId":"jasaaanlim"},"content":"[Work in progress]","lastModifiedDate":"2021-03-25"},{"lineNumber":294,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":295,"author":{"gitId":"sjq-sohjunqi"},"content":"### Product Scope","lastModifiedDate":"2021-02-27"},{"lineNumber":296,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":297,"author":{"gitId":"sjq-sohjunqi"},"content":"**Target user profile**","lastModifiedDate":"2021-02-27"},{"lineNumber":298,"author":{"gitId":"sjq-sohjunqi"},"content":"  * want to start a diet","lastModifiedDate":"2021-02-27"},{"lineNumber":299,"author":{"gitId":"sjq-sohjunqi"},"content":"  * track their progress against a diet plan","lastModifiedDate":"2021-02-27"},{"lineNumber":300,"author":{"gitId":"sjq-sohjunqi"},"content":"  * track the macronutrients of the food consumed","lastModifiedDate":"2021-02-27"},{"lineNumber":301,"author":{"gitId":"sjq-sohjunqi"},"content":"  * is comfortable with command-line interface","lastModifiedDate":"2021-02-27"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":303,"author":{"gitId":"sjq-sohjunqi"},"content":"**Value proposition**: quickly input daily food intake and calculate their macronutrients to check if diet plan is progressing as planned","lastModifiedDate":"2021-02-27"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":305,"author":{"gitId":"ssoonwee"},"content":"### User Stories","lastModifiedDate":"2021-03-04"},{"lineNumber":306,"author":{"gitId":"sjq-sohjunqi"},"content":"Priorities: High (must have) - `***`, Medium (nice to have) - `**`, Low (unlikely to have) - `*`","lastModifiedDate":"2021-02-27"},{"lineNumber":307,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":308,"author":{"gitId":"sjq-sohjunqi"},"content":"|Priority|   As a ...   |   I want to ...  |   So that I can​ ...   |","lastModifiedDate":"2021-02-27"},{"lineNumber":309,"author":{"gitId":"sjq-sohjunqi"},"content":"|------------|------------------|----------------------|---------------------------|","lastModifiedDate":"2021-02-27"},{"lineNumber":310,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Set a deadline for my diet plan|Stay on track of when the diet finishes|","lastModifiedDate":"2021-02-27"},{"lineNumber":311,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Add a new diet plan|Start a new diet plan|","lastModifiedDate":"2021-02-27"},{"lineNumber":312,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Delete my diet plan|Give up on the current diet plan|","lastModifiedDate":"2021-02-27"},{"lineNumber":313,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Track my weight|See if the diet is working|","lastModifiedDate":"2021-02-27"},{"lineNumber":314,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|View a list of recommended diets|find out what to diet on as I am not sure|","lastModifiedDate":"2021-02-27"},{"lineNumber":315,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|First-time User|Skim through some example templates|Know how the application works|","lastModifiedDate":"2021-02-27"},{"lineNumber":316,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|Long-time User|See a history of my past diet|I can backtrack what diets I have been on|","lastModifiedDate":"2021-02-27"},{"lineNumber":317,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|Frequent user|Store information on the popular foods that I eat|Quickly input my intake for the day|","lastModifiedDate":"2021-02-27"},{"lineNumber":318,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|User|Customize my diet plan|Adjust my diet plan to fit my needs|","lastModifiedDate":"2021-02-27"},{"lineNumber":319,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|User with dietary requirements|Filter the list of diets to fit my dietary requirements|Choose diets that are suited to my dietary needs|","lastModifiedDate":"2021-02-27"},{"lineNumber":320,"author":{"gitId":"sjq-sohjunqi"},"content":"|`*`|Social Users|See/Give reviews on diets|Know which diets are more effective for others|","lastModifiedDate":"2021-02-27"},{"lineNumber":321,"author":{"gitId":"sjq-sohjunqi"},"content":"|`*`|Social Users|Connect with peers to see their dietary plans and progress|Stay up-to-date with my peers and possibly motivate myself|","lastModifiedDate":"2021-02-27"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":323,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2021-02-27"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":325,"author":{"gitId":"ssoonwee"},"content":"### Use Cases","lastModifiedDate":"2021-03-04"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"ssoonwee"},"content":"(For all use cases below, the **Body Mass Index (BMI) Tracker** is the `BMITracker`, **Diet Plan Selector** is the `DietSelector`, **Macronutrients Tracker** is the `MacroTracker` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2021-02-27"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Calculate BMI","lastModifiedDate":"2021-03-04"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"ssoonwee"},"content":"1.  User keys in the weight, height and ideal weight","lastModifiedDate":"2021-02-27"},{"lineNumber":334,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker calculates BMI from the user input","lastModifiedDate":"2021-02-27"},{"lineNumber":335,"author":{"gitId":"ssoonwee"},"content":"3.  BMITracker updates the height, weight and BMI of the user","lastModifiedDate":"2021-02-27"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Query height and weight","lastModifiedDate":"2021-03-04"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"ssoonwee"},"content":"1.  User queries for height and weight","lastModifiedDate":"2021-02-27"},{"lineNumber":344,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker displays information for height and weight","lastModifiedDate":"2021-02-27"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Update height and weight","lastModifiedDate":"2021-03-04"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"ssoonwee"},"content":"1.  User queries for height and weight","lastModifiedDate":"2021-02-27"},{"lineNumber":353,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker displays information for height and weight","lastModifiedDate":"2021-02-27"},{"lineNumber":354,"author":{"gitId":"ssoonwee"},"content":"3.  User updates the height and weight if they are different","lastModifiedDate":"2021-02-27"},{"lineNumber":355,"author":{"gitId":"ssoonwee"},"content":"4.  BMITracker updates the height, weight and BMI of the user","lastModifiedDate":"2021-02-27"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Add food item as consumption","lastModifiedDate":"2021-03-04"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"ssoonwee"},"content":"1.  User keys in the date and food item with information such as its name, fats, carbos, proteins","lastModifiedDate":"2021-02-27"},{"lineNumber":364,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker keeps track of that and calculates its kilocalories","lastModifiedDate":"2021-02-27"},{"lineNumber":365,"author":{"gitId":"ssoonwee"},"content":"3.  MacroTracker computes the total kilocalories for the day","lastModifiedDate":"2021-02-27"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Get diet recommendation","lastModifiedDate":"2021-03-04"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"ssoonwee"},"content":"1.  User requests to get a list of diet recommendation","lastModifiedDate":"2021-02-27"},{"lineNumber":374,"author":{"gitId":"ssoonwee"},"content":"2.  DietSelector displays a list of diet recommendation based on user\u0027s BMI","lastModifiedDate":"2021-02-27"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"ssoonwee"},"content":"#### Use case: View diet plan","lastModifiedDate":"2021-03-04"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"ssoonwee"},"content":"1.  User requests for a certain diet type","lastModifiedDate":"2021-02-27"},{"lineNumber":383,"author":{"gitId":"ssoonwee"},"content":"2.  DietSelector displays a detailed requirement for that certain diet type","lastModifiedDate":"2021-02-27"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Add food item as an intake","lastModifiedDate":"2021-03-04"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"ssoonwee"},"content":"**MSS**","lastModifiedDate":"2021-02-27"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"ssoonwee"},"content":"1.  User adds a particular food item","lastModifiedDate":"2021-02-27"},{"lineNumber":392,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker tracks the food and computes the total kilo calories consumption for the day","lastModifiedDate":"2021-02-27"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"ssoonwee"},"content":"    Use case ends.","lastModifiedDate":"2021-02-27"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"ssoonwee"},"content":"**Extensions**","lastModifiedDate":"2021-02-27"},{"lineNumber":397,"author":{"gitId":"ssoonwee"},"content":"*  1a. The food item exists.","lastModifiedDate":"2021-02-27"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"ssoonwee"},"content":"   * 1a1. MacroTracker updates food item details in the list of food.","lastModifiedDate":"2021-02-27"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"ssoonwee"},"content":"*  1b. The food item does not exists.","lastModifiedDate":"2021-02-27"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":403,"author":{"gitId":"ssoonwee"},"content":"   * 1b1. MacroTracker adds the food item into the list of food.","lastModifiedDate":"2021-02-27"},{"lineNumber":404,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":405,"author":{"gitId":"ssoonwee"},"content":"   Use case resumes at step 2.","lastModifiedDate":"2021-02-27"},{"lineNumber":406,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Display current food intake for the day","lastModifiedDate":"2021-03-04"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"ssoonwee"},"content":"1.  User queries a particular day intake.","lastModifiedDate":"2021-02-27"},{"lineNumber":412,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker displays the summary intake for that day.","lastModifiedDate":"2021-02-27"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"SoonKeatNeo"},"content":"2.  Should be able to hold diet plans for up to the past two years (730 days) without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2021-02-28"},{"lineNumber":422,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"SoonKeatNeo"},"content":"4.  Should help users as they start the application for the first time with sample data.","lastModifiedDate":"2021-02-28"},{"lineNumber":424,"author":{"gitId":"SoonKeatNeo"},"content":"5.  Interface should not hinder the users\u0027 usage of the application in order to input the data they need and get the desired response.","lastModifiedDate":"2021-02-28"},{"lineNumber":425,"author":{"gitId":"SoonKeatNeo"},"content":"6.  The data files should be easily modifiable by a user with a basic understanding of the JavaScript Object Notation (JSON).","lastModifiedDate":"2021-02-28"},{"lineNumber":426,"author":{"gitId":"SoonKeatNeo"},"content":"7.  Errors should display vividly and differently from the rest of the normal input such that users are aware something has gone wrong.","lastModifiedDate":"2021-02-28"},{"lineNumber":427,"author":{"gitId":"SoonKeatNeo"},"content":"8.  Should be easily deployable to all systems running any _mainstream OS_ once compiled executable is distributed via a release.","lastModifiedDate":"2021-02-28"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"ssoonwee"},"content":"*{More to be added}*","lastModifiedDate":"2021-02-27"}],"authorContributionMap":{"SoonKeatNeo":18,"sjq-sohjunqi":24,"ssoonwee":141,"jasaaanlim":21,"-":230}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2021-02-28"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2021-02-28"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2021-02-28"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"## Table of Contents","lastModifiedDate":"2021-02-27"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c!--ts--\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Introduction](#introduction)","lastModifiedDate":"2021-02-27"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Quick start](#quick-start)","lastModifiedDate":"2021-02-27"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Features](#features)","lastModifiedDate":"2021-02-27"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"* [1. Body Mass Index (BMI) Tracker](#1-body-mass-index-bmi-tracker)","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"  * [1.1. Input weight, height and ideal weight](#11-input-weight-height-and-ideal-weight)","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"  * [1.2. Query weight, height and BMI](#12-query-weight-height-and-bmi)","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"  * [1.3. Update weight, height and ideal weight](#13-update-weight-height-and-ideal-weight)","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"* [2. Diet Plan Selector](#2-diet-plan-selector)","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"  * [2.1. Get diet recommendations based on current BMI](#21-get-diet-recommendation-based-on-current-bmi)","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"  * [2.2. View active diet plan](#22-view-active-diet-plan)","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"  * [2.3. Select active diet plan](#23-select-active-diet-plan)","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"* [3. Macronutrients Tracker](#3-macronutrients-tracker)","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"  * [3.1. Add food item](#31-add-food-item)","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"  * [3.2. Update food item](#32-update-food-item)","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"  * [3.3. List food item](#33-list-food-item)","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"  * [3.4. Delete food item](#34-delete-food-item) ","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"  * [3.5. Input food intake](#35-input-food-intake)","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     * [3.5.1. Input food intake (For new food items that are not created before)](#351-input-food-intake-for-new-food-items-that-are-not-created-before)","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     * [3.5.2. Input food intake (For existing food items)](#352-input-food-intake-for-existing-food-items)","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     * [3.5.3. Input food intake (For existing food items, using different nutrient value(s))](#353-input-food-intake-for-existing-food-items-using-different-nutrient-values)","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"  * [3.6. Update food intake](#36-update-food-intake)","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"  * [3.7. Delete food intake](#37-delete-food-intake)","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"  * [3.8. Query food intake](#38-query-food-intake)","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"     * [3.8.1. Query food intake on a day](#381-query-food-intake-on-a-day)","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"     * [3.8.2. Query food intake over a period of days](#382-query-food-intake-over-a-period-of-days)","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [4. Progress report](#4-progress-report)","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"     * [4.1 Generate progress report](#41-generate-progress-report)","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Command summary](#command-summary)","lastModifiedDate":"2021-02-27"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c!--te--\u003e","lastModifiedDate":"2021-02-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"## Introduction","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"DietLAH! is a **desktop app with a Command-Line Interface (CLI) that allows users to easily track and maintain their meals so that they are able to maintain their ideal body weight.** If you can type fast, you’ll be able to record your meals and track your weight in this app much faster than other traditional GUI-based diet tracking apps!","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"1. Download the latest `DietLAH.jar`.","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"1. Copy the file to the folder you will be launching DietLAH! from on a daily basis.","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.","lastModifiedDate":"2021-02-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"   Here are some quick commands to get you started:","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`h/150 w/70 i/75`: Initializes the current user BMI with height of 150cm, weight of 70kg and ideal weight of 75kg.","lastModifiedDate":"2021-02-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`query`: Queries the current user\u0027s BMI with its height and weight information.","lastModifiedDate":"2021-02-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`update h/170 w/70 i/80`: Updates the current user BMI to height of 170cm, weight of 70kg and ideal weight of 80kg.","lastModifiedDate":"2021-02-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"   * **`plan`**`recommended`: Queries the recommended diet plan based on user\u0027s BMI.","lastModifiedDate":"2021-03-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"   * **`plan`**`t/1`: Queries more information of the weight loss diet plan.","lastModifiedDate":"2021-03-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"   * **`food_intake_add`**`d/31 Mar 2021 n/tomatoes p/10 c/10 f/10`: Adds tomato consumption with protein of 10g, carbohydrates of 10g and fats of 10g to the food intake for 31 Mar 2021.","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"   * **`food_intake_query`**`d/31 Mar 2021`: Queries the food intake for 31 Mar 2021.","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"1. Refer to the [Features](#features) section below for details of each command.","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-02-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"## 1. Body Mass Index (BMI) Tracker","lastModifiedDate":"2021-02-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.1 Input weight, height and ideal weight","lastModifiedDate":"2021-02-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"jasaaanlim"},"content":"On the application\u0027s first launch, the user is prompted to enter his/her height, weight and ideal weight.","lastModifiedDate":"2021-03-25"},{"lineNumber":86,"author":{"gitId":"sjq-sohjunqi"},"content":"Other commands will be unavailable until this command is first input.","lastModifiedDate":"2021-03-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `bmi g/GENDER a/AGE h/HEIGHT(CM) w/WEIGHT(KG) i/IDEAL_WEIGHT(KG)`","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"sjq-sohjunqi"},"content":"**Example:** `bmi g/M a/43 h/170 w/70 i/80`","lastModifiedDate":"2021-03-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"**Expected output:**","lastModifiedDate":"2021-03-03"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/bmi-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.2 Query weight, height and BMI","lastModifiedDate":"2021-02-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"The user can query their weight and height everyday to see their progress.","lastModifiedDate":"2021-03-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `bmi_query`","lastModifiedDate":"2021-03-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":106,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/bmi-query-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":108,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.3 Update weight, height and ideal weight","lastModifiedDate":"2021-02-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"The user can update their weight and height everyday to track their progress. ","lastModifiedDate":"2021-03-13"},{"lineNumber":113,"author":{"gitId":"WeiLiangLOL"},"content":"This is recommended, so the user will have a more accurate view of their BMI status.","lastModifiedDate":"2021-03-03"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":115,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `bmi_update g/GENDER a/AGE h/HEIGHT(CM) w/WEIGHT(KG) i/IDEAL_WEIGHT(KG)`","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"**Example:** `bmi_update g/M a/43 h/170 w/70 i/80`","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":119,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":121,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":122,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/bmi-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":123,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"sjq-sohjunqi"},"content":"## 2. Diet Plan Selector","lastModifiedDate":"2021-02-27"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"jasaaanlim"},"content":"### 2.1 Get diet recommendation based on current BMI","lastModifiedDate":"2021-02-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"jasaaanlim"},"content":"The user can get a recommended diet plan based on the their current BMI stored in the system.","lastModifiedDate":"2021-03-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `plan_recommend`","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":135,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":136,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/plan-recommend-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":137,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"jasaaanlim"},"content":"### 2.2 View active diet plan","lastModifiedDate":"2021-02-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"jasaaanlim"},"content":"Shows the current active diet plan previously selected by the user.","lastModifiedDate":"2021-02-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `plan_current`","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/plan-current-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"jasaaanlim"},"content":"### 2.3 Select active diet plan","lastModifiedDate":"2021-02-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"jasaaanlim"},"content":"Changes the current active diet plan to the newly specified plan.","lastModifiedDate":"2021-02-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `plan_set p/ID`","lastModifiedDate":"2021-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"**Example:** `plan_set p/1`","lastModifiedDate":"2021-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/plan-set-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"jasaaanlim"},"content":"### 2.4 List all available diet plans","lastModifiedDate":"2021-02-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"jasaaanlim"},"content":"Displays a list of available diet plans.","lastModifiedDate":"2021-02-27"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `plan_list`","lastModifiedDate":"2021-03-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":171,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":173,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":174,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/plan-list-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":175,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":177,"author":{"gitId":"jasaaanlim"},"content":"### 2.5 View information about a particular diet plan","lastModifiedDate":"2021-03-02"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":179,"author":{"gitId":"jasaaanlim"},"content":"Displays information about a particular diet plan.","lastModifiedDate":"2021-03-02"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":181,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `plan p/ID`","lastModifiedDate":"2021-03-14"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":183,"author":{"gitId":"sjq-sohjunqi"},"content":"**Example:** `plan p/1`","lastModifiedDate":"2021-03-14"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":185,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-03-02"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":187,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":188,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/plan-info-result.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":189,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-02"},{"lineNumber":191,"author":{"gitId":"sjq-sohjunqi"},"content":"## 3. Macronutrients Tracker","lastModifiedDate":"2021-02-27"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"### 3.1 Add food item","lastModifiedDate":"2021-03-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"Adds a new food item with their nutrients value and stores them in the food list. Food items are used as shortcuts to add food intake items without having to type out the values.","lastModifiedDate":"2021-03-27"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_add n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-22"},{"lineNumber":197,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_add n/tomato c/10 f/10 p/10`","lastModifiedDate":"2021-03-22"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":200,"author":{"gitId":"ssoonwee"},"content":"**Note:** Food item with similar names to existing food item cannot be added. ","lastModifiedDate":"2021-03-22"},{"lineNumber":201,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":202,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":203,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":204,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/add-food-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":207,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":208,"author":{"gitId":"ssoonwee"},"content":"### 3.2 Update food item","lastModifiedDate":"2021-03-22"},{"lineNumber":209,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":210,"author":{"gitId":"ssoonwee"},"content":"Updates existing food items with their new nutrients value(s).","lastModifiedDate":"2021-03-22"},{"lineNumber":211,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":212,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_update n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-22"},{"lineNumber":213,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":214,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_update n/tomato c/20 f/30 p/40`","lastModifiedDate":"2021-03-22"},{"lineNumber":215,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":216,"author":{"gitId":"ssoonwee"},"content":"**Note:** Particular food item has to exist in the list to update. Not all nutrient fields are compulsory. Only the nutrient field(s) specified will have its/their value(s) updated to the latest value. ","lastModifiedDate":"2021-03-22"},{"lineNumber":217,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":218,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":219,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":220,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":221,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/update-food-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":222,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":223,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":224,"author":{"gitId":"ssoonwee"},"content":"### 3.3 List food item","lastModifiedDate":"2021-03-22"},{"lineNumber":225,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":226,"author":{"gitId":"jasaaanlim"},"content":"Lists all food items that are stored in the application.","lastModifiedDate":"2021-03-25"},{"lineNumber":227,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":228,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_list`","lastModifiedDate":"2021-03-22"},{"lineNumber":229,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":230,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_list`","lastModifiedDate":"2021-03-22"},{"lineNumber":231,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":232,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":233,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":234,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":235,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/food-list-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":236,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":237,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":238,"author":{"gitId":"ssoonwee"},"content":"### 3.4 Delete food item","lastModifiedDate":"2021-03-22"},{"lineNumber":239,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":240,"author":{"gitId":"jasaaanlim"},"content":"Deletes the particular food item stored in the application.","lastModifiedDate":"2021-03-25"},{"lineNumber":241,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":242,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_delete n/name`","lastModifiedDate":"2021-03-22"},{"lineNumber":243,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":244,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_delete n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":245,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":246,"author":{"gitId":"ssoonwee"},"content":"**Note:** Particular food item has to exist in order to be deleted. Deletion of a food item will not affect older food intake item record with similar name. ","lastModifiedDate":"2021-03-22"},{"lineNumber":247,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":248,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":249,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":250,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":251,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/delete-food-item.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":252,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"ssoonwee"},"content":"### 3.5 Input food intake","lastModifiedDate":"2021-03-22"},{"lineNumber":255,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":256,"author":{"gitId":"ssoonwee"},"content":"For tracking the user\u0027s diet plan progress, the user is encouraged to track their daily food intake by entering the food name and associated macronutrients (carbohydrates, fats and proteins) in grams. There are a few ways to input a food intake such as using the pre-stored food values, or adding a brand new food intake. For Date input, the user can use the alias `d/today` as a shortcut to input today\u0027s date. The actions for Food Intake Item can only be performed based on past and current date. The different scenarios are outlined below.","lastModifiedDate":"2021-03-27"},{"lineNumber":257,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":258,"author":{"gitId":"jasaaanlim"},"content":"**Note:** If there are multiple food intakes with the same date and name, the food name will be automatically renamed to include a duplicate count for easy identification. E.g. Chicken rice, Chicken rice 2","lastModifiedDate":"2021-03-25"},{"lineNumber":259,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"ssoonwee"},"content":"### 3.5.1 Input food intake (For new food items that are not created before)","lastModifiedDate":"2021-03-22"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"jasaaanlim"},"content":"Records a food intake for the given date and stores the food in the food list for easy future reuse.","lastModifiedDate":"2021-03-25"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-22"},{"lineNumber":266,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":267,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_add d/31 Mar 2021 n/tomato c/10 f/10 p/10`","lastModifiedDate":"2021-03-22"},{"lineNumber":268,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":269,"author":{"gitId":"jasaaanlim"},"content":"**Note:** At least one nutrient value is required to create new food item. If a particular nutrient value is not provided, it will be set to 0 by default.","lastModifiedDate":"2021-03-25"},{"lineNumber":270,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":271,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":272,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":273,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":274,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/add-food-intake-new-food-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":275,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":277,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":278,"author":{"gitId":"ssoonwee"},"content":"### 3.5.2 Input food intake (For existing food items)","lastModifiedDate":"2021-03-22"},{"lineNumber":279,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":280,"author":{"gitId":"jasaaanlim"},"content":"Records a food intake for the given date using an existing food item. The nutrient values will be retrieved from the corresponding food item stored in the application.","lastModifiedDate":"2021-03-25"},{"lineNumber":281,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":282,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME`","lastModifiedDate":"2021-03-22"},{"lineNumber":283,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":284,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_add d/31 Mar 2021 n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":285,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":286,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":287,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":288,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":289,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/add-food-intake-new-food-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":290,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":291,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":292,"author":{"gitId":"ssoonwee"},"content":"### 3.5.3 Input food intake (For existing food items, using different nutrient value(s))","lastModifiedDate":"2021-03-22"},{"lineNumber":293,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":294,"author":{"gitId":"jasaaanlim"},"content":"Records a food intake for the given date and updates the existing food item with the new nutrient value(s).","lastModifiedDate":"2021-03-25"},{"lineNumber":295,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":296,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-22"},{"lineNumber":297,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":298,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_add d/31 Mar 2021 n/tomato c/20 f/35 p/50`","lastModifiedDate":"2021-03-22"},{"lineNumber":299,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":300,"author":{"gitId":"jasaaanlim"},"content":"**Note:** Any nutrient value(s) specified for an existing food item will be overwritten and updated in the food list for future use. Older records associated with the food item will retain their original values and is not affected.","lastModifiedDate":"2021-03-25"},{"lineNumber":301,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":302,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":303,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":304,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":305,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/add-food-intake-diff-food-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":306,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":307,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":308,"author":{"gitId":"ssoonwee"},"content":"### 3.6 Update food intake","lastModifiedDate":"2021-03-22"},{"lineNumber":309,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":310,"author":{"gitId":"jasaaanlim"},"content":"Updates the nutrient value(s) of an existing food intake matching the given date and food name.","lastModifiedDate":"2021-03-25"},{"lineNumber":311,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":312,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_update d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS`","lastModifiedDate":"2021-03-22"},{"lineNumber":313,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":314,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_update d/31 Mar 2021 n/tomato c/20 f/40 p/50`","lastModifiedDate":"2021-03-22"},{"lineNumber":315,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":316,"author":{"gitId":"jasaaanlim"},"content":"**Note**: The given food intake item must exist in order for update to work. Not all nutrient fields are required and only the specified nutrient fields will be updated with the new value while the other vales remain unchanged.","lastModifiedDate":"2021-03-25"},{"lineNumber":317,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":318,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":319,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":320,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":321,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/update-food-intake-item-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":322,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":323,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":324,"author":{"gitId":"ssoonwee"},"content":"### 3.7 Delete food intake","lastModifiedDate":"2021-03-22"},{"lineNumber":325,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":326,"author":{"gitId":"jasaaanlim"},"content":"Deletes a food intake item for the specified day.","lastModifiedDate":"2021-03-25"},{"lineNumber":327,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":328,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_delete d/DATE(in d MMM yyyy format) n/FOOD_NAME`","lastModifiedDate":"2021-03-22"},{"lineNumber":329,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":330,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_delete d/31 Mar 2021 n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":331,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":332,"author":{"gitId":"ssoonwee"},"content":"**Note:** The food item has to exist before it can be deleted.","lastModifiedDate":"2021-03-22"},{"lineNumber":333,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":334,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":335,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":336,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":337,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/delete-food-intake-result.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":338,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":339,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":340,"author":{"gitId":"ssoonwee"},"content":"### 3.8 Query food intake","lastModifiedDate":"2021-03-22"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"ssoonwee"},"content":"Queries food intake items on either a day or over a period of days. Refer to sub-category for more information. ","lastModifiedDate":"2021-03-22"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"ssoonwee"},"content":"### 3.8.1 Query food intake on a day","lastModifiedDate":"2021-03-22"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"ssoonwee"},"content":"Queries all the food intake(s) on a certain day.","lastModifiedDate":"2021-03-22"},{"lineNumber":347,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":348,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_query d/DATE(in d MMM yyyy format)`","lastModifiedDate":"2021-03-22"},{"lineNumber":349,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":350,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_query d/31 Mar 2021`","lastModifiedDate":"2021-03-22"},{"lineNumber":351,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":352,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**","lastModifiedDate":"2021-02-27"},{"lineNumber":353,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":354,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":355,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/query-food-intake-per-day.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":356,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":357,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":358,"author":{"gitId":"ssoonwee"},"content":"### 3.8.2 Query food intake over a period of days","lastModifiedDate":"2021-03-22"},{"lineNumber":359,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":360,"author":{"gitId":"ssoonwee"},"content":"Queries all the existing food intake(s) over a period of days (both inclusive).","lastModifiedDate":"2021-03-22"},{"lineNumber":361,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-02-28"},{"lineNumber":362,"author":{"gitId":"ssoonwee"},"content":"**Format:** `food_intake_query df/DATE(in d MMM yyyy format) dt/DATE(in d MMM yyyy format)`","lastModifiedDate":"2021-03-22"},{"lineNumber":363,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":364,"author":{"gitId":"ssoonwee"},"content":"**Example:** `food_intake_query df/1 Mar 2021 dt/31 Mar 2021`","lastModifiedDate":"2021-03-22"},{"lineNumber":365,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":366,"author":{"gitId":"ssoonwee"},"content":"**Expected output:**","lastModifiedDate":"2021-03-22"},{"lineNumber":367,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":368,"author":{"gitId":"ssoonwee"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":369,"author":{"gitId":"jasaaanlim"},"content":"  \u003cimg src\u003d\"images/user-guide/query-food-intake-period.png\"\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":370,"author":{"gitId":"ssoonwee"},"content":"\u003c/p\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":371,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-02-27"},{"lineNumber":372,"author":{"gitId":"sjq-sohjunqi"},"content":"## 4. Progress report","lastModifiedDate":"2021-03-29"},{"lineNumber":373,"author":{"gitId":"sjq-sohjunqi"},"content":"### 4.1 Generate progress report","lastModifiedDate":"2021-03-29"},{"lineNumber":374,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":375,"author":{"gitId":"sjq-sohjunqi"},"content":"Generates a progress report based on the active diet plan. This command will calculate the user\u0027s food intakes against the daily requirements and report how much the user has adhered to the plan\u0027s requirements.","lastModifiedDate":"2021-03-29"},{"lineNumber":376,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":377,"author":{"gitId":"sjq-sohjunqi"},"content":"**Format:** `progress`","lastModifiedDate":"2021-03-29"},{"lineNumber":378,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":379,"author":{"gitId":"sjq-sohjunqi"},"content":"**Note:** An active diet plan must be selected before running this command.","lastModifiedDate":"2021-03-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":381,"author":{"gitId":"sjq-sohjunqi"},"content":"**Expected output:**","lastModifiedDate":"2021-03-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":383,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cp align\u003d\"center\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":384,"author":{"gitId":"sjq-sohjunqi"},"content":"  \u003cimg src\u003d\"images/user-guide/progress-report.png\"\u003e","lastModifiedDate":"2021-03-29"},{"lineNumber":385,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c/p\u003e ","lastModifiedDate":"2021-03-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"sjq-sohjunqi"},"content":"**Input weight, height and ideal weight** | `bmi h/height(cm) w/weight(kg) i/ideal_weight(kg)​` \u003cbr\u003e e.g., `bmi h/170 w/70 i/80`","lastModifiedDate":"2021-03-03"},{"lineNumber":394,"author":{"gitId":"sjq-sohjunqi"},"content":"**Query weight, height and BMI** | `bmi query`","lastModifiedDate":"2021-03-03"},{"lineNumber":395,"author":{"gitId":"sjq-sohjunqi"},"content":"**Update weight, height and ideal weight** | `bmi update h/height(cm) w/weight(kg) i/ideal_weight(kg)`\u003cbr\u003e e.g., `bmi update h/170 w/70 i/80`","lastModifiedDate":"2021-03-03"},{"lineNumber":396,"author":{"gitId":"sjq-sohjunqi"},"content":"**Get diet recommendation based on current BMI** | `plan recommended`","lastModifiedDate":"2021-03-03"},{"lineNumber":397,"author":{"gitId":"sjq-sohjunqi"},"content":"**View active diet plan** | `plan current`","lastModifiedDate":"2021-03-03"},{"lineNumber":398,"author":{"gitId":"sjq-sohjunqi"},"content":"**Select active diet plan** | `plan active p/plan`\u003cbr\u003e e.g., `plan active p/1`","lastModifiedDate":"2021-03-12"},{"lineNumber":399,"author":{"gitId":"sjq-sohjunqi"},"content":"**List all available diet plans** | `plan list`","lastModifiedDate":"2021-03-12"},{"lineNumber":400,"author":{"gitId":"sjq-sohjunqi"},"content":"**View information about a particular diet plan** | `plan t/ID​`\u003cbr\u003e e.g.,`plan t/1`","lastModifiedDate":"2021-03-12"},{"lineNumber":401,"author":{"gitId":"ssoonwee"},"content":"**Add food item** | `food_add n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS` \u003cbr\u003e e.g., `food_add n/tomato c/10 f/10 p/10`","lastModifiedDate":"2021-03-22"},{"lineNumber":402,"author":{"gitId":"ssoonwee"},"content":"**Update food item** | `food_update n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS` \u003cbr\u003e e.g., `food_update n/tomato c/20 f/30 p/40`","lastModifiedDate":"2021-03-22"},{"lineNumber":403,"author":{"gitId":"ssoonwee"},"content":"**List food item** | `food_list`","lastModifiedDate":"2021-03-22"},{"lineNumber":404,"author":{"gitId":"ssoonwee"},"content":"**Delete food item** | `food_delete n/FOOD_NAME` \u003cbr\u003e e.g., `food_delete n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":405,"author":{"gitId":"ssoonwee"},"content":"**Input food intake (For new food items that are not created before)** | `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOHYDRATES f/FATS p/PROTEINS` \u003cbr\u003e e.g.,`food_intake_add d/31 Mar 2021 n/tomato c/10 f/10 p/10` ","lastModifiedDate":"2021-03-22"},{"lineNumber":406,"author":{"gitId":"ssoonwee"},"content":"**Input food intake (For existing food items)** | `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME` \u003cbr\u003e e.g., `food_intake_add d/31 Mar 2021 n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":407,"author":{"gitId":"ssoonwee"},"content":"**Input food intake (For existing food items, using different nutrient value(s))** | `food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOHYDRATES f/FATS p/PROTEINS` \u003cbr\u003e e.g., `food_intake_add d/31 Mar 2021 n/tomato c/20 f/35 p/50`","lastModifiedDate":"2021-03-22"},{"lineNumber":408,"author":{"gitId":"ssoonwee"},"content":"**Update food intake** | `food_intake_update d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS` \u003cbr\u003e e.g., `food_intake_update d/31 Mar 2021 n/tomato c/20 f/40 p/50`","lastModifiedDate":"2021-03-22"},{"lineNumber":409,"author":{"gitId":"ssoonwee"},"content":"**Delete food intake** | `food_intake_delete d/DATE(in d MMM yyyy format) n/FOOD_NAME` \u003cbr\u003e e.g., `food_intake_delete d/31 Mar 2021 n/tomato`","lastModifiedDate":"2021-03-22"},{"lineNumber":410,"author":{"gitId":"ssoonwee"},"content":"**Query food intake on a day** | `food_intake_query d/DATE(in d MMM yyyy format)` \u003cbr\u003e e.g., `food_intake_query d/31 Mar 2021`","lastModifiedDate":"2021-03-22"},{"lineNumber":411,"author":{"gitId":"ssoonwee"},"content":"**Query food intake over a period of days** | `food_intake_query df/DATE(in d MMM yyyy format) dt/DATE(in d MMM yyyy format)` \u003cbr\u003e e.g., `food_intake_query df/1 Mar 2021 dt/31 Mar 2021`","lastModifiedDate":"2021-03-22"},{"lineNumber":412,"author":{"gitId":"sjq-sohjunqi"},"content":"**Generate progress report** | `progress`","lastModifiedDate":"2021-03-29"}],"authorContributionMap":{"sjq-sohjunqi":76,"SoonKeatNeo":7,"ssoonwee":179,"WeiLiangLOL":3,"jasaaanlim":51,"-":96}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":275,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"SoonKeatNeo"},"content":"    content: \"DietLAH!\";","lastModifiedDate":"2021-03-26"},{"lineNumber":292,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":293,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"SoonKeatNeo":1,"-":294}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"title: DietLAH!","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-2/tp/actions)","lastModifiedDate":"2021-02-28"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp)","lastModifiedDate":"2021-02-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"**DietLAH! is a desktop application that allows users to easily track and maintain their meals so that they are able to maintain their ideal body weight.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"* If you are interested in using DietLAH!, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"* If you are interested in helping to develop DietLAH!, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"SoonKeatNeo":6,"-":13}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2020-07-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47).","lastModifiedDate":"2020-07-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \"","lastModifiedDate":"2020-07-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done.","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508).","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"sjq-sohjunqi"},"content":"Simply add the following to .","lastModifiedDate":"2021-03-27"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71).","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":359,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9).","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"sjq-sohjunqi":1,"-":393}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;","lastModifiedDate":"2016-10-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-01-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-01-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-01-18"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.util.TemplateInitializer;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.DietPlanListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.storage.FoodIntakeListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.JsonDietPlanListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.storage.JsonFoodIntakeListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.JsonUniqueFoodListStorage;","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.storage.JsonUserStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.UniqueFoodListStorage;","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;","lastModifiedDate":"2017-02-25"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.storage.UserStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);","lastModifiedDate":"2017-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing DietLAH! ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodListStorage uniqueFoodListStorage \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(userPrefs.getUniqueFoodListFilePath());","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntakeListStorage foodIntakeListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"jasaaanlim"},"content":"                new JsonFoodIntakeListStorage(userPrefs.getFoodIntakeListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlanListStorage dietPlanListStorage \u003d new JsonDietPlanListStorage(userPrefs.getDietPlanListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"        UserStorage userStorage \u003d new JsonUserStorage(userPrefs.getUserFilePath());","lastModifiedDate":"2021-03-25"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":80,"author":{"gitId":"jasaaanlim"},"content":"        storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"                foodIntakeListStorage, dietPlanListStorage, userPrefsStorage, userStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        // TODO: Update handling of method","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cUniqueFoodList\u003e uniqueFoodListOptional;","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList uniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"jasaaanlim"},"content":"        Optional\u003cFoodIntakeList\u003e foodIntakeListOptional;","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntakeList foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cDietPlanList\u003e dietPlanListOptional;","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlanList dietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"SoonKeatNeo"},"content":"        Optional\u003cUser\u003e userOptional;","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"SoonKeatNeo"},"content":"        User user;","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":112,"author":{"gitId":"WeiLiangLOL"},"content":"            uniqueFoodListOptional \u003d storage.readFoodList();","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"            foodIntakeListOptional \u003d storage.readFoodIntakeList();","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"WeiLiangLOL"},"content":"            dietPlanListOptional \u003d storage.readDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"SoonKeatNeo"},"content":"            userOptional \u003d storage.readUser();","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"WeiLiangLOL"},"content":"            if (!uniqueFoodListOptional.isPresent()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"WeiLiangLOL"},"content":"                logger.info(\"Food data file not found. Will be starting fresh\");","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"WeiLiangLOL"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"jasaaanlim"},"content":"            if (!foodIntakeListOptional.isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"jasaaanlim"},"content":"                logger.info(\"Food intake data file not found. Will be starting fresh\");","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"WeiLiangLOL"},"content":"            if (!dietPlanListOptional.isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"WeiLiangLOL"},"content":"                logger.info(\"Diet plans file not found. Will be starting fresh\");","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"WeiLiangLOL"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"SoonKeatNeo"},"content":"            if (!userOptional.isPresent()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":129,"author":{"gitId":"jasaaanlim"},"content":"                logger.info(\"User file not found. Will be starting with default template data\");","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"SoonKeatNeo"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"            TemplateInitializer initializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"            uniqueFoodList \u003d uniqueFoodListOptional.orElse(initializer.getUniqueFoodListTemplate());","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"            foodIntakeList \u003d foodIntakeListOptional.orElse(initializer.getFoodListIntakeTemplate());","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"jasaaanlim"},"content":"            dietPlanList \u003d dietPlanListOptional.orElseGet(SampleDataUtil::getSampleDietPlanList);","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"jasaaanlim"},"content":"            user \u003d userOptional.orElse(initializer.createUser(uniqueFoodList, foodIntakeList));","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"            TemplateInitializer initializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"            uniqueFoodList \u003d initializer.getUniqueFoodListTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"            foodIntakeList \u003d initializer.getFoodListIntakeTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"            dietPlanList \u003d initializer.getDietPlanListTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"SoonKeatNeo"},"content":"            user \u003d initializer.createUser(uniqueFoodList, foodIntakeList);","lastModifiedDate":"2021-03-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"            TemplateInitializer initializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"            uniqueFoodList \u003d initializer.getUniqueFoodListTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"            foodIntakeList \u003d initializer.getFoodListIntakeTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"            dietPlanList \u003d initializer.getDietPlanListTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"SoonKeatNeo"},"content":"            user \u003d initializer.createUser(uniqueFoodList, foodIntakeList);","lastModifiedDate":"2021-03-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":155,"author":{"gitId":"SoonKeatNeo"},"content":"        return new ModelManager(initialData, uniqueFoodList, foodIntakeList, dietPlanList, userPrefs, user);","lastModifiedDate":"2021-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":199,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"SoonKeatNeo"},"content":"        logger.info(\"Starting DietLAH! \" + MainApp.VERSION);","lastModifiedDate":"2021-03-22"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"SoonKeatNeo"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping DietLAH! ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2021-03-22"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":243,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":245,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"SoonKeatNeo":17,"sjq-sohjunqi":1,"ssoonwee":12,"WeiLiangLOL":22,"jasaaanlim":15,"-":178}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_INVALID_DATETIME_FORMAT \u003d \"Invalid datetime format! \"","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"            + \"It should be in \u0027d MMM yyyy\u0027\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"ssoonwee":2,"-":13}},{"path":"src/main/java/seedu/address/logic/FoodIntakeCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":" * Represents a class to calculate the calories based on total nutrients values input.","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"public class FoodIntakeCalculator {","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"    public static final double PROTEIN_AND_CARBOS_MULTIPLIER \u003d 4;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final double FAT_MULTIPLIER \u003d 9;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    private final double calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeCalculator(double carbos, double fats, double proteins) {","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"        this.calories \u003d calculateCalories(carbos, fats, proteins);","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public double getCalories() {","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"        return this.calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * Calculates calories based on total nutrients input.","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     * @param carbos   carbos value","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     * @param fats     fats value","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     * @param proteins proteins value","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     * @return calories value","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"    public double calculateCalories(double carbos, double fats, double proteins) {","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        double convertedCarbos \u003d carbos * PROTEIN_AND_CARBOS_MULTIPLIER;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        double convertedFats \u003d fats * FAT_MULTIPLIER;","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        double convertedProteins \u003d proteins * PROTEIN_AND_CARBOS_MULTIPLIER;","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        double totalKiloCalories \u003d convertedCarbos + convertedFats + convertedProteins;","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        return totalKiloCalories;","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"ssoonwee":35}},{"path":"src/main/java/seedu/address/logic/FoodIntakeComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Comparator;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":" * Compares and sorts FoodIntake objects by the date, otherwise alphabetically.","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"public class FoodIntakeComparator implements Comparator\u003cFoodIntake\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public int compare(FoodIntake firstIntake, FoodIntake secondIntake) {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate firstIntakeDate \u003d firstIntake.getDate();","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate secondIntakeDate \u003d secondIntake.getDate();","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"        if (firstIntakeDate.isEqual(secondIntakeDate)) { //If both dates are the same, sort alphabetically.","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            return firstIntake.getFood().getName().compareTo(secondIntake.getFood().getName());","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"            return firstIntakeDate.compareTo(secondIntakeDate);","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"sjq-sohjunqi":19,"ssoonwee":5}},{"path":"src/main/java/seedu/address/logic/FoodIntakeQueryProcessor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic;","lastModifiedDate":"2021-03-21"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-21"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-21"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-21"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-21"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-21"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":" * Represents a class to generate daily food intake report.","lastModifiedDate":"2021-03-21"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-21"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"public class FoodIntakeQueryProcessor {","lastModifiedDate":"2021-03-21"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    private static final String DATE_FORMAT \u003d \"d MMM yyyy\";","lastModifiedDate":"2021-03-21"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    private ObservableList\u003cFoodIntake\u003e foodIntakeList;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeQueryProcessor(ObservableList\u003cFoodIntake\u003e foodIntakeList) {","lastModifiedDate":"2021-03-21"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-21"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     * Generates a single day report on the calories consumption.","lastModifiedDate":"2021-03-21"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of a single day consumption","lastModifiedDate":"2021-03-21"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    public String generateDayQuery() {","lastModifiedDate":"2021-03-21"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-21"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        Double carbos \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        Double fats \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        Double proteins \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeCalculator foodIntakeCalculator;","lastModifiedDate":"2021-03-21"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-03-21"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-21"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"            Food tempFood \u003d foodIntakeList.get(i).getFood();","lastModifiedDate":"2021-03-21"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"            carbos +\u003d tempFood.getCarbos();","lastModifiedDate":"2021-03-21"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"            fats +\u003d tempFood.getFats();","lastModifiedDate":"2021-03-21"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"            proteins +\u003d tempFood.getProteins();","lastModifiedDate":"2021-03-21"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(counter + \". \" + foodIntakeList.get(i) + \"\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            counter++;","lastModifiedDate":"2021-03-21"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeCalculator \u003d new FoodIntakeCalculator(carbos, fats, proteins);","lastModifiedDate":"2021-03-21"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        stringBuilder.append(\"Total Daily Calories Intake: \" + String.format(\"%.2f\", foodIntakeCalculator.getCalories())","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"                + \" calories.\\n\");","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"     * Generates a range of day report on their individual daily calories consumption.","lastModifiedDate":"2021-03-21"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of a range of days consumption","lastModifiedDate":"2021-03-21"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"    public String generateRangeOfDaysQuery() {","lastModifiedDate":"2021-03-21"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        Double carbos \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"        Double fats \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"        Double proteins \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-03-21"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        LocalDate currDate \u003d null;","lastModifiedDate":"2021-03-21"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeCalculator foodIntakeCalculator;","lastModifiedDate":"2021-03-21"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-21"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-21"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"            if (!this.foodIntakeList.get(i).getDate().equals(currDate)) {","lastModifiedDate":"2021-03-21"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"                currDate \u003d this.foodIntakeList.get(i).getDate(); //Set new date when a new data date is different","lastModifiedDate":"2021-03-21"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"\\n------------------------------------------------------------------------\\n\");","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"Summary Food Intake for the Day (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"                        + foodIntakeList.get(i).getDate().format(DateTimeFormatter.ofPattern(DATE_FORMAT))","lastModifiedDate":"2021-03-21"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"                        + \"):\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"                carbos \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"                fats \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"                proteins \u003d 0.0;","lastModifiedDate":"2021-03-21"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"            Food tempFood \u003d foodIntakeList.get(i).getFood();","lastModifiedDate":"2021-03-21"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"            carbos +\u003d tempFood.getCarbos();","lastModifiedDate":"2021-03-21"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"            fats +\u003d tempFood.getFats();","lastModifiedDate":"2021-03-21"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"            proteins +\u003d tempFood.getProteins();","lastModifiedDate":"2021-03-21"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(counter + \". \" + foodIntakeList.get(i) + \"\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"            counter++;","lastModifiedDate":"2021-03-21"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"            if (i + 1 \u003d\u003d this.foodIntakeList.size()","lastModifiedDate":"2021-03-21"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"                    || !currDate.isEqual(this.foodIntakeList.get(i + 1).getDate())) {","lastModifiedDate":"2021-03-21"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"                foodIntakeCalculator \u003d new FoodIntakeCalculator(carbos, fats, proteins);","lastModifiedDate":"2021-03-21"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"Total Daily Calories Intake: \"","lastModifiedDate":"2021-03-21"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"                        + String.format(\"%.2f\", foodIntakeCalculator.getCalories()) + \" calories.\\n\");","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"------------------------------------------------------------------------\");","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"                counter \u003d 1;","lastModifiedDate":"2021-03-21"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-21"}],"authorContributionMap":{"ssoonwee":88}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.AddUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Enforce user initialization","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String INITIALIZATION_ERROR_MESSAGE \u003d \"Please input your user information first,\"","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \" using the following command:\\nbmi g/gender a/age h/height(cm) w/weight(kg) i/ideal_weight\";","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (model.hasUser()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"            commandResult \u003d command.execute(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Check if command is creating new user","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"            if (command instanceof AddUserCommand) {","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"            } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"                // Prompt user to initialize user","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"                commandResult \u003d new CommandResult(INITIALIZATION_ERROR_MESSAGE, false, false);","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"            }","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"            storage.saveFoodList(model.getUniqueFoodList());","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"            storage.saveFoodIntakeList(model.getFoodIntakeList());","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"            storage.saveUser(model.getUser());","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"            //storage.saveDietPlanList(model.getDietPlanList());","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();","lastModifiedDate":"2016-09-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"sjq-sohjunqi":17,"SoonKeatNeo":1,"WeiLiangLOL":2,"jasaaanlim":2,"-":81}},{"path":"src/main/java/seedu/address/logic/PlanInfoCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.MacroNutrientComposition;","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":" * Class for calculating diet plan information specific to user","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"public class PlanInfoCalculator {","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Multipliers for formula","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double WEIGHTMULTIPLIER \u003d 10.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double HEIGHTMULTIPLIER \u003d 6.25;","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double AGEMULTIPLIER \u003d 5.0;","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double MALEMULTIPLIER \u003d 5.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double FEMALEMULTIPLIER \u003d 161.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Multipliers for calculating calories of macronutrients","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double CARBOMULTIPLIER \u003d 4.0;","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double FATMULTIPLIER \u003d 9.0;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double PROTEINMULTIPLIER \u003d 4.0;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Required calories for weight gain and weight loss","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double WEIGHTGAINCALORIES \u003d 400.00;","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double WEIGHTLOSSCALORIES \u003d 500.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double carbohydrates;","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double proteins;","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double fats;","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Constructor for PlanInfoCalculator class.","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the amount of calories specific to the user\u0027s information and diet plan.","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"     * The formula used is the Mifflin-St Jeor Formula.","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param user The user object.","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlan The diet plan to calculate against.","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"    public PlanInfoCalculator(User user, DietPlan dietPlan) {","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Calculate calories needed for diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"        PlanType planType \u003d dietPlan.getPlanType();","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.calories \u003d calculateCalories(user, planType);","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Calculate macronutrients needed for diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        MacroNutrientComposition macroComposition \u003d dietPlan.getMacroNutrientComposition();","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"        calculateMacros(macroComposition, this.calories);","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Getter for calories to be consumed for plan","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Calorie intake to adhere to","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getCalories() {","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Getter for carbohydrates to be consumed for plan","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Carbohydrate intake to adhere to","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getCarbohydrates() {","lastModifiedDate":"2021-03-20"},{"lineNumber":70,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.carbohydrates;","lastModifiedDate":"2021-03-20"},{"lineNumber":71,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":72,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":73,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":74,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Getter for fats to be consumed for plan","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Fat intake to adhere to","lastModifiedDate":"2021-03-20"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getFats() {","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.fats;","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Getter for proteins to be consumed for plan","lastModifiedDate":"2021-03-20"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Protein intake to adhere to","lastModifiedDate":"2021-03-20"},{"lineNumber":86,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":87,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getProteins() {","lastModifiedDate":"2021-03-20"},{"lineNumber":88,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.proteins;","lastModifiedDate":"2021-03-20"},{"lineNumber":89,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":90,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":91,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":92,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Updates macronutrients class variables according to its percentage in diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":93,"author":{"gitId":"sjq-sohjunqi"},"content":"     * and the total amount of calories","lastModifiedDate":"2021-03-20"},{"lineNumber":94,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":95,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param macroNutrientComposition Macronutrient percentages","lastModifiedDate":"2021-03-20"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param calories Calories to calculate percentages against","lastModifiedDate":"2021-03-20"},{"lineNumber":97,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"    private void calculateMacros(MacroNutrientComposition macroNutrientComposition,","lastModifiedDate":"2021-03-20"},{"lineNumber":99,"author":{"gitId":"sjq-sohjunqi"},"content":"                                 double calories) {","lastModifiedDate":"2021-03-20"},{"lineNumber":100,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carboPercent \u003d macroNutrientComposition.getCarbohydrates();","lastModifiedDate":"2021-03-20"},{"lineNumber":101,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fatPercent \u003d macroNutrientComposition.getFats();","lastModifiedDate":"2021-03-20"},{"lineNumber":102,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteinPercent \u003d macroNutrientComposition.getProteins();","lastModifiedDate":"2021-03-20"},{"lineNumber":103,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":104,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carboCalories \u003d (carboPercent / 100.00) * calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":105,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.carbohydrates \u003d carboCalories / CARBOMULTIPLIER;","lastModifiedDate":"2021-03-22"},{"lineNumber":106,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fatCalories \u003d (fatPercent / 100.00) * calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":108,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.fats \u003d fatCalories / FATMULTIPLIER;","lastModifiedDate":"2021-03-22"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteinCalories \u003d (proteinPercent / 100.00) * calories;","lastModifiedDate":"2021-03-20"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.proteins \u003d proteinCalories / PROTEINMULTIPLIER;","lastModifiedDate":"2021-03-22"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the amount of calories needed based on diet plan type","lastModifiedDate":"2021-03-20"},{"lineNumber":116,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param user User information","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param planType Type of diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Double value containing appropriate amount of calories","lastModifiedDate":"2021-03-20"},{"lineNumber":120,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":121,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double calculateCalories(User user, PlanType planType) {","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"sjq-sohjunqi"},"content":"        Age userAge \u003d user.getAge();","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"sjq-sohjunqi"},"content":"        int age \u003d userAge.getAge();","lastModifiedDate":"2021-03-20"},{"lineNumber":124,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":125,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi bmi \u003d user.getBmi();","lastModifiedDate":"2021-03-20"},{"lineNumber":126,"author":{"gitId":"sjq-sohjunqi"},"content":"        double height \u003d bmi.getHeight();","lastModifiedDate":"2021-03-20"},{"lineNumber":127,"author":{"gitId":"sjq-sohjunqi"},"content":"        double weight \u003d bmi.getWeight();","lastModifiedDate":"2021-03-20"},{"lineNumber":128,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":129,"author":{"gitId":"sjq-sohjunqi"},"content":"        double maintenanceCalories \u003d calculateMaintenance(user);","lastModifiedDate":"2021-03-20"},{"lineNumber":130,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":131,"author":{"gitId":"sjq-sohjunqi"},"content":"        switch (planType) {","lastModifiedDate":"2021-03-20"},{"lineNumber":132,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTGAIN:","lastModifiedDate":"2021-03-20"},{"lineNumber":133,"author":{"gitId":"sjq-sohjunqi"},"content":"            return calculateWeightGain(maintenanceCalories);","lastModifiedDate":"2021-03-20"},{"lineNumber":134,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTLOSS:","lastModifiedDate":"2021-03-20"},{"lineNumber":135,"author":{"gitId":"sjq-sohjunqi"},"content":"            return calculateWeightLoss(maintenanceCalories);","lastModifiedDate":"2021-03-20"},{"lineNumber":136,"author":{"gitId":"sjq-sohjunqi"},"content":"        default:","lastModifiedDate":"2021-03-20"},{"lineNumber":137,"author":{"gitId":"sjq-sohjunqi"},"content":"            return maintenanceCalories;","lastModifiedDate":"2021-03-20"},{"lineNumber":138,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":139,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":140,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":141,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":142,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":143,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the amount of calories needed for weight maintenance","lastModifiedDate":"2021-03-20"},{"lineNumber":144,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":145,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param user User information","lastModifiedDate":"2021-03-20"},{"lineNumber":146,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Double value containing appropriate amount of calories","lastModifiedDate":"2021-03-20"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double calculateMaintenance(User user) {","lastModifiedDate":"2021-03-20"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"        Age userAge \u003d user.getAge();","lastModifiedDate":"2021-03-20"},{"lineNumber":150,"author":{"gitId":"sjq-sohjunqi"},"content":"        int age \u003d userAge.getAge();","lastModifiedDate":"2021-03-20"},{"lineNumber":151,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":152,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi bmi \u003d user.getBmi();","lastModifiedDate":"2021-03-20"},{"lineNumber":153,"author":{"gitId":"sjq-sohjunqi"},"content":"        double height \u003d bmi.getHeight();","lastModifiedDate":"2021-03-20"},{"lineNumber":154,"author":{"gitId":"sjq-sohjunqi"},"content":"        double weight \u003d bmi.getWeight();","lastModifiedDate":"2021-03-20"},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":156,"author":{"gitId":"sjq-sohjunqi"},"content":"        Gender userGender \u003d user.getGender();","lastModifiedDate":"2021-03-22"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"        String gender \u003d userGender.getGender();","lastModifiedDate":"2021-03-22"},{"lineNumber":158,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":159,"author":{"gitId":"sjq-sohjunqi"},"content":"        double maintenanceCalories \u003d 0;","lastModifiedDate":"2021-03-20"},{"lineNumber":160,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (gender.equals(\"M\")) {","lastModifiedDate":"2021-03-20"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":"            maintenanceCalories \u003d (WEIGHTMULTIPLIER * weight) + (HEIGHTMULTIPLIER * height)","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"                    - (AGEMULTIPLIER * age) + MALEMULTIPLIER;","lastModifiedDate":"2021-03-22"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":164,"author":{"gitId":"sjq-sohjunqi"},"content":"            maintenanceCalories \u003d (WEIGHTMULTIPLIER * weight) + (HEIGHTMULTIPLIER * height)","lastModifiedDate":"2021-03-22"},{"lineNumber":165,"author":{"gitId":"sjq-sohjunqi"},"content":"                    - (AGEMULTIPLIER * age) - FEMALEMULTIPLIER;","lastModifiedDate":"2021-03-22"},{"lineNumber":166,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":167,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":168,"author":{"gitId":"sjq-sohjunqi"},"content":"        return maintenanceCalories;","lastModifiedDate":"2021-03-20"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":171,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":172,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the amount of calories needed for weight gain","lastModifiedDate":"2021-03-20"},{"lineNumber":173,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param maintenanceCalories Calories needed for maintenance","lastModifiedDate":"2021-03-20"},{"lineNumber":175,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Double value containing appropriate amount of calories","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double calculateWeightGain(double maintenanceCalories) {","lastModifiedDate":"2021-03-20"},{"lineNumber":178,"author":{"gitId":"sjq-sohjunqi"},"content":"        return maintenanceCalories + WEIGHTGAINCALORIES;","lastModifiedDate":"2021-03-20"},{"lineNumber":179,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":182,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the amount of calories needed for weight loss","lastModifiedDate":"2021-03-20"},{"lineNumber":183,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param maintenanceCalories Calories needed for maintenance","lastModifiedDate":"2021-03-20"},{"lineNumber":185,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Double value containing appropriate amount of calories","lastModifiedDate":"2021-03-20"},{"lineNumber":186,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":187,"author":{"gitId":"sjq-sohjunqi"},"content":"    private double calculateWeightLoss(double maintenanceCalories) {","lastModifiedDate":"2021-03-20"},{"lineNumber":188,"author":{"gitId":"sjq-sohjunqi"},"content":"        return maintenanceCalories - WEIGHTLOSSCALORIES;","lastModifiedDate":"2021-03-20"},{"lineNumber":189,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":190,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":191,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"sjq-sohjunqi":191}},{"path":"src/main/java/seedu/address/logic/ProgressCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.format.FormatStyle;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ViewPlanCommand;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":" * Class for generating a progress report of diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ProgressCalculator {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Leeway value for adherence to diet requirements (in percentage)","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double LEEWAY \u003d 5.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final double TOTAL_LEEWAY \u003d 10.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Messages to user","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String MESSAGE_ADVISE \u003d \"There is room for improvement! We advise you to \"","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"take another look at your food consumption.\\nDon\u0027t give up yet!\";","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String MESSAGE_CONGRATULATIONS \u003d \"Your food intake is within \" + TOTAL_LEEWAY","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"% of the diet\u0027s requirements.\\nWell done!\";","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates and reports on how much percentage of each day\u0027s food intake is adhering to the diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlan The diet plan to calculate daily food intake against.","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodIntakeList The food consumption for each day.","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param user User\u0027s information","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Progress Report","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static String calculateProgress(FoodIntakeList foodIntakeList, DietPlan dietPlan, User user) {","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get list of Foods","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cFoodIntake\u003e foodIntakes \u003d initializeFoodIntake(foodIntakeList);","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get the daily requirements of the diet plan","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        PlanInfoCalculator infoCalculator \u003d new PlanInfoCalculator(user, dietPlan);","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyCarbs \u003d infoCalculator.getCarbohydrates();","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyFats \u003d infoCalculator.getFats();","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyProteins \u003d infoCalculator.getProteins();","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Initialize report","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        StringBuilder report \u003d initializeReport(dietPlan, foodIntakes, infoCalculator);","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"        // For each day, give a progress report on whether intake is over or less","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        // than the required amount.","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"        double totalAdherence \u003d reportDailyIntake(report, foodIntakes, dailyCarbs, dailyFats, dailyProteins);","lastModifiedDate":"2021-03-22"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"        reportFinalAdherence(report, totalAdherence);","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"\\nEND OF REPORT\");","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Return the final report","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"        return report.toString();","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Appends the report summary section to the report","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param report Report to append to","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param totalAdherence Average adherence to the diet plan","lastModifiedDate":"2021-03-22"},{"lineNumber":70,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static void reportFinalAdherence(StringBuilder report, double totalAdherence) {","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Report Summary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (totalAdherence \u003e (100.00 + TOTAL_LEEWAY)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"sjq-sohjunqi"},"content":"            double exceed \u003d totalAdherence - 100.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"sjq-sohjunqi"},"content":"            String exceedString \u003d String.format(\"%.2f\", exceed);","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your total food intake has exceeded diet requirements by \" + exceedString + \"%\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(MESSAGE_ADVISE + \"\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (totalAdherence \u003c (100.00 - TOTAL_LEEWAY)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"            double under \u003d 100.00 - totalAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"            String underString \u003d String.format(\"%.2f\", under);","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your total food intake is under diet requirements by \" + underString + \"%\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(MESSAGE_ADVISE + \"\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(MESSAGE_CONGRATULATIONS + \"\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Initializes the list of food intake for processing","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodIntakeList List of food intakes","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return List of food intakes","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static List\u003cFoodIntake\u003e initializeFoodIntake(FoodIntakeList foodIntakeList) {","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (foodIntakeList \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":97,"author":{"gitId":"sjq-sohjunqi"},"content":"            // No food intake (treat as no food consumed)","lastModifiedDate":"2021-03-22"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"            foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-22"},{"lineNumber":99,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":100,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get list of Foods","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cFoodIntake\u003e foodIntakes \u003d foodIntakeList.getFoodIntakeList();","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Sort food intake list by dates","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"sjq-sohjunqi"},"content":"        Collections.sort(foodIntakes, new FoodIntakeComparator());","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"        return foodIntakes;","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Initializes the report with dietPlan details","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlan Active diet plan","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodIntakes List of daily food intake","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Progress report","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static StringBuilder initializeReport(DietPlan dietPlan, List\u003cFoodIntake\u003e foodIntakes,","lastModifiedDate":"2021-03-20"},{"lineNumber":118,"author":{"gitId":"sjq-sohjunqi"},"content":"                                                  PlanInfoCalculator infoCalculator) {","lastModifiedDate":"2021-03-20"},{"lineNumber":119,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Print details of diet plan","lastModifiedDate":"2021-03-10"},{"lineNumber":120,"author":{"gitId":"sjq-sohjunqi"},"content":"        StringBuilder report \u003d new StringBuilder();","lastModifiedDate":"2021-03-10"},{"lineNumber":121,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(dietPlan.viewPlan() + \"\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":122,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(ViewPlanCommand.getResult(dietPlan, infoCalculator));","lastModifiedDate":"2021-03-20"},{"lineNumber":123,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":124,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Dates that progress report is listing","lastModifiedDate":"2021-03-10"},{"lineNumber":125,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");","lastModifiedDate":"2021-03-27"},{"lineNumber":126,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"\\nHere is the report for the \");","lastModifiedDate":"2021-03-27"},{"lineNumber":127,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate firstIntakeDay \u003d foodIntakes.get(0).getDate();","lastModifiedDate":"2021-03-10"},{"lineNumber":128,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate lastIntakeDay \u003d foodIntakes.get(foodIntakes.size() - 1).getDate();","lastModifiedDate":"2021-03-10"},{"lineNumber":129,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":130,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (firstIntakeDay.isEqual(lastIntakeDay)) {","lastModifiedDate":"2021-03-27"},{"lineNumber":131,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"day \");","lastModifiedDate":"2021-03-27"},{"lineNumber":132,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(firstIntakeDay.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));","lastModifiedDate":"2021-03-27"},{"lineNumber":133,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-27"},{"lineNumber":134,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"days \");","lastModifiedDate":"2021-03-27"},{"lineNumber":135,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(firstIntakeDay.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));","lastModifiedDate":"2021-03-10"},{"lineNumber":136,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\" to \");","lastModifiedDate":"2021-03-10"},{"lineNumber":137,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(lastIntakeDay.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));","lastModifiedDate":"2021-03-10"},{"lineNumber":138,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-27"},{"lineNumber":139,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":140,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\":\\n\\n\");","lastModifiedDate":"2021-03-27"},{"lineNumber":141,"author":{"gitId":"sjq-sohjunqi"},"content":"        return report;","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Appends report with daily progress","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param report Report to append to","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodIntakes List of daily food intake","lastModifiedDate":"2021-03-14"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dailyCarbs Daily requirement of carbohydrates","lastModifiedDate":"2021-03-14"},{"lineNumber":150,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dailyFats Daily requirement of fats","lastModifiedDate":"2021-03-14"},{"lineNumber":151,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dailyProteins Daily requirement of proteins","lastModifiedDate":"2021-03-14"},{"lineNumber":152,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":153,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static double reportDailyIntake(StringBuilder report, List\u003cFoodIntake\u003e foodIntakes,","lastModifiedDate":"2021-03-22"},{"lineNumber":154,"author":{"gitId":"sjq-sohjunqi"},"content":"                                          double dailyCarbs, double dailyFats, double dailyProteins) {","lastModifiedDate":"2021-03-14"},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate previousDay \u003d null;","lastModifiedDate":"2021-03-10"},{"lineNumber":156,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carbsSum \u003d 0.0;","lastModifiedDate":"2021-03-10"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fatsSum \u003d 0.0;","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteinsSum \u003d 0.0;","lastModifiedDate":"2021-03-10"},{"lineNumber":159,"author":{"gitId":"sjq-sohjunqi"},"content":"        boolean firstDay \u003d true;","lastModifiedDate":"2021-03-20"},{"lineNumber":160,"author":{"gitId":"sjq-sohjunqi"},"content":"        double adherenceTotal \u003d 0.0;","lastModifiedDate":"2021-03-22"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":"        int adherenceCounter \u003d 0;","lastModifiedDate":"2021-03-22"},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"        int foodCount \u003d 1;","lastModifiedDate":"2021-03-27"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":"        for (FoodIntake foodIntake : foodIntakes) {","lastModifiedDate":"2021-03-10"},{"lineNumber":164,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Report on date","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"sjq-sohjunqi"},"content":"            LocalDate day \u003d foodIntake.getDate();","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"sjq-sohjunqi"},"content":"            if (!day.equals(previousDay)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"sjq-sohjunqi"},"content":"                // New Day","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"                if (!firstDay) {","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"sjq-sohjunqi"},"content":"                    // Calculate total adherence percentages","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double carbsAdherence \u003d calculatePercentage(carbsSum, dailyCarbs);","lastModifiedDate":"2021-03-20"},{"lineNumber":172,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double fatsAdherence \u003d calculatePercentage(fatsSum, dailyFats);","lastModifiedDate":"2021-03-20"},{"lineNumber":173,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double proteinsAdherence \u003d calculatePercentage(proteinsSum, dailyProteins);","lastModifiedDate":"2021-03-20"},{"lineNumber":174,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":175,"author":{"gitId":"sjq-sohjunqi"},"content":"                    // Report daily adherence percentage","lastModifiedDate":"2021-03-14"},{"lineNumber":176,"author":{"gitId":"sjq-sohjunqi"},"content":"                    reportAdherence(report, carbsAdherence, fatsAdherence, proteinsAdherence);","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"sjq-sohjunqi"},"content":"                    adherenceTotal +\u003d carbsAdherence + fatsAdherence + proteinsAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":178,"author":{"gitId":"sjq-sohjunqi"},"content":"                    adherenceCounter++;","lastModifiedDate":"2021-03-22"},{"lineNumber":179,"author":{"gitId":"sjq-sohjunqi"},"content":"                } else {","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"sjq-sohjunqi"},"content":"                    firstDay \u003d false;","lastModifiedDate":"2021-03-20"},{"lineNumber":181,"author":{"gitId":"sjq-sohjunqi"},"content":"                }","lastModifiedDate":"2021-03-14"},{"lineNumber":182,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":183,"author":{"gitId":"sjq-sohjunqi"},"content":"                // Reset sums","lastModifiedDate":"2021-03-20"},{"lineNumber":184,"author":{"gitId":"sjq-sohjunqi"},"content":"                carbsSum \u003d 0.0;","lastModifiedDate":"2021-03-14"},{"lineNumber":185,"author":{"gitId":"sjq-sohjunqi"},"content":"                fatsSum \u003d 0.0;","lastModifiedDate":"2021-03-14"},{"lineNumber":186,"author":{"gitId":"sjq-sohjunqi"},"content":"                proteinsSum \u003d 0.0;","lastModifiedDate":"2021-03-14"},{"lineNumber":187,"author":{"gitId":"sjq-sohjunqi"},"content":"                foodCount \u003d 1;","lastModifiedDate":"2021-03-27"},{"lineNumber":188,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":189,"author":{"gitId":"sjq-sohjunqi"},"content":"                // Report new day","lastModifiedDate":"2021-03-14"},{"lineNumber":190,"author":{"gitId":"sjq-sohjunqi"},"content":"                reportNewDay(report, day);","lastModifiedDate":"2021-03-14"},{"lineNumber":191,"author":{"gitId":"sjq-sohjunqi"},"content":"                previousDay \u003d day;","lastModifiedDate":"2021-03-14"},{"lineNumber":192,"author":{"gitId":"sjq-sohjunqi"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":193,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":194,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Report on foods consumed and macronutrients","lastModifiedDate":"2021-03-14"},{"lineNumber":195,"author":{"gitId":"sjq-sohjunqi"},"content":"            Food food \u003d foodIntake.getFood();","lastModifiedDate":"2021-03-14"},{"lineNumber":196,"author":{"gitId":"sjq-sohjunqi"},"content":"            reportFood(report, food, foodCount);","lastModifiedDate":"2021-03-27"},{"lineNumber":197,"author":{"gitId":"sjq-sohjunqi"},"content":"            foodCount++;","lastModifiedDate":"2021-03-27"},{"lineNumber":198,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":199,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Store sum of macronutrient consumption","lastModifiedDate":"2021-03-14"},{"lineNumber":200,"author":{"gitId":"sjq-sohjunqi"},"content":"            carbsSum +\u003d food.getCarbos();","lastModifiedDate":"2021-03-14"},{"lineNumber":201,"author":{"gitId":"sjq-sohjunqi"},"content":"            fatsSum +\u003d food.getFats();","lastModifiedDate":"2021-03-14"},{"lineNumber":202,"author":{"gitId":"sjq-sohjunqi"},"content":"            proteinsSum +\u003d food.getProteins();","lastModifiedDate":"2021-03-14"},{"lineNumber":203,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":204,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":205,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":206,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Calculate total adherence percentages","lastModifiedDate":"2021-03-20"},{"lineNumber":207,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carbsAdherence \u003d calculatePercentage(carbsSum, dailyCarbs);","lastModifiedDate":"2021-03-20"},{"lineNumber":208,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fatsAdherence \u003d calculatePercentage(fatsSum, dailyFats);","lastModifiedDate":"2021-03-20"},{"lineNumber":209,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteinsAdherence \u003d calculatePercentage(proteinsSum, dailyProteins);","lastModifiedDate":"2021-03-20"},{"lineNumber":210,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":211,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Report daily adherence percentage","lastModifiedDate":"2021-03-20"},{"lineNumber":212,"author":{"gitId":"sjq-sohjunqi"},"content":"        reportAdherence(report, carbsAdherence, fatsAdherence, proteinsAdherence);","lastModifiedDate":"2021-03-20"},{"lineNumber":213,"author":{"gitId":"sjq-sohjunqi"},"content":"        adherenceTotal +\u003d carbsAdherence + fatsAdherence + proteinsAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":214,"author":{"gitId":"sjq-sohjunqi"},"content":"        adherenceCounter++;","lastModifiedDate":"2021-03-22"},{"lineNumber":215,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":216,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Return average adherence","lastModifiedDate":"2021-03-22"},{"lineNumber":217,"author":{"gitId":"sjq-sohjunqi"},"content":"        return adherenceTotal / (adherenceCounter * 3);","lastModifiedDate":"2021-03-22"},{"lineNumber":218,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":219,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":220,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":221,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Appends the report with new date","lastModifiedDate":"2021-03-14"},{"lineNumber":222,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":223,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param report Report to append to","lastModifiedDate":"2021-03-14"},{"lineNumber":224,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param day Date of new day","lastModifiedDate":"2021-03-14"},{"lineNumber":225,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":226,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static void reportNewDay(StringBuilder report, LocalDate day) {","lastModifiedDate":"2021-03-14"},{"lineNumber":227,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"Date: \");","lastModifiedDate":"2021-03-14"},{"lineNumber":228,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(day.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)));","lastModifiedDate":"2021-03-14"},{"lineNumber":229,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"\\n\");","lastModifiedDate":"2021-03-14"},{"lineNumber":230,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":231,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":232,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":233,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Report food details","lastModifiedDate":"2021-03-14"},{"lineNumber":234,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":235,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param report Report to append to","lastModifiedDate":"2021-03-14"},{"lineNumber":236,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param food Food to report","lastModifiedDate":"2021-03-14"},{"lineNumber":237,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":238,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static void reportFood(StringBuilder report, Food food, int foodCount) {","lastModifiedDate":"2021-03-27"},{"lineNumber":239,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get macronutrients consumed","lastModifiedDate":"2021-03-14"},{"lineNumber":240,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carbs \u003d food.getCarbos();","lastModifiedDate":"2021-03-14"},{"lineNumber":241,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fats \u003d food.getFats();","lastModifiedDate":"2021-03-14"},{"lineNumber":242,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteins \u003d food.getProteins();","lastModifiedDate":"2021-03-14"},{"lineNumber":243,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":244,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Format consumed macronutrients","lastModifiedDate":"2021-03-14"},{"lineNumber":245,"author":{"gitId":"sjq-sohjunqi"},"content":"        String carbsString \u003d String.format(\"Carbohydrates: %,.2fg\", carbs);","lastModifiedDate":"2021-03-22"},{"lineNumber":246,"author":{"gitId":"sjq-sohjunqi"},"content":"        String fatsString \u003d String.format(\"Fats: %,.2fg\", fats);","lastModifiedDate":"2021-03-22"},{"lineNumber":247,"author":{"gitId":"sjq-sohjunqi"},"content":"        String proteinsString \u003d String.format(\"Proteins: %,.2fg\", proteins);","lastModifiedDate":"2021-03-22"},{"lineNumber":248,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":249,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(foodCount + \". \");","lastModifiedDate":"2021-03-27"},{"lineNumber":250,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(food.getName() + \"    \");","lastModifiedDate":"2021-03-23"},{"lineNumber":251,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(carbsString + \"    \");","lastModifiedDate":"2021-03-23"},{"lineNumber":252,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(fatsString + \"    \");","lastModifiedDate":"2021-03-23"},{"lineNumber":253,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(proteinsString + \"\\n\");","lastModifiedDate":"2021-03-22"},{"lineNumber":254,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":255,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":256,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":257,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":258,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates the percentage of macronutrient intake against requirements","lastModifiedDate":"2021-03-14"},{"lineNumber":259,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":260,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param intake Macronutrient intake in grams","lastModifiedDate":"2021-03-14"},{"lineNumber":261,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param required Daily macronutrient intake requirement","lastModifiedDate":"2021-03-14"},{"lineNumber":262,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Percentage of adherence","lastModifiedDate":"2021-03-14"},{"lineNumber":263,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":264,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static double calculatePercentage(double intake, double required) {","lastModifiedDate":"2021-03-14"},{"lineNumber":265,"author":{"gitId":"sjq-sohjunqi"},"content":"        return (intake / required) * 100.00;","lastModifiedDate":"2021-03-14"},{"lineNumber":266,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":267,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":268,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":269,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Reports the adherence for each macronutrient","lastModifiedDate":"2021-03-14"},{"lineNumber":270,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":271,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param report Report to append to","lastModifiedDate":"2021-03-14"},{"lineNumber":272,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param carbsAdherence Daily carbohydrate adherence","lastModifiedDate":"2021-03-14"},{"lineNumber":273,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param fatsAdherence Daily fats adherence","lastModifiedDate":"2021-03-14"},{"lineNumber":274,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param proteinsAdherence Daily proteins adherence","lastModifiedDate":"2021-03-14"},{"lineNumber":275,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":276,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static void reportAdherence(StringBuilder report, double carbsAdherence, double fatsAdherence,","lastModifiedDate":"2021-03-14"},{"lineNumber":277,"author":{"gitId":"sjq-sohjunqi"},"content":"                                        double proteinsAdherence) {","lastModifiedDate":"2021-03-14"},{"lineNumber":278,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":279,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Report daily adherence percentage","lastModifiedDate":"2021-03-10"},{"lineNumber":280,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (carbsAdherence \u003e 100 + LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":281,"author":{"gitId":"sjq-sohjunqi"},"content":"            double exceed \u003d carbsAdherence - 100.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":282,"author":{"gitId":"sjq-sohjunqi"},"content":"            String exceedString \u003d String.format(\"%,.2f\", exceed);","lastModifiedDate":"2021-03-10"},{"lineNumber":283,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily carbohydrate consumption has exceeded by \" + exceedString + \"%\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":284,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (carbsAdherence \u003c 100 - LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":285,"author":{"gitId":"sjq-sohjunqi"},"content":"            double under \u003d 100.00 - carbsAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":286,"author":{"gitId":"sjq-sohjunqi"},"content":"            String underString \u003d String.format(\"%,.2f\", under);","lastModifiedDate":"2021-03-10"},{"lineNumber":287,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily carbohydrate consumption is under by \" + underString + \"%\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":288,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":289,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily carbohydrate consumption \"","lastModifiedDate":"2021-03-10"},{"lineNumber":290,"author":{"gitId":"sjq-sohjunqi"},"content":"                    + \"is within diet requirements. Well done!\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":291,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":292,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":293,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (fatsAdherence \u003e 100 + LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":294,"author":{"gitId":"sjq-sohjunqi"},"content":"            double exceed \u003d fatsAdherence - 100.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":295,"author":{"gitId":"sjq-sohjunqi"},"content":"            String exceedString \u003d String.format(\"%,.2f\", exceed);","lastModifiedDate":"2021-03-10"},{"lineNumber":296,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily fat consumption has exceeded by \" + exceedString + \"%\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":297,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (fatsAdherence \u003c 100 - LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":298,"author":{"gitId":"sjq-sohjunqi"},"content":"            double under \u003d 100.00 - fatsAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":299,"author":{"gitId":"sjq-sohjunqi"},"content":"            String underString \u003d String.format(\"%,.2f\", under);","lastModifiedDate":"2021-03-10"},{"lineNumber":300,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily fat consumption is under by \" + underString + \"%\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":301,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":302,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily fat consumption is within diet requirements. Well done!\\n\");","lastModifiedDate":"2021-03-20"},{"lineNumber":303,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":304,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":305,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (proteinsAdherence \u003e 100 + LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":306,"author":{"gitId":"sjq-sohjunqi"},"content":"            double exceed \u003d proteinsAdherence - 100.00;","lastModifiedDate":"2021-03-22"},{"lineNumber":307,"author":{"gitId":"sjq-sohjunqi"},"content":"            String exceedString \u003d String.format(\"%,.2f\", exceed);","lastModifiedDate":"2021-03-10"},{"lineNumber":308,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily protein consumption has exceeded by \" + exceedString + \"%\\n\\n\");","lastModifiedDate":"2021-03-10"},{"lineNumber":309,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (proteinsAdherence \u003c 100 - LEEWAY) {","lastModifiedDate":"2021-03-10"},{"lineNumber":310,"author":{"gitId":"sjq-sohjunqi"},"content":"            double under \u003d 100.00 - proteinsAdherence;","lastModifiedDate":"2021-03-22"},{"lineNumber":311,"author":{"gitId":"sjq-sohjunqi"},"content":"            String underString \u003d String.format(\"%,.2f\", under);","lastModifiedDate":"2021-03-10"},{"lineNumber":312,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily protein consumption is under by \" + underString + \"%\\n\\n\");","lastModifiedDate":"2021-03-10"},{"lineNumber":313,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-10"},{"lineNumber":314,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(\"Your daily protein consumption is within diet requirements. Well done!\\n\\n\");","lastModifiedDate":"2021-03-10"},{"lineNumber":315,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":316,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":317,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":318,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":319,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"sjq-sohjunqi":319}},{"path":"src/main/java/seedu/address/logic/commands/AddFoodIntakeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" * Adds Food Intake to the nutrients tracker.","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodIntakeCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_intake_add\";","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": This adds the food intake for the day.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \"There are 3 variants to this command:\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"            + \"1. Input food intake (For new food items that are not created before)\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"            + \"2. Input food intake (For existing food items)\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"            + \"3. Input food intake (For existing food items, using different nutrient value(s))\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_add d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\\n\";","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success adding food item (\";","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_FAILURE_CREATE_FOOD_REQ \u003d \"Suggested food item not found. Please append at \"","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            + \"least 1 nutrient value to add the food item. (Eg. c/CARBOS(g) or f/FATS(g) or p/PROTEINS(g) \";","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS_FOOD_UPDATE \u003d \"Successfully edited food value to: \";","lastModifiedDate":"2021-03-19"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-19"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"    private final TemporaryFoodDescriptor tempFoodDescriptor;","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"     * Creates a AddFoodIntake command to run the Macronutrients Tracker.","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodIntakeCommand(LocalDate date, TemporaryFoodDescriptor tempFoodDescriptor) {","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        this.tempFoodDescriptor \u003d tempFoodDescriptor;","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        int index \u003d model.getUniqueFoodList().getFoodItemIndex(this.tempFoodDescriptor.getName().get());","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        boolean skipEditCheck \u003d false;","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        //Food does not exist in Unique Food List, hence add the food item in.","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"            Food newFood \u003d createNewFood(this.tempFoodDescriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"            model.addFoodItem(newFood);","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"            index \u003d model.getUniqueFoodList().getFoodList().size() - 1;","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"            skipEditCheck \u003d true;","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        Food food \u003d model.getUniqueFoodList().getFoodList().get(index);","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        //Check for any edits made to the certain food item.","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"        if (!skipEditCheck \u0026\u0026 (this.tempFoodDescriptor.getCarbos().isPresent()","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"                || this.tempFoodDescriptor.getFats().isPresent()","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"                || this.tempFoodDescriptor.getProteins().isPresent())) {","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"            Food edittedFood \u003d editCurrentFood(food, tempFoodDescriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"            model.getUniqueFoodList().getFoodList().set(index, edittedFood);","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"            model.addFoodIntake(this.date, edittedFood);","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"            return new CommandResult(MESSAGE_SUCCESS_FOOD_UPDATE + edittedFood + \".\\n\"","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"                    + MESSAGE_SUCCESS + edittedFood + \") into food intake list.\");","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"        model.addFoodIntake(this.date, food);","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(MESSAGE_SUCCESS + food + \") into food intake list.\");","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"     * Creates a new food item to add into unique food list and food intake.","lastModifiedDate":"2021-03-18"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     * @param tempFoodDescriptor temporary Food item holder","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"     * @return new food item","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"     * @throws CommandException if no nutrient value is specified.","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"    public Food createNewFood(TemporaryFoodDescriptor tempFoodDescriptor) throws CommandException {","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d tempFoodDescriptor.getName().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        //Default initialize all double values to 0.","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"        Double newCarbos \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"        Double newFats \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"        Double newProteins \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        if (!tempFoodDescriptor.getCarbos().isPresent() \u0026\u0026 !tempFoodDescriptor.getFats().isPresent()","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 !tempFoodDescriptor.getProteins().isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_FAILURE_CREATE_FOOD_REQ);","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"        if (tempFoodDescriptor.getCarbos().isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"            newCarbos \u003d tempFoodDescriptor.getCarbos().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"        if (this.tempFoodDescriptor.getFats().isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"            newFats \u003d tempFoodDescriptor.getFats().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"        if (this.tempFoodDescriptor.getProteins().isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"            newProteins \u003d tempFoodDescriptor.getProteins().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"        return new Food(foodName, newCarbos, newFats, newProteins);","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"     * Creates a new edited food item with its details edited.","lastModifiedDate":"2021-03-18"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"     * @param existingFood       existing food item","lastModifiedDate":"2021-03-18"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"     * @param tempFoodDescriptor temporary food item holder","lastModifiedDate":"2021-03-18"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"     * @return new edited food item","lastModifiedDate":"2021-03-18"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"    public Food editCurrentFood(Food existingFood, TemporaryFoodDescriptor tempFoodDescriptor) {","lastModifiedDate":"2021-03-18"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d this.tempFoodDescriptor.getName().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        //Default initialize all double values to 0.","lastModifiedDate":"2021-03-18"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"        Double newCarbos \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"        Double newFats \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"        Double newProteins \u003d 0.0;","lastModifiedDate":"2021-03-18"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"        if (tempFoodDescriptor.getCarbos().isPresent()","lastModifiedDate":"2021-03-18"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 existingFood.getCarbos() !\u003d tempFoodDescriptor.getCarbos().get()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"            newCarbos \u003d tempFoodDescriptor.getCarbos().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"            newCarbos \u003d existingFood.getCarbos();","lastModifiedDate":"2021-03-18"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"        if (tempFoodDescriptor.getFats().isPresent() \u0026\u0026 existingFood.getFats() !\u003d tempFoodDescriptor.getFats().get()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"            newFats \u003d tempFoodDescriptor.getFats().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"            newFats \u003d existingFood.getFats();","lastModifiedDate":"2021-03-18"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"        if (tempFoodDescriptor.getProteins().isPresent()","lastModifiedDate":"2021-03-18"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 existingFood.getProteins() !\u003d tempFoodDescriptor.getProteins().get()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"            newProteins \u003d tempFoodDescriptor.getProteins().get();","lastModifiedDate":"2021-03-18"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"            newProteins \u003d existingFood.getProteins();","lastModifiedDate":"2021-03-18"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"        return new Food(foodName, newCarbos, newFats, newProteins);","lastModifiedDate":"2021-03-18"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"    public static class TemporaryFoodDescriptor {","lastModifiedDate":"2021-03-18"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"        private String name;","lastModifiedDate":"2021-03-18"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"        private Double carbos;","lastModifiedDate":"2021-03-18"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"        private Double fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"        private Double proteins;","lastModifiedDate":"2021-03-18"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"        public TemporaryFoodDescriptor() {","lastModifiedDate":"2021-03-18"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"        public void setName(String name) {","lastModifiedDate":"2021-03-18"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"            this.name \u003d name.toLowerCase();","lastModifiedDate":"2021-03-18"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cString\u003e getName() {","lastModifiedDate":"2021-03-18"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-18"},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"        public void setCarbos(Double carbos) {","lastModifiedDate":"2021-03-18"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"            this.carbos \u003d carbos;","lastModifiedDate":"2021-03-18"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":158,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":159,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getCarbos() {","lastModifiedDate":"2021-03-18"},{"lineNumber":160,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(carbos);","lastModifiedDate":"2021-03-18"},{"lineNumber":161,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":163,"author":{"gitId":"ssoonwee"},"content":"        public void setFats(Double fats) {","lastModifiedDate":"2021-03-18"},{"lineNumber":164,"author":{"gitId":"ssoonwee"},"content":"            this.fats \u003d fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":165,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getFats() {","lastModifiedDate":"2021-03-18"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(fats);","lastModifiedDate":"2021-03-18"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"        public void setProteins(Double proteins) {","lastModifiedDate":"2021-03-18"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"            this.proteins \u003d proteins;","lastModifiedDate":"2021-03-18"},{"lineNumber":173,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":174,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getProteins() {","lastModifiedDate":"2021-03-18"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(proteins);","lastModifiedDate":"2021-03-18"},{"lineNumber":177,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":179,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"ssoonwee":179}},{"path":"src/main/java/seedu/address/logic/commands/AddFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":" * Macronutrients Tracker Food command","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodItemCommand extends Command {","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_add\";","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": This adds a food item into the food list.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_add n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\";","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success adding food item (\";","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food item exists in the database. Please use (food_update\"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"            + \" n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS) command to update.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"            + \"At least 1 nutrient value has to be specified and different from original.\";","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    private final Food temporaryFood;","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * Creates a Food command to run the Macronutrients Tracker.","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodItemCommand(Food food) {","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        temporaryFood \u003d food;","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        if (model.hasFoodItem(temporaryFood)) {","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FOOD);","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        model.addFoodItem(temporaryFood);","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(MESSAGE_SUCCESS + temporaryFood + \") into food list.\");","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":46}},{"path":"src/main/java/seedu/address/logic/commands/AddUserCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" * BMI initialization command","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"public class AddUserCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"bmi\";","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Records the user\u0027s gender, age, height, weight\"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \" and ideal weight.\\nParameters: g/gender a/age h/height(cm) w/weight(kg) \"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"i/ideal_weight\";","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success in updating user information\";","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_UPDATE \u003d \"Unsuccessful! Please update your particulars \"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"using the bmi update command.\";","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final User temporaryUser;","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a User command to create the user object.","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"    public AddUserCommand(User user) {","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"        temporaryUser \u003d user;","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (model.hasUser()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new CommandResult(MESSAGE_UPDATE);","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        model.addUser(temporaryUser);","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":45}},{"path":"src/main/java/seedu/address/logic/commands/DeleteFoodIntakeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.exceptions.FoodIntakeNotFoundException;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" * Deletes a food intake identified using the food name and date.","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodIntakeCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_intake_delete\";","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \": This deletes the food intake item identified by its name on that date.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_delete d/DATE(in d MMM yyyy format) n/FOOD_NAME\";","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Successfully deleted food intake: \";","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_FAILURE \u003d \"Food intake could not be found. Please ensure its name \"","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \"and date provided are correct.\";","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    private final String foodName;","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"     * Initializes a DeleteFoodIntakeCommand instance with the date and food name input.","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"     * @param date date of food intake","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"     * @param foodName name of food","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodIntakeCommand(LocalDate date, String foodName) {","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        this.foodName \u003d foodName;","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeList foodIntakeList \u003d model.getFoodIntakeList();","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"            foodIntakeList.deleteFoodIntake(this.date, this.foodName);","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"            return new CommandResult(MESSAGE_DELETE_FOOD_SUCCESS + \" \" + this.foodName);","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"        } catch (FoodIntakeNotFoundException exception) {","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_DELETE_FOOD_FAILURE);","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"ssoonwee":49,"jasaaanlim":5}},{"path":"src/main/java/seedu/address/logic/commands/DeleteFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":" * Deletes a food item identified using it\u0027s displayed index from the UniqueFoodList.","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodItemCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_delete\";","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": This deletes the food item from the food list.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_delete n/FOOD_NAME\";","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Successfully deleted food item: \";","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_FAILURE \u003d \"Food item could not be found. Please ensure its name is\"","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"            + \" correct.\";","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    private final String foodName;","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodItemCommand(String name) {","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        this.foodName \u003d name;","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"        List\u003cFood\u003e foodList \u003d model.getAddressBook().getFoodList().getFoodList();","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"            if (foodList.get(i).getName().equals(this.foodName)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"                model.deleteFoodItem(i);","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"                return new CommandResult(MESSAGE_DELETE_FOOD_SUCCESS + \" \" + this.foodName);","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        throw new CommandException(MESSAGE_DELETE_FOOD_FAILURE);","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"ssoonwee":41,"WeiLiangLOL":2}},{"path":"src/main/java/seedu/address/logic/commands/EditUserCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" * BMI update command","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"public class EditUserCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"bmi_update\";","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the user\u0027s gender, age, height, weight\"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \" and ideal weight.\\nParameters: g/gender a/age h/height(cm) w/weight(kg) \"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"i/ideal_weight\";","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success in updating user information\";","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final User temporaryUser;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a User command to update the user object.","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    public EditUserCommand(User user) {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"        temporaryUser \u003d user;","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"        model.editUser(temporaryUser);","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":38}},{"path":"src/main/java/seedu/address/logic/commands/ListDietPlansCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":" * List all diet plans command","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ListDietPlansCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"plan_list\";","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": This lists all available diet plans.\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Appends details of diet plans to the result","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param result Result to be displayed to user","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlanList List of diet plans","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    private void printList(StringBuilder result, DietPlanList dietPlanList) {","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"        Iterator\u003cDietPlan\u003e dietPlanIterator \u003d dietPlanList.iterator();","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Iterate through all diet plans to get information","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"        int counter \u003d 1;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"        while (dietPlanIterator.hasNext()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"            DietPlan dietPlan \u003d dietPlanIterator.next();","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"            result.append(counter + \". \" + dietPlan.getPlanName() + \"\\n\");","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"            counter++;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        DietPlanList dietPlanList \u003d model.getDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        StringBuilder result \u003d new StringBuilder(\"Here are the available diet plans:\\n\\n\");","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        printList(result, dietPlanList);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        String resultString \u003d result.toString();","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(resultString);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":49}},{"path":"src/main/java/seedu/address/logic/commands/ListFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"public class ListFoodItemCommand extends Command {","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_list\";","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here are all the food items: \";","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NO_FOOD_ITEM \u003d \"The food list is empty. Start off by adding food items!\";","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"        if (model.getAddressBook().getFoodList().getFoodList().size() \u003d\u003d 0) {","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            return new CommandResult(MESSAGE_NO_FOOD_ITEM);","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d model.listFoodItem();","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + result);","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"ssoonwee":23}},{"path":"src/main/java/seedu/address/logic/commands/ListUserCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":" * BMI query command","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ListUserCommand extends Command {","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"bmi_query\";","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the user\u0027s gender, age, height, weight\"","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \" and ideal weight.\\nParameters: g/gender a/age h/height(cm) w/weight(kg) \"","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"i/ideal_weight\";","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a User command to update the user object.","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public ListUserCommand() {}","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"        String details \u003d model.listUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(details);","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":29}},{"path":"src/main/java/seedu/address/logic/commands/QueryFoodIntakeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"public class QueryFoodIntakeCommand extends Command {","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_intake_query\";","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Query details of food intake based on dates.\\n\"","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"            + \"There are 2 kinds of query method. You can either choose to query for a certain date or for a range of\"","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"            + \" date, both inclusive.\\n\"","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"            + \"1. Query based on a date. Command usage: food_intake_query d/DATE(in d MMM yyyy format)\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \"2. Query based on a range of dates.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_query df/DATE(in d MMM yyyy format) dt/DATE(in d MMM yyyy format)\\n\";","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_INVALID_SYNTAX \u003d \"You have entered an invalid syntax. Only d/ or df/ and dt/\"","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"            + \" argument can be used.\";","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_INVALID_DATE_USAGE \u003d \"You have entered an invalid date sequence. Date from (/df)\"","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \" must be before Date to (/dt).\";","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_EMPTY_DATES \u003d \"You have not entered any dates. Here is a guide on how to use\"","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"            + \"the query feature: \\n\" + MESSAGE_USAGE;","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    private final LocalDate dateTo;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    private final LocalDate dateFrom;","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"     * Instantiates a QueryFoodIntakeCommand instance with the date(s) input.","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"     * @param date     a particular date","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"     * @param dateFrom range from this pate","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"     * @param dateTo   range to this date","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    public QueryFoodIntakeCommand(LocalDate date, LocalDate dateFrom, LocalDate dateTo) {","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        this.dateFrom \u003d dateFrom;","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        this.dateTo \u003d dateTo;","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        String output;","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        if (this.date !\u003d null) {","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"            if (this.dateTo \u003d\u003d null \u0026\u0026 this.dateFrom \u003d\u003d null) {","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"                output \u003d model.getFoodIntakeList().getFoodIntakeListByDate(date);","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"            } else {","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"                throw new CommandException(MESSAGE_INVALID_SYNTAX);","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        } else if (this.dateFrom.isBefore(this.dateTo)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"            output \u003d model.getFoodIntakeList().getFoodIntakeListByDateRange(dateFrom, dateTo);","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        } else if (this.dateFrom.isAfter(this.dateTo) || this.dateFrom.isEqual(this.dateTo)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_INVALID_DATE_USAGE);","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_EMPTY_DATES);","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(output);","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"ssoonwee":66}},{"path":"src/main/java/seedu/address/logic/commands/RecommendPlanCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":" * Recommend plan command","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"public class RecommendPlanCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"plan_recommend\";","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Recommend diet plans based on ideal weight.\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a recommend plan command to recommend diet plans to the user","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    public RecommendPlanCommand() {","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    private void appendDiets(StringBuilder recommendations, List\u003cDietPlan\u003e recommendedDiets) {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"        for (int count \u003d 0; count \u003c recommendedDiets.size(); count++) {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"            int index \u003d count + 1;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"            DietPlan dietPlan \u003d recommendedDiets.get(count);","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"            recommendations.append(index + \". \" + dietPlan.getPlanName() + \"\\n\");","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"        PlanType userGoal \u003d model.getUserGoal();","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cDietPlan\u003e recommendedDiets \u003d model.recommendDiets(userGoal);","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        StringBuilder recommendations \u003d new StringBuilder(\"Here are the recommended \");","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        switch (userGoal) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTGAIN:","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"            recommendations.append(\"weight gain \");","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTLOSS:","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"            recommendations.append(\"weight loss \");","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        default:","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"            recommendations.append(\"weight maintenance \");","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"        double bmi \u003d model.getUserBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"        String bmiString \u003d String.format(\"%.2f\", bmi);","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"        recommendations.append(\"diet plans based on your BMI of \" + bmiString + \":\\n\\n\");","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"        appendDiets(recommendations, recommendedDiets);","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"        String recommendationString \u003d recommendations.toString();","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(recommendationString);","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":64}},{"path":"src/main/java/seedu/address/logic/commands/ResetCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":" * Resets the application to the specified reset type.","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"public class ResetCommand extends Command {","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"    public static final String COMMAND_WORD \u003d \"reset\";","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"            + \": Resets the DietLAH! application to blank or the default template.\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"            + \"Command usage: reset t/blank OR t/template\";","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"DietLAH! application successfully reset to \";","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Unable to reset. Please choose the reset type t/blank or t/template\";","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"    private String type;","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"     * Creates a ResetCommand command based on the specified type.","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"    public ResetCommand(String type) {","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"        this.type \u003d type;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"        if (this.type.equals(\"blank\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"            model.resetToBlank();","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"        } else if (this.type.equals(\"template\")) {","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"            model.resetToTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        return new CommandResult(MESSAGE_SUCCESS + this.type + \".\");","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"jasaaanlim":41}},{"path":"src/main/java/seedu/address/logic/commands/RunProgressCalculatorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-20"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-20"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.ProgressCalculator;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-20"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-20"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-20"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-20"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":" * Generate progress report command","lastModifiedDate":"2021-03-20"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-20"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"public class RunProgressCalculatorCommand extends Command {","lastModifiedDate":"2021-03-20"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"progress\";","lastModifiedDate":"2021-03-20"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Generates the progress \"","lastModifiedDate":"2021-03-20"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"report for the active diet plan.\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String MESSAGE_NO_DIET \u003d \"You are currently not on any diets. Please select one with \"","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"the plan_set command.\";","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Generates progress report for the active diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    public RunProgressCalculatorCommand() {","lastModifiedDate":"2021-03-20"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-20"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-20"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"        DietPlan dietPlan \u003d model.getActiveDiet();","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (dietPlan \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new CommandException(MESSAGE_NO_DIET);","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        FoodIntakeList foodIntakeList \u003d model.getFoodIntakeList();","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d model.getUser();","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        String result \u003d ProgressCalculator.calculateProgress(foodIntakeList, dietPlan, user);","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new CommandResult(result);","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-20"}],"authorContributionMap":{"sjq-sohjunqi":48}},{"path":"src/main/java/seedu/address/logic/commands/SetActiveDietCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":" * Set active diet plan command","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"public class SetActiveDietCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"plan_set\";","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Set the active diet plan.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"Parameters: plan_set p/ID\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"There is no diet plan for that index!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your active diet plan is now:\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    private int index;","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a set plan command to set the active diet plan for the user","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    public SetActiveDietCommand(int index) {","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        DietPlanList dietPlanList \u003d model.getDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"            DietPlan dietPlan \u003d dietPlanList.getDietPlan(this.index);","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"            model.setActiveDiet(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new CommandResult(MESSAGE_SUCCESS + dietPlan.viewPlan());","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        } catch (IndexOutOfBoundsException outOfBounds) {","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new CommandException(MESSAGE_OUT_OF_BOUNDS);","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":47}},{"path":"src/main/java/seedu/address/logic/commands/UpdateFoodIntakeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":" * Updates a particular FoodIntake item in the FoodIntakeList.","lastModifiedDate":"2021-03-19"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"public class UpdateFoodIntakeCommand extends Command {","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_intake_update\";","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \": This updates the nutritional values for a particular date and food.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_intake_update d/DATE(in d MMM yyyy format) n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\";","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Food intake successfully updated for \";","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MESSAGE_FAILURE \u003d \"Unable to find food intake record. Are you trying \"","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"            + \"to add a new intake?\";","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    private String name;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    private LocalDate date;","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    private String fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    private String carbos;","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    private String proteins;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"     * Creates an UpdateFoodIntake command to update existing foodIntakes.","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"    public UpdateFoodIntakeCommand(LocalDate date, String name, String fats, String carbos, String proteins) {","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntake currentFoodIntake;","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntake newFoodIntake;","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"        int index;","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"        try {","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"            index \u003d model.getFoodIntakeList().findFoodIntake(date, name);","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"            if (index \u003d\u003d -1) {","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"                throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"            currentFoodIntake \u003d model.getFoodIntakeList().getFoodIntakeList().get(index);","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"        } catch (IndexOutOfBoundsException error) {","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"            throw new CommandException(MESSAGE_FAILURE);","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d currentFoodIntake.getDate();","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"        this.name \u003d currentFoodIntake.getFood().getName();","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"        if (this.fats \u003d\u003d null) {","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"            this.fats \u003d String.valueOf(currentFoodIntake.getFood().getFats());","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"        if (this.carbos \u003d\u003d null) {","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"            this.carbos \u003d String.valueOf(currentFoodIntake.getFood().getCarbos());","lastModifiedDate":"2021-03-18"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"        if (this.proteins \u003d\u003d null) {","lastModifiedDate":"2021-03-18"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"            this.proteins \u003d String.valueOf(currentFoodIntake.getFood().getProteins());","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"        newFoodIntake \u003d new FoodIntake(this.date, this.name,","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"jasaaanlim"},"content":"                Double.parseDouble(this.carbos), Double.parseDouble(this.fats),","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"jasaaanlim"},"content":"                Double.parseDouble(this.proteins));","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"jasaaanlim"},"content":"        model.updateFoodIntake(index, newFoodIntake);","lastModifiedDate":"2021-03-18"},{"lineNumber":79,"author":{"gitId":"jasaaanlim"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"(\" + this.name + \")\");","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"ssoonwee":3,"jasaaanlim":78}},{"path":"src/main/java/seedu/address/logic/commands/UpdateFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2021-03-09"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-09"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-09"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"public class UpdateFoodItemCommand extends Command {","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food_update\";","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": This updates the detail(s) of existing food item \"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \"specified.\\n\"","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \"Existing values will be overwritten by the input values and at least 1 value has to be different from\"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"            + \" original.\\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"            + \"Command usage: food_update n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\";","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Successfully updated food item\";","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field such as its carbos, fats or proteins \"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \"value must be edited and different from original. (Current Food being edited: \";","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NOT_FOUND \u003d \"The food item specified is not found. Please try again with a valid\"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"            + \" item.\";","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NAME_MISSING \u003d \"Food name is missing! Please enter the food name. Here is \"","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            + \"the command guide: \\n\"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"            + MESSAGE_USAGE;","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    private final EditFoodDescriptor editedFood;","lastModifiedDate":"2021-03-09"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     * Creates an Update Food Item command to run the Macronutrients Tracker.","lastModifiedDate":"2021-03-09"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"     * @param editedFood updated food data","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    public UpdateFoodItemCommand(EditFoodDescriptor editedFood) {","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(editedFood);","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        this.editedFood \u003d new EditFoodDescriptor(editedFood);","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        List\u003cFood\u003e foodList \u003d model.getAddressBook().getFoodList().getFoodList();","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : foodList) {","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(editedFood.getName().get())) {","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"                Food updatedFood \u003d createEditedFood(food, editedFood);","lastModifiedDate":"2021-03-09"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"                model.updateFoodItem(updatedFood);","lastModifiedDate":"2021-03-09"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"                return new CommandResult(MESSAGE_EDIT_FOOD_SUCCESS);","lastModifiedDate":"2021-03-09"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-09"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"        throw new CommandException(MESSAGE_NOT_FOUND);","lastModifiedDate":"2021-03-09"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"     * Creates and returns a {@code Food} with the details of {@code foodToEdit}","lastModifiedDate":"2021-03-09"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"     * edited with {@code editFoodDescriptor}.","lastModifiedDate":"2021-03-09"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) throws","lastModifiedDate":"2021-03-09"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"            CommandException {","lastModifiedDate":"2021-03-09"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"        assert foodToEdit !\u003d null;","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"        Double updatedCarbos \u003d editFoodDescriptor.getCarbos().orElse(foodToEdit.getCarbos());","lastModifiedDate":"2021-03-09"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"        Double updatedFats \u003d editFoodDescriptor.getFats().orElse(foodToEdit.getFats());","lastModifiedDate":"2021-03-09"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"        Double updatedProteins \u003d editFoodDescriptor.getProteins().orElse(foodToEdit.getProteins());","lastModifiedDate":"2021-03-09"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"        if (updatedCarbos \u003d\u003d foodToEdit.getCarbos() \u0026\u0026 updatedFats \u003d\u003d foodToEdit.getFats()","lastModifiedDate":"2021-03-09"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 updatedProteins \u003d\u003d foodToEdit.getProteins()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_NOT_EDITED + foodName + \")\");","lastModifiedDate":"2021-03-09"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        return new Food(foodName, updatedCarbos, updatedFats, updatedProteins);","lastModifiedDate":"2021-03-09"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"    public static class EditFoodDescriptor {","lastModifiedDate":"2021-03-09"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"        private String name;","lastModifiedDate":"2021-03-09"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        private Double carbos;","lastModifiedDate":"2021-03-09"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        private Double fats;","lastModifiedDate":"2021-03-09"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"        private Double proteins;","lastModifiedDate":"2021-03-09"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"        public EditFoodDescriptor() {","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"        /**","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"         * Copy constructor.","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"         */","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        public EditFoodDescriptor(EditFoodDescriptor toCopy) {","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"            setName(toCopy.name);","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"            setCarbos(toCopy.carbos);","lastModifiedDate":"2021-03-09"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"            setFats(toCopy.fats);","lastModifiedDate":"2021-03-09"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"            setProteins(toCopy.proteins);","lastModifiedDate":"2021-03-09"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        /**","lastModifiedDate":"2021-03-09"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"         * Returns true if at least one field is edited","lastModifiedDate":"2021-03-09"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"         */","lastModifiedDate":"2021-03-09"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2021-03-09"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"            return CollectionUtil.isAnyNonNull(carbos, fats, proteins);","lastModifiedDate":"2021-03-09"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"        public void setName(String name) {","lastModifiedDate":"2021-03-09"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"            this.name \u003d name.toLowerCase();","lastModifiedDate":"2021-03-09"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cString\u003e getName() {","lastModifiedDate":"2021-03-09"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2021-03-09"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"        public void setCarbos(Double carbos) {","lastModifiedDate":"2021-03-09"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"            this.carbos \u003d carbos;","lastModifiedDate":"2021-03-09"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getCarbos() {","lastModifiedDate":"2021-03-09"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(carbos);","lastModifiedDate":"2021-03-09"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"        public void setFats(Double fats) {","lastModifiedDate":"2021-03-09"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"            this.fats \u003d fats;","lastModifiedDate":"2021-03-09"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getFats() {","lastModifiedDate":"2021-03-09"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(fats);","lastModifiedDate":"2021-03-09"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"        public void setProteins(Double proteins) {","lastModifiedDate":"2021-03-09"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"            this.proteins \u003d proteins;","lastModifiedDate":"2021-03-09"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getProteins() {","lastModifiedDate":"2021-03-09"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(proteins);","lastModifiedDate":"2021-03-09"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"ssoonwee":138,"WeiLiangLOL":2}},{"path":"src/main/java/seedu/address/logic/commands/ViewActiveDietCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" * View active diet command","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ViewActiveDietCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"plan_current\";","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the active diet plan.\";","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_NO_PLAN \u003d \"You are currently not on any active diet plan!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Your active diet plan is:\\n\";","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a view active plan command to get the details of the active diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    public ViewActiveDietCommand() {","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        DietPlan dietPlan \u003d model.getActiveDiet();","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (dietPlan !\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"            String planDetails \u003d dietPlan.viewPlan();","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new CommandResult(MESSAGE_SUCCESS + planDetails);","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new CommandResult(MESSAGE_NO_PLAN);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":40}},{"path":"src/main/java/seedu/address/logic/commands/ViewPlanCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.PlanInfoCalculator;","lastModifiedDate":"2021-03-20"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-20"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-20"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":" * View plan details command","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ViewPlanCommand extends Command {","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String COMMAND_WORD \u003d \"plan\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View details of a specific diet plan.\\n\"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"            + \"Parameters: plan p/ID\";","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_OUT_OF_BOUNDS \u003d \"There is no diet plan for that index!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    private int index;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a view plan command to get the details of a specific diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"    public ViewPlanCommand(int index) {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.index \u003d index - 1;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Reports details of diet plan according to user information","lastModifiedDate":"2021-03-20"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-20"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlan The diet plan","lastModifiedDate":"2021-03-20"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param planInfoCalculator The macronutrient information specific to user","lastModifiedDate":"2021-03-20"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return String containing details","lastModifiedDate":"2021-03-20"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static String getResult(DietPlan dietPlan, PlanInfoCalculator planInfoCalculator) {","lastModifiedDate":"2021-03-20"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        String result \u003d \"Here\u0027s more information about the \";","lastModifiedDate":"2021-03-20"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        PlanType planType \u003d dietPlan.getPlanType();","lastModifiedDate":"2021-03-20"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        switch (planType) {","lastModifiedDate":"2021-03-20"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTGAIN:","lastModifiedDate":"2021-03-20"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"            result +\u003d \"Weight Gain plan:\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-20"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        case WEIGHTLOSS:","lastModifiedDate":"2021-03-20"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"            result +\u003d \"Weight Loss plan:\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-20"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        default:","lastModifiedDate":"2021-03-20"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"            result +\u003d \"Weight Maintenance plan:\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"            break;","lastModifiedDate":"2021-03-20"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-20"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"        String calorieString \u003d String.format(\"%.2f\", planInfoCalculator.getCalories());","lastModifiedDate":"2021-03-20"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"        String carboString \u003d String.format(\"%.2f\", planInfoCalculator.getCarbohydrates());","lastModifiedDate":"2021-03-20"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"        String proteinString \u003d String.format(\"%.2f\", planInfoCalculator.getProteins());","lastModifiedDate":"2021-03-20"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"        String fatString \u003d String.format(\"%.2f\", planInfoCalculator.getFats());","lastModifiedDate":"2021-03-20"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"        result +\u003d \"Daily calories intake: \" + calorieString + \" kcal\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"        result +\u003d \"Daily Protein intake: \" + proteinString + \" g\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"        result +\u003d \"Daily Carbohydrates intake: \" + carboString + \" g\\n\";","lastModifiedDate":"2021-03-20"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"        result +\u003d \"Daily Fat intake: \" + fatString + \" g\";","lastModifiedDate":"2021-03-20"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"        return result;","lastModifiedDate":"2021-03-20"},{"lineNumber":67,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":68,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":69,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"sjq-sohjunqi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(model);","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"sjq-sohjunqi"},"content":"        DietPlanList dietPlanList \u003d model.getDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d model.getUser();","lastModifiedDate":"2021-03-20"},{"lineNumber":75,"author":{"gitId":"sjq-sohjunqi"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":"            DietPlan dietPlan \u003d dietPlanList.getDietPlan(this.index);","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"            PlanInfoCalculator planInfoCalculator \u003d new PlanInfoCalculator(user, dietPlan);","lastModifiedDate":"2021-03-20"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"            String result \u003d getResult(dietPlan, planInfoCalculator);","lastModifiedDate":"2021-03-20"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new CommandResult(result);","lastModifiedDate":"2021-03-20"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"        } catch (IndexOutOfBoundsException outOfBounds) {","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new CommandException(MESSAGE_OUT_OF_BOUNDS);","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":85}},{"path":"src/main/java/seedu/address/logic/parser/AddFoodIntakeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodIntakeCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodIntakeCommand.TemporaryFoodDescriptor;","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodIntakeCommandParser implements Parser\u003cAddFoodIntakeCommand\u003e {","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the AddFoodIntakeCommand","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * and returns an AddFoodIntakeCommand object for execution.","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodIntakeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_NAME, PREFIX_CARBOS, PREFIX_FATS, PREFIX_PROTEINS);","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_NAME)","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        LocalDate date;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        try {","lastModifiedDate":"2021-03-12"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME_FORMAT,","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"                    AddFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        TemporaryFoodDescriptor tempFoodDescriptor \u003d new TemporaryFoodDescriptor();","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        tempFoodDescriptor.setName(ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_CARBOS).isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"            tempFoodDescriptor.setCarbos(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get()));","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_FATS).isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"            tempFoodDescriptor.setFats(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get()));","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_PROTEINS).isPresent()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"            tempFoodDescriptor.setProteins(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get()));","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        return new AddFoodIntakeCommand(date, tempFoodDescriptor);","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-12"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"ssoonwee":62}},{"path":"src/main/java/seedu/address/logic/parser/AddFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodItemCommand;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodItemCommandParser implements Parser\u003cAddFoodItemCommand\u003e {","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodItemCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS);","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS)","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodItemCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        String name \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        Double carbos \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get());","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        Double fats \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get());","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        Double proteins \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get());","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"        Food newFood \u003d new Food(name, carbos, fats, proteins);","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        return new AddFoodItemCommand(newFood);","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"sjq-sohjunqi":1,"ssoonwee":48}},{"path":"src/main/java/seedu/address/logic/parser/AddUserCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IDEAL_WEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.AddUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.IdealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"public class AddUserCommandParser implements Parser\u003cAddUserCommand\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddUserCommand","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"     * and returns an AddUserCommand object for execution.","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public AddUserCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GENDER, PREFIX_AGE, PREFIX_HEIGHT, PREFIX_WEIGHT,","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"                        PREFIX_IDEAL_WEIGHT);","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GENDER, PREFIX_AGE, PREFIX_HEIGHT, PREFIX_WEIGHT,","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"                PREFIX_IDEAL_WEIGHT) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddUserCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        String gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        int age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        double height \u003d ParserUtil.parseWeightAndHeight(argMultimap.getValue(PREFIX_HEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        double weight \u003d ParserUtil.parseWeightAndHeight(argMultimap.getValue(PREFIX_WEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        double idealWeight \u003d ParserUtil.parseIdealWeight(argMultimap.getValue(PREFIX_IDEAL_WEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi newBmi \u003d new Bmi(weight, height);","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"        Gender newGender \u003d new Gender(gender);","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        Age newAge \u003d new Age(age);","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        IdealWeight newIdealWeight \u003d new IdealWeight(idealWeight);","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cFood\u003e foodList \u003d new ArrayList\u003cFood\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeList foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"        User newUser \u003d new User(newBmi, foodList, foodIntakeList, newAge, newGender, newIdealWeight);","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new AddUserCommand(newUser);","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":63,"ssoonwee":1,"jasaaanlim":2}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodIntakeCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.AddFoodItemCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.AddUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.DeleteFoodIntakeCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.DeleteFoodItemCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.EditUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ListDietPlansCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ListFoodItemCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ListUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.QueryFoodIntakeCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.RecommendPlanCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.ResetCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.RunProgressCalculatorCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.SetActiveDietCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.UpdateFoodIntakeCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ViewActiveDietCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ViewPlanCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Useditial separation of command word and args.","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"        case AddFoodItemCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"            return new AddFoodItemCommandParser().parse(arguments);","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"        case UpdateFoodItemCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-09"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"            return new UpdateFoodItemCommandParser().parse(arguments);","lastModifiedDate":"2021-03-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"        case DeleteFoodItemCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"            return new DeleteFoodItemCommandParser().parse(arguments);","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"        case ListFoodItemCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"            return new ListFoodItemCommand();","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":"        case EditUserCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new EditUserCommandParser().parse(arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"        case AddUserCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new AddUserCommandParser().parse(arguments);","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"        case ListUserCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new ListUserCommand();","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        case AddFoodIntakeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-12"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"            return new AddFoodIntakeCommandParser().parse(arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":88,"author":{"gitId":"jasaaanlim"},"content":"        case UpdateFoodIntakeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"jasaaanlim"},"content":"            return new UpdateFoodIntakeCommandParser().parse(arguments);","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"        case DeleteFoodIntakeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-12"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"            return new DeleteFoodIntakeCommandParser().parse(arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        case QueryFoodIntakeCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-12"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"            return new QueryFoodIntakeCommandParser().parse(arguments);","lastModifiedDate":"2021-03-12"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"sjq-sohjunqi"},"content":"        case ListDietPlansCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new ListDietPlansCommand();","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"sjq-sohjunqi"},"content":"        case ViewPlanCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new ViewPlanCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"sjq-sohjunqi"},"content":"        case SetActiveDietCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new SetActiveDietCommandParser().parse(arguments);","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"sjq-sohjunqi"},"content":"        case ViewActiveDietCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new ViewActiveDietCommand();","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"        case RecommendPlanCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new RecommendPlanCommand();","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"        case RunProgressCalculatorCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-20"},{"lineNumber":113,"author":{"gitId":"sjq-sohjunqi"},"content":"            return new RunProgressCalculatorCommand();","lastModifiedDate":"2021-03-20"},{"lineNumber":114,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":115,"author":{"gitId":"jasaaanlim"},"content":"        case ResetCommand.COMMAND_WORD:","lastModifiedDate":"2021-03-28"},{"lineNumber":116,"author":{"gitId":"jasaaanlim"},"content":"            return new ResetCommandParser().parse(arguments);","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sjq-sohjunqi":40,"ssoonwee":18,"jasaaanlim":8,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    /* Prefix definitions -\u003e To be erased once our classes are finalised */","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"    //public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    /* Prefix definitions for Food */","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_DATE_FROM \u003d new Prefix(\"df/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_DATE_TO \u003d new Prefix(\"dt/\");","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_CARBOS \u003d new Prefix(\"c/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_FATS \u003d new Prefix(\"f/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_PROTEINS \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    /* Prefix definitions for BMI */","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_HEIGHT \u003d new Prefix(\"h/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_WEIGHT \u003d new Prefix(\"w/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_AGE \u003d new Prefix(\"a/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_IDEAL_WEIGHT \u003d new Prefix(\"i/\");","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    /* Prefix definitions for plan */","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final Prefix PREFIX_PLAN \u003d new Prefix(\"p/\");","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"    /* Prefix definitions for reset */","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"    public static final Prefix PREFIX_RESET_TYPE \u003d new Prefix(\"t/\");","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"sjq-sohjunqi":11,"ssoonwee":10,"jasaaanlim":3,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/DeleteFoodIntakeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.DeleteFoodIntakeCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":" * Parses input arguments and creates a new DeleteFoodIntakeCommand object","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodIntakeCommandParser implements Parser\u003cDeleteFoodIntakeCommand\u003e {","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * Parses user inputs and pass them to DeleteFoodIntakeCommand","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     * @param args argumentst","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     * @return a DeleteFoodIntakeCommand instance","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the input is incorrect","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodIntakeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_NAME);","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_NAME)","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-12"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"                    DeleteFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        LocalDate date;","lastModifiedDate":"2021-03-12"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        String foodName;","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        try {","lastModifiedDate":"2021-03-12"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        } catch (DateTimeParseException de) {","lastModifiedDate":"2021-03-12"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_DATETIME_FORMAT,","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"                    DeleteFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"        foodName \u003d ParserUtil.parseFoodItemName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        return new DeleteFoodIntakeCommand(date, foodName);","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-12"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-12"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"ssoonwee":55,"jasaaanlim":1}},{"path":"src/main/java/seedu/address/logic/parser/DeleteFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.DeleteFoodItemCommand;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":" * Parses input arguments and creates a new DeleteFoodItemCommand object","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodItemCommandParser implements Parser\u003cDeleteFoodItemCommand\u003e {","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteFoodItemCommand","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"     * and returns a DeleteFoodItemCommand object for execution.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodItemCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"                    DeleteFoodItemCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        return new DeleteFoodItemCommand(foodName);","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"ssoonwee":42}},{"path":"src/main/java/seedu/address/logic/parser/EditUserCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_AGE;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_HEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_IDEAL_WEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_WEIGHT;","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.EditUserCommand;","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.IdealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"public class EditUserCommandParser implements Parser\u003cEditUserCommand\u003e {","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses the given {@code String} of arguments in the context of the EditUserCommand","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"     * and returns an EditUserCommand object for execution.","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    public EditUserCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_GENDER, PREFIX_AGE, PREFIX_HEIGHT, PREFIX_WEIGHT,","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"                        PREFIX_IDEAL_WEIGHT);","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_GENDER, PREFIX_AGE, PREFIX_HEIGHT, PREFIX_WEIGHT,","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"                PREFIX_IDEAL_WEIGHT) || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditUserCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"        String gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        int age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        double height \u003d ParserUtil.parseWeightAndHeight(argMultimap.getValue(PREFIX_HEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        double weight \u003d ParserUtil.parseWeightAndHeight(argMultimap.getValue(PREFIX_WEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        double idealWeight \u003d ParserUtil.parseIdealWeight(argMultimap.getValue(PREFIX_IDEAL_WEIGHT).get());","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi newBmi \u003d new Bmi(weight, height);","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        Gender newGender \u003d new Gender(gender);","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"        Age newAge \u003d new Age(age);","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        IdealWeight newIdealWeight \u003d new IdealWeight(idealWeight);","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cFood\u003e foodList \u003d new ArrayList\u003cFood\u003e();","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeList foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"        User newUser \u003d new User(newBmi, foodList, foodIntakeList, newAge, newGender, newIdealWeight);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new EditUserCommand(newUser);","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-13"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":62,"ssoonwee":1,"jasaaanlim":2}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATETIME_FORMAT;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.IdealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String date} into a {@code Date}","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"     * @param date date string","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"     * @return a DateTime object","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code date} is invalid.","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"    public static LocalDate parseDate(String date) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"        String trimmedDate \u003d date.trim();","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy\");","lastModifiedDate":"2021-03-12"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        LocalDate localDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        try {","lastModifiedDate":"2021-03-12"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"            localDate \u003d LocalDate.parse(trimmedDate, formatter);","lastModifiedDate":"2021-03-12"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"        } catch (DateTimeParseException de) {","lastModifiedDate":"2021-03-12"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(MESSAGE_INVALID_DATETIME_FORMAT);","lastModifiedDate":"2021-03-12"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"        return localDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String value} into a {@code Double}","lastModifiedDate":"2021-03-08"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     * @param doubleValue double string","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     * @return a Double value","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code value} is invalid.","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    public static Double parseDouble(String doubleValue) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(doubleValue);","lastModifiedDate":"2021-03-08"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"        String trimmedValue \u003d doubleValue.trim();","lastModifiedDate":"2021-03-08"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        if (!trimmedValue.matches(Food.VALIDATION_POSITIVE_DOUBLE_REGEX)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(Food.MESSAGE_DIGIT_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        return Double.valueOf(trimmedValue);","lastModifiedDate":"2021-03-08"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"    public static String parseFoodName(String name) throws ParseException {","lastModifiedDate":"2021-03-08"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-08"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2021-03-08"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        if (!trimmedName.matches(Food.VALIDATION_CHAR_REGEX)","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"                || !trimmedName.matches(Food.VALIDATION_WHITESPACE_REGEX)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(Food.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"        return trimmedName;","lastModifiedDate":"2021-03-08"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":101,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":102,"author":{"gitId":"jasaaanlim"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2021-03-23"},{"lineNumber":103,"author":{"gitId":"jasaaanlim"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-23"},{"lineNumber":104,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":105,"author":{"gitId":"jasaaanlim"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-23"},{"lineNumber":106,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"jasaaanlim"},"content":"    public static String parseFoodItemName(String name) throws ParseException {","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"jasaaanlim"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"jasaaanlim"},"content":"        if (!trimmedName.matches(Food.VALIDATION_CHAR_REGEX_IMPORT)","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"jasaaanlim"},"content":"                || !trimmedName.matches(Food.VALIDATION_WHITESPACE_REGEX)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"jasaaanlim"},"content":"            throw new ParseException(Food.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"jasaaanlim"},"content":"        return trimmedName;","lastModifiedDate":"2021-03-23"},{"lineNumber":115,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":116,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":118,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses a {@code String ageString} into an Integer.","lastModifiedDate":"2021-03-13"},{"lineNumber":119,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-13"},{"lineNumber":120,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":121,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-13"},{"lineNumber":122,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":123,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static int parseAge(String ageString) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":124,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(ageString);","lastModifiedDate":"2021-03-13"},{"lineNumber":125,"author":{"gitId":"sjq-sohjunqi"},"content":"        String trimmedAge \u003d ageString.trim();","lastModifiedDate":"2021-03-13"},{"lineNumber":126,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!Age.isValidAge(trimmedAge)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":127,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":128,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":129,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":130,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Integer.parseInt(trimmedAge);","lastModifiedDate":"2021-03-13"},{"lineNumber":131,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":132,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":133,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":134,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses a {@code String weightHeightString} into a Double.","lastModifiedDate":"2021-03-13"},{"lineNumber":135,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-13"},{"lineNumber":136,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":137,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-13"},{"lineNumber":138,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":139,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static double parseWeightAndHeight(String weightHeightString) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":140,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(weightHeightString);","lastModifiedDate":"2021-03-13"},{"lineNumber":141,"author":{"gitId":"sjq-sohjunqi"},"content":"        String trimmedWeightHeight \u003d weightHeightString.trim();","lastModifiedDate":"2021-03-13"},{"lineNumber":142,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!Bmi.isValidWeightOrHeight(trimmedWeightHeight)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":143,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(Bmi.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":144,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":145,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":146,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Double.parseDouble(trimmedWeightHeight);","lastModifiedDate":"2021-03-13"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":150,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses a {@code String gender}.","lastModifiedDate":"2021-03-13"},{"lineNumber":151,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-13"},{"lineNumber":152,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":153,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-13"},{"lineNumber":154,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static String parseGender(String gender) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":156,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(gender);","lastModifiedDate":"2021-03-13"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"        String trimmedGender \u003d gender.trim();","lastModifiedDate":"2021-03-13"},{"lineNumber":158,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!Gender.isValidGender(trimmedGender)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":159,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":160,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"        return trimmedGender;","lastModifiedDate":"2021-03-13"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":164,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":166,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses a {@code String idealWeightString} into a Double.","lastModifiedDate":"2021-03-13"},{"lineNumber":167,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-13"},{"lineNumber":168,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-13"},{"lineNumber":170,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":171,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static double parseIdealWeight(String idealWeightString) throws ParseException {","lastModifiedDate":"2021-03-13"},{"lineNumber":172,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(idealWeightString);","lastModifiedDate":"2021-03-13"},{"lineNumber":173,"author":{"gitId":"sjq-sohjunqi"},"content":"        String trimmedWeight \u003d idealWeightString.trim();","lastModifiedDate":"2021-03-13"},{"lineNumber":174,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!IdealWeight.isValidIdealWeight(trimmedWeight)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":175,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(IdealWeight.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-13"},{"lineNumber":176,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":177,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":178,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Double.parseDouble(trimmedWeight);","lastModifiedDate":"2021-03-13"},{"lineNumber":179,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":180,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":181,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":182,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses a {@code String indexString} into an Integer.","lastModifiedDate":"2021-03-14"},{"lineNumber":183,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2021-03-14"},{"lineNumber":184,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":185,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2021-03-14"},{"lineNumber":186,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":187,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static int parsePlan(String indexString) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":188,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(indexString);","lastModifiedDate":"2021-03-14"},{"lineNumber":189,"author":{"gitId":"sjq-sohjunqi"},"content":"        String trimmedIndex \u003d indexString.trim();","lastModifiedDate":"2021-03-14"},{"lineNumber":190,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!DietPlanList.isValidIndex(trimmedIndex)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":191,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(DietPlanList.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-14"},{"lineNumber":192,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":193,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":194,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Integer.parseInt(trimmedIndex);","lastModifiedDate":"2021-03-14"},{"lineNumber":195,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":196,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":197,"author":{"gitId":"sjq-sohjunqi"},"content":"    // *********************************************************************************","lastModifiedDate":"2021-03-13"},{"lineNumber":198,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":215,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":245,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":247,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":248,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":249,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":261,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":262,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":263,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":264,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":269,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":275,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":276,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":279,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":282,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":283,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":285,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"sjq-sohjunqi":87,"ssoonwee":58,"jasaaanlim":16,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/QueryFoodIntakeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-12"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-12"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_FROM;","lastModifiedDate":"2021-03-12"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_TO;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.QueryFoodIntakeCommand;","lastModifiedDate":"2021-03-12"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-12"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"public class QueryFoodIntakeCommandParser implements Parser\u003cQueryFoodIntakeCommand\u003e {","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the Update Command","lastModifiedDate":"2021-03-12"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     * and returns an UpdateFoodItemCommand object for execution.","lastModifiedDate":"2021-03-12"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * @param args arguments passed in","lastModifiedDate":"2021-03-12"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @return an UpdateFoodItemCommand instance","lastModifiedDate":"2021-03-12"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-12"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public QueryFoodIntakeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-12"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-12"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_DATE_FROM, PREFIX_DATE_TO);","lastModifiedDate":"2021-03-12"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        LocalDate date \u003d null;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        LocalDate dateFrom \u003d null;","lastModifiedDate":"2021-03-12"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        LocalDate dateTo \u003d null;","lastModifiedDate":"2021-03-12"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE)","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_DATE_FROM, PREFIX_DATE_TO)","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"                        QueryFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_DATE_FROM).isPresent()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"            dateFrom \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_FROM).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_DATE_TO).isPresent()) {","lastModifiedDate":"2021-03-12"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"            dateTo \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE_TO).get());","lastModifiedDate":"2021-03-12"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        return new QueryFoodIntakeCommand(date, dateFrom, dateTo);","lastModifiedDate":"2021-03-12"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-12"}],"authorContributionMap":{"ssoonwee":61}},{"path":"src/main/java/seedu/address/logic/parser/ResetCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESET_TYPE;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.ResetCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"public class ResetCommandParser implements Parser\u003cResetCommand\u003e {","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"     * Parses the given {@code String} of arguments in the context of the reset Command","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"     * and returns a ResetCommand for execution.","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"     * @param args arguments passed in","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"     * @return an ViewPlanCommand instance","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"    public ResetCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"        String resetType;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_RESET_TYPE);","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESET_TYPE)","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"                    ResetCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"        resetType \u003d argMultimap.getValue(PREFIX_RESET_TYPE).get();","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"        if (!(resetType.equals(\"blank\") || resetType.equals(\"template\"))) {","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"                    ResetCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        return new ResetCommand(resetType);","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"jasaaanlim":49}},{"path":"src/main/java/seedu/address/logic/parser/SetActiveDietCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.SetActiveDietCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"public class SetActiveDietCommandParser implements Parser\u003cSetActiveDietCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses the given {@code String} of arguments in the context of the plan Command","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"     * and returns a ViewPlanCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param args arguments passed in","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return an ViewPlanCommand instance","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public SetActiveDietCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"                    SetActiveDietCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (argMultimap.getValue(PREFIX_PLAN).isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"            index \u003d ParserUtil.parsePlan(argMultimap.getValue(PREFIX_PLAN).get());","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new SetActiveDietCommand(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":46}},{"path":"src/main/java/seedu/address/logic/parser/UpdateFoodIntakeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-18"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-18"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;","lastModifiedDate":"2021-03-18"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;","lastModifiedDate":"2021-03-18"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;","lastModifiedDate":"2021-03-18"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-18"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;","lastModifiedDate":"2021-03-18"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-18"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-18"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.commands.UpdateFoodIntakeCommand;","lastModifiedDate":"2021-03-18"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"public class UpdateFoodIntakeCommandParser implements Parser\u003cUpdateFoodIntakeCommand\u003e {","lastModifiedDate":"2021-03-18"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"    public UpdateFoodIntakeCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_NAME, PREFIX_CARBOS, PREFIX_FATS, PREFIX_PROTEINS);","lastModifiedDate":"2021-03-18"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_NAME)","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-18"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"                    UpdateFoodIntakeCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-18"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"        String carbos;","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"        String fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"        String proteins;","lastModifiedDate":"2021-03-18"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"        String name \u003d ParserUtil.parseFoodItemName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        LocalDate date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());","lastModifiedDate":"2021-03-18"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"        if (!isPrefixPresent(argMultimap, PREFIX_CARBOS)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"            carbos \u003d null;","lastModifiedDate":"2021-03-18"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"            carbos \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get()).toString();","lastModifiedDate":"2021-03-18"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"        if (!isPrefixPresent(argMultimap, PREFIX_FATS)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"            fats \u003d null;","lastModifiedDate":"2021-03-18"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"            fats \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get()).toString();","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"        if (!isPrefixPresent(argMultimap, PREFIX_PROTEINS)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"            proteins \u003d null;","lastModifiedDate":"2021-03-18"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-18"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"            proteins \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get()).toString();","lastModifiedDate":"2021-03-18"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"        return new UpdateFoodIntakeCommand(date, name, fats, carbos, proteins);","lastModifiedDate":"2021-03-18"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-18"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-18"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-18"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-18"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-19"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"     * Returns true if the specified prefix contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-19"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-19"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-19"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"    private static boolean isPrefixPresent(ArgumentMultimap argumentMultimap, Prefix prefix) {","lastModifiedDate":"2021-03-18"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"        return argumentMultimap.getValue(prefix).isPresent();","lastModifiedDate":"2021-03-18"},{"lineNumber":74,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-18"}],"authorContributionMap":{"jasaaanlim":75}},{"path":"src/main/java/seedu/address/logic/parser/UpdateFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-09"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-09"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;","lastModifiedDate":"2021-03-09"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;","lastModifiedDate":"2021-03-09"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand;","lastModifiedDate":"2021-03-09"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand.EditFoodDescriptor;","lastModifiedDate":"2021-03-09"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-09"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"public class UpdateFoodItemCommandParser implements Parser\u003cUpdateFoodItemCommand\u003e {","lastModifiedDate":"2021-03-09"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the UpdateFoodItemCommand","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * and returns an UpdateFoodItemCommand object for execution.","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     * @param args arguments passed in","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     * @return an UpdateFoodItemCommand instance","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    public UpdateFoodItemCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-09"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-09"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2021-03-09"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS);","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"                    UpdateFoodItemCommand.MESSAGE_NAME_MISSING));","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        EditFoodDescriptor editFoodDescriptor \u003d new EditFoodDescriptor();","lastModifiedDate":"2021-03-09"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setName(ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2021-03-09"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_CARBOS).isPresent()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setCarbos(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get()));","lastModifiedDate":"2021-03-09"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_FATS).isPresent()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setFats(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get()));","lastModifiedDate":"2021-03-09"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_PROTEINS).isPresent()) {","lastModifiedDate":"2021-03-09"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setProteins(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get()));","lastModifiedDate":"2021-03-09"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-09"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        return new UpdateFoodItemCommand(editFoodDescriptor);","lastModifiedDate":"2021-03-09"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-13"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-09"}],"authorContributionMap":{"ssoonwee":61}},{"path":"src/main/java/seedu/address/logic/parser/ViewPlanCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PLAN;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.commands.ViewPlanCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ViewPlanCommandParser implements Parser\u003cViewPlanCommand\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Parses the given {@code String} of arguments in the context of the plan Command","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"     * and returns a ViewPlanCommand object for execution.","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param args arguments passed in","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return an ViewPlanCommand instance","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public ViewPlanCommand parse(String args) throws ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireNonNull(args);","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PLAN);","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_PLAN)","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"                    ViewPlanCommand.MESSAGE_USAGE));","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"        int index \u003d 0;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (argMultimap.getValue(PREFIX_PLAN).isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"            index \u003d ParserUtil.parsePlan(argMultimap.getValue(PREFIX_PLAN).get());","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new ViewPlanCommand(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":46}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-12"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.util.TemplateInitializer;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    private User user;","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"    private UniqueFoodList foodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    private FoodIntakeList foodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    //Used to have an old comment here, removed due to checkstyle error. Refer to old template for more.","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        foodList \u003d new UniqueFoodList();","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-18"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    public AddressBook() {","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}.","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}. Adds","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"     * the associated {@code FoodList} {@code FoodIntakeList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied,","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"                       UniqueFoodList uniqueFoodList,","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"                       FoodIntakeList foodIntakeList,","lastModifiedDate":"2021-03-29"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"                       User user) {","lastModifiedDate":"2021-03-29"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"        this();","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foodList \u003d uniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"        this.user \u003d user;","lastModifiedDate":"2021-03-29"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2021-03-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2021-03-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2021-03-12"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2021-03-12"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2021-03-12"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2021-03-12"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2021-03-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-12"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2021-03-12"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2021-03-12"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2021-03-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2021-03-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2021-03-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2021-03-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2021-03-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2021-03-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2021-03-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2021-03-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2021-03-12"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2021-03-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2021-03-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2021-03-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2021-03-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a person with the same identity as {@code food} exists in the food list.","lastModifiedDate":"2021-03-09"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food food) {","lastModifiedDate":"2021-03-08"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"        return foodList.hasFoodItem(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"     * Adds a food item into the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"     * The food item must not exist in the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":158,"author":{"gitId":"ssoonwee"},"content":"     * @param food food item","lastModifiedDate":"2021-03-08"},{"lineNumber":159,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":160,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodItem(Food food) {","lastModifiedDate":"2021-03-08"},{"lineNumber":161,"author":{"gitId":"ssoonwee"},"content":"        foodList.addFoodItem(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":163,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":164,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":165,"author":{"gitId":"ssoonwee"},"content":"     * Deletes a food item in the food list by its name.","lastModifiedDate":"2021-03-10"},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"     * @param index food index","lastModifiedDate":"2021-03-10"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {","lastModifiedDate":"2021-03-10"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"        foodList.deleteFoodItem(index);","lastModifiedDate":"2021-03-10"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":173,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":174,"author":{"gitId":"ssoonwee"},"content":"     * Updates a food item in the food list","lastModifiedDate":"2021-03-09"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"     * The food item must exist in the food list.","lastModifiedDate":"2021-03-09"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":177,"author":{"gitId":"ssoonwee"},"content":"     * @param food updated food item","lastModifiedDate":"2021-03-09"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":179,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food food) {","lastModifiedDate":"2021-03-09"},{"lineNumber":180,"author":{"gitId":"ssoonwee"},"content":"        foodList.updateFoodItem(food);","lastModifiedDate":"2021-03-09"},{"lineNumber":181,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":182,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":"     * Gets the unique food list.","lastModifiedDate":"2021-03-09"},{"lineNumber":185,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":186,"author":{"gitId":"ssoonwee"},"content":"     * @return a unique food list","lastModifiedDate":"2021-03-09"},{"lineNumber":187,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList getFoodList() {","lastModifiedDate":"2021-03-09"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"        return foodList;","lastModifiedDate":"2021-03-09"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":191,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":193,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items from the food list.","lastModifiedDate":"2021-03-10"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":195,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of the food list","lastModifiedDate":"2021-03-10"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":197,"author":{"gitId":"ssoonwee"},"content":"    public String listFoodItem() {","lastModifiedDate":"2021-03-10"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"        return foodList.listAllFoodItem();","lastModifiedDate":"2021-03-10"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":200,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":201,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":202,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Adds the user information.","lastModifiedDate":"2021-03-13"},{"lineNumber":203,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":204,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param user User object","lastModifiedDate":"2021-03-13"},{"lineNumber":205,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":206,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void addUser(User user) {","lastModifiedDate":"2021-03-13"},{"lineNumber":207,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.user \u003d user;","lastModifiedDate":"2021-03-13"},{"lineNumber":208,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":209,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":210,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":211,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns whether user information has been initialized.","lastModifiedDate":"2021-03-13"},{"lineNumber":212,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":213,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Boolean indicating whether user is initialized","lastModifiedDate":"2021-03-13"},{"lineNumber":214,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":215,"author":{"gitId":"sjq-sohjunqi"},"content":"    public boolean hasUser() {","lastModifiedDate":"2021-03-13"},{"lineNumber":216,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.user !\u003d null;","lastModifiedDate":"2021-03-13"},{"lineNumber":217,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":218,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":219,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":220,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns the user information.","lastModifiedDate":"2021-03-13"},{"lineNumber":221,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-13"},{"lineNumber":222,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return User object","lastModifiedDate":"2021-03-13"},{"lineNumber":223,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":224,"author":{"gitId":"sjq-sohjunqi"},"content":"    public User getUser() {","lastModifiedDate":"2021-03-13"},{"lineNumber":225,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.user;","lastModifiedDate":"2021-03-13"},{"lineNumber":226,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":227,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"ssoonwee"},"content":"     * Adds food intake object into the food intake list.","lastModifiedDate":"2021-03-12"},{"lineNumber":233,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":234,"author":{"gitId":"ssoonwee"},"content":"     * @param date date of food intake object","lastModifiedDate":"2021-03-12"},{"lineNumber":235,"author":{"gitId":"ssoonwee"},"content":"     * @param food food item of food intake object","lastModifiedDate":"2021-03-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":237,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodIntake(LocalDate date, Food food) {","lastModifiedDate":"2021-03-12"},{"lineNumber":238,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeList.addFoodIntake(new FoodIntake(date, food));","lastModifiedDate":"2021-03-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":241,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":242,"author":{"gitId":"jasaaanlim"},"content":"     * Updates the FoodIntake object in the FoodIntakeList","lastModifiedDate":"2021-03-18"},{"lineNumber":243,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":244,"author":{"gitId":"jasaaanlim"},"content":"     * @param index index to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":245,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntake FoodIntake object to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":246,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":247,"author":{"gitId":"jasaaanlim"},"content":"    public void updateFoodIntake(int index, FoodIntake foodIntake) {","lastModifiedDate":"2021-03-18"},{"lineNumber":248,"author":{"gitId":"jasaaanlim"},"content":"        foodIntakeList.updateFoodIntake(index, foodIntake);","lastModifiedDate":"2021-03-18"},{"lineNumber":249,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":250,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":252,"author":{"gitId":"ssoonwee"},"content":"     * Returns the FoodIntakeList instance.","lastModifiedDate":"2021-03-12"},{"lineNumber":253,"author":{"gitId":"ssoonwee"},"content":"     * @return FoodIntakeList instance","lastModifiedDate":"2021-03-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":255,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeList getFoodIntakeList() {","lastModifiedDate":"2021-03-12"},{"lineNumber":256,"author":{"gitId":"ssoonwee"},"content":"        return foodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":258,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":259,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":260,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current application data by setting to default values from TemplateInitializer.","lastModifiedDate":"2021-03-28"},{"lineNumber":261,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":262,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToTemplate(UniqueFoodList foodlist, FoodIntakeList foodIntakeList) {","lastModifiedDate":"2021-03-28"},{"lineNumber":263,"author":{"gitId":"jasaaanlim"},"content":"        TemplateInitializer templateInitializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":264,"author":{"gitId":"jasaaanlim"},"content":"        this.foodList \u003d foodList;","lastModifiedDate":"2021-03-28"},{"lineNumber":265,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-28"},{"lineNumber":266,"author":{"gitId":"jasaaanlim"},"content":"        this.user \u003d templateInitializer.createUser(foodlist, foodIntakeList);","lastModifiedDate":"2021-03-28"},{"lineNumber":267,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":268,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":269,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":270,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current application data to blank state.","lastModifiedDate":"2021-03-28"},{"lineNumber":271,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":272,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToBlank(UniqueFoodList foodlist, FoodIntakeList foodIntakeList) {","lastModifiedDate":"2021-03-28"},{"lineNumber":273,"author":{"gitId":"jasaaanlim"},"content":"        this.foodList \u003d foodlist;","lastModifiedDate":"2021-03-28"},{"lineNumber":274,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-28"},{"lineNumber":275,"author":{"gitId":"jasaaanlim"},"content":"        user \u003d null;","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sjq-sohjunqi":32,"SoonKeatNeo":5,"ssoonwee":80,"WeiLiangLOL":9,"jasaaanlim":31,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-18"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UnqiueFoodList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a food with the same name as {@code food} exists in the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"    boolean hasFoodItem(Food food);","lastModifiedDate":"2021-03-08"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items from the food items list.","lastModifiedDate":"2021-03-12"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of all the food items","lastModifiedDate":"2021-03-12"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"    String listFoodItem();","lastModifiedDate":"2021-03-12"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"     * Adds the given food item.","lastModifiedDate":"2021-03-08"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"     * {@code food} must not already exist in the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"    void addFoodItem(Food food);","lastModifiedDate":"2021-03-08"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"     * Updates food in food item list.","lastModifiedDate":"2021-03-09"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"     * @param food updated food item","lastModifiedDate":"2021-03-09"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"    void updateFoodItem(Food food);","lastModifiedDate":"2021-03-09"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"     * Deletes food in food item list.","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"     * @param index food index to be deleted","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"    void deleteFoodItem(int index);","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"    /** Returns the UniqueFoodList */","lastModifiedDate":"2021-03-12"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"    UniqueFoodList getUniqueFoodList();","lastModifiedDate":"2021-03-12"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DietPlanList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"    /** Returns the list of diet plans */","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"    DietPlanList getDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"    /** Set active diet plan */","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"    void setActiveDiet(DietPlan dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"sjq-sohjunqi"},"content":"    /** Get active diet plan */","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"sjq-sohjunqi"},"content":"    DietPlan getActiveDiet();","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"sjq-sohjunqi"},"content":"    /** Recommend diet plan based on user\u0027s goals*/","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"    List\u003cDietPlan\u003e recommendDiets(PlanType planType);","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodIntakeList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"     * Adds the food consumed on the day to the food intake list.","lastModifiedDate":"2021-03-12"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"     * @param date date of intake","lastModifiedDate":"2021-03-12"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"     * @param food food object","lastModifiedDate":"2021-03-12"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"    void addFoodIntake(LocalDate date, Food food);","lastModifiedDate":"2021-03-12"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":128,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":129,"author":{"gitId":"jasaaanlim"},"content":"     * Updates the FoodIntake object in the FoodIntakeList","lastModifiedDate":"2021-03-18"},{"lineNumber":130,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":131,"author":{"gitId":"jasaaanlim"},"content":"     * @param index index to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":132,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntake FoodIntake object to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":133,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":134,"author":{"gitId":"jasaaanlim"},"content":"    void updateFoodIntake(int index, FoodIntake foodIntake);","lastModifiedDate":"2021-03-18"},{"lineNumber":135,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":136,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"WeiLiangLOL"},"content":"     * Gets Food intake list.","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return food intake list","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"WeiLiangLOL"},"content":"    FoodIntakeList getFoodIntakeList();","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":145,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":146,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Adds the given user item.","lastModifiedDate":"2021-03-13"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"    void addUser(User user);","lastModifiedDate":"2021-03-13"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":150,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":151,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Checks whether user has been initialized","lastModifiedDate":"2021-03-13"},{"lineNumber":152,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":153,"author":{"gitId":"sjq-sohjunqi"},"content":"    boolean hasUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":154,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":156,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Updates the user object.","lastModifiedDate":"2021-03-13"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":158,"author":{"gitId":"sjq-sohjunqi"},"content":"    void editUser(User user);","lastModifiedDate":"2021-03-13"},{"lineNumber":159,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":160,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Lists the user object.","lastModifiedDate":"2021-03-13"},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":"    String listUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":164,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":165,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":166,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculate user goal","lastModifiedDate":"2021-03-14"},{"lineNumber":167,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":168,"author":{"gitId":"sjq-sohjunqi"},"content":"    PlanType getUserGoal();","lastModifiedDate":"2021-03-14"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":170,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":171,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Get user BMI","lastModifiedDate":"2021-03-14"},{"lineNumber":172,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":173,"author":{"gitId":"sjq-sohjunqi"},"content":"    double getUserBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":174,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":175,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-20"},{"lineNumber":176,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Get user object","lastModifiedDate":"2021-03-20"},{"lineNumber":177,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-20"},{"lineNumber":178,"author":{"gitId":"sjq-sohjunqi"},"content":"    User getUser();","lastModifiedDate":"2021-03-20"},{"lineNumber":179,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":187,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":207,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":208,"author":{"gitId":"jasaaanlim"},"content":"    void resetToTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":209,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":210,"author":{"gitId":"jasaaanlim"},"content":"    void resetToBlank();","lastModifiedDate":"2021-03-28"},{"lineNumber":211,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"sjq-sohjunqi":49,"ssoonwee":46,"WeiLiangLOL":17,"jasaaanlim":13,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-12"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-18"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-12"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    private final UniqueFoodList uniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"    private final FoodIntakeList foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    private final DietPlanList dietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UniqueFoodList uniqueFoodList, FoodIntakeList foodIntakeList,","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"                        DietPlanList dietPlanList, ReadOnlyUserPrefs userPrefs, User user) {","lastModifiedDate":"2021-03-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"        this.addressBook \u003d new AddressBook(addressBook, uniqueFoodList, foodIntakeList, user);","lastModifiedDate":"2021-03-29"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodList \u003d uniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"        this.dietPlanList \u003d dietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"                + \", unique food list: \" + uniqueFoodList + \", food intake list: \" + foodIntakeList","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"                + \", diet plan list: \" + dietPlanList + \" and user prefs \" + userPrefs);","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"     * Initializes a ModelManager.","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"        this(new AddressBook(), new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), new UserPrefs(), null);","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":176,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 uniqueFoodList.equals(other.uniqueFoodList)","lastModifiedDate":"2021-03-11"},{"lineNumber":177,"author":{"gitId":"jasaaanlim"},"content":"                \u0026\u0026 foodIntakeList.equals(other.foodIntakeList)","lastModifiedDate":"2021-03-14"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":181,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UniqueFoodList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":182,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":183,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":184,"author":{"gitId":"WeiLiangLOL"},"content":"    public UniqueFoodList getUniqueFoodList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":185,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":186,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":187,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food food) {","lastModifiedDate":"2021-03-08"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":191,"author":{"gitId":"ssoonwee"},"content":"        return addressBook.hasFoodItem(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":193,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":195,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodItem(Food food) {","lastModifiedDate":"2021-03-08"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"        addressBook.addFoodItem(food);","lastModifiedDate":"2021-03-08"},{"lineNumber":197,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-09"},{"lineNumber":200,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food food) {","lastModifiedDate":"2021-03-09"},{"lineNumber":201,"author":{"gitId":"ssoonwee"},"content":"        addressBook.updateFoodItem(food);","lastModifiedDate":"2021-03-09"},{"lineNumber":202,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-09"},{"lineNumber":203,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":204,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":205,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {","lastModifiedDate":"2021-03-10"},{"lineNumber":206,"author":{"gitId":"ssoonwee"},"content":"        addressBook.deleteFoodItem(index);","lastModifiedDate":"2021-03-10"},{"lineNumber":207,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":208,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":209,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":210,"author":{"gitId":"ssoonwee"},"content":"    public String listFoodItem() {","lastModifiedDate":"2021-03-10"},{"lineNumber":211,"author":{"gitId":"ssoonwee"},"content":"        return addressBook.listFoodItem();","lastModifiedDate":"2021-03-10"},{"lineNumber":212,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":213,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":214,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":215,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void addUser(User user) {","lastModifiedDate":"2021-03-13"},{"lineNumber":216,"author":{"gitId":"sjq-sohjunqi"},"content":"        addressBook.addUser(user);","lastModifiedDate":"2021-03-13"},{"lineNumber":217,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":218,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":219,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":220,"author":{"gitId":"sjq-sohjunqi"},"content":"    public boolean hasUser() {","lastModifiedDate":"2021-03-13"},{"lineNumber":221,"author":{"gitId":"sjq-sohjunqi"},"content":"        return addressBook.hasUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":222,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":223,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":224,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":225,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void editUser(User updateUser) {","lastModifiedDate":"2021-03-13"},{"lineNumber":226,"author":{"gitId":"sjq-sohjunqi"},"content":"        User oldUser \u003d addressBook.getUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":227,"author":{"gitId":"jasaaanlim"},"content":"        User newUser \u003d new User(updateUser.getBmi(), oldUser.getFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":228,"author":{"gitId":"jasaaanlim"},"content":"                oldUser.getFoodIntakeList(), updateUser.getAge(),","lastModifiedDate":"2021-03-14"},{"lineNumber":229,"author":{"gitId":"sjq-sohjunqi"},"content":"                updateUser.getGender(), updateUser.getIdealWeight());","lastModifiedDate":"2021-03-13"},{"lineNumber":230,"author":{"gitId":"sjq-sohjunqi"},"content":"        addressBook.addUser(newUser);","lastModifiedDate":"2021-03-13"},{"lineNumber":231,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":232,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":233,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":234,"author":{"gitId":"sjq-sohjunqi"},"content":"    public String listUser() {","lastModifiedDate":"2021-03-13"},{"lineNumber":235,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d addressBook.getUser();","lastModifiedDate":"2021-03-13"},{"lineNumber":236,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi bmi \u003d user.getBmi();","lastModifiedDate":"2021-03-13"},{"lineNumber":237,"author":{"gitId":"sjq-sohjunqi"},"content":"        String details \u003d \"Below is your current height and weight:\\nLast Updated: \"","lastModifiedDate":"2021-03-13"},{"lineNumber":238,"author":{"gitId":"sjq-sohjunqi"},"content":"                + user.getLastUpdated() + \"\\nWeight: \" + bmi.getWeight()","lastModifiedDate":"2021-03-13"},{"lineNumber":239,"author":{"gitId":"sjq-sohjunqi"},"content":"                + \" kg\\nHeight: \" + bmi.getHeight() + \" cm\\n BMI: \";","lastModifiedDate":"2021-03-13"},{"lineNumber":240,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":241,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (bmi.getWeight() \u003c\u003d bmi.getLowerBoundWeight()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":242,"author":{"gitId":"sjq-sohjunqi"},"content":"            details +\u003d String.format(\"%.2f\", bmi.calculateBmi()) + \" (High Risk of nutritional deficiency)\";","lastModifiedDate":"2021-03-13"},{"lineNumber":243,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (bmi.getWeight() \u003e\u003d bmi.getUpperBoundWeight()) {","lastModifiedDate":"2021-03-13"},{"lineNumber":244,"author":{"gitId":"sjq-sohjunqi"},"content":"            details +\u003d String.format(\"%.2f\", bmi.calculateBmi()) + \" (High Risk of Obesity-related diseases)\";","lastModifiedDate":"2021-03-13"},{"lineNumber":245,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-13"},{"lineNumber":246,"author":{"gitId":"sjq-sohjunqi"},"content":"            details +\u003d String.format(\"%.2f\", bmi.calculateBmi()) + \" (Healthy range)\";","lastModifiedDate":"2021-03-13"},{"lineNumber":247,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":248,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":249,"author":{"gitId":"sjq-sohjunqi"},"content":"        return details;","lastModifiedDate":"2021-03-13"},{"lineNumber":250,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":251,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":252,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-20"},{"lineNumber":253,"author":{"gitId":"sjq-sohjunqi"},"content":"    public User getUser() {","lastModifiedDate":"2021-03-20"},{"lineNumber":254,"author":{"gitId":"sjq-sohjunqi"},"content":"        return addressBook.getUser();","lastModifiedDate":"2021-03-20"},{"lineNumber":255,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-20"},{"lineNumber":256,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":257,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":258,"author":{"gitId":"sjq-sohjunqi"},"content":"    public PlanType getUserGoal() {","lastModifiedDate":"2021-03-14"},{"lineNumber":259,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d addressBook.getUser();","lastModifiedDate":"2021-03-14"},{"lineNumber":260,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi bmi \u003d user.getBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":261,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":262,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (bmi.getWeight() \u003c\u003d bmi.getLowerBoundWeight()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":263,"author":{"gitId":"sjq-sohjunqi"},"content":"            return PlanType.WEIGHTGAIN;","lastModifiedDate":"2021-03-14"},{"lineNumber":264,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else if (bmi.getWeight() \u003e\u003d bmi.getUpperBoundWeight()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":265,"author":{"gitId":"sjq-sohjunqi"},"content":"            return PlanType.WEIGHTLOSS;","lastModifiedDate":"2021-03-14"},{"lineNumber":266,"author":{"gitId":"sjq-sohjunqi"},"content":"        } else {","lastModifiedDate":"2021-03-14"},{"lineNumber":267,"author":{"gitId":"sjq-sohjunqi"},"content":"            return PlanType.WEIGHTMAINTAIN;","lastModifiedDate":"2021-03-14"},{"lineNumber":268,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":269,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":270,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":271,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":272,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":273,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getUserBmi() {","lastModifiedDate":"2021-03-14"},{"lineNumber":274,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d addressBook.getUser();","lastModifiedDate":"2021-03-14"},{"lineNumber":275,"author":{"gitId":"sjq-sohjunqi"},"content":"        Bmi bmi \u003d user.getBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":276,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":277,"author":{"gitId":"sjq-sohjunqi"},"content":"        return bmi.getBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":278,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":279,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":280,"author":{"gitId":"ssoonwee"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodIntakeList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-12"},{"lineNumber":281,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":282,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":283,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodIntake(LocalDate date, Food food) {","lastModifiedDate":"2021-03-12"},{"lineNumber":284,"author":{"gitId":"ssoonwee"},"content":"        addressBook.addFoodIntake(date, food);","lastModifiedDate":"2021-03-12"},{"lineNumber":285,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":286,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":287,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-18"},{"lineNumber":288,"author":{"gitId":"jasaaanlim"},"content":"    public void updateFoodIntake(int index, FoodIntake foodIntake) {","lastModifiedDate":"2021-03-18"},{"lineNumber":289,"author":{"gitId":"jasaaanlim"},"content":"        addressBook.updateFoodIntake(index, foodIntake);","lastModifiedDate":"2021-03-18"},{"lineNumber":290,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":291,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":292,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-12"},{"lineNumber":293,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeList getFoodIntakeList() {","lastModifiedDate":"2021-03-12"},{"lineNumber":294,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":295,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":296,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":297,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DietPlanList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":298,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":299,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":300,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlanList getDietPlanList() {","lastModifiedDate":"2021-03-14"},{"lineNumber":301,"author":{"gitId":"WeiLiangLOL"},"content":"        return dietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":302,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":303,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":304,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":305,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void setActiveDiet(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":306,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d addressBook.getUser();","lastModifiedDate":"2021-03-14"},{"lineNumber":307,"author":{"gitId":"sjq-sohjunqi"},"content":"        user.setActiveDietPlan(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":308,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":309,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":310,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":311,"author":{"gitId":"sjq-sohjunqi"},"content":"    public DietPlan getActiveDiet() {","lastModifiedDate":"2021-03-14"},{"lineNumber":312,"author":{"gitId":"sjq-sohjunqi"},"content":"        User user \u003d addressBook.getUser();","lastModifiedDate":"2021-03-14"},{"lineNumber":313,"author":{"gitId":"sjq-sohjunqi"},"content":"        return user.getActiveDietPlan();","lastModifiedDate":"2021-03-14"},{"lineNumber":314,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":315,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":316,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":317,"author":{"gitId":"sjq-sohjunqi"},"content":"    public List\u003cDietPlan\u003e recommendDiets(PlanType planType) {","lastModifiedDate":"2021-03-14"},{"lineNumber":318,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cDietPlan\u003e recommendedDiets \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":319,"author":{"gitId":"sjq-sohjunqi"},"content":"        Iterator\u003cDietPlan\u003e iterator \u003d dietPlanList.iterator();","lastModifiedDate":"2021-03-14"},{"lineNumber":320,"author":{"gitId":"sjq-sohjunqi"},"content":"        while (iterator.hasNext()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":321,"author":{"gitId":"sjq-sohjunqi"},"content":"            DietPlan dietPlan \u003d iterator.next();","lastModifiedDate":"2021-03-14"},{"lineNumber":322,"author":{"gitId":"sjq-sohjunqi"},"content":"            if (dietPlan.getPlanType() \u003d\u003d planType) {","lastModifiedDate":"2021-03-14"},{"lineNumber":323,"author":{"gitId":"sjq-sohjunqi"},"content":"                recommendedDiets.add(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":324,"author":{"gitId":"sjq-sohjunqi"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":325,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":326,"author":{"gitId":"sjq-sohjunqi"},"content":"        return recommendedDiets;","lastModifiedDate":"2021-03-14"},{"lineNumber":327,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":328,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":329,"author":{"gitId":"jasaaanlim"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Reset App Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-28"},{"lineNumber":330,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":331,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":332,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the app to the dummy template data.","lastModifiedDate":"2021-03-28"},{"lineNumber":333,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":334,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":335,"author":{"gitId":"jasaaanlim"},"content":"        this.uniqueFoodList.resetToTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":336,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList.resetToTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":337,"author":{"gitId":"jasaaanlim"},"content":"        this.addressBook.resetToTemplate(uniqueFoodList, foodIntakeList);","lastModifiedDate":"2021-03-28"},{"lineNumber":338,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":339,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":340,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":341,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the app to blank state.","lastModifiedDate":"2021-03-28"},{"lineNumber":342,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":343,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToBlank() {","lastModifiedDate":"2021-03-28"},{"lineNumber":344,"author":{"gitId":"jasaaanlim"},"content":"        this.uniqueFoodList.resetToBlank();","lastModifiedDate":"2021-03-28"},{"lineNumber":345,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList.resetToBlank();","lastModifiedDate":"2021-03-28"},{"lineNumber":346,"author":{"gitId":"jasaaanlim"},"content":"        this.addressBook.resetToBlank(uniqueFoodList, foodIntakeList);","lastModifiedDate":"2021-03-28"},{"lineNumber":347,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"sjq-sohjunqi":97,"SoonKeatNeo":3,"ssoonwee":38,"WeiLiangLOL":26,"jasaaanlim":38,"-":146}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-09"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Returns a view of the food list.","lastModifiedDate":"2021-03-09"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-09"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @return food list","lastModifiedDate":"2021-03-09"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-09"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    UniqueFoodList getFoodList();","lastModifiedDate":"2021-03-09"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"ssoonwee":8,"-":17}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path uniqueFoodListFilePath \u003d Paths.get(\"data\" , \"foodlist.json\");","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"    private Path foodIntakeListFilePath \u003d Paths.get(\"data\" , \"foodintakelist.json\");","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path dietPlanListFilePath \u003d Paths.get(\"data\" , \"dietplanlist.json\");","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    private Path userFilePath \u003d Paths.get(\"data\", \"user.json\");","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getUniqueFoodListFilePath() {","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListFilePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"    public Path getFoodIntakeListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeListFilePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getDietPlanListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"        return dietPlanListFilePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"    public Path getUserFilePath() {","lastModifiedDate":"2021-03-25"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"        return userFilePath;","lastModifiedDate":"2021-03-25"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"    public void setUniqueFoodListFilePath(Path uniqueFoodListFilePath) {","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(uniqueFoodListFilePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodListFilePath \u003d uniqueFoodListFilePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":84,"author":{"gitId":"jasaaanlim"},"content":"    public void setFoodIntakeListFilePath(Path foodIntakeListFilePath) {","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(foodIntakeListFilePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeListFilePath \u003d foodIntakeListFilePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"    public void setDietPlanListFilePath(Path dietPlanListFilePath) {","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(dietPlanListFilePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"        this.dietPlanListFilePath \u003d dietPlanListFilePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"SoonKeatNeo"},"content":"    public void setUserFilePath(Path userFilePath) {","lastModifiedDate":"2021-03-25"},{"lineNumber":95,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(userFilePath);","lastModifiedDate":"2021-03-25"},{"lineNumber":96,"author":{"gitId":"SoonKeatNeo"},"content":"        this.userFilePath \u003d userFilePath;","lastModifiedDate":"2021-03-25"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-25"},{"lineNumber":98,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 uniqueFoodListFilePath.equals(o.uniqueFoodListFilePath)","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"                \u0026\u0026 foodIntakeListFilePath.equals(o.foodIntakeListFilePath)","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 dietPlanListFilePath.equals(o.dietPlanListFilePath)","lastModifiedDate":"2021-03-25"},{"lineNumber":115,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 userFilePath.equals(o.userFilePath);","lastModifiedDate":"2021-03-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"jasaaanlim"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, uniqueFoodListFilePath,","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"SoonKeatNeo"},"content":"                foodIntakeListFilePath, dietPlanListFilePath, userFilePath);","lastModifiedDate":"2021-03-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":129,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(\"\\nLocal unique food list file location : \" + uniqueFoodListFilePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"jasaaanlim"},"content":"        sb.append(\"\\nLocal data file location : \" + foodIntakeListFilePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(\"\\nLocal diet plan list file location : \" + dietPlanListFilePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"SoonKeatNeo"},"content":"        sb.append(\"\\nUser file location : \" + userFilePath);","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"SoonKeatNeo":14,"WeiLiangLOL":24,"jasaaanlim":13,"-":85}},{"path":"src/main/java/seedu/address/model/diet/DietPlan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":" * Wrapper class to contain nutritional breakdown of macronutrient consumption.","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":" * Contains a generic breakdown for the three daily meals, breakfast, lunch and dinner.","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"public class DietPlan {","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String planName;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String description;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final PlanType planType;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    private final MacroNutrientComposition macroNutrientComposition;","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructor for diet plan holding information of daily consumption.","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param planName The name of the plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param description The description of the plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietComposition The macronutrient composition.","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param planType The purpose of the diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"    public DietPlan(String planName, String description, MacroNutrientComposition dietComposition,","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"                    PlanType planType) {","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"        requireAllNonNull(planName, description, dietComposition);","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        this.planName \u003d planName;","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"        this.macroNutrientComposition \u003d dietComposition;","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.planType \u003d planType;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns a string formatted representation of the DietPlan.","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Diet plan information.","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    public String viewPlan() {","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-17"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(String.format(\"\u003d\u003d %s \u003d\u003d\", planName));","lastModifiedDate":"2021-03-17"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(String.format(\"\\n%s\", description));","lastModifiedDate":"2021-03-17"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(String.format(\"\\n(Fats: %.2f, Proteins: %.2f, Carbohydrates: %.2f)\",","lastModifiedDate":"2021-03-17"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"                macroNutrientComposition.getFats(), macroNutrientComposition.getProteins(),","lastModifiedDate":"2021-03-17"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"                macroNutrientComposition.getCarbohydrates()));","lastModifiedDate":"2021-03-17"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-17"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the name of the diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Name of diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"    public String getPlanName() {","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        return planName;","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the description of the diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Description of diet plan.","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public String getDescription() {","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        return description;","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the macronutrient composition.","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return The nutritional composition of macronutrients.","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public MacroNutrientComposition getMacroNutrientComposition() {","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        return macroNutrientComposition;","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns the purpose of the diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return The diet plan\u0027s purpose","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"    public PlanType getPlanType() {","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"        return planType;","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlan dietPlan \u003d (DietPlan) o;","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"        return planName.equals(dietPlan.planName)","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 description.equals(dietPlan.description)","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 macroNutrientComposition.equals(dietPlan.macroNutrientComposition);","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(planName, description, macroNutrientComposition);","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"        return String.format(\"%s { \\\"description\\\": \\\"%s\\\", \\\"composition\\\": %s }\",","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"                planName, description, macroNutrientComposition);","lastModifiedDate":"2021-03-10"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":110,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"sjq-sohjunqi":14,"WeiLiangLOL":97}},{"path":"src/main/java/seedu/address/model/diet/DietPlanList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Iterator;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":" * Collection of {@code DietPlan} instances.","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"public class DietPlanList implements Iterable\u003cDietPlan\u003e {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"            \"The index should only contain numbers greater than or equal to 1!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String VALIDATION_REGEX \u003d \"^[1-9](\\\\d+)?$\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    private ObservableList\u003cDietPlan\u003e planList;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructor for a list of diet plans.","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlanList() {","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"        this.planList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns an {@code ObservableList} of diet plans.","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return List of diet plans.","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    public ObservableList\u003cDietPlan\u003e getPlanList() {","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"        return planList;","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"     * Adds a diet plan to the list.","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietPlan The diet plan to be added.","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Response message.","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"    public String addDietPlan(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"        planList.add(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"        return String.format(\"Successfully added %s to the list!\", dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if a given string is a valid index.","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static boolean isValidIndex(String test) {","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"     * Retrieves diet plan at given index.","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param index The index of the diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return The diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IndexOutOfBoundsException If index out of the list.","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlan getDietPlan(int index) {","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        return planList.get(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns true if diet plan exists in the list.","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietPlan The diet plan.","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return {@code true} if diet plan is found.","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean hasDietPlan(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"        return planList.contains(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"     * Updates the diet plan in list, based on the given plan name.","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietPlan The diet plan to update.","lastModifiedDate":"2021-03-14"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return {@code true} if diet plan is found and updated.","lastModifiedDate":"2021-03-14"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean updateDietPlan(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"        for (int i \u003d 0; i \u003c planList.size(); i++) {","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"            DietPlan plan \u003d planList.get(i);","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"            if (plan.getPlanName().equals(dietPlan.getPlanName())) {","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"                // Override with new diet plan","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"                planList.set(i, dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"                return true;","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"WeiLiangLOL"},"content":"        return false;","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"     * Deletes diet plan from list.","lastModifiedDate":"2021-03-14"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param index The index to remove.","lastModifiedDate":"2021-03-14"},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IndexOutOfBoundsException If index is out of bounds.","lastModifiedDate":"2021-03-14"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"    public void deleteDietPlan(int index) {","lastModifiedDate":"2021-03-14"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"        planList.remove(index);","lastModifiedDate":"2021-03-14"},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"WeiLiangLOL"},"content":"    public Iterator\u003cDietPlan\u003e iterator() {","lastModifiedDate":"2021-03-14"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"        return planList.iterator();","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":114,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":115,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-14"},{"lineNumber":116,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-03-14"},{"lineNumber":117,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;","lastModifiedDate":"2021-03-14"},{"lineNumber":118,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":119,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":120,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;","lastModifiedDate":"2021-03-14"},{"lineNumber":121,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":122,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlanList dietPlans \u003d (DietPlanList) o;","lastModifiedDate":"2021-03-14"},{"lineNumber":123,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.equals(planList, dietPlans.planList);","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(planList);","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":10,"WeiLiangLOL":121}},{"path":"src/main/java/seedu/address/model/diet/MacroNutrientComposition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":" * Wrapper class containing the composition for the various macronutrients.","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"public final class MacroNutrientComposition {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double fats;","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double carbohydrates;","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double proteins;","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructor for diet composition.","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    public MacroNutrientComposition(double fats, double carbohydrates, double proteins) {","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"        checkArgument(isValidComposition(fats, carbohydrates, proteins));","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbohydrates \u003d carbohydrates;","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended fat consumption.","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Fat percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getFats() {","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return fats;","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended protein consumption.","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Protein percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getProteins() {","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        return proteins;","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended carbohydrate consumption.","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Carbohydrate percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getCarbohydrates() {","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"        return carbohydrates;","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns true if the sum of the macronutrient percentages totals to 100, and values given non-negative.","lastModifiedDate":"2021-03-10"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param fats The fat percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param carbohydrates The carbohydrate percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param proteins The protein percentage.","lastModifiedDate":"2021-03-10"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return {@code boolean} true if valid composition, false otherwise.","lastModifiedDate":"2021-03-10"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    public static boolean isValidComposition(double fats, double carbohydrates, double proteins) {","lastModifiedDate":"2021-03-10"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"        return (fats + carbohydrates + proteins \u003d\u003d 100)","lastModifiedDate":"2021-03-10"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 (fats \u003e\u003d 0 \u0026\u0026 carbohydrates \u003e\u003d 0 \u0026\u0026 proteins \u003e\u003d 0);","lastModifiedDate":"2021-03-10"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"        return String.format(\"{ \\\"proteins\\\": %.2f, \\\"fats\\\": %.2f, \\\"carbohydrates\\\": %.2f }\",","lastModifiedDate":"2021-03-10"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"                proteins, fats, carbohydrates);","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-10"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"        MacroNutrientComposition that \u003d (MacroNutrientComposition) o;","lastModifiedDate":"2021-03-10"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"        return Double.compare(that.fats, fats) \u003d\u003d 0","lastModifiedDate":"2021-03-10"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 Double.compare(that.carbohydrates, carbohydrates) \u003d\u003d 0","lastModifiedDate":"2021-03-10"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 Double.compare(that.proteins, proteins) \u003d\u003d 0;","lastModifiedDate":"2021-03-10"},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(fats, carbohydrates, proteins);","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"WeiLiangLOL":91}},{"path":"src/main/java/seedu/address/model/diet/PlanType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"public enum PlanType {","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"    WEIGHTGAIN, WEIGHTLOSS, WEIGHTMAINTAIN;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":5}},{"path":"src/main/java/seedu/address/model/food/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;","lastModifiedDate":"2021-03-03"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"public class Food {","lastModifiedDate":"2021-03-03"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final double PROTEIN_AND_CARBOS_MULTIPLIER \u003d 4; //Conversion to KCAL","lastModifiedDate":"2021-03-03"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"    public static final double FAT_MULTIPLIER \u003d 9; //Conversion to KCAL","lastModifiedDate":"2021-03-03"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_WHITESPACE_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_CHAR_REGEX \u003d \"[a-zA-Z ]*\";","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"    public static final String VALIDATION_CHAR_REGEX_IMPORT \u003d \"[a-zA-Z0-9 ]*\";","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_POSITIVE_DOUBLE_REGEX \u003d \"(\\\\d*\\\\.?\\\\d+)\";","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Food name can take any alphabets charcter and it should not be\"","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"            + \" blank.\";","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DIGIT_CONSTRAINTS \u003d \"Double value input can only be positive and at least 0.\";","lastModifiedDate":"2021-03-19"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    private String name;","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    private double fats;","lastModifiedDate":"2021-03-03"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    private double carbos;","lastModifiedDate":"2021-03-03"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    private double proteins;","lastModifiedDate":"2021-03-03"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    private double kiloCalories;","lastModifiedDate":"2021-03-03"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-03"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     * Initialises the food class.","lastModifiedDate":"2021-03-03"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-03"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     * @param name     food name","lastModifiedDate":"2021-03-03"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * @param carbos   amount of carbos","lastModifiedDate":"2021-03-03"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     * @param fats     amount of fats","lastModifiedDate":"2021-03-09"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"     * @param proteins amount of proteins","lastModifiedDate":"2021-03-03"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-03"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    public Food(String name, double carbos, double fats, double proteins) {","lastModifiedDate":"2021-03-09"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        checkArgument(isValidFoodName(name), MESSAGE_CONSTRAINTS); //Checks for all whitespaces and valid character","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        checkArgument(isValidNumber(fats, carbos, proteins), MESSAGE_DIGIT_CONSTRAINTS); //Checks for positive doubles.","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        this.name \u003d name.toLowerCase();","lastModifiedDate":"2021-03-03"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-03"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-03"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-03"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        this.kiloCalories \u003d calculateKiloCalories();","lastModifiedDate":"2021-03-03"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"     * Gets food name.","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"     * @return food name","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    public String getName() {","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.name;","lastModifiedDate":"2021-03-10"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"    public double getFats() {","lastModifiedDate":"2021-03-03"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        return this.fats;","lastModifiedDate":"2021-03-03"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"    public double getCarbos() {","lastModifiedDate":"2021-03-03"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        return this.carbos;","lastModifiedDate":"2021-03-03"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"    public double getProteins() {","lastModifiedDate":"2021-03-03"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        return this.proteins;","lastModifiedDate":"2021-03-03"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"    public double getKiloCalories() {","lastModifiedDate":"2021-03-03"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        return this.kiloCalories;","lastModifiedDate":"2021-03-03"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"     * Returns true if a given string is a valid food name.","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"    public static boolean isValidFoodName(String test) {","lastModifiedDate":"2021-03-07"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"        if (test.matches(VALIDATION_CHAR_REGEX) \u0026\u0026 test.matches(VALIDATION_WHITESPACE_REGEX)) {","lastModifiedDate":"2021-03-07"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-07"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"            return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":79,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"jasaaanlim"},"content":"     * Returns true if a given string is a valid food name.","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"jasaaanlim"},"content":"    public static boolean isValidImportFoodName(String test) {","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"jasaaanlim"},"content":"        if (test.matches(VALIDATION_CHAR_REGEX_IMPORT) \u0026\u0026 test.matches(VALIDATION_WHITESPACE_REGEX)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":84,"author":{"gitId":"jasaaanlim"},"content":"            return true;","lastModifiedDate":"2021-03-23"},{"lineNumber":85,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-23"},{"lineNumber":86,"author":{"gitId":"jasaaanlim"},"content":"            return false;","lastModifiedDate":"2021-03-23"},{"lineNumber":87,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":88,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":89,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a given number is valid and more than 0.","lastModifiedDate":"2021-03-07"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"    public static boolean isValidNumber(double fats, double carbos, double proteins) {","lastModifiedDate":"2021-03-07"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        String fatsString \u003d Double.toString(fats);","lastModifiedDate":"2021-03-07"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"        String carbosString \u003d Double.toString(carbos);","lastModifiedDate":"2021-03-07"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"        String proteinsString \u003d Double.toString(proteins);","lastModifiedDate":"2021-03-07"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"        if (fatsString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)","lastModifiedDate":"2021-03-07"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 carbosString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)","lastModifiedDate":"2021-03-07"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 proteinsString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)) {","lastModifiedDate":"2021-03-07"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-07"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"            return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of fats for this food.","lastModifiedDate":"2021-03-06"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"     * @param fats new amount of fats","lastModifiedDate":"2021-03-06"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item","lastModifiedDate":"2021-03-06"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"    public Food updateFats(double fats) {","lastModifiedDate":"2021-03-06"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-03"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();","lastModifiedDate":"2021-03-03"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-03"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of carbos for this food.","lastModifiedDate":"2021-03-06"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"     * @param carbos new carbo value","lastModifiedDate":"2021-03-06"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item","lastModifiedDate":"2021-03-06"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-06"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"    public Food updateCarbos(double carbos) {","lastModifiedDate":"2021-03-06"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-03"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();","lastModifiedDate":"2021-03-03"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-03"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-06"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of proteins for this food.","lastModifiedDate":"2021-03-06"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-06"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"     * @param proteins new protein value","lastModifiedDate":"2021-03-06"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item","lastModifiedDate":"2021-03-06"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-06"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"    public Food updateProteins(double proteins) {","lastModifiedDate":"2021-03-06"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-03"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();","lastModifiedDate":"2021-03-03"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-03"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":143,"author":{"gitId":"jasaaanlim"},"content":"    public void setName(String name) {","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"jasaaanlim"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-03"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"     * Updates kilocalories each time a nutrient value is updated.","lastModifiedDate":"2021-03-03"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-03"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"    public void updateKiloCalories() {","lastModifiedDate":"2021-03-03"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"        this.kiloCalories \u003d calculateKiloCalories();","lastModifiedDate":"2021-03-03"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-03"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"     * Calculates total kilocalories based on input fats, carbos and proteins.","lastModifiedDate":"2021-03-03"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-03"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":"     * @return total converted energy in kilocalories","lastModifiedDate":"2021-03-06"},{"lineNumber":158,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-03"},{"lineNumber":159,"author":{"gitId":"ssoonwee"},"content":"    public double calculateKiloCalories() {","lastModifiedDate":"2021-03-03"},{"lineNumber":160,"author":{"gitId":"ssoonwee"},"content":"        double convertedFats \u003d this.fats * FAT_MULTIPLIER;","lastModifiedDate":"2021-03-03"},{"lineNumber":161,"author":{"gitId":"ssoonwee"},"content":"        double convertedCarbos \u003d this.carbos * PROTEIN_AND_CARBOS_MULTIPLIER;","lastModifiedDate":"2021-03-03"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":"        double convertedProteins \u003d this.proteins * PROTEIN_AND_CARBOS_MULTIPLIER;","lastModifiedDate":"2021-03-03"},{"lineNumber":163,"author":{"gitId":"ssoonwee"},"content":"        double totalKiloCalories \u003d convertedCarbos + convertedFats + convertedProteins;","lastModifiedDate":"2021-03-03"},{"lineNumber":164,"author":{"gitId":"ssoonwee"},"content":"        return totalKiloCalories;","lastModifiedDate":"2021-03-03"},{"lineNumber":165,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-03"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"    @Override","lastModifiedDate":"2021-03-03"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"    public String toString() {","lastModifiedDate":"2021-03-03"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d this.name + \" (Carbos: \" + this.carbos + \"g, Fats: \" + this.fats + \"g, Proteins: \"","lastModifiedDate":"2021-03-20"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"                + this.proteins + \"g)\";","lastModifiedDate":"2021-03-18"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"        return result;","lastModifiedDate":"2021-03-03"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-03"},{"lineNumber":173,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-03"}],"authorContributionMap":{"sjq-sohjunqi":3,"ssoonwee":152,"jasaaanlim":18}},{"path":"src/main/java/seedu/address/model/food/FoodIntake.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.model.food;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":" * Represents a FoodIntake record.","lastModifiedDate":"2021-03-08"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"public class FoodIntake {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"    private LocalDate date;","lastModifiedDate":"2021-03-08"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"    private Food food;","lastModifiedDate":"2021-03-08"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"     * Creates a FoodIntake object representing the Food consumed at a particular date and time.","lastModifiedDate":"2021-03-08"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"     * @param date LocalDateTime of when the food was eaten","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     * @param temporaryFood The related Food object that was consumed","lastModifiedDate":"2021-03-18"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntake(LocalDate date, Food temporaryFood) {","lastModifiedDate":"2021-03-18"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(temporaryFood);","lastModifiedDate":"2021-03-25"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-08"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"        this.food \u003d new Food(temporaryFood.getName(), temporaryFood.getCarbos(), temporaryFood.getFats(),","lastModifiedDate":"2021-03-18"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"                temporaryFood.getProteins());","lastModifiedDate":"2021-03-18"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"     * Creates a FoodIntake object representing the Food consumed at a particular date and time.","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"     * Used when loading from file.","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntake(LocalDate date, String name, double carbos, double fats, double proteins) {","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"        Food food \u003d new Food(\"TEMP\", carbos, fats, proteins);","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"        food.setName(name);","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"        this.food \u003d food;","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"    public Food getFood() {","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"        return this.food;","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"    public LocalDate getDate() {","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"        return this.date;","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"    public String toString() {","lastModifiedDate":"2021-03-08"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        return this.food.toString() + \": \" + String.format(\"%.2f\", this.food.getKiloCalories()) + \" calories\";","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":5,"jasaaanlim":48}},{"path":"src/main/java/seedu/address/model/food/FoodIntakeList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.model.food;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-25"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-20"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import java.util.Collections;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.FoodIntakeComparator;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.FoodIntakeQueryProcessor;","lastModifiedDate":"2021-03-21"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.exceptions.FoodIntakeNotFoundException;","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.util.TemplateInitializer;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":" * Represents a list of FoodIntakes starting from the specified date.","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"public class FoodIntakeList {","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    private static final String DATE_FORMAT \u003d \"d MMM yyyy\";","lastModifiedDate":"2021-03-21"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"    private static final String MATCH_DUPLICATE_COUNT_REGEX \u003d \"(.*)( [0-9]*)$\";","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    private ObservableList\u003cFoodIntake\u003e foodIntakeList;","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"     * Constructs a FoodIntakeList.","lastModifiedDate":"2021-03-18"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntakeList() {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"     * Adds a FoodIntake object to the FoodIntakeList.","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntake FoodIntake object to add to list","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"    public void addFoodIntake(FoodIntake foodIntake) {","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"        assert foodIntake !\u003d null : \"FoodIntake cannot be null\";","lastModifiedDate":"2021-03-25"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"        Food originalFood \u003d foodIntake.getFood();","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"        String originalName \u003d getOriginalFoodName(originalFood.getName());","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"        int foodIntakeItemCount \u003d getFoodIntakeItemCount(foodIntake.getDate(), originalName);","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"        if (foodIntakeItemCount !\u003d 0) {","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"            String foodNameWithCount \u003d originalName + \" \" + (foodIntakeItemCount + 1);","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"            foodIntake \u003d new FoodIntake(foodIntake.getDate(), foodNameWithCount,","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"                    originalFood.getCarbos(), originalFood.getFats(), originalFood.getProteins());","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList.add(foodIntake);","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"     * Removes a FoodIntake item by the given date and foodintake name.","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"     * @param date date of food intake","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"     * @param name name of food intake","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"    public void deleteFoodIntake(LocalDate date, String name) throws FoodIntakeNotFoundException {","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntake foodIntake;","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"        boolean found \u003d false;","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"        for (int i \u003d 0; i \u003c this.getFoodIntakeList().size(); i++) {","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"            foodIntake \u003d this.foodIntakeList.get(i);","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"            if (foodIntake.getDate().isEqual(date) \u0026\u0026 foodIntake.getFood().getName().equals(name)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"                this.foodIntakeList.remove(i);","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"                reorderDuplicateFoodNames(date, name);","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"                found \u003d true;","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"                break;","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"jasaaanlim"},"content":"        if (!found) {","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"            throw new FoodIntakeNotFoundException();","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":80,"author":{"gitId":"jasaaanlim"},"content":"     * Updates the FoodIntake object in the FoodIntakeList with another FoodIntake","lastModifiedDate":"2021-03-18"},{"lineNumber":81,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":82,"author":{"gitId":"jasaaanlim"},"content":"     * @param index      index to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":83,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntake FoodIntake object to replace","lastModifiedDate":"2021-03-18"},{"lineNumber":84,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":85,"author":{"gitId":"jasaaanlim"},"content":"    public void updateFoodIntake(int index, FoodIntake foodIntake) throws FoodIntakeNotFoundException {","lastModifiedDate":"2021-03-18"},{"lineNumber":86,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(index);","lastModifiedDate":"2021-03-25"},{"lineNumber":87,"author":{"gitId":"jasaaanlim"},"content":"        assert foodIntake !\u003d null : \"FoodIntake cannot be null\";","lastModifiedDate":"2021-03-25"},{"lineNumber":88,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList.set(index, foodIntake);","lastModifiedDate":"2021-03-18"},{"lineNumber":89,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":90,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":91,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-18"},{"lineNumber":92,"author":{"gitId":"jasaaanlim"},"content":"     * Gets the first index of a matching food intake item by date and name","lastModifiedDate":"2021-03-18"},{"lineNumber":93,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-18"},{"lineNumber":94,"author":{"gitId":"jasaaanlim"},"content":"     * @return index of FoodIntake","lastModifiedDate":"2021-03-18"},{"lineNumber":95,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-18"},{"lineNumber":96,"author":{"gitId":"jasaaanlim"},"content":"    public int findFoodIntake(LocalDate date, String name) {","lastModifiedDate":"2021-03-18"},{"lineNumber":97,"author":{"gitId":"jasaaanlim"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-18"},{"lineNumber":98,"author":{"gitId":"jasaaanlim"},"content":"            if (foodIntakeList.get(i).getDate().isEqual(date)","lastModifiedDate":"2021-03-18"},{"lineNumber":99,"author":{"gitId":"jasaaanlim"},"content":"                    \u0026\u0026 foodIntakeList.get(i).getFood().getName().equals(name)) {","lastModifiedDate":"2021-03-18"},{"lineNumber":100,"author":{"gitId":"jasaaanlim"},"content":"                return i;","lastModifiedDate":"2021-03-18"},{"lineNumber":101,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-18"},{"lineNumber":102,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-18"},{"lineNumber":103,"author":{"gitId":"jasaaanlim"},"content":"        return -1;","lastModifiedDate":"2021-03-18"},{"lineNumber":104,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-18"},{"lineNumber":105,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-18"},{"lineNumber":106,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":107,"author":{"gitId":"jasaaanlim"},"content":"     * Gets the number of FoodIntakes with the matching date and name.","lastModifiedDate":"2021-03-23"},{"lineNumber":108,"author":{"gitId":"jasaaanlim"},"content":"     * @param date date to match for","lastModifiedDate":"2021-03-23"},{"lineNumber":109,"author":{"gitId":"jasaaanlim"},"content":"     * @param name name to match for","lastModifiedDate":"2021-03-23"},{"lineNumber":110,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":111,"author":{"gitId":"jasaaanlim"},"content":"     * @return count of matching FoodIntakes","lastModifiedDate":"2021-03-23"},{"lineNumber":112,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"    public int getFoodIntakeItemCount(LocalDate date, String name) {","lastModifiedDate":"2021-03-23"},{"lineNumber":114,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":115,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":116,"author":{"gitId":"jasaaanlim"},"content":"        int count \u003d 0;","lastModifiedDate":"2021-03-23"},{"lineNumber":117,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntake foodIntake;","lastModifiedDate":"2021-03-23"},{"lineNumber":118,"author":{"gitId":"jasaaanlim"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-23"},{"lineNumber":119,"author":{"gitId":"jasaaanlim"},"content":"            foodIntake \u003d foodIntakeList.get(i);","lastModifiedDate":"2021-03-23"},{"lineNumber":120,"author":{"gitId":"jasaaanlim"},"content":"            if (foodIntake.getDate().isEqual(date)","lastModifiedDate":"2021-03-23"},{"lineNumber":121,"author":{"gitId":"jasaaanlim"},"content":"                    \u0026\u0026 getOriginalFoodName(foodIntake.getFood().getName()).equals(name)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":122,"author":{"gitId":"jasaaanlim"},"content":"                count++;","lastModifiedDate":"2021-03-23"},{"lineNumber":123,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":124,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":125,"author":{"gitId":"jasaaanlim"},"content":"        return count;","lastModifiedDate":"2021-03-23"},{"lineNumber":126,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":127,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":128,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":129,"author":{"gitId":"jasaaanlim"},"content":"     * Gets the raw food name without the duplicate count.","lastModifiedDate":"2021-03-23"},{"lineNumber":130,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":131,"author":{"gitId":"jasaaanlim"},"content":"    public String getOriginalFoodName(String name) {","lastModifiedDate":"2021-03-23"},{"lineNumber":132,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"jasaaanlim"},"content":"        Pattern pattern \u003d Pattern.compile(MATCH_DUPLICATE_COUNT_REGEX);","lastModifiedDate":"2021-03-23"},{"lineNumber":134,"author":{"gitId":"jasaaanlim"},"content":"        Matcher matcher \u003d pattern.matcher(name);","lastModifiedDate":"2021-03-23"},{"lineNumber":135,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":136,"author":{"gitId":"jasaaanlim"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":137,"author":{"gitId":"jasaaanlim"},"content":"            return name;","lastModifiedDate":"2021-03-23"},{"lineNumber":138,"author":{"gitId":"jasaaanlim"},"content":"        } else {","lastModifiedDate":"2021-03-23"},{"lineNumber":139,"author":{"gitId":"jasaaanlim"},"content":"            return matcher.group(1);","lastModifiedDate":"2021-03-23"},{"lineNumber":140,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":141,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":142,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":143,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":144,"author":{"gitId":"jasaaanlim"},"content":"     * Reorders duplicate food name counts for the given date and food name.","lastModifiedDate":"2021-03-23"},{"lineNumber":145,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":146,"author":{"gitId":"jasaaanlim"},"content":"    public void reorderDuplicateFoodNames(LocalDate date, String name) {","lastModifiedDate":"2021-03-23"},{"lineNumber":147,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":148,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-25"},{"lineNumber":149,"author":{"gitId":"jasaaanlim"},"content":"        String originalFoodName \u003d getOriginalFoodName(name);","lastModifiedDate":"2021-03-23"},{"lineNumber":150,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntake foodIntake;","lastModifiedDate":"2021-03-23"},{"lineNumber":151,"author":{"gitId":"jasaaanlim"},"content":"        int count \u003d 1;","lastModifiedDate":"2021-03-23"},{"lineNumber":152,"author":{"gitId":"jasaaanlim"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-23"},{"lineNumber":153,"author":{"gitId":"jasaaanlim"},"content":"            foodIntake \u003d foodIntakeList.get(i);","lastModifiedDate":"2021-03-23"},{"lineNumber":154,"author":{"gitId":"jasaaanlim"},"content":"            if (foodIntake.getDate().isEqual(date)","lastModifiedDate":"2021-03-23"},{"lineNumber":155,"author":{"gitId":"jasaaanlim"},"content":"                    \u0026\u0026 getOriginalFoodName(foodIntake.getFood().getName()).equals(originalFoodName)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":156,"author":{"gitId":"jasaaanlim"},"content":"                if (count \u003d\u003d 1) {","lastModifiedDate":"2021-03-23"},{"lineNumber":157,"author":{"gitId":"jasaaanlim"},"content":"                    foodIntake.getFood().setName(originalFoodName);","lastModifiedDate":"2021-03-23"},{"lineNumber":158,"author":{"gitId":"jasaaanlim"},"content":"                } else {","lastModifiedDate":"2021-03-23"},{"lineNumber":159,"author":{"gitId":"jasaaanlim"},"content":"                    foodIntake.getFood().setName(originalFoodName + \" \" + count);","lastModifiedDate":"2021-03-23"},{"lineNumber":160,"author":{"gitId":"jasaaanlim"},"content":"                }","lastModifiedDate":"2021-03-23"},{"lineNumber":161,"author":{"gitId":"jasaaanlim"},"content":"                count++;","lastModifiedDate":"2021-03-23"},{"lineNumber":162,"author":{"gitId":"jasaaanlim"},"content":"            }","lastModifiedDate":"2021-03-23"},{"lineNumber":163,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":164,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":165,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"     * Gets all FoodIntake object from the FoodIntakeList.","lastModifiedDate":"2021-03-11"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"     * @return all FoodIntake object in the list","lastModifiedDate":"2021-03-11"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"    public ObservableList\u003cFoodIntake\u003e getFoodIntakeList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"        Collections.sort(this.foodIntakeList, new FoodIntakeComparator());","lastModifiedDate":"2021-03-11"},{"lineNumber":173,"author":{"gitId":"jasaaanlim"},"content":"        return this.foodIntakeList;","lastModifiedDate":"2021-03-08"},{"lineNumber":174,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-21"},{"lineNumber":177,"author":{"gitId":"ssoonwee"},"content":"     * Gets all FoodIntake object from the FoodIntakeList and outputs them in String format. (DELETE IF UNUSED)","lastModifiedDate":"2021-03-21"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-21"},{"lineNumber":179,"author":{"gitId":"ssoonwee"},"content":"     * @return all FoodIntake items that are created in String output","lastModifiedDate":"2021-03-21"},{"lineNumber":180,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-21"},{"lineNumber":181,"author":{"gitId":"ssoonwee"},"content":"    public String getAllFoodIntakeList() {","lastModifiedDate":"2021-03-21"},{"lineNumber":182,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-21"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":"        ObservableList\u003cFoodIntake\u003e sortedFoodIntakeList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-21"},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":"        sortedFoodIntakeList \u003d getFoodIntakeList();","lastModifiedDate":"2021-03-21"},{"lineNumber":185,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeQueryProcessor foodIntakeQueryProcessor \u003d new FoodIntakeQueryProcessor(sortedFoodIntakeList);","lastModifiedDate":"2021-03-21"},{"lineNumber":186,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":187,"author":{"gitId":"ssoonwee"},"content":"        LocalDate startDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"        LocalDate endDate;","lastModifiedDate":"2021-03-21"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"        if (sortedFoodIntakeList.size() \u003e 0) {","lastModifiedDate":"2021-03-21"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"            startDate \u003d sortedFoodIntakeList.get(0).getDate();","lastModifiedDate":"2021-03-21"},{"lineNumber":191,"author":{"gitId":"ssoonwee"},"content":"            endDate \u003d sortedFoodIntakeList.get(sortedFoodIntakeList.size() - 1).getDate();","lastModifiedDate":"2021-03-21"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"            if (sortedFoodIntakeList.size() \u003d\u003d 1) {","lastModifiedDate":"2021-03-21"},{"lineNumber":193,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"Summary Food Intake for the Day (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"                        + startDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \"):\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":195,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(foodIntakeQueryProcessor.generateDayQuery());","lastModifiedDate":"2021-03-21"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"            } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":197,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(\"Summary Food Intake from (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"                        + startDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \") to (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"                        + endDate.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \"):\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":200,"author":{"gitId":"ssoonwee"},"content":"                stringBuilder.append(foodIntakeQueryProcessor.generateRangeOfDaysQuery());","lastModifiedDate":"2021-03-21"},{"lineNumber":201,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":202,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":203,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(\"No record found during this date.\");","lastModifiedDate":"2021-03-21"},{"lineNumber":204,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":205,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-21"},{"lineNumber":206,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-21"},{"lineNumber":207,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":208,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":209,"author":{"gitId":"ssoonwee"},"content":"     * Gets all FoodIntake object based on the date provided.","lastModifiedDate":"2021-03-11"},{"lineNumber":210,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":211,"author":{"gitId":"ssoonwee"},"content":"     * @param date filter date","lastModifiedDate":"2021-03-11"},{"lineNumber":212,"author":{"gitId":"ssoonwee"},"content":"     * @return all FoodIntake object that are created for that date in String output","lastModifiedDate":"2021-03-12"},{"lineNumber":213,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":214,"author":{"gitId":"ssoonwee"},"content":"    public String getFoodIntakeListByDate(LocalDate date) {","lastModifiedDate":"2021-03-12"},{"lineNumber":215,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(date);","lastModifiedDate":"2021-03-25"},{"lineNumber":216,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-12"},{"lineNumber":217,"author":{"gitId":"ssoonwee"},"content":"        Collections.sort(this.foodIntakeList, new FoodIntakeComparator());","lastModifiedDate":"2021-03-11"},{"lineNumber":218,"author":{"gitId":"ssoonwee"},"content":"        stringBuilder.append(\"Summary Food Intake for the Day (\"","lastModifiedDate":"2021-03-20"},{"lineNumber":219,"author":{"gitId":"ssoonwee"},"content":"                + date.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \"):\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":220,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-20"},{"lineNumber":221,"author":{"gitId":"ssoonwee"},"content":"        ObservableList\u003cFoodIntake\u003e filterFoodIntakeList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-21"},{"lineNumber":222,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":223,"author":{"gitId":"ssoonwee"},"content":"            if (foodIntakeList.get(i).getDate().isEqual(date)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":224,"author":{"gitId":"ssoonwee"},"content":"                filterFoodIntakeList.add(foodIntakeList.get(i));","lastModifiedDate":"2021-03-21"},{"lineNumber":225,"author":{"gitId":"ssoonwee"},"content":"            } else if (foodIntakeList.get(i).getDate().isAfter(date)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":226,"author":{"gitId":"ssoonwee"},"content":"                break;","lastModifiedDate":"2021-03-11"},{"lineNumber":227,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":228,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":229,"author":{"gitId":"ssoonwee"},"content":"        if (filterFoodIntakeList.size() \u003e 0) {","lastModifiedDate":"2021-03-21"},{"lineNumber":230,"author":{"gitId":"ssoonwee"},"content":"            FoodIntakeQueryProcessor foodIntakeQueryProcessor \u003d new FoodIntakeQueryProcessor(filterFoodIntakeList);","lastModifiedDate":"2021-03-21"},{"lineNumber":231,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(foodIntakeQueryProcessor.generateDayQuery());","lastModifiedDate":"2021-03-21"},{"lineNumber":232,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":233,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(\"No record found during this date.\");","lastModifiedDate":"2021-03-12"},{"lineNumber":234,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":235,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-12"},{"lineNumber":236,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":237,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":238,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":239,"author":{"gitId":"ssoonwee"},"content":"     * Gets all FoodIntake object based on the date range and process them.","lastModifiedDate":"2021-03-21"},{"lineNumber":240,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":241,"author":{"gitId":"ssoonwee"},"content":"     * @param from start date","lastModifiedDate":"2021-03-11"},{"lineNumber":242,"author":{"gitId":"ssoonwee"},"content":"     * @param to   end date","lastModifiedDate":"2021-03-11"},{"lineNumber":243,"author":{"gitId":"ssoonwee"},"content":"     * @return all FoodIntake object that lies within the date range in String output","lastModifiedDate":"2021-03-12"},{"lineNumber":244,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":245,"author":{"gitId":"ssoonwee"},"content":"    public String getFoodIntakeListByDateRange(LocalDate from, LocalDate to) {","lastModifiedDate":"2021-03-12"},{"lineNumber":246,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(from);","lastModifiedDate":"2021-03-25"},{"lineNumber":247,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(to);","lastModifiedDate":"2021-03-25"},{"lineNumber":248,"author":{"gitId":"ssoonwee"},"content":"        Collections.sort(this.foodIntakeList, new FoodIntakeComparator());","lastModifiedDate":"2021-03-11"},{"lineNumber":249,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-12"},{"lineNumber":250,"author":{"gitId":"ssoonwee"},"content":"        stringBuilder.append(\"Summary Food Intake from (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":251,"author":{"gitId":"ssoonwee"},"content":"                + from.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \") to (\"","lastModifiedDate":"2021-03-21"},{"lineNumber":252,"author":{"gitId":"ssoonwee"},"content":"                + to.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \"):\\n\");","lastModifiedDate":"2021-03-21"},{"lineNumber":253,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":254,"author":{"gitId":"ssoonwee"},"content":"        ObservableList\u003cFoodIntake\u003e filterFoodIntakeList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-21"},{"lineNumber":255,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":256,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c this.foodIntakeList.size(); i++) {","lastModifiedDate":"2021-03-11"},{"lineNumber":257,"author":{"gitId":"ssoonwee"},"content":"            if ((foodIntakeList.get(i).getDate().isEqual(from) || foodIntakeList.get(i).getDate().isEqual(to))","lastModifiedDate":"2021-03-21"},{"lineNumber":258,"author":{"gitId":"ssoonwee"},"content":"                    || (foodIntakeList.get(i).getDate().isAfter(from)","lastModifiedDate":"2021-03-21"},{"lineNumber":259,"author":{"gitId":"ssoonwee"},"content":"                    \u0026\u0026 foodIntakeList.get(i).getDate().isBefore(to))) {","lastModifiedDate":"2021-03-21"},{"lineNumber":260,"author":{"gitId":"ssoonwee"},"content":"                filterFoodIntakeList.add(foodIntakeList.get(i));","lastModifiedDate":"2021-03-21"},{"lineNumber":261,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-21"},{"lineNumber":262,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-21"},{"lineNumber":263,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":264,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeQueryProcessor foodIntakeQueryProcessor \u003d new FoodIntakeQueryProcessor(filterFoodIntakeList);","lastModifiedDate":"2021-03-21"},{"lineNumber":265,"author":{"gitId":"ssoonwee"},"content":"        if (filterFoodIntakeList.size() \u003e 0) {","lastModifiedDate":"2021-03-21"},{"lineNumber":266,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(foodIntakeQueryProcessor.generateRangeOfDaysQuery());","lastModifiedDate":"2021-03-21"},{"lineNumber":267,"author":{"gitId":"ssoonwee"},"content":"        } else {","lastModifiedDate":"2021-03-21"},{"lineNumber":268,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(\"No record found during this period.\");","lastModifiedDate":"2021-03-21"},{"lineNumber":269,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":270,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-21"},{"lineNumber":271,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-12"},{"lineNumber":272,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":273,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":274,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":275,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current foodIntakeList to a new empty list.","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":277,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":278,"author":{"gitId":"jasaaanlim"},"content":"        TemplateInitializer templateInitializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":279,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d templateInitializer.getFoodListIntakeTemplate().getFoodIntakeList();","lastModifiedDate":"2021-03-28"},{"lineNumber":280,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":281,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":282,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":283,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current foodIntakeList to the default sample template content.","lastModifiedDate":"2021-03-28"},{"lineNumber":284,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":285,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToBlank() {","lastModifiedDate":"2021-03-28"},{"lineNumber":286,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-28"},{"lineNumber":287,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":288,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":289,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":290,"author":{"gitId":"jasaaanlim"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-14"},{"lineNumber":291,"author":{"gitId":"jasaaanlim"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-03-14"},{"lineNumber":292,"author":{"gitId":"jasaaanlim"},"content":"            return true;","lastModifiedDate":"2021-03-14"},{"lineNumber":293,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":294,"author":{"gitId":"jasaaanlim"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":295,"author":{"gitId":"jasaaanlim"},"content":"            return false;","lastModifiedDate":"2021-03-14"},{"lineNumber":296,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":297,"author":{"gitId":"jasaaanlim"},"content":"        FoodIntakeList other \u003d (FoodIntakeList) o;","lastModifiedDate":"2021-03-14"},{"lineNumber":298,"author":{"gitId":"jasaaanlim"},"content":"        return Objects.equals(foodIntakeList, other.foodIntakeList);","lastModifiedDate":"2021-03-14"},{"lineNumber":299,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":300,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":301,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":302,"author":{"gitId":"jasaaanlim"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-14"},{"lineNumber":303,"author":{"gitId":"jasaaanlim"},"content":"        return Objects.hash(foodIntakeList);","lastModifiedDate":"2021-03-14"},{"lineNumber":304,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":305,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":118,"jasaaanlim":187}},{"path":"src/main/java/seedu/address/model/food/UniqueFoodList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.exceptions.FoodItemNotFoundException;","lastModifiedDate":"2021-03-08"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.util.TemplateInitializer;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"public class UniqueFoodList {","lastModifiedDate":"2021-03-08"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"    private ObservableList\u003cFood\u003e foodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList() {","lastModifiedDate":"2021-03-08"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"        foodList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Views food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @return food list","lastModifiedDate":"2021-03-08"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"    public ObservableList\u003cFood\u003e getFoodList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"        return this.foodList;","lastModifiedDate":"2021-03-08"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * Adds a food item into the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem food item","lastModifiedDate":"2021-03-08"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"     * @return success message","lastModifiedDate":"2021-03-08"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    public String addFoodItem(Food foodItem) {","lastModifiedDate":"2021-03-08"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        this.foodList.add(foodItem);","lastModifiedDate":"2021-03-08"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d \"Success adding \" + foodItem.getName() + \" to food list.\";","lastModifiedDate":"2021-03-08"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        return result;","lastModifiedDate":"2021-03-08"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"     * Updates the relevant info of the food into the food list.","lastModifiedDate":"2021-03-08"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-08"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem updated food item","lastModifiedDate":"2021-03-08"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food foodItem) {","lastModifiedDate":"2021-03-09"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {","lastModifiedDate":"2021-03-08"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(foodItem.getName())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"                food.updateCarbos(foodItem.getCarbos());","lastModifiedDate":"2021-03-08"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"                food.updateFats(foodItem.getFats());","lastModifiedDate":"2021-03-08"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"                food.updateProteins(foodItem.getProteins());","lastModifiedDate":"2021-03-08"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"                return;","lastModifiedDate":"2021-03-09"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        throw new FoodItemNotFoundException();","lastModifiedDate":"2021-03-08"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-08"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     * Checks if the food list contains a particular food item.","lastModifiedDate":"2021-03-08"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem food item","lastModifiedDate":"2021-03-08"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"     * @return true or false on whether a match is found","lastModifiedDate":"2021-03-08"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-08"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food foodItem) {","lastModifiedDate":"2021-03-08"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {","lastModifiedDate":"2021-03-08"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(foodItem.getName())) {","lastModifiedDate":"2021-03-08"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"                return true;","lastModifiedDate":"2021-03-08"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-08"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-08"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"        return false;","lastModifiedDate":"2021-03-08"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-12"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"     * Checks if the food list contains a particular food item.","lastModifiedDate":"2021-03-12"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-12"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     * @param foodName food name","lastModifiedDate":"2021-03-12"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"     * @return positive index if found, otherwise return -1","lastModifiedDate":"2021-03-12"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-12"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    public int getFoodItemIndex(String foodName) {","lastModifiedDate":"2021-03-12"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c this.foodList.size(); i++) {","lastModifiedDate":"2021-03-12"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"            if (this.foodList.get(i).getName().equals(foodName)) {","lastModifiedDate":"2021-03-12"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"                return i;","lastModifiedDate":"2021-03-12"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-12"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-12"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        return -1;","lastModifiedDate":"2021-03-12"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-12"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-12"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"     * Deletes a food item from the food list based on the food name.","lastModifiedDate":"2021-03-10"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"     * @param index food item index","lastModifiedDate":"2021-03-10"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {","lastModifiedDate":"2021-03-10"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"        this.foodList.remove(index);","lastModifiedDate":"2021-03-10"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items in the food list.","lastModifiedDate":"2021-03-10"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-10"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of all food items","lastModifiedDate":"2021-03-10"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"    public String listAllFoodItem() {","lastModifiedDate":"2021-03-10"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();","lastModifiedDate":"2021-03-10"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        int counter \u003d 1; //Used for for-loop counter indicator.","lastModifiedDate":"2021-03-10"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {","lastModifiedDate":"2021-03-10"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(counter + \". \" + food.toString() + \"\\n\");","lastModifiedDate":"2021-03-10"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"            counter++;","lastModifiedDate":"2021-03-10"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();","lastModifiedDate":"2021-03-10"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current foodList to the default sample template content.","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"        TemplateInitializer templateInitializer \u003d new TemplateInitializer();","lastModifiedDate":"2021-03-28"},{"lineNumber":114,"author":{"gitId":"jasaaanlim"},"content":"        this.foodList \u003d templateInitializer.getUniqueFoodListTemplate().getFoodList();","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":116,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"jasaaanlim"},"content":"     * Resets the current foodList to a new empty list.","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"jasaaanlim"},"content":"    public void resetToBlank() {","lastModifiedDate":"2021-03-28"},{"lineNumber":121,"author":{"gitId":"jasaaanlim"},"content":"        this.foodList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":125,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2021-03-11"},{"lineNumber":126,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2021-03-11"},{"lineNumber":127,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;","lastModifiedDate":"2021-03-11"},{"lineNumber":128,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":129,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":130,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;","lastModifiedDate":"2021-03-11"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":132,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList that \u003d (UniqueFoodList) o;","lastModifiedDate":"2021-03-11"},{"lineNumber":133,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.equals(foodList, that.foodList);","lastModifiedDate":"2021-03-11"},{"lineNumber":134,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":135,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":136,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":137,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-11"},{"lineNumber":138,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(foodList);","lastModifiedDate":"2021-03-11"},{"lineNumber":139,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":140,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":100,"WeiLiangLOL":25,"jasaaanlim":16}},{"path":"src/main/java/seedu/address/model/food/exceptions/DuplicateFoodItemException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food.exceptions;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"public class DuplicateFoodItemException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"    public DuplicateFoodItemException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"        super(\"Operation would result in duplicate food items.\");","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":7}},{"path":"src/main/java/seedu/address/model/food/exceptions/FoodIntakeNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food.exceptions;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"public class FoodIntakeNotFoundException extends RuntimeException {","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeNotFoundException() {","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"        super(\"Food Intake stated does not exist in the list.\");","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"ssoonwee":7}},{"path":"src/main/java/seedu/address/model/food/exceptions/FoodItemNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food.exceptions;","lastModifiedDate":"2021-03-08"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-08"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"public class FoodItemNotFoundException extends RuntimeException {","lastModifiedDate":"2021-03-08"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"    public FoodItemNotFoundException() {","lastModifiedDate":"2021-03-08"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"        super(\"Food item does not exist in the list.\");","lastModifiedDate":"2021-03-08"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-08"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-08"}],"authorContributionMap":{"ssoonwee":7}},{"path":"src/main/java/seedu/address/model/user/Age.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s age.","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"public class Age {","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"            \"Ages should only contain numbers, and it should fall between 1 and 100!\";","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String VALIDATION_REGEX \u003d \"^[1-9][0-9]?$|^100$\";","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    public final int age;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"     * Initializes the age class.","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param age Age to be input","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    public Age(int age) {","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    public Integer getAge() {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.age;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if a given string is a valid age.","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static boolean isValidAge(String test) {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-10"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        return String.valueOf(this.age);","lastModifiedDate":"2021-03-10"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-10"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-10"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-10"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;","lastModifiedDate":"2021-03-10"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof Age)) {","lastModifiedDate":"2021-03-10"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;","lastModifiedDate":"2021-03-10"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-10"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"        Age otherAge \u003d (Age) other;","lastModifiedDate":"2021-03-10"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherAge.getAge().equals(getAge());","lastModifiedDate":"2021-03-10"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"SoonKeatNeo":39,"sjq-sohjunqi":8}},{"path":"src/main/java/seedu/address/model/user/Bmi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s Bmi.","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"public class Bmi {","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"            \"Weight should be in kg and Height should be in cm.\\nBoth should be greater than 1\"","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"                    + \" and may include a decimal.\";","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    private static final double HEALTHY_BMI_LOWER_BOUND \u003d 18.5;","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    private static final double HEALTHY_BMI_UPPER_BOUND \u003d 22.9;","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String VALIDATION_REGEX \u003d \"^[1-9](\\\\d+)?$|^[1-9](\\\\d+)?.(\\\\d+)$\";","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    // Identity fields","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    private double weight;","lastModifiedDate":"2021-03-29"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    private double height;","lastModifiedDate":"2021-03-29"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    // Data fields","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    private double bmi;","lastModifiedDate":"2021-03-29"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    public Bmi() {","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"        super();","lastModifiedDate":"2021-03-29"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     * Creates the Bmi object representing the user.","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param weight Current input weight","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param height Current input height","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    public Bmi(double weight, double height) {","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        this.weight \u003d weight;","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        this.height \u003d height;","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        this.bmi \u003d calculateBmi();","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the Double value representing the Bmi.","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing the Bmi","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double calculateBmi() {","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.weight / Math.pow((this.height * 0.01), 2);","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the lower bound of weight for the healthy Bmi.","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing lower bound of healthy weight","lastModifiedDate":"2021-03-07"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getLowerBoundWeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"        return HEALTHY_BMI_LOWER_BOUND * Math.pow((this.height * 0.01), 2);","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the upper bound of weight for the healthy Bmi.","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing upper bound of healthy weight","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getUpperBoundWeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"        return HEALTHY_BMI_UPPER_BOUND * Math.pow((this.height * 0.01), 2);","lastModifiedDate":"2021-03-13"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"    public Double getHeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.height;","lastModifiedDate":"2021-03-07"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":67,"author":{"gitId":"sjq-sohjunqi"},"content":"    public Double getWeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.weight;","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":71,"author":{"gitId":"sjq-sohjunqi"},"content":"    public Double getBmi() {","lastModifiedDate":"2021-03-13"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.bmi;","lastModifiedDate":"2021-03-07"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":75,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if a given string is a valid weight or height.","lastModifiedDate":"2021-03-13"},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static boolean isValidWeightOrHeight(String test) {","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-07"},{"lineNumber":84,"author":{"gitId":"SoonKeatNeo"},"content":"        return String.valueOf(this.bmi);","lastModifiedDate":"2021-03-07"},{"lineNumber":85,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":86,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":87,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":88,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-07"},{"lineNumber":89,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-07"},{"lineNumber":90,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":91,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":92,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":93,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof Bmi)) {","lastModifiedDate":"2021-03-07"},{"lineNumber":94,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":95,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":96,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"        Bmi otherBmi \u003d (Bmi) other;","lastModifiedDate":"2021-03-07"},{"lineNumber":98,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherBmi.getWeight().equals(getWeight())","lastModifiedDate":"2021-03-07"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherBmi.getHeight().equals(getHeight())","lastModifiedDate":"2021-03-07"},{"lineNumber":100,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherBmi.getBmi().equals(getBmi());","lastModifiedDate":"2021-03-07"},{"lineNumber":101,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":102,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":103,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":83,"sjq-sohjunqi":20}},{"path":"src/main/java/seedu/address/model/user/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":" * Represents a User\u0027s gender.","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"public class Gender {","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"            \"Gender should be either M (for Male) or F (for female)!\";","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String VALIDATION_REGEX \u003d \"^M$|^F$\";","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    public final String gender;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Initializes the gender class.","lastModifiedDate":"2021-03-13"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param gender Gender to be input","lastModifiedDate":"2021-03-13"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"    public Gender(String gender) {","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    public String getGender() {","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if a given string is a valid gender.","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static boolean isValidGender(String test) {","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!(other instanceof Gender)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        Gender otherGender \u003d (Gender) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        return otherGender.getGender().equals(getGender());","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":47,"SoonKeatNeo":1}},{"path":"src/main/java/seedu/address/model/user/IdealWeight.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-13"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"/**","lastModifiedDate":"2021-03-13"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":" * Represents a User\u0027s ideal weight.","lastModifiedDate":"2021-03-13"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":" */","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"public class IdealWeight {","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-13"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"            \"Ideal Weight should be in kilograms, greater than 1 and may include a decimal!\";","lastModifiedDate":"2021-03-13"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static final String VALIDATION_REGEX \u003d \"^[1-9](\\\\d+)?$|^[1-9](\\\\d+)?.(\\\\d+)$\";","lastModifiedDate":"2021-03-13"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    private double idealWeight;","lastModifiedDate":"2021-03-29"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"    public IdealWeight() {","lastModifiedDate":"2021-03-29"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"        super();","lastModifiedDate":"2021-03-29"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Initializes the ideal weight class.","lastModifiedDate":"2021-03-13"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param idealWeight Ideal weight to be input","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public IdealWeight(double idealWeight) {","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.idealWeight \u003d idealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"    public double getIdealWeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.idealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Returns true if a given string is a valid ideal weight.","lastModifiedDate":"2021-03-13"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static boolean isValidIdealWeight(String test) {","lastModifiedDate":"2021-03-13"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-13"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"    public String toString() {","lastModifiedDate":"2021-03-13"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        return String.valueOf(this.idealWeight);","lastModifiedDate":"2021-03-13"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override","lastModifiedDate":"2021-03-13"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"            return true;","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        if (!(other instanceof IdealWeight)) {","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"            return false;","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        }","lastModifiedDate":"2021-03-13"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"        IdealWeight otherIdealWeight \u003d (IdealWeight) other;","lastModifiedDate":"2021-03-13"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        return otherIdealWeight.getIdealWeight() \u003d\u003d getIdealWeight();","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"}","lastModifiedDate":"2021-03-13"}],"authorContributionMap":{"sjq-sohjunqi":48,"SoonKeatNeo":5}},{"path":"src/main/java/seedu/address/model/user/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s name in DieTrack.","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"public class Name {","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    /*","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    public final String fullName;","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param name A valid name.","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    public Name(String name) {","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(name);","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        fullName \u003d name;","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {","lastModifiedDate":"2021-03-07"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"        return fullName;","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2021-03-07"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2021-03-07"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"    public int hashCode() {","lastModifiedDate":"2021-03-07"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        return fullName.hashCode();","lastModifiedDate":"2021-03-07"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":59}},{"path":"src/main/java/seedu/address/model/user/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-13"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2021-03-13"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":" * Handles the representation of the User class in DieTrack.","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"public class User {","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    // Identity fields","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    private final Age age;","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final Gender gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final IdealWeight idealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final LocalDate lastUpdated;","lastModifiedDate":"2021-03-13"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final Bmi bmi;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    // Data fields","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    private final List\u003cFood\u003e foodList;","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    private final FoodIntakeList foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"    private DietPlan activeDietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-29"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     * Dummy","lastModifiedDate":"2021-03-29"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-29"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    public User() {","lastModifiedDate":"2021-03-29"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        this.bmi \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        this.foodList \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"        this.age \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        this.gender \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        this.idealWeight \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        this.lastUpdated \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"        this.foodIntakeList \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-29"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**","lastModifiedDate":"2021-03-13"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Creates a representation of the user with the given parameters.","lastModifiedDate":"2021-03-13"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"     * All fields must not be empty.","lastModifiedDate":"2021-03-13"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param bmi Bmi object of the user","lastModifiedDate":"2021-03-13"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodList Food list of the user","lastModifiedDate":"2021-03-13"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"     */","lastModifiedDate":"2021-03-13"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"    public User(Bmi bmi, List\u003cFood\u003e foodList, FoodIntakeList foodIntakeList,","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"                Age age, Gender gender, IdealWeight idealWeight) {","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        requireAllNonNull(bmi, foodList);","lastModifiedDate":"2021-03-13"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.bmi \u003d bmi;","lastModifiedDate":"2021-03-13"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.foodList \u003d foodList;","lastModifiedDate":"2021-03-13"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-03-13"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.idealWeight \u003d idealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.lastUpdated \u003d LocalDate.now();","lastModifiedDate":"2021-03-13"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList \u003d foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.activeDietPlan \u003d null;","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"    public Bmi getBmi() {","lastModifiedDate":"2021-03-07"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.bmi;","lastModifiedDate":"2021-03-07"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"    public List\u003cFood\u003e getFoodList() {","lastModifiedDate":"2021-03-07"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        return foodList;","lastModifiedDate":"2021-03-07"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntakeList getFoodIntakeList() {","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"    public Age getAge() {","lastModifiedDate":"2021-03-10"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.age;","lastModifiedDate":"2021-03-10"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"    public Gender getGender() {","lastModifiedDate":"2021-03-13"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.gender;","lastModifiedDate":"2021-03-13"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"    public IdealWeight getIdealWeight() {","lastModifiedDate":"2021-03-13"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.idealWeight;","lastModifiedDate":"2021-03-13"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":86,"author":{"gitId":"sjq-sohjunqi"},"content":"    public DietPlan getActiveDietPlan() {","lastModifiedDate":"2021-03-14"},{"lineNumber":87,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.activeDietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":88,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":89,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":90,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void setActiveDietPlan(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":91,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.activeDietPlan \u003d dietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":92,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":93,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"sjq-sohjunqi"},"content":"    public String getLastUpdated() {","lastModifiedDate":"2021-03-13"},{"lineNumber":95,"author":{"gitId":"sjq-sohjunqi"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2021-03-13"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"        return formatter.format(this.lastUpdated);","lastModifiedDate":"2021-03-13"},{"lineNumber":97,"author":{"gitId":"sjq-sohjunqi"},"content":"    }","lastModifiedDate":"2021-03-13"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-13"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-07"},{"lineNumber":100,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns true if both users have the same identity and data fields.","lastModifiedDate":"2021-03-07"},{"lineNumber":101,"author":{"gitId":"SoonKeatNeo"},"content":"     * This defines a stronger notion of equality between two users.","lastModifiedDate":"2021-03-07"},{"lineNumber":102,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-07"},{"lineNumber":103,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-07"},{"lineNumber":104,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2021-03-07"},{"lineNumber":105,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2021-03-07"},{"lineNumber":106,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;","lastModifiedDate":"2021-03-07"},{"lineNumber":107,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":108,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":109,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof User)) {","lastModifiedDate":"2021-03-07"},{"lineNumber":110,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;","lastModifiedDate":"2021-03-07"},{"lineNumber":111,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-07"},{"lineNumber":112,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":113,"author":{"gitId":"SoonKeatNeo"},"content":"        User otherUser \u003d (User) other;","lastModifiedDate":"2021-03-07"},{"lineNumber":114,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherUser.getBmi().equals(getBmi())","lastModifiedDate":"2021-03-22"},{"lineNumber":115,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherUser.getFoodList().equals(getFoodList());","lastModifiedDate":"2021-03-07"},{"lineNumber":116,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":117,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":65,"sjq-sohjunqi":43,"jasaaanlim":9}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-24"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-24"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.MacroNutrientComposition;","lastModifiedDate":"2021-03-24"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    public static DietPlanList getSampleDietPlanList() {","lastModifiedDate":"2021-03-24"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlanList list \u003d new DietPlanList();","lastModifiedDate":"2021-03-24"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        list.getPlanList().addAll(getSampleDietPlans());","lastModifiedDate":"2021-03-24"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"        return list;","lastModifiedDate":"2021-03-24"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public static DietPlan[] getSampleDietPlans() {","lastModifiedDate":"2021-03-24"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return new DietPlan[] {","lastModifiedDate":"2021-03-24"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"            new DietPlan(\"Standard Ketogenic Diet\",","lastModifiedDate":"2021-03-24"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"            \"The Standard Ketogenic Diet is a high-fat, low-carb weight-loss diet. \"","lastModifiedDate":"2021-03-24"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"                    + \"It is designed in such a way that by reducing the intake of carbohydrates, \"","lastModifiedDate":"2021-03-24"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"                    + \"the body is forced to burn its fat reserves for fuel thereby resulting in weight-loss. \\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"                    + \"\\n\"","lastModifiedDate":"2021-03-24"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"                    + \"The Standard Ketogenic Diet is suitable for individuals suffering from Type II Diabetes where \"","lastModifiedDate":"2021-03-24"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"                    + \"excess carbohydrates would have been converted into glucose.\\n\",","lastModifiedDate":"2021-03-24"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"                new MacroNutrientComposition(70, 10, 20),","lastModifiedDate":"2021-03-24"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"                PlanType.WEIGHTLOSS),","lastModifiedDate":"2021-03-24"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"            new DietPlan(\"High-Protein Ketogenic Diet\",","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"                \"The High-Protein Ketogenic Diet is a variation of the Ketogenic Diet (high-fat, low-carb) \"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"which increases the protein intake. This variation is designed to help athletes and \"","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"bodybuilders maintain their muscle mass whilst burning fat.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"                new MacroNutrientComposition(60, 35, 5),","lastModifiedDate":"2021-03-24"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"                PlanType.WEIGHTLOSS),","lastModifiedDate":"2021-03-24"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"            new DietPlan(\"Skinny Guy BodyBuilding\",","lastModifiedDate":"2021-03-24"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"                \"The goal for bodybuilders is to increase muscle mass. Consume high-quality, nutrient-dense \"","lastModifiedDate":"2021-03-24"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"carbs when the body needs them most, around workouts. The hyperenergetic diet \"","lastModifiedDate":"2021-03-24"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"plan recommends consuming starchy food during and after workouts, and less \"","lastModifiedDate":"2021-03-24"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"starchy content on off-hours.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"                new MacroNutrientComposition(15, 55, 30),","lastModifiedDate":"2021-03-24"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"                PlanType.WEIGHTGAIN),","lastModifiedDate":"2021-03-24"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"            new DietPlan(\"Balanced Plan\",","lastModifiedDate":"2021-03-24"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"                \"The perfect ying-yang. Eat healthy food and complete the calorie goal. Eat lots of fruits \"","lastModifiedDate":"2021-03-24"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"                        + \"and vegetables, and base meals on higher fiber starchy carbohydrates.\",","lastModifiedDate":"2021-03-24"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"                new MacroNutrientComposition(30, 40, 30),","lastModifiedDate":"2021-03-24"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"                PlanType.WEIGHTMAINTAIN)","lastModifiedDate":"2021-03-24"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        };","lastModifiedDate":"2021-03-24"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-24"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"WeiLiangLOL":43,"-":60}},{"path":"src/main/java/seedu/address/model/util/TemplateInitializer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.util;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.MacroNutrientComposition;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.user.IdealWeight;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":" * Class for generating a template for first-time use.","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"public class TemplateInitializer {","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    public static final double INIT_USER_WEIGHT \u003d 70;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"    public static final double INIT_USER_HEIGHT \u003d 165;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"    public static final double INIT_USER_IDEAL_WEIGHT \u003d 60;","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    public static final int INIT_USER_AGE \u003d 24;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    public static final String INIT_USER_GENDER \u003d \"M\";","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    public static final int INIT_USER_PLAN \u003d 0;","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    private UniqueFoodList uniqueFoodListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    private FoodIntakeList foodIntakeListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    private DietPlanList dietPlanListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"     * Initialises a TemplateInitializer instance.","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"    public TemplateInitializer() {","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        this.uniqueFoodListTemplate \u003d createFoodTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        this.foodIntakeListTemplate \u003d createFoodIntakeTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        this.dietPlanListTemplate \u003d createDietPlanTemplate();","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList getUniqueFoodListTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        return this.uniqueFoodListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeList getFoodListIntakeTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        return this.foodIntakeListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    public DietPlanList getDietPlanListTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        return this.dietPlanListTemplate;","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"     * Intialises the User object with the default template values.","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"     * @return User object","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"    public User createUser(UniqueFoodList foodList, FoodIntakeList foodIntakeList) {","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"        Bmi bmi \u003d new Bmi(INIT_USER_WEIGHT, INIT_USER_HEIGHT);","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"        Gender gender \u003d new Gender(INIT_USER_GENDER);","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"        Age age \u003d new Age(INIT_USER_AGE);","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"        IdealWeight idealWeight \u003d new IdealWeight(INIT_USER_IDEAL_WEIGHT);","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"        System.out.println(\"\\n -- making freshhh user -- \\n\");","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"        User user \u003d new User(bmi, foodList.getFoodList(), foodIntakeList, age, gender, idealWeight);","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"        user.setActiveDietPlan(getDietPlanListTemplate().getDietPlan(INIT_USER_PLAN));","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"        return user;","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     * Creates a simple Food List template for first-time use.","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"     * @return UniqueFoodList template","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList createFoodTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        Food chocolate \u003d new Food(\"chocolate\", 57, 30, 7.3);","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"        Food biscuit \u003d new Food(\"biscuit\", 9.3, 3.1, 1.0);","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        Food fruitJam \u003d new Food(\"jam\", 13.77, 0.01, 0.07);","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"        UniqueFoodList foodList \u003d new UniqueFoodList();","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"        foodList.addFoodItem(chocolate);","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        foodList.addFoodItem(biscuit);","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"        foodList.addFoodItem(fruitJam);","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        return foodList;","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"     * Creates a simple Food Intake template for first-time use. FoodIntakeList is assumed to have 3 elements","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"     * because of the creation of food template happening first.","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"     * @return FoodIntakeList template","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"    public FoodIntakeList createFoodIntakeTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        assert this.uniqueFoodListTemplate.getFoodList().size() \u003d\u003d 3","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"                : \"Unique food list template is not created properly.\";","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"        FoodIntake firstFoodIntake \u003d new FoodIntake(LocalDate.now(), this.uniqueFoodListTemplate.getFoodList().get(0));","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"        FoodIntake secondFoodIntake \u003d new FoodIntake(LocalDate.now(),","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"                this.uniqueFoodListTemplate.getFoodList().get(1));","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"        FoodIntake thirdFoodIntake \u003d new FoodIntake(LocalDate.now(),","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"                this.uniqueFoodListTemplate.getFoodList().get(2));","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeList foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeList.addFoodIntake(firstFoodIntake);","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeList.addFoodIntake(secondFoodIntake);","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"        foodIntakeList.addFoodIntake(thirdFoodIntake);","lastModifiedDate":"2021-03-28"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"        return foodIntakeList;","lastModifiedDate":"2021-03-28"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"     * Creates Diet Plan templates in Diet Plan List for first-time use.","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"     * @return DietPlanList template","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"    public DietPlanList createDietPlanTemplate() {","lastModifiedDate":"2021-03-28"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        DietPlan firstDietPlan \u003d new DietPlan(\"Standard Ketogenic Diet\",","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"                \"The Standard Ketogenic Diet is a high-fat, low-carb weight-loss diet. \"","lastModifiedDate":"2021-03-28"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"                + \"It is designed in such a way that by reducing the intake of carbohydrates, \"","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"                + \"the body is forced to burn its fat reserves for fuel thereby resulting in weight-loss. \\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"                + \"\\n\"","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"                + \"The Standard Ketogenic Diet is suitable for individuals suffering from Type II Diabetes where \"","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"                + \"excess carbohydrates would have been converted into glucose.\\n\",","lastModifiedDate":"2021-03-28"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"                new MacroNutrientComposition(70, 10, 20),","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"                PlanType.WEIGHTLOSS);","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"        DietPlan secondDietPlan \u003d new DietPlan(\"High-Protein Ketogenic Diet\",","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"                \"The High-Protein Ketogenic Diet is a variation of the Ketogenic Diet (high-fat, low-carb) \"","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"                + \"which increases the protein intake. This variation is designed to help athletes and \"","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"                + \"bodybuilders maintain their muscle mass whilst burning fat.\",","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"                new MacroNutrientComposition(60, 35, 5),","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"                PlanType.WEIGHTLOSS);","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"        DietPlan thirdDietPlan \u003d new DietPlan(\"Skinny Guy BodyBuilding\",","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"                \"The goal for bodybuilders is to increase muscle mass. Consume high-quality, nutrient-dense \"","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"                        + \"carbs when the body needs them most, around workouts. The hyperenergetic diet \"","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"                        + \"plan recommends consuming starchy food during and after workouts, and less \"","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"                        + \"starchy content on off-hours.\",","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"                new MacroNutrientComposition(15, 55, 30),","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"                PlanType.WEIGHTGAIN);","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"        DietPlan forthDietPlan \u003d new DietPlan(\"Balanced Plan\",","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"                \"The perfect ying-yang. Eat healthy food and complete the calorie goal. Eat lots of fruits \"","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"                        + \"and vegetables, and base meals on higher fiber starchy carbohydrates.\",","lastModifiedDate":"2021-03-28"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"                new MacroNutrientComposition(30, 40, 30),","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"                PlanType.WEIGHTMAINTAIN);","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"        DietPlanList dietPlanList \u003d new DietPlanList();","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"        dietPlanList.addDietPlan(firstDietPlan);","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"        dietPlanList.addDietPlan(secondDietPlan);","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"        dietPlanList.addDietPlan(thirdDietPlan);","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"        dietPlanList.addDietPlan(forthDietPlan);","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"        return dietPlanList;","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"ssoonwee":121,"jasaaanlim":27}},{"path":"src/main/java/seedu/address/storage/DietPlanListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":" * Represents a storage for a list of {@link DietPlan}.","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"public interface DietPlanListStorage {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    Path getDietPlanListFilePath();","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns DietPlan data as a {@link DietPlanList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cDietPlanList\u003e readDietPlanList() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #getDietPlanListFilePath()","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cDietPlanList\u003e readDietPlanList(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * Saves the given {@link DietPlanList} to the storage.","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietPlanList cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveDietPlanList(DietPlanList dietPlanList) throws IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #saveDietPlanList(DietPlanList)","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveDietPlanList(DietPlanList dietPlanList, Path filePath) throws IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"WeiLiangLOL":46}},{"path":"src/main/java/seedu/address/storage/FoodIntakeListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":" * Represents a storage for a list of {@link seedu.address.model.food.FoodIntakeList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"public interface FoodIntakeListStorage {","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    Path getFoodIntakeListFilePath();","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"     * Returns FoodIntakeList data as a {@link FoodIntakeList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    Optional\u003cFoodIntakeList\u003e readFoodIntakeList() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"     * @see #getFoodIntakeListFilePath()","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"    Optional\u003cFoodIntakeList\u003e readFoodIntakeList(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"     * Saves the given {@link FoodIntakeList} to the storage.","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntakeList cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"    void saveFoodIntakeList(FoodIntakeList foodIntakeList) throws IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"     * @see #saveFoodIntakeList(FoodIntakeList)","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"    void saveFoodIntakeList(FoodIntakeList foodIntakeList, Path filePath) throws IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"jasaaanlim":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedDietPlan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.MacroNutrientComposition;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":" * Jackson-friendly version of {@link DietPlan}.","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonAdaptedDietPlan {","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"%s\u0027s %s field is invalid!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String name;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String description;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    private final MacroNutrientComposition macroNutrientComposition;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"    private final PlanType planType;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code DietPlan} with the given details.","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedDietPlan(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"                               @JsonProperty(\"fats\") double fats, @JsonProperty(\"carbos\") double carbos,","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"                               @JsonProperty(\"proteins\") double proteins,","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"                               @JsonProperty(\"plantype\") PlanType planType) {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"        this.description \u003d description;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"        this.macroNutrientComposition \u003d new MacroNutrientComposition(fats, carbos, proteins);","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.planType \u003d planType;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code DietPlan} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedDietPlan(DietPlan dietPlan) {","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d dietPlan.getPlanName();","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"        this.description \u003d dietPlan.getDescription();","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"        this.macroNutrientComposition \u003d dietPlan.getMacroNutrientComposition();","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        this.planType \u003d dietPlan.getPlanType();","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code DietPlan} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted DietPlan.","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlan toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"                    DietPlan.class.getSimpleName(), \"name\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"        if (description \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"                    DietPlan.class.getSimpleName(), \"description\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"        return new DietPlan(name, description, macroNutrientComposition, planType);","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"sjq-sohjunqi":7,"WeiLiangLOL":59}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedFood.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":" * Jackson-friendly version of {@link Food}.","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonAdaptedFood {","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"%s\u0027s name field is missing!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"%s\u0027s name field is invalid!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String name;","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double carbos;","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"    private final double fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double proteins;","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code JsonAdaptedFood} with the given food details.","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"fats\") double fats,","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"                           @JsonProperty(\"carbos\") double carbos, @JsonProperty(\"proteins\") double proteins) {","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code Food} into this class for Jackson use.","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedFood(Food food) {","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d food.getName();","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbos \u003d food.getCarbos();","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"        this.fats \u003d food.getFats();","lastModifiedDate":"2021-03-18"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d food.getProteins();","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Food} object.","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Food.","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"    public Food toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!Food.isValidFoodName(name)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!Food.isValidNumber(fats, carbos, proteins)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"        return new Food(name, fats, carbos, proteins);","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"WeiLiangLOL":61,"jasaaanlim":3}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedFoodIntake.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":" * Jackson-friendly version of {@link FoodIntake}.","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"public class JsonAdaptedFoodIntake {","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FoodIntake\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"FoodIntake\u0027s %s field is invalid!\";","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"    private final LocalDate date;","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"    private final String name;","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"    private final double carbos;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    private final double fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"    private final double proteins;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"     * Constructs a {@code JsonAdaptedFoodIntake} with the given food intake details.","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    public JsonAdaptedFoodIntake(@JsonProperty(\"data\") LocalDate date,","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"                                 @JsonProperty(\"name\") String name,","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"                                 @JsonProperty(\"fats\") double fats,","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"                                 @JsonProperty(\"carbos\") double carbos,","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"                                 @JsonProperty(\"proteins\") double proteins) {","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"        this.name \u003d name;","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-18"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"     * Converts a given {@code Food} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"    public JsonAdaptedFoodIntake(FoodIntake foodIntake) {","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d foodIntake.getDate();","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"        this.name \u003d foodIntake.getFood().getName();","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"        this.carbos \u003d foodIntake.getFood().getCarbos();","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"        this.fats \u003d foodIntake.getFood().getFats();","lastModifiedDate":"2021-03-18"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"        this.proteins \u003d foodIntake.getFood().getProteins();","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"     * Converts this Jackson-friendly adapted foodintake object into the model\u0027s {@code FoodIntake} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Food.","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntake toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"                    FoodIntake.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"        if (!Food.isValidImportFoodName(name)) {","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"                    FoodIntake.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"        if (!Food.isValidNumber(fats, carbos, proteins)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"                    FoodIntake.class.getSimpleName()));","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"        return new FoodIntake(date, name, fats, carbos, proteins);","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"jasaaanlim":76}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedUser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.List;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.Age;","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.Bmi;","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.Gender;","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.IdealWeight;","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":" * Jackson-friendly version of {@link User}.","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"public class JsonAdaptedUser {","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User\u0027s %s field is missing!\";","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    private final String age;","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    private final String gender;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    private final IdealWeight idealWeight;","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    private final String lastUpdated;","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"    private final Bmi bmi;","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    // Data fields","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    private final List\u003cFood\u003e foodList;","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    //private final FoodIntakeList foodIntakeList;","lastModifiedDate":"2021-03-29"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    private DietPlan activeDietPlan;","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"     * Constructs a {@code JsonAdaptedUser} with the given details.","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    public JsonAdaptedUser(@JsonProperty(\"bmi\") Bmi bmi,","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"foodList\") List\u003cFood\u003e foodList,","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"age\") String age,","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"gender\") String gender,","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"idealWeight\") IdealWeight idealWeight,","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"lastUpdated\") String lastUpdated,","lastModifiedDate":"2021-03-22"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"                                 //@JsonProperty(\"foodIntakeList\") List\u003cFoodIntake\u003e foodIntakeList,","lastModifiedDate":"2021-03-29"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"                                 @JsonProperty(\"activeDietPlan\") DietPlan activeDietPlan) {","lastModifiedDate":"2021-03-22"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"        this.bmi \u003d bmi;","lastModifiedDate":"2021-03-22"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        this.foodList \u003d foodList;","lastModifiedDate":"2021-03-22"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"        this.age \u003d age;","lastModifiedDate":"2021-03-22"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"        this.gender \u003d gender;","lastModifiedDate":"2021-03-22"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"        this.idealWeight \u003d idealWeight;","lastModifiedDate":"2021-03-22"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"        this.lastUpdated \u003d lastUpdated;","lastModifiedDate":"2021-03-22"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"        //this.foodIntakeList \u003d null;","lastModifiedDate":"2021-03-29"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"        //this.foodIntakeList \u003d new FoodIntakeList(FXCollections.observableArrayList(foodIntakeList));","lastModifiedDate":"2021-03-29"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        this.activeDietPlan \u003d activeDietPlan;","lastModifiedDate":"2021-03-22"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"     * Converts a given {@code User} into this class for Jackson use.","lastModifiedDate":"2021-03-22"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"    public JsonAdaptedUser(User source) {","lastModifiedDate":"2021-03-22"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"        bmi \u003d source.getBmi();","lastModifiedDate":"2021-03-22"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"        foodList \u003d source.getFoodList();","lastModifiedDate":"2021-03-22"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"        age \u003d String.valueOf(source.getAge().age);","lastModifiedDate":"2021-03-22"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"        gender \u003d source.getGender().gender;","lastModifiedDate":"2021-03-22"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        idealWeight \u003d source.getIdealWeight();","lastModifiedDate":"2021-03-22"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"        lastUpdated \u003d source.getLastUpdated();","lastModifiedDate":"2021-03-22"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"        //foodIntakeList \u003d source.getFoodIntakeList();","lastModifiedDate":"2021-03-29"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"        activeDietPlan \u003d source.getActiveDietPlan();","lastModifiedDate":"2021-03-22"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"     * Converts this Jackson-friendly adapted User object into the model\u0027s {@code User} object.","lastModifiedDate":"2021-03-22"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-22"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted User.","lastModifiedDate":"2021-03-22"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"    public User toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-22"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"        if (age \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));","lastModifiedDate":"2021-03-22"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!Age.isValidAge(age)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new IllegalValueException(Age.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":84,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":85,"author":{"gitId":"SoonKeatNeo"},"content":"        if (bmi \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":86,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Bmi.class.getSimpleName()));","lastModifiedDate":"2021-03-22"},{"lineNumber":87,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":88,"author":{"gitId":"SoonKeatNeo"},"content":"        if (gender \u003d\u003d null) {","lastModifiedDate":"2021-03-22"},{"lineNumber":89,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));","lastModifiedDate":"2021-03-22"},{"lineNumber":90,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":91,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!Gender.isValidGender(gender)) {","lastModifiedDate":"2021-03-22"},{"lineNumber":92,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2021-03-22"},{"lineNumber":93,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-22"},{"lineNumber":94,"author":{"gitId":"SoonKeatNeo"},"content":"        User newUser \u003d new User(bmi, foodList, new FoodIntakeList(),","lastModifiedDate":"2021-03-29"},{"lineNumber":95,"author":{"gitId":"SoonKeatNeo"},"content":"                new Age(Integer.valueOf(age)), new Gender(gender), idealWeight);","lastModifiedDate":"2021-03-22"},{"lineNumber":96,"author":{"gitId":"SoonKeatNeo"},"content":"        if (activeDietPlan !\u003d null) {","lastModifiedDate":"2021-03-23"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"            newUser.setActiveDietPlan(activeDietPlan);","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"        return newUser;","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-22"},{"lineNumber":101,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":102,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"SoonKeatNeo":102}},{"path":"src/main/java/seedu/address/storage/JsonDietPlanListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":" * A class to access DietPlanList data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonDietPlanListStorage implements DietPlanListStorage {","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonDietPlanListStorage.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonDietPlanListStorage(Path filePath) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getDietPlanListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cDietPlanList\u003e readDietPlanList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"        return readDietPlanList(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #readDietPlanList()}.","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cDietPlanList\u003e readDietPlanList(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cJsonSerializableDietPlanList\u003e jsonPlanList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"                filePath, JsonSerializableDietPlanList.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!jsonPlanList.isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.of(jsonPlanList.get().toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveDietPlanList(DietPlanList dietPlanList) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        saveDietPlanList(dietPlanList, filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #saveDietPlanList(DietPlanList)}.","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveDietPlanList(DietPlanList dietPlanList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(dietPlanList);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableDietPlanList(dietPlanList), filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"WeiLiangLOL":81}},{"path":"src/main/java/seedu/address/storage/JsonFoodIntakeListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":" * A class to access FoodIntakeList data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"public class JsonFoodIntakeListStorage implements FoodIntakeListStorage {","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUniqueFoodListStorage.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    public JsonFoodIntakeListStorage(Path filePath) {","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"    public Path getFoodIntakeListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"        return filePath;","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"    public Optional\u003cFoodIntakeList\u003e readFoodIntakeList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"        return readFoodIntakeList(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"     * Similar to {@link #readFoodIntakeList()}.","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"    public Optional\u003cFoodIntakeList\u003e readFoodIntakeList(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"        Optional\u003cJsonSerializableFoodIntakeList\u003e jsonFoodIntakeList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"                filePath, JsonSerializableFoodIntakeList.class);","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"        if (!jsonFoodIntakeList.isPresent()) {","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"        try {","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"            return Optional.of(jsonFoodIntakeList.get().toModelType());","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-14"},{"lineNumber":60,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":64,"author":{"gitId":"jasaaanlim"},"content":"    public void saveFoodIntakeList(FoodIntakeList foodIntakeList) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"jasaaanlim"},"content":"        saveFoodIntakeList(foodIntakeList, filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"jasaaanlim"},"content":"     * Similar to {@link #saveFoodIntakeList(FoodIntakeList)}.","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"jasaaanlim"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":73,"author":{"gitId":"jasaaanlim"},"content":"    public void saveFoodIntakeList(FoodIntakeList foodIntakeList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":74,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(foodIntakeList);","lastModifiedDate":"2021-03-14"},{"lineNumber":75,"author":{"gitId":"jasaaanlim"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":76,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":77,"author":{"gitId":"jasaaanlim"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":78,"author":{"gitId":"jasaaanlim"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableFoodIntakeList(foodIntakeList), filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":79,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":80,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":81,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"jasaaanlim":81}},{"path":"src/main/java/seedu/address/storage/JsonSerializableDietPlanList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":" * A DietPlanList that is serializable to JSON format.","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"@JsonRootName(value \u003d \"dietplanlist\")","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonSerializableDietPlanList {","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Diet plan list contains duplicated diet plan(s).\";","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    private final List\u003cJsonAdaptedDietPlan\u003e plans \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code JsonSerializableDietPlanList} with the given diet plans.","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    public JsonSerializableDietPlanList(@JsonProperty(\"plans\") List\u003cJsonAdaptedDietPlan\u003e plans) {","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"        this.plans.addAll(plans);","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code DietPlanList} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableDietPlanList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonSerializableDietPlanList(DietPlanList source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"        this.plans.addAll(source.getPlanList().stream().map(JsonAdaptedDietPlan::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this diet plan list into the model\u0027s {@code DietPlanList} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlanList toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlanList dietPlanList \u003d new DietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"        for (JsonAdaptedDietPlan jsonAdaptedDietPlan : plans) {","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"            DietPlan dietPlan \u003d jsonAdaptedDietPlan.toModelType();","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"            if (dietPlanList.hasDietPlan(dietPlan)) {","lastModifiedDate":"2021-03-14"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"            }","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"            dietPlanList.addDietPlan(dietPlan);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        return dietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"WeiLiangLOL":54,"jasaaanlim":5}},{"path":"src/main/java/seedu/address/storage/JsonSerializableFoodIntakeList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-14"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-14"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.util.List;","lastModifiedDate":"2021-03-14"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-14"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-14"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-14"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-14"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"/**","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":" * A FoodIntakeList that is serializable to JSON format.","lastModifiedDate":"2021-03-14"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":" */","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"@JsonRootName(value \u003d \"foodintakelist\")","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"public class JsonSerializableFoodIntakeList {","lastModifiedDate":"2021-03-14"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"    private LocalDate date;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    private final List\u003cJsonAdaptedFoodIntake\u003e foodIntakes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"     * Constructs a {@code JsonSerializableFoodIntakeList} with the given foodIntakes.","lastModifiedDate":"2021-03-14"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    public JsonSerializableFoodIntakeList(@JsonProperty(\"date\") LocalDate date,","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"                                          @JsonProperty(\"foodIntakes\") List\u003cJsonAdaptedFoodIntake\u003e foodIntakes) {","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakes.addAll(foodIntakes);","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"     * Converts a given {@code ReadOnlyFoodIntakeList} into this class for Jackson use.","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFoodIntakeList}.","lastModifiedDate":"2021-03-14"},{"lineNumber":39,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":40,"author":{"gitId":"jasaaanlim"},"content":"    public JsonSerializableFoodIntakeList(FoodIntakeList source) {","lastModifiedDate":"2021-03-14"},{"lineNumber":41,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakes.addAll(source.getFoodIntakeList().stream()","lastModifiedDate":"2021-03-14"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"                .map(JsonAdaptedFoodIntake::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":45,"author":{"gitId":"jasaaanlim"},"content":"    /**","lastModifiedDate":"2021-03-14"},{"lineNumber":46,"author":{"gitId":"jasaaanlim"},"content":"     * Converts this foodIntake list into the model\u0027s {@code FoodIntakeList} object.","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"jasaaanlim"},"content":"     *","lastModifiedDate":"2021-03-14"},{"lineNumber":48,"author":{"gitId":"jasaaanlim"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-14"},{"lineNumber":49,"author":{"gitId":"jasaaanlim"},"content":"     */","lastModifiedDate":"2021-03-14"},{"lineNumber":50,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntakeList toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-14"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        FoodIntakeList foodIntakeList \u003d new FoodIntakeList();","lastModifiedDate":"2021-03-18"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"        for (JsonAdaptedFoodIntake jsonAdaptedFoodIntake : foodIntakes) {","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"            FoodIntake foodIntake \u003d jsonAdaptedFoodIntake.toModelType();","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"jasaaanlim"},"content":"            foodIntakeList.addFoodIntake(foodIntake);","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"jasaaanlim"},"content":"        }","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":59,"author":{"gitId":"jasaaanlim"},"content":"}","lastModifiedDate":"2021-03-14"}],"authorContributionMap":{"ssoonwee":1,"jasaaanlim":58}},{"path":"src/main/java/seedu/address/storage/JsonSerializableUniqueFoodList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":" * A UniqueFoodList that is serializable to JSON format.","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"@JsonRootName(value \u003d \"foodlist\")","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonSerializableUniqueFoodList {","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Food list contains duplicated food item(s).\";","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code JsonSerializableFoodList} with the given food items.","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonSerializableUniqueFoodList(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foods.addAll(foods);","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code ReadOnlyFoodList} into this class for Jackson use.","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFoodList}.","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonSerializableUniqueFoodList(UniqueFoodList source) {","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this food list into the model\u0027s {@code FoodList} object.","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"    public UniqueFoodList toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList foodList \u003d new UniqueFoodList();","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        for (JsonAdaptedFood jsonAdaptedFood : foods) {","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"            Food food \u003d jsonAdaptedFood.toModelType();","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"            if (foodList.hasFoodItem(food)) {","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"            }","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"            foodList.addFoodItem(food);","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        return foodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"WeiLiangLOL":59}},{"path":"src/main/java/seedu/address/storage/JsonSerializableUser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":" * A User that is serializable to JSON format.","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"@JsonRootName(value \u003d \"user\")","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"public class JsonSerializableUser {","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    private final JsonAdaptedUser user;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"     * Constructs a {@code JsonSerializableUser} with the given parameter.","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    @JsonCreator","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    public JsonSerializableUser(@JsonProperty(\"user\") JsonAdaptedUser user) {","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"        this.user \u003d user;","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     * Converts a given {@code User} into this class for Jackson use.","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableUser}.","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    public JsonSerializableUser(User source) {","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        this.user \u003d new JsonAdaptedUser(source);","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"     * Converts this User into the model\u0027s {@code User} object.","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    public User toModelType() throws IllegalValueException {","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"        return user.toModelType();","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"SoonKeatNeo":44}},{"path":"src/main/java/seedu/address/storage/JsonUniqueFoodListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":" * A class to access FoodList data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonUniqueFoodListStorage implements UniqueFoodListStorage {","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUniqueFoodListStorage.class);","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonUniqueFoodListStorage(Path filePath) {","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getFoodListFilePath() {","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return filePath;","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"        return readFoodList(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #readFoodList()}.","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-11"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cJsonSerializableUniqueFoodList\u003e jsonFoodList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-11"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"                filePath, JsonSerializableUniqueFoodList.class);","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!jsonFoodList.isPresent()) {","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-11"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        try {","lastModifiedDate":"2021-03-11"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.of(jsonFoodList.get().toModelType());","lastModifiedDate":"2021-03-11"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-11"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-11"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-11"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList) throws IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        saveFoodList(foodList, filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #saveFoodList(UniqueFoodList)}.","lastModifiedDate":"2021-03-11"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"     *","lastModifiedDate":"2021-03-11"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-11"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(foodList);","lastModifiedDate":"2021-03-11"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableUniqueFoodList(foodList), filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"WeiLiangLOL":81}},{"path":"src/main/java/seedu/address/storage/JsonUserStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-23"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-23"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-23"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-23"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-23"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2021-03-23"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2021-03-23"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-23"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2021-03-23"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.util.FileUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2021-03-23"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-23"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-23"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":" * A class to access User data stored as a json file on the hard disk.","lastModifiedDate":"2021-03-23"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-23"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"public class JsonUserStorage implements UserStorage {","lastModifiedDate":"2021-03-23"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonDietPlanListStorage.class);","lastModifiedDate":"2021-03-23"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    private Path filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    public JsonUserStorage(Path filePath) {","lastModifiedDate":"2021-03-23"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    public Path getUserFilePath() {","lastModifiedDate":"2021-03-23"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        return filePath;","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    public Optional\u003cUser\u003e readUser() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        return readUser(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"     * Similar to {@link #readUser()}.","lastModifiedDate":"2021-03-23"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-23"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"    public Optional\u003cUser\u003e readUser(Path filePath) throws DataConversionException {","lastModifiedDate":"2021-03-23"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"        Optional\u003cJsonSerializableUser\u003e jsonUser \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2021-03-23"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"                filePath, JsonSerializableUser.class);","lastModifiedDate":"2021-03-23"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!jsonUser.isPresent()) {","lastModifiedDate":"2021-03-23"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"            return Optional.empty();","lastModifiedDate":"2021-03-23"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        try {","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"            return Optional.of(jsonUser.get().toModelType());","lastModifiedDate":"2021-03-23"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2021-03-23"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2021-03-23"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"        }","lastModifiedDate":"2021-03-23"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"    public void saveUser(User user) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        saveUser(user, filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-23"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"     * Similar to {@link #saveUser(User)}.","lastModifiedDate":"2021-03-23"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"     *","lastModifiedDate":"2021-03-23"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2021-03-23"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-23"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"    public void saveUser(User user, Path filePath) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(user);","lastModifiedDate":"2021-03-23"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableUser(user), filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-23"}],"authorContributionMap":{"SoonKeatNeo":83}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"public interface Storage extends AddressBookStorage, UniqueFoodListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        FoodIntakeListStorage, DietPlanListStorage, UserStorage, UserPrefsStorage {","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"SoonKeatNeo":1,"jasaaanlim":1,"-":31}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2016-09-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    private UniqueFoodListStorage uniqueFoodListStorage;","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    private FoodIntakeListStorage foodIntakeListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    private DietPlanListStorage dietPlanListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    private UserStorage userStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UniqueFoodListStorage}","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * and {@code UserPrefStorage}.","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UniqueFoodListStorage uniqueFoodListStorage,","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"                          FoodIntakeListStorage foodIntakeListStorage, DietPlanListStorage dietPlanListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"                          UserPrefsStorage userPrefsStorage, UserStorage userStorage) {","lastModifiedDate":"2021-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        super();","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodListStorage \u003d uniqueFoodListStorage;","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeListStorage \u003d foodIntakeListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"        this.dietPlanListStorage \u003d dietPlanListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"        this.userStorage \u003d userStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UniqueFoodList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":96,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getFoodListFilePath() {","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListStorage.getFoodListFilePath();","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"        return readFoodList(uniqueFoodListStorage.getFoodListFilePath());","lastModifiedDate":"2021-03-11"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListStorage.readFoodList(filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":110,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":112,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":113,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList) throws IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":114,"author":{"gitId":"WeiLiangLOL"},"content":"        saveFoodList(foodList, uniqueFoodListStorage.getFoodListFilePath());","lastModifiedDate":"2021-03-11"},{"lineNumber":115,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":116,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":117,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":118,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-11"},{"lineNumber":119,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":120,"author":{"gitId":"WeiLiangLOL"},"content":"        uniqueFoodListStorage.saveFoodList(foodList, filePath);","lastModifiedDate":"2021-03-11"},{"lineNumber":121,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-11"},{"lineNumber":122,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":123,"author":{"gitId":"jasaaanlim"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FoodIntakeList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":124,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":125,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"jasaaanlim"},"content":"    public Path getFoodIntakeListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":127,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeListStorage.getFoodIntakeListFilePath();","lastModifiedDate":"2021-03-14"},{"lineNumber":128,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":129,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":130,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":131,"author":{"gitId":"jasaaanlim"},"content":"    public Optional\u003cFoodIntakeList\u003e readFoodIntakeList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"jasaaanlim"},"content":"        return readFoodIntakeList(foodIntakeListStorage.getFoodIntakeListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":133,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":134,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":135,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":136,"author":{"gitId":"jasaaanlim"},"content":"    public Optional\u003cFoodIntakeList\u003e readFoodIntakeList(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":137,"author":{"gitId":"jasaaanlim"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":138,"author":{"gitId":"jasaaanlim"},"content":"        return foodIntakeListStorage.readFoodIntakeList(filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":139,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":142,"author":{"gitId":"jasaaanlim"},"content":"    public void saveFoodIntakeList(FoodIntakeList foodIntakeList) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":143,"author":{"gitId":"jasaaanlim"},"content":"        saveFoodIntakeList(foodIntakeList, foodIntakeListStorage.getFoodIntakeListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":144,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":145,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":146,"author":{"gitId":"jasaaanlim"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":147,"author":{"gitId":"jasaaanlim"},"content":"    public void saveFoodIntakeList(FoodIntakeList foodIntakeList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"jasaaanlim"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":149,"author":{"gitId":"jasaaanlim"},"content":"        foodIntakeListStorage.saveFoodIntakeList(foodIntakeList, filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":150,"author":{"gitId":"jasaaanlim"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":151,"author":{"gitId":"jasaaanlim"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":152,"author":{"gitId":"WeiLiangLOL"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d DietPlanList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":153,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":154,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":155,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getDietPlanListFilePath() {","lastModifiedDate":"2021-03-14"},{"lineNumber":156,"author":{"gitId":"WeiLiangLOL"},"content":"        return dietPlanListStorage.getDietPlanListFilePath();","lastModifiedDate":"2021-03-14"},{"lineNumber":157,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":158,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":159,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":160,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cDietPlanList\u003e readDietPlanList() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":161,"author":{"gitId":"WeiLiangLOL"},"content":"        return readDietPlanList(dietPlanListStorage.getDietPlanListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":162,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":163,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":164,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":165,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cDietPlanList\u003e readDietPlanList(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":166,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":167,"author":{"gitId":"WeiLiangLOL"},"content":"        return dietPlanListStorage.readDietPlanList();","lastModifiedDate":"2021-03-14"},{"lineNumber":168,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":169,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":170,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":171,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveDietPlanList(DietPlanList dietPlanList) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":172,"author":{"gitId":"WeiLiangLOL"},"content":"        saveDietPlanList(dietPlanList, dietPlanListStorage.getDietPlanListFilePath());","lastModifiedDate":"2021-03-14"},{"lineNumber":173,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":174,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":175,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override","lastModifiedDate":"2021-03-14"},{"lineNumber":176,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveDietPlanList(DietPlanList dietPlanList, Path filePath) throws IOException {","lastModifiedDate":"2021-03-14"},{"lineNumber":177,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":178,"author":{"gitId":"WeiLiangLOL"},"content":"        dietPlanListStorage.saveDietPlanList(dietPlanList, filePath);","lastModifiedDate":"2021-03-14"},{"lineNumber":179,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":180,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":181,"author":{"gitId":"SoonKeatNeo"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2021-03-23"},{"lineNumber":182,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":183,"author":{"gitId":"SoonKeatNeo"},"content":"    public Path getUserFilePath() {","lastModifiedDate":"2021-03-23"},{"lineNumber":184,"author":{"gitId":"SoonKeatNeo"},"content":"        return userStorage.getUserFilePath();","lastModifiedDate":"2021-03-23"},{"lineNumber":185,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":186,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":187,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":188,"author":{"gitId":"SoonKeatNeo"},"content":"    public Optional\u003cUser\u003e readUser() throws DataConversionException, IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":189,"author":{"gitId":"SoonKeatNeo"},"content":"        return readUser(userStorage.getUserFilePath());","lastModifiedDate":"2021-03-23"},{"lineNumber":190,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":191,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":192,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":193,"author":{"gitId":"SoonKeatNeo"},"content":"    public Optional\u003cUser\u003e readUser(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":194,"author":{"gitId":"SoonKeatNeo"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":195,"author":{"gitId":"SoonKeatNeo"},"content":"        return userStorage.readUser();","lastModifiedDate":"2021-03-23"},{"lineNumber":196,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":197,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":198,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":199,"author":{"gitId":"SoonKeatNeo"},"content":"    public void saveUser(User user) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":200,"author":{"gitId":"SoonKeatNeo"},"content":"        saveUser(user, userStorage.getUserFilePath());","lastModifiedDate":"2021-03-23"},{"lineNumber":201,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":202,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-23"},{"lineNumber":203,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override","lastModifiedDate":"2021-03-23"},{"lineNumber":204,"author":{"gitId":"SoonKeatNeo"},"content":"    public void saveUser(User user, Path filePath) throws IOException {","lastModifiedDate":"2021-03-23"},{"lineNumber":205,"author":{"gitId":"SoonKeatNeo"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":206,"author":{"gitId":"SoonKeatNeo"},"content":"        userStorage.saveUser(user, filePath);","lastModifiedDate":"2021-03-23"},{"lineNumber":207,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"SoonKeatNeo":31,"WeiLiangLOL":68,"jasaaanlim":33,"-":76}},{"path":"src/main/java/seedu/address/storage/UniqueFoodListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-11"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-11"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-11"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-11"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"/**","lastModifiedDate":"2021-03-11"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":" * Represents a storage for a list of {@link seedu.address.model.food.Food}.","lastModifiedDate":"2021-03-11"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":" */","lastModifiedDate":"2021-03-11"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"public interface UniqueFoodListStorage {","lastModifiedDate":"2021-03-11"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-11"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    Path getFoodListFilePath();","lastModifiedDate":"2021-03-11"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns FoodList data as a {@link UniqueFoodList}.","lastModifiedDate":"2021-03-11"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-11"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-11"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-11"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #getFoodListFilePath()","lastModifiedDate":"2021-03-11"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * Saves the given {@link UniqueFoodList} to the storage.","lastModifiedDate":"2021-03-11"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param foodList cannot be null.","lastModifiedDate":"2021-03-11"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-11"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveFoodList(UniqueFoodList foodList) throws IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    /**","lastModifiedDate":"2021-03-11"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #saveFoodList(UniqueFoodList)","lastModifiedDate":"2021-03-11"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     */","lastModifiedDate":"2021-03-11"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException;","lastModifiedDate":"2021-03-11"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-11"}],"authorContributionMap":{"WeiLiangLOL":45}},{"path":"src/main/java/seedu/address/storage/UserStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.storage;","lastModifiedDate":"2021-03-22"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-22"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.Optional;","lastModifiedDate":"2021-03-22"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2021-03-22"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-22"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"/**","lastModifiedDate":"2021-03-22"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a storage for the {@link User}.","lastModifiedDate":"2021-03-22"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":" */","lastModifiedDate":"2021-03-22"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"public interface UserStorage {","lastModifiedDate":"2021-03-22"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2021-03-22"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    Path getUserFilePath();","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns User data as a {@link User}.","lastModifiedDate":"2021-03-22"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2021-03-22"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2021-03-22"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2021-03-22"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    Optional\u003cUser\u003e readUser() throws DataConversionException, IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * @see #getUserFilePath()","lastModifiedDate":"2021-03-22"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    Optional\u003cUser\u003e readUser(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"     * Saves the given {@link User} to the storage.","lastModifiedDate":"2021-03-22"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param user cannot be null.","lastModifiedDate":"2021-03-22"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2021-03-22"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"    void saveUser(User user) throws IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    /**","lastModifiedDate":"2021-03-22"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"     * @see #saveUser(User)","lastModifiedDate":"2021-03-22"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"     */","lastModifiedDate":"2021-03-22"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    void saveUser(User user, Path filePath) throws IOException;","lastModifiedDate":"2021-03-22"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-22"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-22"}],"authorContributionMap":{"SoonKeatNeo":45}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-t12-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"SoonKeatNeo":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"SoonKeatNeo"},"content":"        String messageToShow \u003d \"Welcome to DietLAH!\\n\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":122,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"DietLAH! can help you with your eating habits so you can get your desired weight!\\n\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":123,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"To start off, please set your details using:\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":124,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"bmi g/GENDER a/AGE h/HEIGHT(CM) w/WEIGHT(KG) i/IDEAL_WEIGHT(KG)\"","lastModifiedDate":"2021-03-25"},{"lineNumber":125,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"\\n\\nThereafter, you can get a diet plan recommendation using:\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":126,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"plan_recommend\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":127,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"and select your active diet plan using\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":128,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"plan_set p/ID\\n\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":129,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"Finally, you can input your food items using \\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":130,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"food_intake_add d/DATE n/FOOD_NAME c/CARBOS f/FATS p/PROTEINS\\n\\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":131,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"For more help and commands, please visit our User Guide: \\n\"","lastModifiedDate":"2021-03-25"},{"lineNumber":132,"author":{"gitId":"SoonKeatNeo"},"content":"                + \"https://ay2021s2-cs2103t-t12-2.github.io/tp/UserGuide.html\";","lastModifiedDate":"2021-03-25"},{"lineNumber":133,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-25"},{"lineNumber":134,"author":{"gitId":"SoonKeatNeo"},"content":"        resultDisplay.setFeedbackToUser(messageToShow);","lastModifiedDate":"2021-03-25"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"SoonKeatNeo":14,"-":190}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"         title\u003d\"DietLAH!\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2021-03-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" minWidth\u003d\"340\" prefWidth\u003d\"340\"","lastModifiedDate":"2021-03-24"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"                   styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2021-03-24"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"                   prefHeight\u003d\"100\"\u003e","lastModifiedDate":"2021-03-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"SoonKeatNeo":4,"-":50}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2021-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.logic.commands.AddUserCommand;","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2021-03-14"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.storage.JsonDietPlanListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.storage.JsonFoodIntakeListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.storage.JsonUniqueFoodListStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.storage.JsonUserStorage;","lastModifiedDate":"2021-03-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    public void setUp() throws CommandException, ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(temporaryFolder.resolve(\"uniqueFoods.json\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":52,"author":{"gitId":"jasaaanlim"},"content":"        JsonFoodIntakeListStorage foodIntakeListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"                new JsonFoodIntakeListStorage(temporaryFolder.resolve(\"foodIntakes.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonDietPlanListStorage dietPlanListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonDietPlanListStorage(temporaryFolder.resolve(\"dietPlans.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        JsonUserStorage userStorage \u003d new JsonUserStorage(temporaryFolder.resolve(\"user.json\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":57,"author":{"gitId":"jasaaanlim"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, foodIntakeListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"                dietPlanListStorage, userPrefsStorage, userStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"        // Execute startup BMI","lastModifiedDate":"2021-03-14"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"        startupBmi();","lastModifiedDate":"2021-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"    public void startupBmi() throws CommandException, ParseException {","lastModifiedDate":"2021-03-14"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"        // TODO: Add a seperate test case for this as well","lastModifiedDate":"2021-03-14"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"        String addUserCommand \u003d AddUserCommand.COMMAND_WORD;","lastModifiedDate":"2021-03-14"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"        String command \u003d addUserCommand + \" g/M a/24 h/170 w/52 i/55\";","lastModifiedDate":"2021-03-14"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"        logic.execute(command);","lastModifiedDate":"2021-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2017-06-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d","lastModifiedDate":"2021-03-11"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(temporaryFolder.resolve(\"ioExceptionUniqueFoods.json\"));","lastModifiedDate":"2021-03-11"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonDietPlanListStorage dietPlanListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonDietPlanListStorage(temporaryFolder.resolve(\"ioExceptionDietPlans.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":95,"author":{"gitId":"jasaaanlim"},"content":"        JsonFoodIntakeListStorage foodIntakeListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":96,"author":{"gitId":"jasaaanlim"},"content":"                new JsonFoodIntakeListStorage(temporaryFolder.resolve(\"ioExceptionFoodIntakeList.json\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"        JsonUserStorage userStorage \u003d new JsonUserStorage(temporaryFolder.resolve(\"ioExceptionUser.json\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":98,"author":{"gitId":"jasaaanlim"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, foodIntakeListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"                dietPlanListStorage, userPrefsStorage, userStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"sjq-sohjunqi"},"content":"        /*String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2021-03-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);*/","lastModifiedDate":"2021-03-27"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"        //TODO Implement storage throws IOException testing","lastModifiedDate":"2021-03-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"sjq-sohjunqi"},"content":"    /*","lastModifiedDate":"2021-03-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":141,"author":{"gitId":"sjq-sohjunqi"},"content":"    /*","lastModifiedDate":"2021-03-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":"    /*","lastModifiedDate":"2021-03-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2021-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":156,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), new UserPrefs(), new User());","lastModifiedDate":"2021-03-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":168,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":169,"author":{"gitId":"sjq-sohjunqi"},"content":"        // TODO Fix ParseException in line commented below","lastModifiedDate":"2021-03-27"},{"lineNumber":170,"author":{"gitId":"sjq-sohjunqi"},"content":"        //assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2021-03-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":187,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-14"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"SoonKeatNeo":7,"sjq-sohjunqi":9,"WeiLiangLOL":24,"jasaaanlim":10,"-":138}},{"path":"src/test/java/seedu/address/logic/commands/AddFoodItemCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import java.nio.file.Path;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDate;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import java.util.ArrayList;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.Arrays;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import java.util.List;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.DietPlan;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.diet.PlanType;","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntake;","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.testutil.FoodBuilder;","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodItemCommandTest {","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"    public void constructor_nullFoodItem_throwsNullPointerException() {","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddFoodItemCommand(null));","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        ModelStubAcceptingFoodAdded modelStub \u003d new ModelStubAcceptingFoodAdded();","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        Food validFood \u003d new FoodBuilder().build();","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        CommandResult commandResult \u003d new AddFoodItemCommand(validFood).execute(modelStub);","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        assertEquals(AddFoodItemCommand.MESSAGE_SUCCESS + validFood + \") into food list.\",","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"                commandResult.getFeedbackToUser());","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        assertEquals(Arrays.asList(validFood), modelStub.foodsAdded);","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    public void execute_duplicateFood_throwsCommandException() {","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"        Food validFood \u003d new FoodBuilder().build();","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"        AddFoodItemCommand addFoodItemCommand \u003d new AddFoodItemCommand(validFood);","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"        ModelStub modelStub \u003d new ModelStubWithFood(validFood);","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(CommandException.class, AddFoodItemCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"                addFoodItemCommand.execute(modelStub));","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2021-03-28"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2021-03-28"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2021-03-28"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2021-03-28"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2021-03-28"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"        public String listFoodItem() {","lastModifiedDate":"2021-03-28"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"        public void addFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"        public void updateFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"        public void deleteFoodItem(int index) {","lastModifiedDate":"2021-03-28"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"        public UniqueFoodList getUniqueFoodList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"        public DietPlanList getDietPlanList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"        public void setActiveDiet(DietPlan dietPlan) {","lastModifiedDate":"2021-03-28"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"        public DietPlan getActiveDiet() {","lastModifiedDate":"2021-03-28"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":158,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":159,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":160,"author":{"gitId":"ssoonwee"},"content":"        public List\u003cDietPlan\u003e recommendDiets(PlanType planType) {","lastModifiedDate":"2021-03-28"},{"lineNumber":161,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":163,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":164,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":165,"author":{"gitId":"ssoonwee"},"content":"        public void addFoodIntake(LocalDate date, Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"        public void updateFoodIntake(int index, FoodIntake foodIntake) {","lastModifiedDate":"2021-03-28"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":173,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":174,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"        public FoodIntakeList getFoodIntakeList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":177,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":179,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":180,"author":{"gitId":"ssoonwee"},"content":"        public void addUser(User user) {","lastModifiedDate":"2021-03-28"},{"lineNumber":181,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":182,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":185,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasUser() {","lastModifiedDate":"2021-03-28"},{"lineNumber":186,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":187,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"        public void editUser(User user) {","lastModifiedDate":"2021-03-28"},{"lineNumber":191,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":192,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":193,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":194,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":195,"author":{"gitId":"ssoonwee"},"content":"        public String listUser() {","lastModifiedDate":"2021-03-28"},{"lineNumber":196,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":197,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":198,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":199,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":200,"author":{"gitId":"ssoonwee"},"content":"        public PlanType getUserGoal() {","lastModifiedDate":"2021-03-28"},{"lineNumber":201,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":202,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":203,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":204,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":205,"author":{"gitId":"ssoonwee"},"content":"        public double getUserBmi() {","lastModifiedDate":"2021-03-28"},{"lineNumber":206,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":207,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":208,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":209,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":210,"author":{"gitId":"ssoonwee"},"content":"        public User getUser() {","lastModifiedDate":"2021-03-28"},{"lineNumber":211,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":212,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":213,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":214,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":215,"author":{"gitId":"ssoonwee"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2021-03-28"},{"lineNumber":216,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":217,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":218,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":219,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":220,"author":{"gitId":"ssoonwee"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2021-03-28"},{"lineNumber":221,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":222,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":223,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":224,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":225,"author":{"gitId":"ssoonwee"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2021-03-28"},{"lineNumber":226,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":227,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":228,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":229,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":230,"author":{"gitId":"ssoonwee"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2021-03-28"},{"lineNumber":231,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-28"},{"lineNumber":232,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":233,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":234,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":235,"author":{"gitId":"ssoonwee"},"content":"        public void resetToBlank() {","lastModifiedDate":"2021-03-29"},{"lineNumber":236,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":237,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":238,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":239,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-29"},{"lineNumber":240,"author":{"gitId":"ssoonwee"},"content":"        public void resetToTemplate() {","lastModifiedDate":"2021-03-29"},{"lineNumber":241,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2021-03-29"},{"lineNumber":242,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-29"},{"lineNumber":243,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":244,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":245,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":246,"author":{"gitId":"ssoonwee"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2021-03-28"},{"lineNumber":247,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":248,"author":{"gitId":"ssoonwee"},"content":"    private class ModelStubWithFood extends ModelStub {","lastModifiedDate":"2021-03-28"},{"lineNumber":249,"author":{"gitId":"ssoonwee"},"content":"        private final Food food;","lastModifiedDate":"2021-03-28"},{"lineNumber":250,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":251,"author":{"gitId":"ssoonwee"},"content":"        ModelStubWithFood(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":252,"author":{"gitId":"ssoonwee"},"content":"            requireNonNull(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":253,"author":{"gitId":"ssoonwee"},"content":"            this.food \u003d food;","lastModifiedDate":"2021-03-28"},{"lineNumber":254,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":255,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":256,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":257,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":258,"author":{"gitId":"ssoonwee"},"content":"            requireNonNull(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":259,"author":{"gitId":"ssoonwee"},"content":"            return this.food.getName().equals(food.getName());","lastModifiedDate":"2021-03-28"},{"lineNumber":260,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":261,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":262,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":263,"author":{"gitId":"ssoonwee"},"content":"    private class ModelStubAcceptingFoodAdded extends ModelStub {","lastModifiedDate":"2021-03-28"},{"lineNumber":264,"author":{"gitId":"ssoonwee"},"content":"        final ArrayList\u003cFood\u003e foodsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2021-03-28"},{"lineNumber":265,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":266,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":267,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":268,"author":{"gitId":"ssoonwee"},"content":"            requireNonNull(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":269,"author":{"gitId":"ssoonwee"},"content":"            for (Food foodItem : foodsAdded) {","lastModifiedDate":"2021-03-28"},{"lineNumber":270,"author":{"gitId":"ssoonwee"},"content":"                if (foodItem.getName().equals(food)) {","lastModifiedDate":"2021-03-28"},{"lineNumber":271,"author":{"gitId":"ssoonwee"},"content":"                    return true;","lastModifiedDate":"2021-03-28"},{"lineNumber":272,"author":{"gitId":"ssoonwee"},"content":"                }","lastModifiedDate":"2021-03-28"},{"lineNumber":273,"author":{"gitId":"ssoonwee"},"content":"            }","lastModifiedDate":"2021-03-28"},{"lineNumber":274,"author":{"gitId":"ssoonwee"},"content":"            return false;","lastModifiedDate":"2021-03-28"},{"lineNumber":275,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":276,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":277,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":278,"author":{"gitId":"ssoonwee"},"content":"        public void addFoodItem(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":279,"author":{"gitId":"ssoonwee"},"content":"            requireNonNull(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":280,"author":{"gitId":"ssoonwee"},"content":"            foodsAdded.add(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":281,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":282,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":283,"author":{"gitId":"ssoonwee"},"content":"        @Override","lastModifiedDate":"2021-03-28"},{"lineNumber":284,"author":{"gitId":"ssoonwee"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2021-03-28"},{"lineNumber":285,"author":{"gitId":"ssoonwee"},"content":"            return new AddressBook();","lastModifiedDate":"2021-03-28"},{"lineNumber":286,"author":{"gitId":"ssoonwee"},"content":"        }","lastModifiedDate":"2021-03-28"},{"lineNumber":287,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":288,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"ssoonwee":288}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    /* TODO Use this for reference when creating tests","lastModifiedDate":"2021-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2021-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2021-03-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"    */","lastModifiedDate":"2021-03-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2021-03-27"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2021-03-27"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2021-03-27"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2021-03-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2021-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"sjq-sohjunqi":5,"-":54}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"        @Override","lastModifiedDate":"2021-03-11"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        public UniqueFoodList getFoodList() {","lastModifiedDate":"2021-03-11"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"            // TODO: Improve abstraction","lastModifiedDate":"2021-03-11"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"            return null;","lastModifiedDate":"2021-03-11"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"        }","lastModifiedDate":"2021-03-11"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-11"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"ssoonwee":1,"WeiLiangLOL":6,"-":102}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.diet.DietPlanList;","lastModifiedDate":"2021-03-14"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"import seedu.address.model.food.FoodIntakeList;","lastModifiedDate":"2021-03-14"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;","lastModifiedDate":"2021-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.user.User;","lastModifiedDate":"2021-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"SoonKeatNeo"},"content":"        User user \u003d new User();","lastModifiedDate":"2021-03-29"},{"lineNumber":106,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"jasaaanlim"},"content":"        modelManager \u003d new ModelManager(addressBook, new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":110,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), userPrefs, user);","lastModifiedDate":"2021-03-29"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":112,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), userPrefs, user);","lastModifiedDate":"2021-03-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":126,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), userPrefs, user)));","lastModifiedDate":"2021-03-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":132,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), userPrefs, user)));","lastModifiedDate":"2021-03-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":140,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new UniqueFoodList(),","lastModifiedDate":"2021-03-14"},{"lineNumber":141,"author":{"gitId":"SoonKeatNeo"},"content":"                new FoodIntakeList(), new DietPlanList(), differentUserPrefs, user)));","lastModifiedDate":"2021-03-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"SoonKeatNeo":8,"WeiLiangLOL":6,"jasaaanlim":2,"-":127}},{"path":"src/test/java/seedu/address/model/diet/DietPlanTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"public class DietPlanTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(null, \"\", null,","lastModifiedDate":"2021-03-14"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"                null));","lastModifiedDate":"2021-03-14"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(\"\", null, null,","lastModifiedDate":"2021-03-14"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"                null));","lastModifiedDate":"2021-03-14"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(\"\", \"\", null,","lastModifiedDate":"2021-03-14"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"                null));","lastModifiedDate":"2021-03-14"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"sjq-sohjunqi":6,"WeiLiangLOL":13}},{"path":"src/test/java/seedu/address/model/diet/MacroNutrientCompositionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-10"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-10"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-10"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"public class MacroNutrientCompositionTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"    public void constructor_invalidValues_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-10"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(0, 0, 0));","lastModifiedDate":"2021-03-10"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(10, 20, 30));","lastModifiedDate":"2021-03-10"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(100, 20, 30));","lastModifiedDate":"2021-03-10"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(110, 0, -10));","lastModifiedDate":"2021-03-10"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test","lastModifiedDate":"2021-03-10"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    public void isValidComposition() {","lastModifiedDate":"2021-03-10"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(0, 10, 20));","lastModifiedDate":"2021-03-10"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(100, 10, 20));","lastModifiedDate":"2021-03-10"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(-10, 130, -20));","lastModifiedDate":"2021-03-10"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(100, 0, 0));","lastModifiedDate":"2021-03-10"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(40, 30, 30));","lastModifiedDate":"2021-03-10"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(25, 50, 25));","lastModifiedDate":"2021-03-10"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    }","lastModifiedDate":"2021-03-10"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"WeiLiangLOL":30}},{"path":"src/test/java/seedu/address/model/food/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"public class FoodTest {","lastModifiedDate":"2021-03-07"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Food(null, 0, 0, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public void constructor_invalidFood_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"        String invalidFood \u003d \"^.^\";","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidFood, 0, 0, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Jellies\", -1, 0, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Sweet\", 10, 15, -5));","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Flour\", 10, -5, 10));","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    public void isValidFood() {","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        // null address","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(NullPointerException.class, () -\u003e Food.isValidFoodName(null));","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        // invalid addresses","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\"\")); // empty string","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\":)abc\")); //string filled with mixture of alphabets and special chars","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\"^.^\")); //string filled with only special characters","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\" \")); // spaces only","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        // valid addresses","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidFoodName(\"Jellies\"));","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidFoodName(\"A\")); // one character","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    public void isValidNumber() {","lastModifiedDate":"2021-03-07"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        //invalid inputs","lastModifiedDate":"2021-03-07"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(-1, 0, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(0, -1, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(0, 0, -1));","lastModifiedDate":"2021-03-07"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        //valid inputs","lastModifiedDate":"2021-03-07"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidNumber(0, 0, 0));","lastModifiedDate":"2021-03-07"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidNumber(1, 10, 100));","lastModifiedDate":"2021-03-07"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"ssoonwee":52}},{"path":"src/test/java/seedu/address/model/user/AgeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-10"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-10"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class AgeTest {","lastModifiedDate":"2021-03-10"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-10"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/model/user/BmiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class BmiTest {","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/model/user/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2021-03-07"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2021-03-07"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2021-03-07"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"public class NameTest {","lastModifiedDate":"2021-03-07"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2021-03-07"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.user.Name(null));","lastModifiedDate":"2021-03-07"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2021-03-07"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2021-03-07"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.user.Name(invalidName));","lastModifiedDate":"2021-03-07"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test","lastModifiedDate":"2021-03-07"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public void isValidName() {","lastModifiedDate":"2021-03-07"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        // null name","lastModifiedDate":"2021-03-07"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.user.Name.isValidName(null));","lastModifiedDate":"2021-03-07"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        // invalid name","lastModifiedDate":"2021-03-07"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"\")); // empty string","lastModifiedDate":"2021-03-07"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2021-03-07"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2021-03-07"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2021-03-07"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        // valid name","lastModifiedDate":"2021-03-07"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2021-03-07"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2021-03-07"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2021-03-07"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2021-03-07"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2021-03-07"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }","lastModifiedDate":"2021-03-07"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":40}},{"path":"src/test/java/seedu/address/model/user/UserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;","lastModifiedDate":"2021-03-07"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"","lastModifiedDate":"2021-03-07"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class UserTest {","lastModifiedDate":"2021-03-07"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}","lastModifiedDate":"2021-03-07"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(getTempFilePath(\"foods\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"        JsonFoodIntakeListStorage foodIntakeListStorage \u003d","lastModifiedDate":"2021-03-14"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"                new JsonFoodIntakeListStorage(getTempFilePath(\"foodintakes\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonDietPlanListStorage dietPlanListStorage \u003d new JsonDietPlanListStorage(getTempFilePath(\"plans\"));","lastModifiedDate":"2021-03-14"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        JsonUserStorage userStorage \u003d new JsonUserStorage(getTempFilePath(\"user\"));","lastModifiedDate":"2021-03-23"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage,","lastModifiedDate":"2021-03-14"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"                foodIntakeListStorage, dietPlanListStorage, userPrefsStorage, userStorage);","lastModifiedDate":"2021-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"SoonKeatNeo":2,"WeiLiangLOL":4,"jasaaanlim":2,"-":67}},{"path":"src/test/java/seedu/address/testutil/EditFoodDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand.EditFoodDescriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":" * A utility class to help with building EditFoodDescriptor objects.","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"public class EditFoodDescriptorBuilder {","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"    private EditFoodDescriptor descriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder() {","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"        descriptor \u003d new EditFoodDescriptor();","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"        this.descriptor \u003d new EditFoodDescriptor(descriptor);","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        descriptor \u003d new EditFoodDescriptor();","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setName(food.getName());","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setCarbos(food.getCarbos());","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setFats(food.getFats());","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setProteins(food.getProteins());","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder withName(String name) {","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setName(name);","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Carbos} of the {@code EditFoodDescriptor} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder withCarbos(Double carbos) {","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setCarbos(carbos);","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Fats} of the {@code EditFoodDescriptor} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder withFats(Double fats) {","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setFats(fats);","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Proteins} of the {@code EditFoodDescriptor} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptorBuilder withAddress(Double proteins) {","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        descriptor.setProteins(proteins);","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"    public EditFoodDescriptor build() {","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        return descriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"ssoonwee":67}},{"path":"src/test/java/seedu/address/testutil/FoodBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"public class FoodBuilder {","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    public static final String DEFAULT_NAME \u003d \"chocolate\";","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"    public static final double DEFAULT_CARBOS \u003d 57;","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final double DEFAULT_FATS \u003d 30;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"    public static final double DEFAULT_PROTEINS \u003d 7.3;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final double DEFAULT_KILOCALORIES \u003d 527.2;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    private String foodName;","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    private Double carbos;","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    private Double fats;","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    private Double proteins;","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    private Double kiloCalories;","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Creates a  {@code FoodBuilder} with the default details.","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder() {","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"        foodName \u003d DEFAULT_NAME;","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"        carbos \u003d DEFAULT_CARBOS;","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"        fats \u003d DEFAULT_FATS;","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        proteins \u003d DEFAULT_PROTEINS;","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"        kiloCalories \u003d DEFAULT_KILOCALORIES;","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder(Food foodToCopy) {","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        foodName \u003d foodToCopy.getName();","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        carbos \u003d foodToCopy.getCarbos();","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        fats \u003d foodToCopy.getFats();","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        proteins \u003d foodToCopy.getProteins();","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        kiloCalories \u003d foodToCopy.getKiloCalories();","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Name} of the {@code Food} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder withFoodName(String name) {","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        this.foodName \u003d name;","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Carbos} of the {@code Food} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder withCarbos(Double carbos) {","lastModifiedDate":"2021-03-28"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        this.carbos \u003d carbos;","lastModifiedDate":"2021-03-28"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Fats} of the {@code Food} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder withFats(Double fats) {","lastModifiedDate":"2021-03-28"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        this.fats \u003d fats;","lastModifiedDate":"2021-03-28"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code Fats} of the {@code Food} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder withProteins(Double proteins) {","lastModifiedDate":"2021-03-28"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"        this.proteins \u003d proteins;","lastModifiedDate":"2021-03-28"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     * Sets the {@code KiloCalories} of the {@code Food} that we are building.","lastModifiedDate":"2021-03-28"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"    public FoodBuilder withKiloCalories(Double kiloCalories) {","lastModifiedDate":"2021-03-28"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"        this.kiloCalories \u003d kiloCalories;","lastModifiedDate":"2021-03-28"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        return this;","lastModifiedDate":"2021-03-28"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"    public Food build() {","lastModifiedDate":"2021-03-28"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"        return new Food(foodName, carbos, fats, proteins);","lastModifiedDate":"2021-03-28"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"ssoonwee":83}},{"path":"src/test/java/seedu/address/testutil/FoodUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.testutil;","lastModifiedDate":"2021-03-28"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;","lastModifiedDate":"2021-03-28"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;","lastModifiedDate":"2021-03-28"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2021-03-28"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;","lastModifiedDate":"2021-03-28"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodItemCommand;","lastModifiedDate":"2021-03-28"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand.EditFoodDescriptor;","lastModifiedDate":"2021-03-28"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;","lastModifiedDate":"2021-03-28"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"/**","lastModifiedDate":"2021-03-28"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" * A utility class for Food.","lastModifiedDate":"2021-03-28"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":" */","lastModifiedDate":"2021-03-28"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"public class FoodUtil {","lastModifiedDate":"2021-03-28"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     * Returns an add command string for adding the {@code food}.","lastModifiedDate":"2021-03-28"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public static String getAddCommand(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"        return AddFoodItemCommand.COMMAND_WORD + \" \" + getFoodDetails(food);","lastModifiedDate":"2021-03-28"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     * Returns the part of command string for the given {@code food}\u0027s details.","lastModifiedDate":"2021-03-28"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     *","lastModifiedDate":"2021-03-28"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     * @param food food object","lastModifiedDate":"2021-03-28"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of food object","lastModifiedDate":"2021-03-28"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    public static String getFoodDetails(Food food) {","lastModifiedDate":"2021-03-28"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-28"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        sb.append(PREFIX_NAME + food.getName() + \" \");","lastModifiedDate":"2021-03-28"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        sb.append(PREFIX_CARBOS + String.format(\"%.2f\", food.getCarbos()) + \" \");","lastModifiedDate":"2021-03-28"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        sb.append(PREFIX_FATS + String.format(\"%.2f\", food.getCarbos()) + \" \");","lastModifiedDate":"2021-03-28"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        sb.append(PREFIX_PROTEINS + String.format(\"%.2f\", food.getCarbos()) + \" \");","lastModifiedDate":"2021-03-28"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-28"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    /**","lastModifiedDate":"2021-03-28"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details.","lastModifiedDate":"2021-03-28"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     */","lastModifiedDate":"2021-03-28"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    public static String getEditFoodDescriptorDetails(EditFoodDescriptor descriptor) {","lastModifiedDate":"2021-03-28"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2021-03-28"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name).append(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        descriptor.getCarbos().ifPresent(carbos -\u003e sb.append(PREFIX_CARBOS).append(carbos).append(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        descriptor.getFats().ifPresent(fats -\u003e sb.append(PREFIX_FATS).append(fats).append(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"        descriptor.getProteins().ifPresent(proteins -\u003e sb.append(PREFIX_PROTEINS).append(proteins).append(\" \"));","lastModifiedDate":"2021-03-28"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        return sb.toString();","lastModifiedDate":"2021-03-28"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"    }","lastModifiedDate":"2021-03-28"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"","lastModifiedDate":"2021-03-28"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"}","lastModifiedDate":"2021-03-28"}],"authorContributionMap":{"ssoonwee":51}}]
