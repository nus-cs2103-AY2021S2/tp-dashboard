[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-2/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp/branch/master/graph/badge.svg?token\u003d1H94FQ5BPQ)](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"* This is **a diet tracking app that is meant to allow users to easily track and maintain their meals so that they are able to maintain their ideal weight and body shape**.\u003cbr\u003e"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"* While the app has a GUI, inputs and feedback are primarily given via a command-line interface. This allows users to work on the app quickly and efficiently as they get used to the inputs."},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"* The app currently consists of three main components:"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"  * BMI Tracker"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"  * Diet Plan Selector"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"  * Macronutrients Tracker (for meals)"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"* The software is written in JDK 11."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* For the detailed documentation of this project, see the **[DieTrack Product Website](https://ay2021s2-cs2103t-t12-2.github.io/tp/)**."},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"SoonKeatNeo":6,"sjq-sohjunqi":1,"-":8}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"We are a team from NUS School of Computing completing this as a module requirement for CS2103/T."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"You can reach us by creating a new issue on our [GitHub issues page](https://github.com/AY2021S2-CS2103T-T12-2/tp/issues)."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"### Soh Jun Qi"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/sjq-sohjunqi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/sjq-sohjunqi)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"* Role: Team Lead"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Testing (Primary), Documentation (Primary), Model (Primary), UI (Primary), Parsing (Secondary)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"### Kuah Wei Liang"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"\u003cimg src\u003d\"images/weilianglol.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/WeiLiangLOL/)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"* Role: Assistant Team Lead"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Processing (Primary), Testing (Secondary), Code quality (Secondary)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"### Song Soon Wee"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/ssoonwee.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/ssoonwee)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Parsing (Primary), UI (Secondary), Model (Secondary)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"### Neo Soon Keat"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/soonkeatneo.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/SoonKeatNeo)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Code quality (Primary), Processing (Secondary), Storage (Secondary)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"### Jason Lim"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003cimg src\u003d\"images/jasaaanlim.png\" width\u003d\"200px\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"[[github](https://github.com/jasaaanlim)]"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"* Responsibilities: Storage (Primary), Documentation (Secondary), Processing (Secondary)"}],"authorContributionMap":{"SoonKeatNeo":3,"sjq-sohjunqi":21,"-":31}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"## Table of Contents"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"\u003c!--ts--\u003e"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"* [Product Scope](#product-scope)"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"* [User Stories](#user-stories)"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"* [Use Cases](#use-cases)"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"  * [Calculate BMI](#use-case-calculate-bmi)"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"  * [Query height and weight](#use-case-query-height-and-weight)"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"  * [Update height and weight](#use-case-update-height-and-weight)"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"  * [Add food item as consumption](#use-case-add-food-item-as-consumption)"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"  * [Get diet recommendation](#use-case-get-diet-recommendation)"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"  * [View diet plan](#use-case-view-diet-plan)"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"  * [Add food item as an intake](#use-case-add-food-item-as-an-intake)"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"  * [Display current food intake for the day](#use-case-display-current-food-intake-for-the-day)"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"* [Non-Functional Requirements](#non-functional-requirements)"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"* [Glossary](#glossary) "},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"\u003c!--te--\u003e"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"### Product Scope"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"**Target user profile**"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"  * want to start a diet"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"  * track their progress against a diet plan"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"  * track the macronutrients of the food consumed"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"  * is comfortable with command-line interface"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":"**Value proposition**: quickly input daily food intake and calculate their macronutrients to check if diet plan is progressing as planned"},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"### User Stories"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":"Priorities: High (must have) - `***`, Medium (nice to have) - `**`, Low (unlikely to have) - `*`"},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"|Priority|   As a ...   |   I want to ...  |   So that I can​ ...   |"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":"|------------|------------------|----------------------|---------------------------|"},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Set a deadline for my diet plan|Stay on track of when the diet finishes|"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Add a new diet plan|Start a new diet plan|"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Delete my diet plan|Give up on the current diet plan|"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|Track my weight|See if the diet is working|"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|User|View a list of recommended diets|find out what to diet on as I am not sure|"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":"|`***`|First-time User|Skim through some example templates|Know how the application works|"},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|Long-time User|See a history of my past diet|I can backtrack what diets I have been on|"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|Frequent user|Store information on the popular foods that I eat|Quickly input my intake for the day|"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|User|Customize my diet plan|Adjust my diet plan to fit my needs|"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":"|`**`|User with dietary requirements|Filter the list of diets to fit my dietary requirements|Choose diets that are suited to my dietary needs|"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"|`*`|Social Users|See/Give reviews on diets|Know which diets are more effective for others|"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"|`*`|Social Users|Connect with peers to see their dietary plans and progress|Stay up-to-date with my peers and possibly motivate myself|"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"*{More to be added}*"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"### Use Cases"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"(For all use cases below, the **Body Mass Index (BMI) Tracker** is the `BMITracker`, **Diet Plan Selector** is the `DietSelector`, **Macronutrients Tracker** is the `MacroTracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Calculate BMI"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"1.  User keys in the weight, height and ideal weight"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker calculates BMI from the user input"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"3.  BMITracker updates the height, weight and BMI of the user"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Query height and weight"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"1.  User queries for height and weight"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker displays information for height and weight"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Update height and weight"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"1.  User queries for height and weight"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"2.  BMITracker displays information for height and weight"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"3.  User updates the height and weight if they are different"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"4.  BMITracker updates the height, weight and BMI of the user"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Add food item as consumption"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"1.  User keys in the date and food item with information such as its name, fats, carbos, proteins"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker keeps track of that and calculates its kilocalories"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"3.  MacroTracker computes the total kilocalories for the day"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Get diet recommendation"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"1.  User requests to get a list of diet recommendation"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"2.  DietSelector displays a list of diet recommendation based on user\u0027s BMI"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"#### Use case: View diet plan"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"1.  User requests for a certain diet type"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"2.  DietSelector displays a detailed requirement for that certain diet type"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Add food item as an intake"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"**MSS**"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"1.  User adds a particular food item"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker tracks the food and computes the total kilo calories consumption for the day"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"    Use case ends."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"**Extensions**"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"*  1a. The food item exists."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"   * 1a1. MacroTracker updates food item details in the list of food."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"*  1b. The food item does not exists."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"   * 1b1. MacroTracker adds the food item into the list of food."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"   Use case resumes at step 2."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"#### Use case: Display current food intake for the day"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"1.  User queries a particular day intake."},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"2.  MacroTracker displays the summary intake for that day."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":149,"author":{"gitId":"SoonKeatNeo"},"content":"2.  Should be able to hold diet plans for up to the past two years (730 days) without a noticeable sluggishness in performance for typical usage."},{"lineNumber":150,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":151,"author":{"gitId":"SoonKeatNeo"},"content":"4.  Should help users as they start the application for the first time with sample data."},{"lineNumber":152,"author":{"gitId":"SoonKeatNeo"},"content":"5.  Interface should not hinder the users\u0027 usage of the application in order to input the data they need and get the desired response."},{"lineNumber":153,"author":{"gitId":"SoonKeatNeo"},"content":"6.  The data files should be easily modifiable by a user with a basic understanding of the JavaScript Object Notation (JSON)."},{"lineNumber":154,"author":{"gitId":"SoonKeatNeo"},"content":"7.  Errors should display vividly and differently from the rest of the normal input such that users are aware something has gone wrong."},{"lineNumber":155,"author":{"gitId":"SoonKeatNeo"},"content":"8.  Should be easily deployable to all systems running any _mainstream OS_ once compiled executable is distributed via a release."},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":"*{More to be added}*"}],"authorContributionMap":{"sjq-sohjunqi":27,"SoonKeatNeo":6,"ssoonwee":69,"-":60}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"## Introduction"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"DieTrack is a **desktop app with a Command-Line Interface (CLI) that allows users to easily track and maintain their meals so that they are able to maintain their ideal body weight.** If you can type fast, you’ll be able to record your meals in this app much faster than other traditional GUI-based diet tracking apps."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"## Table of Contents"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c!--ts--\u003e"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Introduction](#introduction)"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Quick start](#quick-start)"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Features](#features)"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Body Mass Index (BMI) Tracker](#1-body-mass-index-bmi-tracker)"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Input weight, height and ideal weight](#11-input-weight-height-and-ideal-weight)"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Query weight, height and BMI](#12-query-weight-height-and-bmi)"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Update weight, height and ideal weight](#13-update-weight-height-and-ideal-weight)"},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Diet Plan Selector](#2-diet-plan-selector)"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Get diet recommendations based on current BMI](#21-get-diet-recommendation-based-on-current-bmi)"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [View active diet plan](#22-view-active-diet-plan)"},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Select active diet plan](#23-select-active-diet-plan)"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Macronutrients Tracker](#3-macronutrients-tracker)"},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [Input carbohydrates, fats and protein intake](#31-input-carbohydrates-fats-and-protein-intake)"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"  * [List food intake for certain days](#32-list-food-intake-for-certain-days)"},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"* [Command summary](#command-summary)"},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"\u003c!--te--\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"1. Download the latest `dietrack.jar`."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"1. Copy the file to the folder you will be launching DieTrack from on a daily basis."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data."},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`h/150 w/70 i/75`: Initializes the current user BMI with height of 150cm, weight of 70kg and ideal weight of 75kg."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`query`: Queries the current user\u0027s BMI with its height and weight information."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"   * **`bmi`**`update h/170 w/70 i/80`: Updates the current user BMI to height of 170cm, weight of 70kg and ideal weight of 80kg."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"jasaaanlim"},"content":"   * **`plan`**`recommended`: Queries the recommended diet plan based on user\u0027s BMI."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"jasaaanlim"},"content":"   * **`plan`**`t/1`: Queries more information of the weight loss diet plan."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"   * **`food`**`d/today n/tomatoes p/10 c/10 f/10`: Adds tomato consumption with protein of 10g, carbohydrates of 10g and fats of 10g to the food intake for today."},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"   * **`food`**`query d/today`: Queries the food intake for today."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"sjq-sohjunqi"},"content":"## 1. Body Mass Index (BMI) Tracker"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.1 Input weight, height and ideal weight"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"On application\u0027s first launch, the user is prompted to enter his/her height, weight and ideal weight."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"**Format:** `bmi h/height(cm) w/weight(kg) i/ideal_weight(kg)`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"**Example:** `bmi h/170 w/70 i/80`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"**Expected output:**"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"BMI (h: 170cm, w: 70kg, i: 80kg) has been saved."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.2 Query weight, height and BMI"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"The user can query their weight and height everyday to see their progress."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"**Format:** `bmi query`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"Below is your current height and weight:\\"},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"Last Updated: 2021-02-28\\"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"Weight: 100kg\\"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"Height: 170cm\\"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"BMI: 34.6 (High Risk)"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"### 1.3 Update weight, height and ideal weight"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"The user can query their weight and height everyday to see what they have input. "},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"This is recommended, so the user will have a more accurate view of their BMI status."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"**Format:** `bmi update h/height(cm) w/weight(kg) i/ideal_weight(kg)`"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"**Example:** `bmi update h/170 w/70 i/80`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"BMI (h: 170cm, w: 70kg, i: 80kg) updated for current user."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"## 2. Diet Plan Selector"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"jasaaanlim"},"content":"### 2.1 Get diet recommendation based on current BMI"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"jasaaanlim"},"content":"Gets a recommended diet plan based on the user\u0027s current BMI stored in the system."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"jasaaanlim"},"content":"**Format:** `plan recommended`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"jasaaanlim"},"content":"Here is the recommended diet plan for your BMI of 29.4:"},{"lineNumber":120,"author":{"gitId":"jasaaanlim"},"content":"1) Weight Loss Diet (Less-carbs)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"jasaaanlim"},"content":"### 2.2 View active diet plan"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"jasaaanlim"},"content":"Shows the current active diet plan previously selected by the user."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"jasaaanlim"},"content":"**Format:** `plan current`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"jasaaanlim"},"content":"You are on the Weight Loss Diet (Less-carbs)!\\"},{"lineNumber":131,"author":{"gitId":"jasaaanlim"},"content":"Here\u0027s the information tailored to your BMI:\\"},{"lineNumber":132,"author":{"gitId":"jasaaanlim"},"content":"Daily calories intake: 1,648 kcal\\"},{"lineNumber":133,"author":{"gitId":"jasaaanlim"},"content":"Daily Protein intake: 145 g\\"},{"lineNumber":134,"author":{"gitId":"jasaaanlim"},"content":"Daily Carbohydrates intake: 143 g\\"},{"lineNumber":135,"author":{"gitId":"jasaaanlim"},"content":"Daily Fat intake: 55 g"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"jasaaanlim"},"content":"### 2.3 Select active diet plan"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"jasaaanlim"},"content":"Changes the current active diet plan to the newly specified plan."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"jasaaanlim"},"content":"**Format:** `start p/plan`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"jasaaanlim"},"content":"**Example:** `start p/1`"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"jasaaanlim"},"content":"You are now on the Weight Loss Diet (Less-carbs)!\\"},{"lineNumber":148,"author":{"gitId":"jasaaanlim"},"content":"Here\u0027s the information tailored to your BMI:\\"},{"lineNumber":149,"author":{"gitId":"jasaaanlim"},"content":"Daily calories intake: 1,648 kcal\\"},{"lineNumber":150,"author":{"gitId":"jasaaanlim"},"content":"Daily Protein intake: 145 g\\"},{"lineNumber":151,"author":{"gitId":"jasaaanlim"},"content":"Daily Carbohydrates intake: 143 g\\"},{"lineNumber":152,"author":{"gitId":"jasaaanlim"},"content":"Daily Fat intake: 55 g"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"jasaaanlim"},"content":"### 2.4 List all available diet plans"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"jasaaanlim"},"content":"Displays a list of available diet plans."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"jasaaanlim"},"content":"**Format:** `plans`"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"jasaaanlim"},"content":"Here are the available diet plans:"},{"lineNumber":163,"author":{"gitId":"SoonKeatNeo"},"content":"1) Weight Loss Diet"},{"lineNumber":164,"author":{"gitId":"SoonKeatNeo"},"content":"2) Weight Gain Diet"},{"lineNumber":165,"author":{"gitId":"jasaaanlim"},"content":"3) Muscle Gain Diet"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"jasaaanlim"},"content":"### 2.5 View information about a particular diet plan"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"jasaaanlim"},"content":"Displays information about a particular diet plan."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"jasaaanlim"},"content":"**Format:** `plan \\tID`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"jasaaanlim"},"content":"**Example:** `plan t\\1`"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"jasaaanlim"},"content":"Here\u0027s more information about the Weight Loss plan:\\"},{"lineNumber":178,"author":{"gitId":"jasaaanlim"},"content":"Daily calories intake: 1,648 kcal\\"},{"lineNumber":179,"author":{"gitId":"jasaaanlim"},"content":"Daily Protein intake: 145 g\\"},{"lineNumber":180,"author":{"gitId":"jasaaanlim"},"content":"Daily Carbohydrates intake: 143 g\\"},{"lineNumber":181,"author":{"gitId":"jasaaanlim"},"content":"Daily Fat intake: 55 g"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"sjq-sohjunqi"},"content":"## 3. Macronutrients Tracker"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"SoonKeatNeo"},"content":"### 3.1 Input carbohydrates, fats and protein intake"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"SoonKeatNeo"},"content":"For daily meals, the user is required to enter his/her current intake of macronutrients, in terms of carbohydrates, fats, and proteins. The metric unit of measurement specified is in grams, delimited by commas."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"SoonKeatNeo"},"content":"**Format:** `food d/DATE n/NAME p/PROTEINS c/CARBOHYDRATES f/FATS`"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"SoonKeatNeo"},"content":"**Example:** `food d/today n/tomatoes p/10 c/10 f/10`\\"},{"lineNumber":193,"author":{"gitId":"SoonKeatNeo"},"content":"`food d/today n/onions p/20 c/0 f/100`"},{"lineNumber":194,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":195,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":196,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":197,"author":{"gitId":"SoonKeatNeo"},"content":"Tomatoes (Protein: 10g, Carbohydrates: 10g, Fats:10g) has been tracked. 170 kcal consumed.\\"},{"lineNumber":198,"author":{"gitId":"SoonKeatNeo"},"content":"Onions (Protein: 20g, Carbohydrates: 0g, Fats:100g) has been tracked. 340 kcal consumed."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"sjq-sohjunqi"},"content":"### 3.2 List food intake for certain days"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"SoonKeatNeo"},"content":"The user will be able to see the current daily food intake and how far off, or if they have exceeded their daily calorie intake requirement."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"SoonKeatNeo"},"content":"**Format:** `food query d/DATE`"},{"lineNumber":205,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":206,"author":{"gitId":"SoonKeatNeo"},"content":"**Example:** `food query d/today`"},{"lineNumber":207,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":208,"author":{"gitId":"jasaaanlim"},"content":"**Expected output:**"},{"lineNumber":209,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":210,"author":{"gitId":"SoonKeatNeo"},"content":"Summary Food Intake for the Day (2021-02-28):\\"},{"lineNumber":211,"author":{"gitId":"SoonKeatNeo"},"content":"Tomatoes: 170 kcal\\"},{"lineNumber":212,"author":{"gitId":"SoonKeatNeo"},"content":"Onions: 340 kcal\\"},{"lineNumber":213,"author":{"gitId":"SoonKeatNeo"},"content":"Total Calories Intake: 510 kcal"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":222,"author":{"gitId":"sjq-sohjunqi"},"content":"**Input weight, height and ideal weight** | `bmi h/height(cm) w/weight(kg) i/ideal_weight(kg)​` \u003cbr\u003e e.g., `bmi h/170 w/70 i/80`"},{"lineNumber":223,"author":{"gitId":"sjq-sohjunqi"},"content":"**Query weight, height and BMI** | `bmi query`"},{"lineNumber":224,"author":{"gitId":"sjq-sohjunqi"},"content":"**Update weight, height and ideal weight** | `bmi update h/height(cm) w/weight(kg) i/ideal_weight(kg)`\u003cbr\u003e e.g., `bmi update h/170 w/70 i/80`"},{"lineNumber":225,"author":{"gitId":"sjq-sohjunqi"},"content":"**Get diet recommendation based on current BMI** | `plan recommended`"},{"lineNumber":226,"author":{"gitId":"sjq-sohjunqi"},"content":"**View active diet plan** | `plan current`"},{"lineNumber":227,"author":{"gitId":"sjq-sohjunqi"},"content":"**Select active diet plan** | `start p/plan`\u003cbr\u003e e.g., `start p/1`"},{"lineNumber":228,"author":{"gitId":"sjq-sohjunqi"},"content":"**List all available diet plans** | `plans`"},{"lineNumber":229,"author":{"gitId":"sjq-sohjunqi"},"content":"**View information about a particular diet plan** | `plan \\tID​`\u003cbr\u003e e.g.,`plan t\\1`"},{"lineNumber":230,"author":{"gitId":"sjq-sohjunqi"},"content":"**Input carbohydrates, fats and protein intake** | `food d/DATE n/NAME p/PROTEINS c/CARBOHYDRATES f/FATS`\u003cbr\u003e e.g., `food d/today n/tomatoes p/10 c/10 f/10`"},{"lineNumber":231,"author":{"gitId":"sjq-sohjunqi"},"content":"**List food intake for certain days** | `food query d/DATE`\u003cbr\u003e e.g., `food query d/today`"}],"authorContributionMap":{"sjq-sohjunqi":39,"SoonKeatNeo":19,"ssoonwee":9,"WeiLiangLOL":17,"jasaaanlim":51,"-":96}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"title: DieTrack"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-T12-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-T12-2/tp/actions)"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-T12-2/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"**DieTrack is a desktop application that allows users to easily track and maintain their meals so that they are able to maintain their ideal body weight.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"* The product name is a play on the words \"die\", \"diet\" and \"track\". It is a syllogism that if the user does not track their diet, it could result in bad consequences that could ultimately result in death."},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"* If you are interested in using DieTrack, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"* If you are interested in helping to develop DieTrack, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"SoonKeatNeo":8,"-":13}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.AddressBookStorage;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.JsonUniqueFoodListStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.UniqueFoodListStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":38,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":39,"author":{"gitId":"-"},"content":" */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodListStorage uniqueFoodListStorage \u003d"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(userPrefs.getUniqueFoodListFilePath());"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"        // TODO: Update handling of method"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cUniqueFoodList\u003e uniqueFoodListOptional;"},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList uniqueFoodList;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"            uniqueFoodListOptional \u003d storage.readFoodList();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"            if (!uniqueFoodListOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"                logger.info(\"Food data file not found. Will be starting fresh\");"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"            uniqueFoodList \u003d uniqueFoodListOptional.orElse(new UniqueFoodList());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"            uniqueFoodList \u003d new UniqueFoodList();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"            uniqueFoodList \u003d new UniqueFoodList();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"        return new ModelManager(initialData, uniqueFoodList, userPrefs);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":138,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":166,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":17,"-":181}},{"path":"src/main/java/seedu/address/logic/FoodIntakeComparator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntake;"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":" * Compares and sorts FoodIntake objects by the date"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"public class FoodIntakeComparator implements Comparator\u003cFoodIntake\u003e {"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":"    public int compare(FoodIntake firstIntake, FoodIntake secondIntake) {"},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate firstIntakeDate \u003d firstIntake.getDate();"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate secondIntakeDate \u003d secondIntake.getDate();"},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":"        return firstIntakeDate.compareTo(secondIntakeDate);"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"}"}],"authorContributionMap":{"sjq-sohjunqi":20}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"            storage.saveFoodList(model.getUniqueFoodList());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":1,"-":81}},{"path":"src/main/java/seedu/address/logic/ProgressCalculator.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sjq-sohjunqi"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":3,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.time.format.FormatStyle;"},{"lineNumber":6,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"sjq-sohjunqi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":9,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.DietPlan;"},{"lineNumber":10,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.diet.MacroNutrientComposition;"},{"lineNumber":11,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":12,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntake;"},{"lineNumber":13,"author":{"gitId":"sjq-sohjunqi"},"content":"import seedu.address.model.food.FoodIntakeList;"},{"lineNumber":14,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":15,"author":{"gitId":"sjq-sohjunqi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"sjq-sohjunqi"},"content":" * Class for generating a progress report of diet plan."},{"lineNumber":17,"author":{"gitId":"sjq-sohjunqi"},"content":" */"},{"lineNumber":18,"author":{"gitId":"sjq-sohjunqi"},"content":"public class ProgressCalculator {"},{"lineNumber":19,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":20,"author":{"gitId":"sjq-sohjunqi"},"content":"    // Leeway value for adherence to diet requirements (in percentage)"},{"lineNumber":21,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static final double LEEWAY \u003d 5.00;"},{"lineNumber":22,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":23,"author":{"gitId":"sjq-sohjunqi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"sjq-sohjunqi"},"content":"     * Calculates and reports on how much percentage of each day\u0027s food intake is adhering to the diet plan."},{"lineNumber":25,"author":{"gitId":"sjq-sohjunqi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param dietPlan The diet plan to calculate daily food intake against."},{"lineNumber":27,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @param foodIntakeList The food consumption for each day."},{"lineNumber":28,"author":{"gitId":"sjq-sohjunqi"},"content":"     * @return Progress Report"},{"lineNumber":29,"author":{"gitId":"sjq-sohjunqi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"sjq-sohjunqi"},"content":"    public static String calculateProgress(FoodIntakeList foodIntakeList, DietPlan dietPlan) {"},{"lineNumber":31,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":32,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get list of Foods"},{"lineNumber":33,"author":{"gitId":"sjq-sohjunqi"},"content":"        List\u003cFoodIntake\u003e foodIntakes \u003d foodIntakeList.getList();"},{"lineNumber":34,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":35,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Sort food intake list by dates"},{"lineNumber":36,"author":{"gitId":"sjq-sohjunqi"},"content":"        Collections.sort(foodIntakes, new FoodIntakeComparator());"},{"lineNumber":37,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":38,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Get the daily requirements of the diet plan"},{"lineNumber":39,"author":{"gitId":"sjq-sohjunqi"},"content":"        MacroNutrientComposition composition \u003d dietPlan.getMacroNutrientComposition();"},{"lineNumber":40,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyFats \u003d composition.getFats();"},{"lineNumber":41,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyCarbs \u003d composition.getCarbohydrates();"},{"lineNumber":42,"author":{"gitId":"sjq-sohjunqi"},"content":"        double dailyProteins \u003d composition.getProteins();"},{"lineNumber":43,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":44,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Print details of diet plan"},{"lineNumber":45,"author":{"gitId":"sjq-sohjunqi"},"content":"        StringBuilder report \u003d new StringBuilder();"},{"lineNumber":46,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(dietPlan.viewPlan());"},{"lineNumber":47,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Dates that progress report is listing"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\"Here is the report for the days \");"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate firstIntakeDay \u003d foodIntakes.get(0).getDate();"},{"lineNumber":51,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate lastIntakeDay \u003d foodIntakes.get(foodIntakes.size() - 1).getDate();"},{"lineNumber":52,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(firstIntakeDay.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));"},{"lineNumber":53,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\" to \");"},{"lineNumber":54,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(lastIntakeDay.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG)));"},{"lineNumber":55,"author":{"gitId":"sjq-sohjunqi"},"content":"        report.append(\":\\n\\n\");"},{"lineNumber":56,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":57,"author":{"gitId":"sjq-sohjunqi"},"content":"        // For each day, give a progress report on whether intake is over or less"},{"lineNumber":58,"author":{"gitId":"sjq-sohjunqi"},"content":"        // than the required amount."},{"lineNumber":59,"author":{"gitId":"sjq-sohjunqi"},"content":"        LocalDate previousDay \u003d null;"},{"lineNumber":60,"author":{"gitId":"sjq-sohjunqi"},"content":"        double carbsSum \u003d 0.0;"},{"lineNumber":61,"author":{"gitId":"sjq-sohjunqi"},"content":"        double fatsSum \u003d 0.0;"},{"lineNumber":62,"author":{"gitId":"sjq-sohjunqi"},"content":"        double proteinsSum \u003d 0.0;"},{"lineNumber":63,"author":{"gitId":"sjq-sohjunqi"},"content":"        int counter \u003d 0;"},{"lineNumber":64,"author":{"gitId":"sjq-sohjunqi"},"content":"        for (FoodIntake foodIntake : foodIntakes) {"},{"lineNumber":65,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Report on date"},{"lineNumber":66,"author":{"gitId":"sjq-sohjunqi"},"content":"            LocalDate day \u003d foodIntake.getDate();"},{"lineNumber":67,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":68,"author":{"gitId":"sjq-sohjunqi"},"content":"            if (!day.equals(previousDay)) {"},{"lineNumber":69,"author":{"gitId":"sjq-sohjunqi"},"content":"                // New Day"},{"lineNumber":70,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":71,"author":{"gitId":"sjq-sohjunqi"},"content":"                if (counter !\u003d 0) {"},{"lineNumber":72,"author":{"gitId":"sjq-sohjunqi"},"content":"                    // Calculate total adherence percentages"},{"lineNumber":73,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double carbsAdherence \u003d calculatePercentage(carbsSum, dailyCarbs * counter);"},{"lineNumber":74,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double fatsAdherence \u003d calculatePercentage(fatsSum, dailyFats * counter);"},{"lineNumber":75,"author":{"gitId":"sjq-sohjunqi"},"content":"                    double proteinsAdherence \u003d calculatePercentage(proteinsSum, dailyProteins * counter);"},{"lineNumber":76,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":77,"author":{"gitId":"sjq-sohjunqi"},"content":"                    // Report daily adherence percentage"},{"lineNumber":78,"author":{"gitId":"sjq-sohjunqi"},"content":"                    if (carbsAdherence \u003e 100 + LEEWAY) {"},{"lineNumber":79,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double exceed \u003d carbsAdherence - (100.00 - LEEWAY);"},{"lineNumber":80,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String exceedString \u003d String.format(\"%,.2f\", exceed);"},{"lineNumber":81,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily carbohydrate consumption has exceeded by \" + exceedString + \"%\\n\\n\");"},{"lineNumber":82,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else if (carbsAdherence \u003c 100 - LEEWAY) {"},{"lineNumber":83,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double under \u003d (100 - LEEWAY) - carbsAdherence;"},{"lineNumber":84,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String underString \u003d String.format(\"%,.2f\", under);"},{"lineNumber":85,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily carbohydrate consumption is under by \" + underString + \"%\\n\\n\");"},{"lineNumber":86,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else {"},{"lineNumber":87,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily carbohydrate consumption \""},{"lineNumber":88,"author":{"gitId":"sjq-sohjunqi"},"content":"                                + \"is within diet requirements. Well done!\\n\\n\");"},{"lineNumber":89,"author":{"gitId":"sjq-sohjunqi"},"content":"                    }"},{"lineNumber":90,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":91,"author":{"gitId":"sjq-sohjunqi"},"content":"                    if (fatsAdherence \u003e 100 + LEEWAY) {"},{"lineNumber":92,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double exceed \u003d fatsAdherence - (100.00 - LEEWAY);"},{"lineNumber":93,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String exceedString \u003d String.format(\"%,.2f\", exceed);"},{"lineNumber":94,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily fat consumption has exceeded by \" + exceedString + \"%\\n\\n\");"},{"lineNumber":95,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else if (fatsAdherence \u003c 100 - LEEWAY) {"},{"lineNumber":96,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double under \u003d (100 - LEEWAY) - fatsAdherence;"},{"lineNumber":97,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String underString \u003d String.format(\"%,.2f\", under);"},{"lineNumber":98,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily fat consumption is under by \" + underString + \"%\\n\\n\");"},{"lineNumber":99,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else {"},{"lineNumber":100,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily fat consumption is within diet requirements. Well done!\\n\\n\");"},{"lineNumber":101,"author":{"gitId":"sjq-sohjunqi"},"content":"                    }"},{"lineNumber":102,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":103,"author":{"gitId":"sjq-sohjunqi"},"content":"                    if (proteinsAdherence \u003e 100 + LEEWAY) {"},{"lineNumber":104,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double exceed \u003d proteinsAdherence - (100.00 - LEEWAY);"},{"lineNumber":105,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String exceedString \u003d String.format(\"%,.2f\", exceed);"},{"lineNumber":106,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily protein consumption has exceeded by \" + exceedString + \"%\\n\\n\");"},{"lineNumber":107,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else if (proteinsAdherence \u003c 100 - LEEWAY) {"},{"lineNumber":108,"author":{"gitId":"sjq-sohjunqi"},"content":"                        double under \u003d (100 - LEEWAY) - proteinsAdherence;"},{"lineNumber":109,"author":{"gitId":"sjq-sohjunqi"},"content":"                        String underString \u003d String.format(\"%,.2f\", under);"},{"lineNumber":110,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily protein consumption is under by \" + underString + \"%\\n\\n\");"},{"lineNumber":111,"author":{"gitId":"sjq-sohjunqi"},"content":"                    } else {"},{"lineNumber":112,"author":{"gitId":"sjq-sohjunqi"},"content":"                        report.append(\"Your daily protein consumption is within diet requirements. Well done!\\n\\n\");"},{"lineNumber":113,"author":{"gitId":"sjq-sohjunqi"},"content":"                    }"},{"lineNumber":114,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":115,"author":{"gitId":"sjq-sohjunqi"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":117,"author":{"gitId":"sjq-sohjunqi"},"content":"                // Reset counter and sums"},{"lineNumber":118,"author":{"gitId":"sjq-sohjunqi"},"content":"                counter \u003d 1;"},{"lineNumber":119,"author":{"gitId":"sjq-sohjunqi"},"content":"                carbsSum \u003d 0.0;"},{"lineNumber":120,"author":{"gitId":"sjq-sohjunqi"},"content":"                fatsSum \u003d 0.0;"},{"lineNumber":121,"author":{"gitId":"sjq-sohjunqi"},"content":"                proteinsSum \u003d 0.0;"},{"lineNumber":122,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":123,"author":{"gitId":"sjq-sohjunqi"},"content":"                // Report new day"},{"lineNumber":124,"author":{"gitId":"sjq-sohjunqi"},"content":"                report.append(\"Date: \");"},{"lineNumber":125,"author":{"gitId":"sjq-sohjunqi"},"content":"                report.append(day.format(DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL)));"},{"lineNumber":126,"author":{"gitId":"sjq-sohjunqi"},"content":"                report.append(\"\\n\");"},{"lineNumber":127,"author":{"gitId":"sjq-sohjunqi"},"content":"                previousDay \u003d day;"},{"lineNumber":128,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":129,"author":{"gitId":"sjq-sohjunqi"},"content":"                report.append(\"  Name\\tCarbohydrates\\tFats\\tProtein\\n\");"},{"lineNumber":130,"author":{"gitId":"sjq-sohjunqi"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":132,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Report on foods consumed and macronutrients"},{"lineNumber":133,"author":{"gitId":"sjq-sohjunqi"},"content":"            Food food \u003d foodIntake.getFood();"},{"lineNumber":134,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":135,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Get macronutrients consumed"},{"lineNumber":136,"author":{"gitId":"sjq-sohjunqi"},"content":"            double carbs \u003d food.getCarbos();"},{"lineNumber":137,"author":{"gitId":"sjq-sohjunqi"},"content":"            double fats \u003d food.getFats();"},{"lineNumber":138,"author":{"gitId":"sjq-sohjunqi"},"content":"            double proteins \u003d food.getProteins();"},{"lineNumber":139,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":140,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Format consumed macronutrients"},{"lineNumber":141,"author":{"gitId":"sjq-sohjunqi"},"content":"            String carbsString \u003d String.format(\"%,.2f\", carbs);"},{"lineNumber":142,"author":{"gitId":"sjq-sohjunqi"},"content":"            String fatsString \u003d String.format(\"%,.2f\", fats);"},{"lineNumber":143,"author":{"gitId":"sjq-sohjunqi"},"content":"            String proteinsString \u003d String.format(\"%,.2f\", proteins);"},{"lineNumber":144,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":145,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append((counter + 1) + \"  \" + food.getName() + \"\\t\");"},{"lineNumber":146,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(carbsString + \"\\t\");"},{"lineNumber":147,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(fatsString + \"\\t\");"},{"lineNumber":148,"author":{"gitId":"sjq-sohjunqi"},"content":"            report.append(proteinsString + \"\\t\\n\");"},{"lineNumber":149,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":150,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Store sum of macronutrient consumption"},{"lineNumber":151,"author":{"gitId":"sjq-sohjunqi"},"content":"            carbsSum +\u003d carbs;"},{"lineNumber":152,"author":{"gitId":"sjq-sohjunqi"},"content":"            fatsSum +\u003d fats;"},{"lineNumber":153,"author":{"gitId":"sjq-sohjunqi"},"content":"            proteinsSum +\u003d proteins;"},{"lineNumber":154,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":155,"author":{"gitId":"sjq-sohjunqi"},"content":"            // Increment counter"},{"lineNumber":156,"author":{"gitId":"sjq-sohjunqi"},"content":"            counter++;"},{"lineNumber":157,"author":{"gitId":"sjq-sohjunqi"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":159,"author":{"gitId":"sjq-sohjunqi"},"content":"        // Return the final report"},{"lineNumber":160,"author":{"gitId":"sjq-sohjunqi"},"content":"        return report.toString();"},{"lineNumber":161,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":162,"author":{"gitId":"sjq-sohjunqi"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":164,"author":{"gitId":"sjq-sohjunqi"},"content":"    private static double calculatePercentage(double intake, double required) {"},{"lineNumber":165,"author":{"gitId":"sjq-sohjunqi"},"content":"        return (intake / required) * 100.00;"},{"lineNumber":166,"author":{"gitId":"sjq-sohjunqi"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":168,"author":{"gitId":"sjq-sohjunqi"},"content":"}"}],"authorContributionMap":{"sjq-sohjunqi":168}},{"path":"src/main/java/seedu/address/logic/commands/AddFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":" * Macronutrients Tracker Food command"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodItemCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"food\";"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens up the macronutrients tracker.\""},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"            + \"\\nThis tracker has 2 function:\""},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \"\\n1. Input food item with its carbo, fats and protein value for the day.\";"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Success adding food item (\";"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food item exists in the database. Do you want to\""},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"            + \" modify its details?\";"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    private final Food temporaryFood;"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * Creates a Food command to run the Macronutrients Tracker."},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodItemCommand(Food food) {"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        temporaryFood \u003d food;"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        if (model.hasFoodItem(temporaryFood)) {"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        model.addFoodItem(temporaryFood);"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(MESSAGE_SUCCESS + temporaryFood + \") into food list.\");"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":45}},{"path":"src/main/java/seedu/address/logic/commands/DeleteFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":" * Deletes a food item identified using it\u0027s displayed index from the UniqueFoodList."},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" */"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodItemCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"fooddelete\";"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            + \": Deletes the food item identified by its name.\\n\""},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"            + \"Parameters: name of food\\n\""},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"            + \"Example: \" + COMMAND_WORD + \" tomato\";"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Successfully deleted food item: \";"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_DELETE_FOOD_FAILURE \u003d \"Food item could not be found. Please ensure its name is\""},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \" correct.\";"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"    private final String foodName;"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodItemCommand(String name) {"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        this.foodName \u003d name;"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"        List\u003cFood\u003e foodList \u003d model.getAddressBook().getFoodList().getFoodList();"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        for (int i \u003d 0; i \u003c foodList.size(); i++) {"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"            if (foodList.get(i).getName().equals(this.foodName)) {"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"                model.deleteFoodItem(i);"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"                return new CommandResult(MESSAGE_DELETE_FOOD_SUCCESS + \" \" + this.foodName);"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        throw new CommandException(MESSAGE_DELETE_FOOD_FAILURE);"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":43,"WeiLiangLOL":2}},{"path":"src/main/java/seedu/address/logic/commands/ListFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"public class ListFoodItemCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"foodlist\";"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here are all the food items: \";"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NO_FOOD_ITEM \u003d \"The food list is empty. Start off by adding food items!\";"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"        if (model.getAddressBook().getFoodList().getFoodList().size() \u003d\u003d 0) {"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"            return new CommandResult(MESSAGE_NO_FOOD_ITEM);"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d model.listFoodItem();"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"        return new CommandResult(MESSAGE_SUCCESS + \"\\n\" + result);"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":23}},{"path":"src/main/java/seedu/address/logic/commands/UpdateFoodItemCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"public class UpdateFoodItemCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    public static final String COMMAND_WORD \u003d \"foodedit\";"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Updates the details of the certain food provided.\\n\""},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"            + \"Existing values will be overwritten by the input values and at least 1 value has to be different from\""},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"            + \" default.\\n\""},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"            + \"[\" + PREFIX_NAME + \"FOODNAME] \""},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"            + \"[\" + PREFIX_CARBOS + \"CARBO_IN_DOUBLE_FORMAT] \""},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"            + \"[\" + PREFIX_FATS + \"FAT_IN_DOUBLE_FORMAT] \""},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"            + \"[\" + PREFIX_PROTEINS + \"PROTEIN_IN_DOUBLE_FORMAT] \\n\""},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            + PREFIX_NAME + \"tomato \""},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"            + PREFIX_FATS + \"10.5\";"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Successfully updated food item\";"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field such as its carbos, fats or proteins \""},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"            + \"value must be edited and different from original. (Current Food being edited: \";"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_NOT_FOUND \u003d \"The food item is not found.\";"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"    private final EditFoodDescriptor editedFood;"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     * Creates an Update Food Item command to run the Macronutrients Tracker."},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"     * @param editedFood updated food data"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"    public UpdateFoodItemCommand(EditFoodDescriptor editedFood) {"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(editedFood);"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        this.editedFood \u003d new EditFoodDescriptor(editedFood);"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"        List\u003cFood\u003e foodList \u003d model.getAddressBook().getFoodList().getFoodList();"},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : foodList) {"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(editedFood.getName().get())) {"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"                Food updatedFood \u003d createEditedFood(food, editedFood);"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"                model.updateFoodItem(updatedFood);"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"                return new CommandResult(MESSAGE_EDIT_FOOD_SUCCESS);"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"        throw new CommandException(MESSAGE_NOT_FOUND);"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"     * edited with {@code editFoodDescriptor}."},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) throws"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"            CommandException {"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"        assert foodToEdit !\u003d null;"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"        Double updatedCarbos \u003d editFoodDescriptor.getCarbos().orElse(foodToEdit.getCarbos());"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"        Double updatedFats \u003d editFoodDescriptor.getFats().orElse(foodToEdit.getFats());"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        Double updatedProteins \u003d editFoodDescriptor.getProteins().orElse(foodToEdit.getProteins());"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        if (updatedCarbos \u003d\u003d foodToEdit.getCarbos() \u0026\u0026 updatedFats \u003d\u003d foodToEdit.getFats()"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 updatedProteins \u003d\u003d foodToEdit.getProteins()) {"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"            throw new CommandException(MESSAGE_NOT_EDITED + foodName + \")\");"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        return new Food(foodName, updatedCarbos, updatedFats, updatedProteins);"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"    public static class EditFoodDescriptor {"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"        private String name;"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        private Double carbos;"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"        private Double fats;"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"        private Double proteins;"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"        public EditFoodDescriptor() {"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"        /**"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"         * Copy constructor."},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"         */"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"            setName(toCopy.name);"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"            setCarbos(toCopy.carbos);"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"            setFats(toCopy.fats);"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"            setProteins(toCopy.proteins);"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"        /**"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"         * Returns true if at least one field is edited"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"         */"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"            return CollectionUtil.isAnyNonNull(carbos, fats, proteins);"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"        public void setName(String name) {"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"            this.name \u003d name.toLowerCase();"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cString\u003e getName() {"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"        public void setCarbos(Double carbos) {"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"            this.carbos \u003d carbos;"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getCarbos() {"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(carbos);"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"        public void setFats(Double fats) {"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"            this.fats \u003d fats;"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getFats() {"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(fats);"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":"        public void setProteins(Double proteins) {"},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"            this.proteins \u003d proteins;"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"        public Optional\u003cDouble\u003e getProteins() {"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"            return Optional.ofNullable(proteins);"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":143,"WeiLiangLOL":2}},{"path":"src/main/java/seedu/address/logic/parser/AddFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodItemCommand;"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"public class AddFoodItemCommandParser implements Parser\u003cAddFoodItemCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    public AddFoodItemCommand parse(String args) throws ParseException {"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_DATE, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS);"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_DATE, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS)"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddFoodItemCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        //LocalDateTime dateTime \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        String name \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        Double carbos \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get());"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        Double fats \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get());"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        Double proteins \u003d ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get());"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        Food newFood \u003d new Food(name, fats, carbos, proteins);"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"        return new AddFoodItemCommand(newFood);"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":51}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.AddFoodItemCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.DeleteFoodItemCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.ListFoodItemCommand;"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"        case AddFoodItemCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"            return new AddFoodItemCommandParser().parse(arguments);"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"        case UpdateFoodItemCommand.COMMAND_WORD:"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"            return new UpdateFoodItemCommandParser().parse(arguments);"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        case DeleteFoodItemCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"            return new DeleteFoodItemCommandParser().parse(arguments);"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"        case ListFoodItemCommand.COMMAND_WORD:"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"            return new ListFoodItemCommand();"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":16,"-":72}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    /* Prefix definitions -\u003e To be erased once our classes are finalised */"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"    //public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    /* Prefix definitions for Food */"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_CARBOS \u003d new Prefix(\"c/\");"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_FATS \u003d new Prefix(\"f/\");"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    public static final Prefix PREFIX_PROTEINS \u003d new Prefix(\"p/\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":8,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/DeleteFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.DeleteFoodItemCommand;"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":" * Parses input arguments and creates a new DeleteFoodItemCommand object"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":" */"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"public class DeleteFoodItemCommandParser implements Parser\u003cDeleteFoodItemCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteFoodItemCommand"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"     * and returns a DeleteFoodItemCommand object for execution."},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    public DeleteFoodItemCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME);"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"                    DeleteFoodItemCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        String foodName \u003d ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        return new DeleteFoodItemCommand(foodName);"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":42}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String date} into a {@code Date}"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"     * @param date date string"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"     * @return a DateTime object"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code date} is invalid."},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    public static LocalDateTime parseDate(String date) throws ParseException {"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(date);"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        String trimmedDate \u003d date.trim();"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"uuuu-MM-dd\");"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(trimmedDate, formatter);"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        return dateTime;"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String value} into a {@code Double}"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     * @param doubleValue double string"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"     * @return a Double value"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code value} is invalid."},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"    public static Double parseDouble(String doubleValue) throws ParseException {"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(doubleValue);"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"        String trimmedValue \u003d doubleValue.trim();"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        return Double.valueOf(trimmedValue);"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"    public static String parseFoodName(String name) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(name);"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"        return trimmedName;"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":146,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":45,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/UpdateFoodItemCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CARBOS;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FATS;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PROTEINS;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand;"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.commands.UpdateFoodItemCommand.EditFoodDescriptor;"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"public class UpdateFoodItemCommandParser implements Parser\u003cUpdateFoodItemCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"     * Parses the given {@code String} of arguments in the context of the Update Command"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"     * and returns an UpdateFoodItemCommand object for execution."},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * @param args arguments passed in"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * @return an UpdateFoodItemCommand instance"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    public UpdateFoodItemCommand parse(String args) throws ParseException {"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(args);"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PROTEINS, PREFIX_CARBOS, PREFIX_FATS);"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        EditFoodDescriptor editFoodDescriptor \u003d new EditFoodDescriptor();"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setName(ParserUtil.parseFoodName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_CARBOS).isPresent()) {"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setCarbos(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_CARBOS).get()));"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_FATS).isPresent()) {"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setFats(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_FATS).get()));"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        if (argMultimap.getValue(PREFIX_PROTEINS).isPresent()) {"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"            editFoodDescriptor.setProteins(ParserUtil.parseDouble(argMultimap.getValue(PREFIX_PROTEINS).get()));"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"        return new UpdateFoodItemCommand(editFoodDescriptor);"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":44}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    private UniqueFoodList foodList;"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"    //Used to have an old comment here, removed due to checkstyle error. Refer to old template for more."},{"lineNumber":23,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"        foodList \u003d new UniqueFoodList();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"    public AddressBook() {"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}, and adds the associated {@code FoodList}."},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied, UniqueFoodList uniqueFoodList) {"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"        this();"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"        resetData(toBeCopied);"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foodList \u003d uniqueFoodList;"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a person with the same identity as {@code food} exists in the food list."},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food food) {"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(food);"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        return foodList.hasFoodItem(food);"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"     * Adds a food item into the food list."},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"     * The food item must not exist in the food list."},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"     * @param food food item"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodItem(Food food) {"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"        foodList.addFoodItem(food);"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"     * Deletes a food item in the food list by its name."},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"     * @param index food index"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        foodList.deleteFoodItem(index);"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":"     * Updates a food item in the food list"},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"     * The food item must exist in the food list."},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"     * @param food updated food item"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food food) {"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"        foodList.updateFoodItem(food);"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"     * Gets the unique food list."},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"     * @return a unique food list"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList getFoodList() {"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"        return foodList;"},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items from the food list."},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of the food list"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"    public String listFoodItem() {"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"        return foodList.listAllFoodItem();"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":175,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":63,"WeiLiangLOL":11,"-":111}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    /** Returns the UniqueFoodList */"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"    UniqueFoodList getUniqueFoodList();"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a food with the same name as {@code food} exists in the food list."},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"    boolean hasFoodItem(Food food);"},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"     * Adds the given food item."},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     * {@code food} must not already exist in the food list."},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"    void addFoodItem(Food food);"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":"     * Updates food in food item list."},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"     * @param food updated food item"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"    void updateFoodItem(Food food);"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"     * Deletes food in food item list."},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"     * @param index food index to be deleted"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"    void deleteFoodItem(int index);"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items from the food items list."},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of all the food items"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":"    String listFoodItem();"},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":31,"WeiLiangLOL":4,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"    private final UniqueFoodList uniqueFoodList;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, UniqueFoodList uniqueFoodList, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"        this.addressBook \u003d new AddressBook(addressBook, uniqueFoodList);"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodList \u003d uniqueFoodList;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and unique food list: \" + uniqueFoodList"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"                + \" and user prefs \" + userPrefs);"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"        this(new AddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":155,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 uniqueFoodList.equals(other.uniqueFoodList)"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"WeiLiangLOL"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UniqueFoodList Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":160,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":161,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"WeiLiangLOL"},"content":"    public UniqueFoodList getUniqueFoodList() {"},{"lineNumber":163,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodList;"},{"lineNumber":164,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":166,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food food) {"},{"lineNumber":168,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(food);"},{"lineNumber":169,"author":{"gitId":"ssoonwee"},"content":"        return addressBook.hasFoodItem(food);"},{"lineNumber":170,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":172,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":173,"author":{"gitId":"ssoonwee"},"content":"    public void addFoodItem(Food food) {"},{"lineNumber":174,"author":{"gitId":"ssoonwee"},"content":"        addressBook.addFoodItem(food);"},{"lineNumber":175,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":177,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":178,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food food) {"},{"lineNumber":179,"author":{"gitId":"ssoonwee"},"content":"        addressBook.updateFoodItem(food);"},{"lineNumber":180,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":182,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":183,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {"},{"lineNumber":184,"author":{"gitId":"ssoonwee"},"content":"        addressBook.deleteFoodItem(index);"},{"lineNumber":185,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":187,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":188,"author":{"gitId":"ssoonwee"},"content":"    public String listFoodItem() {"},{"lineNumber":189,"author":{"gitId":"ssoonwee"},"content":"        return addressBook.listFoodItem();"},{"lineNumber":190,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":26,"WeiLiangLOL":20,"-":146}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     * Returns a view of the food list."},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     * @return food list"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    UniqueFoodList getFoodList();"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":8,"-":17}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path uniqueFoodListFilePath \u003d Paths.get(\"data\" , \"foodlist.json\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return addressBookFilePath;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getUniqueFoodListFilePath() {"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListFilePath;"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public void setUniqueFoodListFilePath(Path uniqueFoodListFilePath) {"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(uniqueFoodListFilePath);"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodListFilePath \u003d uniqueFoodListFilePath;"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 uniqueFoodListFilePath.equals(o.uniqueFoodListFilePath);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(guiSettings, addressBookFilePath, uniqueFoodListFilePath);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"        sb.append(\"\\nLocal data file location : \" + uniqueFoodListFilePath);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":14,"-":85}},{"path":"src/main/java/seedu/address/model/diet/DietPlan.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":" * Wrapper class to contain nutritional breakdown of macronutrient consumption."},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":" * Contains a generic breakdown for the three daily meals, breakfast, lunch and dinner."},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"public class DietPlan {"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String planName;"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String description;"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    private final MacroNutrientComposition macroNutrientComposition;"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructor for diet plan holding information of daily consumption."},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param planName The name of the plan."},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param description The description of the plan."},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param dietComposition The macronutrient composition."},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    public DietPlan(String planName, String description, MacroNutrientComposition dietComposition) {"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        requireAllNonNull(planName, description, dietComposition);"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        this.planName \u003d planName;"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        this.macroNutrientComposition \u003d dietComposition;"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns a string formatted representation of the DietPlan."},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Diet plan information."},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"    public String viewPlan() {"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"        // TODO: Agree on message formatting"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"        throw new UnsupportedOperationException();"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the name of the diet plan."},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Name of diet plan."},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"    public String getPlanName() {"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"        return planName;"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the description of the diet plan."},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Description of diet plan."},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"    public String getDescription() {"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        return description;"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the macronutrient composition."},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return The nutritional composition of macronutrients."},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"    public MacroNutrientComposition getMacroNutrientComposition() {"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"        return macroNutrientComposition;"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        DietPlan dietPlan \u003d (DietPlan) o;"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"        return planName.equals(dietPlan.planName)"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 description.equals(dietPlan.description)"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 macroNutrientComposition.equals(dietPlan.macroNutrientComposition);"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(planName, description, macroNutrientComposition);"},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"    public String toString() {"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":"        return String.format(\"%s { \\\"description\\\": \\\"%s\\\", \\\"composition\\\": %s }\","},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"                planName, description, macroNutrientComposition);"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":94}},{"path":"src/main/java/seedu/address/model/diet/MacroNutrientComposition.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":" * Wrapper class containing the composition for the various macronutrients."},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"public final class MacroNutrientComposition {"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double fats;"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double carbohydrates;"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double proteins;"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructor for diet composition."},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    public MacroNutrientComposition(double fats, double carbohydrates, double proteins) {"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"        checkArgument(isValidComposition(fats, carbohydrates, proteins));"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"        this.fats \u003d fats;"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbohydrates \u003d carbohydrates;"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d proteins;"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended fat consumption."},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Fat percentage."},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getFats() {"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return fats;"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended protein consumption."},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Protein percentage."},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getProteins() {"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        return proteins;"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the percentage for recommended carbohydrate consumption."},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return Carbohydrate percentage."},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"    public double getCarbohydrates() {"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"        return carbohydrates;"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns true if the sum of the macronutrient percentages totals to 100, and values given non-negative."},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param fats The fat percentage."},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param carbohydrates The carbohydrate percentage."},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param proteins The protein percentage."},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"     * @return {@code boolean} true if valid composition, false otherwise."},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    public static boolean isValidComposition(double fats, double carbohydrates, double proteins) {"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"        return (fats + carbohydrates + proteins \u003d\u003d 100)"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 (fats \u003e\u003d 0 \u0026\u0026 carbohydrates \u003e\u003d 0 \u0026\u0026 proteins \u003e\u003d 0);"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"        return String.format(\"{ \\\"proteins\\\": %.2f, \\\"fats\\\": %.2f, \\\"carbohydrates\\\": %.2f }\","},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"                proteins, fats, carbohydrates);"},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":"        MacroNutrientComposition that \u003d (MacroNutrientComposition) o;"},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"        return Double.compare(that.fats, fats) \u003d\u003d 0"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 Double.compare(that.carbohydrates, carbohydrates) \u003d\u003d 0"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"                \u0026\u0026 Double.compare(that.proteins, proteins) \u003d\u003d 0;"},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {"},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(fats, carbohydrates, proteins);"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":91}},{"path":"src/main/java/seedu/address/model/food/Food.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"public class Food {"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":"    public static final double PROTEIN_AND_CARBOS_MULTIPLIER \u003d 4; //Conversion to KCAL"},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"    public static final double FAT_MULTIPLIER \u003d 9; //Conversion to KCAL"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_WHITESPACE_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_CHAR_REGEX \u003d \"[a-zA-Z ]*\";"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public static final String VALIDATION_POSITIVE_DOUBLE_REGEX \u003d \"(\\\\d*\\\\.?\\\\d+)\";"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Food name can take any alphabets charcter and it should not be\""},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"            + \"blank.\";"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    public static final String DIGIT_CONSTRAINTS \u003d \"Double value input can only be positive and more than 0.\";"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    private final String name;"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"    private double fats;"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"    private double carbos;"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"    private double proteins;"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"    private double kiloCalories;"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"     * Initialises the food class."},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"     * @param name     food name"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     * @param carbos   amount of carbos"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     * @param fats     amount of fats"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     * @param proteins amount of proteins"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"    public Food(String name, double carbos, double fats, double proteins) {"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        requireNonNull(name);"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        checkArgument(isValidFoodName(name), MESSAGE_CONSTRAINTS); //Checks for all whitespaces and valid character"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        checkArgument(isValidNumber(fats, carbos, proteins), DIGIT_CONSTRAINTS); //Checks for positive doubles inc 0."},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        this.name \u003d name.toLowerCase();"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        this.fats \u003d fats;"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        this.carbos \u003d carbos;"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        this.proteins \u003d proteins;"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"        this.kiloCalories \u003d calculateKiloCalories();"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"     * Gets food name."},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"     * @return food name"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"    public String getName() {"},{"lineNumber":48,"author":{"gitId":"sjq-sohjunqi"},"content":"        return this.name;"},{"lineNumber":49,"author":{"gitId":"sjq-sohjunqi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"sjq-sohjunqi"},"content":""},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    public double getFats() {"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        return this.fats;"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"    public double getCarbos() {"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"        return this.carbos;"},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"    public double getProteins() {"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"        return this.proteins;"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"    public double getKiloCalories() {"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"        return this.kiloCalories;"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"    public static boolean isValidFoodName(String test) {"},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"        if (test.matches(VALIDATION_CHAR_REGEX) \u0026\u0026 test.matches(VALIDATION_WHITESPACE_REGEX)) {"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"            return false;"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     * Returns true if a given number is valid and more than 0."},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"    public static boolean isValidNumber(double fats, double carbos, double proteins) {"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"        String fatsString \u003d Double.toString(fats);"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"        String carbosString \u003d Double.toString(carbos);"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        String proteinsString \u003d Double.toString(proteins);"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        if (fatsString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)"},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 carbosString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"                \u0026\u0026 proteinsString.matches(VALIDATION_POSITIVE_DOUBLE_REGEX)) {"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"            return true;"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":94,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of fats for this food."},{"lineNumber":96,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"ssoonwee"},"content":"     * @param fats new amount of fats"},{"lineNumber":98,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item"},{"lineNumber":99,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"ssoonwee"},"content":"    public Food updateFats(double fats) {"},{"lineNumber":101,"author":{"gitId":"ssoonwee"},"content":"        this.fats \u003d fats;"},{"lineNumber":102,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();"},{"lineNumber":103,"author":{"gitId":"ssoonwee"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":106,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of carbos for this food."},{"lineNumber":108,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"ssoonwee"},"content":"     * @param carbos new carbo value"},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item"},{"lineNumber":111,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":113,"author":{"gitId":"ssoonwee"},"content":"    public Food updateCarbos(double carbos) {"},{"lineNumber":114,"author":{"gitId":"ssoonwee"},"content":"        this.carbos \u003d carbos;"},{"lineNumber":115,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();"},{"lineNumber":116,"author":{"gitId":"ssoonwee"},"content":"        return this;"},{"lineNumber":117,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":119,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"ssoonwee"},"content":"     * Updates the amount of proteins for this food."},{"lineNumber":121,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"ssoonwee"},"content":"     * @param proteins new protein value"},{"lineNumber":123,"author":{"gitId":"ssoonwee"},"content":"     * @return updated food item"},{"lineNumber":124,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"ssoonwee"},"content":"    public Food updateProteins(double proteins) {"},{"lineNumber":126,"author":{"gitId":"ssoonwee"},"content":"        this.proteins \u003d proteins;"},{"lineNumber":127,"author":{"gitId":"ssoonwee"},"content":"        updateKiloCalories();"},{"lineNumber":128,"author":{"gitId":"ssoonwee"},"content":"        return this;"},{"lineNumber":129,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":131,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"ssoonwee"},"content":"     * Updates kilocalories each time a nutrient value is updated."},{"lineNumber":133,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"ssoonwee"},"content":"    public void updateKiloCalories() {"},{"lineNumber":135,"author":{"gitId":"ssoonwee"},"content":"        this.kiloCalories \u003d calculateKiloCalories();"},{"lineNumber":136,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"     * Calculates total kilocalories based on input fats, carbos and proteins."},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"     * @return total converted energy in kilocalories"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"    public double calculateKiloCalories() {"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"        double convertedFats \u003d this.fats * FAT_MULTIPLIER;"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"        double convertedCarbos \u003d this.carbos * PROTEIN_AND_CARBOS_MULTIPLIER;"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"        double convertedProteins \u003d this.proteins * PROTEIN_AND_CARBOS_MULTIPLIER;"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":"        double totalKiloCalories \u003d convertedCarbos + convertedFats + convertedProteins;"},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"        return totalKiloCalories;"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":"    public String toString() {"},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d this.name + \" (Protein: \" + this.proteins + \"g, Carbohydrates: \" + this.carbos + \"g, Fats: \""},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"                + this.fats + \"g)\";"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"        return result;"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"sjq-sohjunqi":3,"ssoonwee":154}},{"path":"src/main/java/seedu/address/model/food/FoodIntake.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":" * Represents a FoodIntake record."},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":" */"},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":"public class FoodIntake {"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"    private static final String DATE_FORMAT \u003d \"d MMM yyyy\";"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"    private LocalDate date;"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"    private Food food;"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"     * Creates a FoodIntake object representing the Food consumed at a particular date and time."},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"     * @param date LocalDateTime of when the food was eaten"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"     * @param food The related Food object that was consumed"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntake(LocalDate date, Food food) {"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"        this.food \u003d food;"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"    public Food getFood() {"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"        return this.food;"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":"    public LocalDate getDate() {"},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"        return this.date;"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"jasaaanlim"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"jasaaanlim"},"content":"        return this.date.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \": \""},{"lineNumber":36,"author":{"gitId":"jasaaanlim"},"content":"                + this.food.toString();"},{"lineNumber":37,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"jasaaanlim"},"content":"}"}],"authorContributionMap":{"jasaaanlim":38}},{"path":"src/main/java/seedu/address/model/food/FoodIntakeList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jasaaanlim"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":3,"author":{"gitId":"jasaaanlim"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"jasaaanlim"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"jasaaanlim"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":7,"author":{"gitId":"jasaaanlim"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jasaaanlim"},"content":" * Represents a list of FoodIntakes starting from the specified date."},{"lineNumber":9,"author":{"gitId":"jasaaanlim"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jasaaanlim"},"content":"public class FoodIntakeList {"},{"lineNumber":11,"author":{"gitId":"jasaaanlim"},"content":"    private LocalDate startDate;"},{"lineNumber":12,"author":{"gitId":"jasaaanlim"},"content":"    private List\u003cFoodIntake\u003e foodIntakeList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":14,"author":{"gitId":"jasaaanlim"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jasaaanlim"},"content":"     * Constructs a FoodIntakeList."},{"lineNumber":16,"author":{"gitId":"jasaaanlim"},"content":"     * @param startDate the date that the FoodIntakeList begins collecting from"},{"lineNumber":17,"author":{"gitId":"jasaaanlim"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"jasaaanlim"},"content":"    public FoodIntakeList(LocalDate startDate) {"},{"lineNumber":19,"author":{"gitId":"jasaaanlim"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":20,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":22,"author":{"gitId":"jasaaanlim"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jasaaanlim"},"content":"     * Adds a FoodIntake object to the FoodIntakeList."},{"lineNumber":24,"author":{"gitId":"jasaaanlim"},"content":"     * @param foodIntake FoodIntake object to add to list"},{"lineNumber":25,"author":{"gitId":"jasaaanlim"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jasaaanlim"},"content":"    public void addFoodIntake(FoodIntake foodIntake) {"},{"lineNumber":27,"author":{"gitId":"jasaaanlim"},"content":"        this.foodIntakeList.add(foodIntake);"},{"lineNumber":28,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jasaaanlim"},"content":""},{"lineNumber":30,"author":{"gitId":"jasaaanlim"},"content":"    public List\u003cFoodIntake\u003e getList() {"},{"lineNumber":31,"author":{"gitId":"jasaaanlim"},"content":"        return this.foodIntakeList;"},{"lineNumber":32,"author":{"gitId":"jasaaanlim"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jasaaanlim"},"content":"}"}],"authorContributionMap":{"jasaaanlim":33}},{"path":"src/main/java/seedu/address/model/food/UniqueFoodList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.exceptions.FoodItemNotFoundException;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"public class UniqueFoodList {"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"    private ObservableList\u003cFood\u003e foodList;"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"    public UniqueFoodList() {"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"        foodList \u003d FXCollections.observableArrayList();"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"     * Views food list."},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"     * @return food list"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    public ObservableList\u003cFood\u003e getFoodList() {"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"        return this.foodList;"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"     * Adds a food item into the food list."},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem food item"},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"     * @return success message"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"    public String addFoodItem(Food foodItem) {"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        this.foodList.add(foodItem);"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        String result \u003d \"Success adding \" + foodItem.getName() + \" to food list.\";"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":"        return result;"},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"     * Updates the relevant info of the food into the food list."},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem updated food item"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"    public void updateFoodItem(Food foodItem) {"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(foodItem.getName())) {"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"                food.updateCarbos(foodItem.getCarbos());"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":"                food.updateFats(foodItem.getFats());"},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"                food.updateProteins(foodItem.getProteins());"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"                return;"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"        throw new FoodItemNotFoundException();"},{"lineNumber":53,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":55,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"ssoonwee"},"content":"     * Checks if the food list contains a particular food item."},{"lineNumber":57,"author":{"gitId":"ssoonwee"},"content":"     * @param foodItem food item"},{"lineNumber":58,"author":{"gitId":"ssoonwee"},"content":"     * @return true or false on whether a match is found"},{"lineNumber":59,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ssoonwee"},"content":"    public boolean hasFoodItem(Food foodItem) {"},{"lineNumber":61,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {"},{"lineNumber":62,"author":{"gitId":"ssoonwee"},"content":"            if (food.getName().equals(foodItem.getName())) {"},{"lineNumber":63,"author":{"gitId":"ssoonwee"},"content":"                return true;"},{"lineNumber":64,"author":{"gitId":"ssoonwee"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"ssoonwee"},"content":"        return false;"},{"lineNumber":67,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":69,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"ssoonwee"},"content":"     * Deletes a food item from the food list based on the food name."},{"lineNumber":71,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"ssoonwee"},"content":"     * @param index food item index"},{"lineNumber":73,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"ssoonwee"},"content":"    public void deleteFoodItem(int index) {"},{"lineNumber":75,"author":{"gitId":"ssoonwee"},"content":"        this.foodList.remove(index);"},{"lineNumber":76,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":78,"author":{"gitId":"ssoonwee"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"ssoonwee"},"content":"     * Lists all food items in the food list."},{"lineNumber":80,"author":{"gitId":"ssoonwee"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"ssoonwee"},"content":"     * @return string output of all food items"},{"lineNumber":82,"author":{"gitId":"ssoonwee"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"ssoonwee"},"content":"    public String listAllFoodItem() {"},{"lineNumber":84,"author":{"gitId":"ssoonwee"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"ssoonwee"},"content":"        int counter \u003d 1; //Used for for-loop counter indicator."},{"lineNumber":86,"author":{"gitId":"ssoonwee"},"content":"        for (Food food : this.foodList) {"},{"lineNumber":87,"author":{"gitId":"ssoonwee"},"content":"            stringBuilder.append(counter + \". \" + food.toString() + \"\\n\");"},{"lineNumber":88,"author":{"gitId":"ssoonwee"},"content":"            counter++;"},{"lineNumber":89,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"ssoonwee"},"content":"        return stringBuilder.toString();"},{"lineNumber":91,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"    public boolean equals(Object o) {"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":"        if (this \u003d\u003d o) {"},{"lineNumber":96,"author":{"gitId":"WeiLiangLOL"},"content":"            return true;"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"            return false;"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList that \u003d (UniqueFoodList) o;"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.equals(foodList, that.foodList);"},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"        return Objects.hash(foodList);"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":110,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":85,"WeiLiangLOL":25}},{"path":"src/main/java/seedu/address/model/food/exceptions/DuplicateFoodItemException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food.exceptions;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"public class DuplicateFoodItemException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"    public DuplicateFoodItemException() {"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"        super(\"Operation would result in duplicate food items.\");"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":7}},{"path":"src/main/java/seedu/address/model/food/exceptions/FoodItemNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food.exceptions;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"public class FoodItemNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"    public FoodItemNotFoundException() {"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"        super(\"Food item does not exist in the list.\");"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":7}},{"path":"src/main/java/seedu/address/model/user/Age.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s age."},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"public class Age {"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"            \"Ages should only contain numbers, and it should fall between 1 and 100!\";"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}\";"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    private final int age;"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"     * Initializes the age class."},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param age Age to be input"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    public Age(int age) {"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"        this.age \u003d age;"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    public Integer getAge() {"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.age;"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"        return String.valueOf(this.age);"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof Age)) {"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        Age otherAge \u003d (Age) other;"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherAge.getAge().equals(getAge());"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":40}},{"path":"src/main/java/seedu/address/model/user/Bmi.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s Bmi."},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"public class Bmi {"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"    private static final double HEALTHY_BMI_LOWER_BOUND \u003d 18.5;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"    private static final double HEALTHY_BMI_UPPER_BOUND \u003d 22.9;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    // Identity fields"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    private final double weight;"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    private final double height;"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    // Data fields"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    private final double bmi;"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"     * Creates the Bmi object representing the user."},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param weight Current input weight"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param height Current input height"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    public Bmi(double weight, double height) {"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"        this.weight \u003d weight;"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        this.height \u003d height;"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        this.bmi \u003d calculateBmi();"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the Double value representing the Bmi."},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing the Bmi"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    protected double calculateBmi() {"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.weight / Math.pow(this.height, 2);"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the lower bound of weight for the healthy Bmi."},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing lower bound of healthy weight"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    protected double getLowerBoundWeight() {"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"        return HEALTHY_BMI_LOWER_BOUND * Math.pow(this.height, 2);"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns the upper bound of weight for the healthy Bmi."},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return Double value representing upper bound of healthy weight"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"    protected double getUpperBoundWeight() {"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        return HEALTHY_BMI_UPPER_BOUND * Math.pow(this.height, 2);"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"    protected Double getHeight() {"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.height;"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"    protected Double getWeight() {"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.weight;"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"    protected Double getBmi() {"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.bmi;"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"        return String.valueOf(this.bmi);"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof Bmi)) {"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"        Bmi otherBmi \u003d (Bmi) other;"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherBmi.getWeight().equals(getWeight())"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherBmi.getHeight().equals(getHeight())"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherBmi.getBmi().equals(getBmi());"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":85,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":85}},{"path":"src/main/java/seedu/address/model/user/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" * Represents a User\u0027s name in DieTrack."},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":59}},{"path":"src/main/java/seedu/address/model/user/User.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":" * Handles the representation of the User class in DieTrack."},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"public class User {"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    // Identity fields"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    private final Name name;"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    private final Age age;"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    // Data fields"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    private final Bmi bmi;"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    private final List\u003cFood\u003e foodList;"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"     * Creates a representation of the user with the given parameters."},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"     * All fields must not be empty."},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param name Name of the user"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param bmi Bmi object of the user"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param foodList Food list of the user"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    public User(Name name, Bmi bmi, List\u003cFood\u003e foodList, Age age) {"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        requireAllNonNull(name, bmi, foodList);"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        this.bmi \u003d bmi;"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"        this.foodList \u003d foodList;"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        this.age \u003d age;"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.name;"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    public Bmi getBmi() {"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.bmi;"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"    public List\u003cFood\u003e getFoodList() {"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"        return foodList;"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"    public Age getAge() {"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.age;"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"     * Returns true if both users have the same identity and data fields."},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"     * This defines a stronger notion of equality between two users."},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!(other instanceof User)) {"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"            return false;"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"        User otherUser \u003d (User) other;"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"        return otherUser.getName().equals(getName())"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherUser.getBmi().equals(getBmi())"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"                \u0026\u0026 otherUser.getFoodList().equals(getFoodList());"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":74}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedFood.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":" * Jackson-friendly version of {@link Food}."},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonAdaptedFood {"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String INVALID_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is invalid!\";"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    private final String name;"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double fats;"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double carbos;"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    private final double proteins;"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code JsonAdaptedFood} with the given food details."},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"fats\") double fats,"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"                           @JsonProperty(\"carbos\") double carbos, @JsonProperty(\"proteins\") double proteins) {"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d name;"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        this.fats \u003d fats;"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbos \u003d carbos;"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d proteins;"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code Food} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonAdaptedFood(Food food) {"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"        this.name \u003d food.getName();"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"        this.fats \u003d food.getFats();"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"        this.carbos \u003d food.getCarbos();"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"        this.proteins \u003d food.getProteins();"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Food} object."},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted Food."},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"    public Food toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!Food.isValidFoodName(name)) {"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!Food.isValidNumber(fats, carbos, proteins)) {"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new IllegalValueException(String.format(INVALID_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"        return new Food(name, fats, carbos, proteins);"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":64}},{"path":"src/main/java/seedu/address/storage/JsonSerializableUniqueFoodList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":" * A UniqueFoodList that is serializable to JSON format."},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"@JsonRootName(value \u003d \"foodlist\")"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonSerializableUniqueFoodList {"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"    public static final String MESSAGE_DUPLICATE_ENTRY \u003d \"Food list contains duplicated food item(s).\";"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"     * Constructs a {@code JsonSerializableFoodList} with the given food items."},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    @JsonCreator"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonSerializableUniqueFoodList(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods) {"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foods.addAll(foods);"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts a given {@code ReadOnlyFoodList} into this class for Jackson use."},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableFoodList}."},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonSerializableUniqueFoodList(UniqueFoodList source) {"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":"        this.foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * Converts this food list into the model\u0027s {@code FoodList} object."},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"    public UniqueFoodList toModelType() throws IllegalValueException {"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":"        UniqueFoodList foodList \u003d new UniqueFoodList();"},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        for (JsonAdaptedFood jsonAdaptedFood : foods) {"},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"            Food food \u003d jsonAdaptedFood.toModelType();"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"            if (foodList.hasFoodItem(food)) {"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_ENTRY);"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":"            foodList.addFoodItem(food);"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        return foodList;"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":59}},{"path":"src/main/java/seedu/address/storage/JsonUniqueFoodListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":" * A class to access FoodList data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"public class JsonUniqueFoodListStorage implements UniqueFoodListStorage {"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUniqueFoodListStorage.class);"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    public JsonUniqueFoodListStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getFoodListFilePath() {"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {"},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"        return readFoodList(filePath);"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #readFoodList()}."},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException {"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);"},{"lineNumber":48,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":49,"author":{"gitId":"WeiLiangLOL"},"content":"        Optional\u003cJsonSerializableUniqueFoodList\u003e jsonFoodList \u003d JsonUtil.readJsonFile("},{"lineNumber":50,"author":{"gitId":"WeiLiangLOL"},"content":"                filePath, JsonSerializableUniqueFoodList.class);"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"        if (!jsonFoodList.isPresent()) {"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"            return Optional.of(jsonFoodList.get().toModelType());"},{"lineNumber":57,"author":{"gitId":"WeiLiangLOL"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":58,"author":{"gitId":"WeiLiangLOL"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":59,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":63,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList) throws IOException {"},{"lineNumber":65,"author":{"gitId":"WeiLiangLOL"},"content":"        saveFoodList(foodList, filePath);"},{"lineNumber":66,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"     * Similar to {@link #saveFoodList(UniqueFoodList)}."},{"lineNumber":70,"author":{"gitId":"WeiLiangLOL"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":72,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {"},{"lineNumber":74,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(foodList);"},{"lineNumber":75,"author":{"gitId":"WeiLiangLOL"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":77,"author":{"gitId":"WeiLiangLOL"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":78,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableUniqueFoodList(foodList), filePath);"},{"lineNumber":79,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":81,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":81}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"public interface Storage extends AddressBookStorage, UniqueFoodListStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":1,"-":31}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"    private UniqueFoodListStorage uniqueFoodListStorage;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage}, {@code UniqueFoodListStorage}"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"     * and {@code UserPrefStorage}."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UniqueFoodListStorage uniqueFoodListStorage,"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"                          UserPrefsStorage userPrefsStorage) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"        this.uniqueFoodListStorage \u003d uniqueFoodListStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UniqueFoodList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":85,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":86,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"WeiLiangLOL"},"content":"    public Path getFoodListFilePath() {"},{"lineNumber":88,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListStorage.getFoodListFilePath();"},{"lineNumber":89,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":91,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException {"},{"lineNumber":93,"author":{"gitId":"WeiLiangLOL"},"content":"        return readFoodList(uniqueFoodListStorage.getFoodListFilePath());"},{"lineNumber":94,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":96,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"    public Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException {"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"        return uniqueFoodListStorage.readFoodList(filePath);"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList) throws IOException {"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":"        saveFoodList(foodList, uniqueFoodListStorage.getFoodListFilePath());"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":107,"author":{"gitId":"WeiLiangLOL"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"WeiLiangLOL"},"content":"    public void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException {"},{"lineNumber":109,"author":{"gitId":"WeiLiangLOL"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":110,"author":{"gitId":"WeiLiangLOL"},"content":"        uniqueFoodListStorage.saveFoodList(foodList, filePath);"},{"lineNumber":111,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":37,"-":76}},{"path":"src/main/java/seedu/address/storage/UniqueFoodListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":" * Represents a storage for a list of {@link seedu.address.model.food.Food}."},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":" */"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"public interface UniqueFoodListStorage {"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"    Path getFoodListFilePath();"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"     * Returns FoodList data as a {@link UniqueFoodList}."},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cUniqueFoodList\u003e readFoodList() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #getFoodListFilePath()"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"WeiLiangLOL"},"content":"    Optional\u003cUniqueFoodList\u003e readFoodList(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"WeiLiangLOL"},"content":"     * Saves the given {@link UniqueFoodList} to the storage."},{"lineNumber":35,"author":{"gitId":"WeiLiangLOL"},"content":"     * @param foodList cannot be null."},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveFoodList(UniqueFoodList foodList) throws IOException;"},{"lineNumber":39,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":40,"author":{"gitId":"WeiLiangLOL"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"WeiLiangLOL"},"content":"     * @see #saveFoodList(UniqueFoodList)"},{"lineNumber":42,"author":{"gitId":"WeiLiangLOL"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"WeiLiangLOL"},"content":"    void saveFoodList(UniqueFoodList foodList, Path filePath) throws IOException;"},{"lineNumber":44,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":45,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":45}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.storage.JsonUniqueFoodListStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":51,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d"},{"lineNumber":52,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(temporaryFolder.resolve(\"uniqueFoods.json\"));"},{"lineNumber":53,"author":{"gitId":"WeiLiangLOL"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, userPrefsStorage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"                new JsonUniqueFoodListStorage(temporaryFolder.resolve(\"ioExceptionUniqueFoods.json\"));"},{"lineNumber":84,"author":{"gitId":"WeiLiangLOL"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, userPrefsStorage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":138,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":9,"-":159}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":3,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.Food;"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"WeiLiangLOL"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"WeiLiangLOL"},"content":"        public UniqueFoodList getUniqueFoodList() {"},{"lineNumber":130,"author":{"gitId":"WeiLiangLOL"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"ssoonwee"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"ssoonwee"},"content":"        public boolean hasFoodItem(Food food) {"},{"lineNumber":140,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":143,"author":{"gitId":"ssoonwee"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"ssoonwee"},"content":"        public void addFoodItem(Food food) {"},{"lineNumber":145,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":148,"author":{"gitId":"ssoonwee"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"ssoonwee"},"content":"        public void updateFoodItem(Food food) {"},{"lineNumber":150,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":153,"author":{"gitId":"ssoonwee"},"content":"        @Override"},{"lineNumber":154,"author":{"gitId":"ssoonwee"},"content":"        public void deleteFoodItem(int index) {"},{"lineNumber":155,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":156,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":158,"author":{"gitId":"ssoonwee"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"ssoonwee"},"content":"        public String listFoodItem() {"},{"lineNumber":160,"author":{"gitId":"ssoonwee"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":161,"author":{"gitId":"ssoonwee"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":185,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":186,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":26,"WeiLiangLOL":6,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":3,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"WeiLiangLOL"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":4,"-":106}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"WeiLiangLOL"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":47,"author":{"gitId":"WeiLiangLOL"},"content":"                new UniqueFoodList(), new UserPrefs());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":69,"author":{"gitId":"WeiLiangLOL"},"content":"                new UniqueFoodList(), new UserPrefs());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":83,"author":{"gitId":"WeiLiangLOL"},"content":"                new UniqueFoodList(), new UserPrefs());"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"                new UniqueFoodList(), new UserPrefs());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":10,"-":168}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":3,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UniqueFoodList(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":3,"-":37}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":49,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":55,"author":{"gitId":"WeiLiangLOL"},"content":"        // TODO: Elegantly deprecate this"},{"lineNumber":56,"author":{"gitId":"WeiLiangLOL"},"content":"        /*Person person \u003d new PersonBuilder().build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":59,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":60,"author":{"gitId":"WeiLiangLOL"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);*/"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":73,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":3,"-":96}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"WeiLiangLOL"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"WeiLiangLOL"},"content":"        public UniqueFoodList getFoodList() {"},{"lineNumber":99,"author":{"gitId":"WeiLiangLOL"},"content":"            // TODO: Improve abstraction"},{"lineNumber":100,"author":{"gitId":"WeiLiangLOL"},"content":"            return null;"},{"lineNumber":101,"author":{"gitId":"WeiLiangLOL"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ssoonwee":1,"WeiLiangLOL":6,"-":102}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":"import seedu.address.model.food.UniqueFoodList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitId":"WeiLiangLOL"},"content":"        modelManager \u003d new ModelManager(addressBook, new UniqueFoodList(), userPrefs);"},{"lineNumber":105,"author":{"gitId":"WeiLiangLOL"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, new UniqueFoodList(), userPrefs);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":118,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, new UniqueFoodList(), userPrefs)));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":123,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new UniqueFoodList(), userPrefs)));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":131,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, new UniqueFoodList(), differentUserPrefs)));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":6,"-":127}},{"path":"src/test/java/seedu/address/model/diet/DietPlanTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"public class DietPlanTest {"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(null, \"\", null));"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(\"\", null, null));"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DietPlan(\"\", \"\", null));"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":16}},{"path":"src/test/java/seedu/address/model/diet/MacroNutrientCompositionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"WeiLiangLOL"},"content":"package seedu.address.model.diet;"},{"lineNumber":2,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":3,"author":{"gitId":"WeiLiangLOL"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"WeiLiangLOL"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"WeiLiangLOL"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":7,"author":{"gitId":"WeiLiangLOL"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":9,"author":{"gitId":"WeiLiangLOL"},"content":"public class MacroNutrientCompositionTest {"},{"lineNumber":10,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":11,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"WeiLiangLOL"},"content":"    public void constructor_invalidValues_throwsIllegalArgumentException() {"},{"lineNumber":13,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(0, 0, 0));"},{"lineNumber":14,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(10, 20, 30));"},{"lineNumber":15,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(100, 20, 30));"},{"lineNumber":16,"author":{"gitId":"WeiLiangLOL"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MacroNutrientComposition(110, 0, -10));"},{"lineNumber":17,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":19,"author":{"gitId":"WeiLiangLOL"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"WeiLiangLOL"},"content":"    public void isValidComposition() {"},{"lineNumber":21,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(0, 10, 20));"},{"lineNumber":22,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(100, 10, 20));"},{"lineNumber":23,"author":{"gitId":"WeiLiangLOL"},"content":"        assertFalse(MacroNutrientComposition.isValidComposition(-10, 130, -20));"},{"lineNumber":24,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":25,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(100, 0, 0));"},{"lineNumber":26,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(40, 30, 30));"},{"lineNumber":27,"author":{"gitId":"WeiLiangLOL"},"content":"        assertTrue(MacroNutrientComposition.isValidComposition(25, 50, 25));"},{"lineNumber":28,"author":{"gitId":"WeiLiangLOL"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":""},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":30}},{"path":"src/test/java/seedu/address/model/food/FoodTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"ssoonwee"},"content":"package seedu.address.model.food;"},{"lineNumber":2,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":3,"author":{"gitId":"ssoonwee"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"ssoonwee"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"ssoonwee"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":7,"author":{"gitId":"ssoonwee"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":9,"author":{"gitId":"ssoonwee"},"content":"public class FoodTest {"},{"lineNumber":10,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":11,"author":{"gitId":"ssoonwee"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"ssoonwee"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Food(null, 0, 0, 0));"},{"lineNumber":14,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":16,"author":{"gitId":"ssoonwee"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"ssoonwee"},"content":"    public void constructor_invalidFood_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"ssoonwee"},"content":"        String invalidFood \u003d \"^.^\";"},{"lineNumber":19,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(invalidFood, 0, 0, 0));"},{"lineNumber":20,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Jellies\", -1, 0, 0));"},{"lineNumber":21,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Sweet\", 10, 15, -5));"},{"lineNumber":22,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Food(\"Flour\", 10, -5, 10));"},{"lineNumber":23,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":25,"author":{"gitId":"ssoonwee"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"ssoonwee"},"content":"    public void isValidFood() {"},{"lineNumber":27,"author":{"gitId":"ssoonwee"},"content":"        // null address"},{"lineNumber":28,"author":{"gitId":"ssoonwee"},"content":"        assertThrows(NullPointerException.class, () -\u003e Food.isValidFoodName(null));"},{"lineNumber":29,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":30,"author":{"gitId":"ssoonwee"},"content":"        // invalid addresses"},{"lineNumber":31,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\"\")); // empty string"},{"lineNumber":32,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\":)abc\")); //string filled with mixture of alphabets and special chars"},{"lineNumber":33,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\"^.^\")); //string filled with only special characters"},{"lineNumber":34,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidFoodName(\" \")); // spaces only"},{"lineNumber":35,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":36,"author":{"gitId":"ssoonwee"},"content":"        // valid addresses"},{"lineNumber":37,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidFoodName(\"Jellies\"));"},{"lineNumber":38,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidFoodName(\"A\")); // one character"},{"lineNumber":39,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":41,"author":{"gitId":"ssoonwee"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"ssoonwee"},"content":"    public void isValidNumber() {"},{"lineNumber":43,"author":{"gitId":"ssoonwee"},"content":"        //invalid inputs"},{"lineNumber":44,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(-1, 0, 0));"},{"lineNumber":45,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(0, -1, 0));"},{"lineNumber":46,"author":{"gitId":"ssoonwee"},"content":"        assertFalse(Food.isValidNumber(0, 0, -1));"},{"lineNumber":47,"author":{"gitId":"ssoonwee"},"content":""},{"lineNumber":48,"author":{"gitId":"ssoonwee"},"content":"        //valid inputs"},{"lineNumber":49,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidNumber(0, 0, 0));"},{"lineNumber":50,"author":{"gitId":"ssoonwee"},"content":"        assertTrue(Food.isValidNumber(1, 10, 100));"},{"lineNumber":51,"author":{"gitId":"ssoonwee"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"ssoonwee"},"content":"}"}],"authorContributionMap":{"ssoonwee":52}},{"path":"src/test/java/seedu/address/model/user/AgeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class AgeTest {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/model/user/BmiTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class BmiTest {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/model/user/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(NullPointerException.class, () -\u003e new seedu.address.model.user.Name(null));"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new seedu.address.model.user.Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        // null name"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(NullPointerException.class, () -\u003e seedu.address.model.user.Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        // invalid name"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        assertFalse(seedu.address.model.user.Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        // valid name"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(seedu.address.model.user.Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":40}},{"path":"src/test/java/seedu/address/model/user/UserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package seedu.address.model.user;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class UserTest {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":4}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"WeiLiangLOL"},"content":"        JsonUniqueFoodListStorage uniqueFoodListStorage \u003d new JsonUniqueFoodListStorage(getTempFilePath(\"foods\"));"},{"lineNumber":30,"author":{"gitId":"WeiLiangLOL"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, uniqueFoodListStorage, userPrefsStorage);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":43,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":57,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"WeiLiangLOL":2,"-":67}}]
