[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T16-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jaredtengsw"},"content":"## User Interface"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jaredtengsw"},"content":"##About ResidenceTracker\u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":"ResidenceTracker is a command line based desktop application that assists landlords in managing their residences that they are listing out on the Airbnb platform for rent."},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":"* It gives user convenience by providing a centralised overview of all of the user\u0027s residences and the respective booking/cleaning statuses of each residence. "},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"* It uses a **quick CLI** way to note down bookings and track status of different residence, such as "},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"  clean or needs cleaning/booked or available, so the landlord can process bookings more efficiently and inform the cleaning agent as necessary before the next leasee arrives."},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"* It is **written in OOP fashion**."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"* For more details on ResidenceTracker, please refer to our [User Guide](docs/UserGuide.md)."},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":""}],"authorContributionMap":{"jaredtengsw":7,"awzhenyi":4,"wangtao0717":7,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"### Lim Li Gang"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"\u003cimg src\u003d\"images/whatthelump.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"[[github](https://github.com/whatthelump)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"* Role: Code Quality and Documentation"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"* Responsibilities: _TBC_"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"### Aw Zhen Yi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"\u003cimg src\u003d\"images/awzhenyi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"[[github](http://github.com/awzhenyi)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":"* Responsibilities: _TBC_"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"### Teng Shu Wei Jared"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"\u003cimg src\u003d\"images/jaredtengsw.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"[[github](http://github.com/jaredtengsw)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"* Responsibilities: _TBC_"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"### V R Soorya"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/vrsoorya.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"[[github](http://github.com/vrsoorya)]"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"[[portfolio](team/vrsoorya.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* Responsibilities: Dev Ops"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"### Wang Tao"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/wangtao0717.png\" width\u003d\"200px\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"[[github](http://github.com/wangtao0717)]"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"[[portfolio](team/wangtao0717.md)]"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"* Responsibilities: _TBC_"}],"authorContributionMap":{"whatthelump":5,"awzhenyi":5,"jaredtengsw":4,"wangtao0717":4,"-":33,"VRSoorya":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"whatthelump"},"content":"* has to manage a considerable number of residences"},{"lineNumber":240,"author":{"gitId":"whatthelump"},"content":"* is constantly renting out residences; high turnover rate"},{"lineNumber":241,"author":{"gitId":"whatthelump"},"content":"* prefers working on their laptop over using their phone"},{"lineNumber":242,"author":{"gitId":"whatthelump"},"content":"* is able to type quickly"},{"lineNumber":243,"author":{"gitId":"whatthelump"},"content":"* prefers using a keyboard to using a mouse"},{"lineNumber":244,"author":{"gitId":"whatthelump"},"content":"* is reasonably familiar with CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"whatthelump"},"content":"**Value proposition**: easily keep track of residences and inform cleaning agency whenever necessary"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                    | So that I can…​                                                       |"},{"lineNumber":254,"author":{"gitId":"VRSoorya"},"content":"| -------- | ------------------------------------------ | ---------------------------------- | ----------------------------------------------------------------------   |"},{"lineNumber":255,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | new user                                   | See a list of all commands         | refer to instructions when I forget how to use the App                   |"},{"lineNumber":256,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | add a new residence                | keep track of all my residences                                                                         |"},{"lineNumber":257,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | delete a residence                 | remove places that I no longer need to track                             |"},{"lineNumber":258,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | find a residence by name           | locate details of residence without having to go through the entire list |"},{"lineNumber":259,"author":{"gitId":"VRSoorya"},"content":"| `* *`    | user                                       | edit a residence status            | keep track of all my residences status as and when they change           |"},{"lineNumber":260,"author":{"gitId":"VRSoorya"},"content":"| `*`      | user owning and renting out many residences| view list of all residence status  | minimize the time needed to get a quick overview of all my residences    |"},{"lineNumber":261,"author":{"gitId":"VRSoorya"},"content":"| `*`      | busy advanced user                         | clear user input quickly           | my time is used more efficiently                                         |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"wangtao0717"},"content":"(For all use cases below, the **System** is the `ResidenceTracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC01): Add a residence**\u003cbr\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"wangtao0717"},"content":"1.  User adds in the details of a residence"},{"lineNumber":273,"author":{"gitId":"wangtao0717"},"content":"2.  User confirms the addition"},{"lineNumber":274,"author":{"gitId":"wangtao0717"},"content":"3.  System confirms the addition and residence is added to the list of existing residence"},{"lineNumber":275,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"jaredtengsw"},"content":"* 2a. Error in submission if user did not provide all relevant fields. \u003cbr\u003e"},{"lineNumber":280,"author":{"gitId":"jaredtengsw"},"content":"    * 2a1. ResidenceTracker shows an error message. \u003cbr\u003e"},{"lineNumber":281,"author":{"gitId":"wangtao0717"},"content":"      use case restarts from 1."},{"lineNumber":282,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":283,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":284,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":285,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC02): Delete a residence**"},{"lineNumber":286,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":287,"author":{"gitId":"jaredtengsw"},"content":"**MSS**"},{"lineNumber":288,"author":{"gitId":"wangtao0717"},"content":"1.  User deletes a residence with a INDEX"},{"lineNumber":289,"author":{"gitId":"wangtao0717"},"content":"2.  System confirms the input number"},{"lineNumber":290,"author":{"gitId":"wangtao0717"},"content":"3.  System deletes the respective entry of the residence"},{"lineNumber":291,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"wangtao0717"},"content":"**Extensions**"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the correct format of deletion."},{"lineNumber":298,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct delete command with INDEX."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":303,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":304,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC03): Find a residence** \u003cbr\u003e"},{"lineNumber":305,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":306,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the keywords to search residences"},{"lineNumber":307,"author":{"gitId":"wangtao0717"},"content":"2.  System returns the residence(s) which include the keyword in their name"},{"lineNumber":308,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":309,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":310,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":311,"author":{"gitId":"wangtao0717"},"content":"* 1a. no matching residences are found"},{"lineNumber":312,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":313,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":314,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":315,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":316,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":317,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC04): View list of all residences**\u003cbr\u003e"},{"lineNumber":318,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":319,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the list command"},{"lineNumber":320,"author":{"gitId":"wangtao0717"},"content":"2.  System lists all residences"},{"lineNumber":321,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":322,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":323,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":324,"author":{"gitId":"wangtao0717"},"content":"* 1a. no residences are found"},{"lineNumber":325,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":326,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":327,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":328,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":329,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":330,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC05): Edit status of a residence** \u003cbr\u003e"},{"lineNumber":331,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":332,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the index and status of the residence to be edited"},{"lineNumber":333,"author":{"gitId":"wangtao0717"},"content":"2.  System validates the edition"},{"lineNumber":334,"author":{"gitId":"wangtao0717"},"content":"3.  System updates the residence status"},{"lineNumber":335,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":336,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":337,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":338,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX or in entered status"},{"lineNumber":339,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":340,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the expected format of edit command."},{"lineNumber":341,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct edit command with necessary details."},{"lineNumber":342,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case resumes at step 2."},{"lineNumber":343,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":344,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":345,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":346,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC06): Show all available commands** \u003cbr\u003e"},{"lineNumber":347,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":348,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the help command"},{"lineNumber":349,"author":{"gitId":"wangtao0717"},"content":"2.  System shows a list of all available commands to help master the use of the app and the URL to the User Guide"},{"lineNumber":350,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":351,"author":{"gitId":"wangtao0717"},"content":"    Use case ends."},{"lineNumber":352,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":353,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":354,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":355,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC07): Exit the application** \u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":357,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the exit command"},{"lineNumber":358,"author":{"gitId":"wangtao0717"},"content":"2.  System closes"},{"lineNumber":359,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":360,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":361,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":367,"author":{"gitId":"awzhenyi"},"content":"2.  Should be able to hold up to 100 residences without a noticeable sluggishness in performance for typical usage."},{"lineNumber":368,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":375,"author":{"gitId":"awzhenyi"},"content":"* **Residence Status**:"},{"lineNumber":376,"author":{"gitId":"awzhenyi"},"content":"    * **Clean**: The residence has been cleaned"},{"lineNumber":377,"author":{"gitId":"awzhenyi"},"content":"    * **Unclean**: The residence needs to be cleaned"},{"lineNumber":378,"author":{"gitId":"awzhenyi"},"content":"    * **Book**: ***TBC***"},{"lineNumber":379,"author":{"gitId":"awzhenyi"},"content":"    * **Unbook**: ***TBC***"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":388,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":405,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":416,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":419,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":422,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"whatthelump":7,"jaredtengsw":40,"awzhenyi":6,"wangtao0717":43,"-":328,"VRSoorya":8}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker (RT) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RT can get your residence management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"1. Download the latest `residencetracker.jar` from [here](https://github.com/AY2021S2-CS2103-T16-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your ResidenceTracker."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"   * **`list`** : Lists all residences in the app."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"   * **`add`**`n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y` : Adds a residence named `Clementi HDB` to the ResidenceTracker."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"   * **`delete`**`3` : Deletes the 3rd residence shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"   * **`clear`** : Deletes all residences."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Amber Heights`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/Amber Heights t/friend` or as `n/Amber Heights`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"  e.g. if the command specifies `n/NAME a/ADDRESS`, `a/ADDRESS n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"  e.g. if you specify `a/Jurong West St 60 a/Jurong West St 70`, only `a/Jurong West St 70` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"### Adding a residence: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"Adds a new residence to the list of residences,default for CLEANING_STATUS and BOOKING_STATUS is ‘cleaned’ and ‘not-booked’ respectively."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"Format: ` add n/NAME_OF_APARTMENT a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":"* `add n/Melville Park a/22 Simei Street 1, #10-02, S529948`"},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"* `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"whatthelump"},"content":"### Listing all residences: `list`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"jaredtengsw"},"content":"Shows a list of all residences in the app."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"### Editing a residence: `edit`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"Edits the booking/cleaning status of an existing residence"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"Format: `edit u/(un)clean [INDEX] u/(un)book [INDEX]`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"* Edits the residence status at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"* At least one of the optional fields (either clean or book status) must be provided."},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":"* If both fields are provided, `INDEX` field should be of the same value."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/clean 1` Edits the clean status of the 1st residence on the list from `Unclean` to `Clean`. Booking status remains unchanged from original value."},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/unclean 2 u/unbook 2`  Edits the clean status of the 2nd residence on the list from `Unclean` to `Clean`, booking status of the same residence from `Booked` to `Unbooked`."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"### Locating residences by name: `find`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"Finds residences whose names contain any of the given keywords."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"VRSoorya"},"content":"* The search is case-insensitive. e.g `duxton` will match `Duxton`"},{"lineNumber":113,"author":{"gitId":"VRSoorya"},"content":"* The order of the keywords does not matter. e.g. `Gardens Bay` will match `Bay Gardens`"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":115,"author":{"gitId":"VRSoorya"},"content":"* Only full words will be matched e.g. `Dux` will not match `Duxton`"},{"lineNumber":116,"author":{"gitId":"VRSoorya"},"content":"* Apartments matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":"  e.g. `Gardens Bay` will return `Botanic Gardens`, `Bay Area`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitId":"VRSoorya"},"content":"* `find heights` returns `Hillview Heights` and `Aspen Heights`"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"* `find east coast` returns `East View`, `West Coast`\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"whatthelump"},"content":"### Deleting a residence: `delete`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"whatthelump"},"content":"Deletes the specified residence from the list of residences."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"whatthelump"},"content":"* Deletes the residence at the specified `INDEX`."},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"* The index refers to the index number shown in the displayed residences list (i.e. **NOT** zero-indexed)."},{"lineNumber":131,"author":{"gitId":"whatthelump"},"content":"* The index must be a **positive integer** (\u003e0)"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitId":"whatthelump"},"content":"* `list` followed by `delete 3` deletes the 3rd residence in the list of residences."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"whatthelump"},"content":"Clears all entries from the residence tracker."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved as a JSON file `[JAR file location]/data/ResidenceTracker.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":157,"author":{"gitId":"whatthelump"},"content":"If your changes to the data file makes its format invalid, ResidenceTracker will discard all data and start with an empty data file at the next run."},{"lineNumber":158,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"whatthelump"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ResidenceTracker home folder."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":176,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":177,"author":{"gitId":"whatthelump"},"content":"**Add** | `add n/NAME_OF_RESIDENCE a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]]…​` \u003cbr\u003e e.g., `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":178,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":179,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":180,"author":{"gitId":"awzhenyi"},"content":"**Edit** | `edit u/(un)clean [INDEX] u/(un)book [INDEX]`\u003cbr\u003e e.g.,`edit u/unclean 2 u/unbook 2`"},{"lineNumber":181,"author":{"gitId":"whatthelump"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find Heights`"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":183,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":184,"author":{"gitId":"jaredtengsw"},"content":"**Exit** | `exit`"}],"authorContributionMap":{"whatthelump":28,"jaredtengsw":4,"awzhenyi":9,"wangtao0717":3,"-":133,"VRSoorya":7}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: AddressBook Level-3"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp/branch/master/graph/badge.svg?token\u003dU5L6JM6HMZ)](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":18,"VRSoorya":1}},{"path":"docs/team/vrsoorya.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"NOTE: to be edited by Soorya accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"  * User Guide:"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"  * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"VRSoorya":47}},{"path":"docs/team/wangtao.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"NOTE: to be edited by Wang Tao accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"    * User Guide:"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"    * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"wangtao0717":47}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.JsonResidenceTrackerStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.ResidenceTrackerStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        ResidenceTrackerStorage residenceTrackerStorage \u003d"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"            new JsonResidenceTrackerStorage(userPrefs.getAddressBookFilePath());"},{"lineNumber":61,"author":{"gitId":"whatthelump"},"content":"        storage \u003d new StorageManager(residenceTrackerStorage, userPrefsStorage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"        Optional\u003cReadOnlyResidenceTracker\u003e addressBookOptional;"},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":"        ReadOnlyResidenceTracker initialData;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"whatthelump"},"content":"            addressBookOptional \u003d storage.readResidenceTracker();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"            initialData \u003d new ResidenceTracker();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"            initialData \u003d new ResidenceTracker();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":124,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":141,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":152,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":12,"-":172}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX \u003d \"The residence index provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_RESIDENCE_LISTED_OVERVIEW \u003d \"%1$d residences listed!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":13,"VRSoorya":2}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"     * Returns the ResidenceTracker."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     * @see seedu.address.model.Model#getResidenceTracker()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    ReadOnlyResidenceTracker getResidenceTracker();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"     * Returns an unmodifiable view of the filtered list of persons"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"     * Returns the user prefs\u0027 residence tracker file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":6,"wangtao0717":4,"-":43}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.logic.parser.ResidenceTrackerParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTrackerParser residenceTrackerParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        residenceTrackerParser \u003d new ResidenceTrackerParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"        Command command \u003d residenceTrackerParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"            storage.saveResidenceTracker(model.getResidenceTracker());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"    public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        return model.getResidenceTracker();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":"        return model.getResidenceTrackerFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"-":71}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":" * Adds a person to the residence tracker."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the residence tracker. \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"            + \"[\" + PREFIX_CLEAN_STATUS_TAG + \"y or n]\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"            + PREFIX_CLEAN_STATUS_TAG + \"y\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the residence tracker\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"wangtao0717":3,"-":64}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" * Clears the residence tracker."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Residence Tracker has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"        model.setResidenceTracker(new ResidenceTracker());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"-":19,"VRSoorya":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":" * Deletes a person identified using it\u0027s displayed index from the residence tracker."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":52}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":" * Edits the details of an existing person in the residence tracker."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":"            + \"[\" + PREFIX_CLEAN_STATUS_TAG + \"y/n] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the residence tracker.\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":103,"author":{"gitId":"wangtao0717"},"content":"        Set\u003cCleanStatusTag\u003e updatedCleanStatus \u003d editPersonDescriptor.getCleanStatusTag().orElse("},{"lineNumber":104,"author":{"gitId":"wangtao0717"},"content":"                personToEdit.getCleanStatusTags());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedCleanStatus, updatedTags);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":137,"author":{"gitId":"wangtao0717"},"content":"        private Set\u003cCleanStatusTag\u003e cleanStatusTag;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"wangtao0717"},"content":"        public EditPersonDescriptor() {"},{"lineNumber":141,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":152,"author":{"gitId":"wangtao0717"},"content":"            setCleanStatusTag(toCopy.cleanStatusTag);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":158,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":160,"author":{"gitId":"wangtao0717"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, cleanStatusTag, tags);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"wangtao0717"},"content":"        /**"},{"lineNumber":196,"author":{"gitId":"wangtao0717"},"content":"         * Sets {@code cleanStatusTag} to this object\u0027s {@code cleanStatusTag}."},{"lineNumber":197,"author":{"gitId":"wangtao0717"},"content":"         * A defensive copy of {@code cleanStatusTag} is used internally."},{"lineNumber":198,"author":{"gitId":"wangtao0717"},"content":"         */"},{"lineNumber":199,"author":{"gitId":"wangtao0717"},"content":"        public void setCleanStatusTag(Set\u003cCleanStatusTag\u003e cleanStatusTag) {"},{"lineNumber":200,"author":{"gitId":"wangtao0717"},"content":"            this.cleanStatusTag \u003d (cleanStatusTag !\u003d null) ? new HashSet\u003c\u003e(cleanStatusTag) : null;"},{"lineNumber":201,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":205,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":206,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"wangtao0717"},"content":"        /**"},{"lineNumber":212,"author":{"gitId":"wangtao0717"},"content":"         * Returns an unmodifiable cleanStatusTag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":213,"author":{"gitId":"wangtao0717"},"content":"         * if modification is attempted."},{"lineNumber":214,"author":{"gitId":"wangtao0717"},"content":"         * Returns {@code Optional#empty()} if {@code cleanStatusTag} is null."},{"lineNumber":215,"author":{"gitId":"wangtao0717"},"content":"         */"},{"lineNumber":216,"author":{"gitId":"wangtao0717"},"content":"        public Optional\u003cSet\u003cCleanStatusTag\u003e\u003e getCleanStatusTag() {"},{"lineNumber":217,"author":{"gitId":"wangtao0717"},"content":"            return (cleanStatusTag !\u003d null) ? Optional.of("},{"lineNumber":218,"author":{"gitId":"wangtao0717"},"content":"                    Collections.unmodifiableSet(cleanStatusTag)) : Optional.empty();"},{"lineNumber":219,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":222,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":223,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":224,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":225,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":239,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":246,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":247,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":249,"author":{"gitId":"wangtao0717"},"content":"                    \u0026\u0026 getCleanStatusTag().equals(e.getCleanStatusTag())"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"wangtao0717":30,"-":221}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Residence Tracker as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" * Finds and lists all persons in residence tracker whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":41}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" * Lists all persons in the residence tracker to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":23}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"                        PREFIX_CLEAN_STATUS_TAG, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"        Set\u003cCleanStatusTag\u003e cleanStatusTag \u003d ParserUtil.parseCleanStatusTags("},{"lineNumber":50,"author":{"gitId":"wangtao0717"},"content":"                argMultimap.getAllValues(PREFIX_CLEAN_STATUS_TAG));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"        Person person \u003d new Person(name, phone, email, address, cleanStatusTag, tagList);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":8,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"    public static final Prefix PREFIX_CLEAN_STATUS_TAG \u003d new Prefix(\"clean/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"                        PREFIX_CLEAN_STATUS_TAG, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":"        parseCleanStatusTagForEdit(argMultimap.getAllValues(PREFIX_CLEAN_STATUS_TAG)).ifPresent("},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":"                editPersonDescriptor::setCleanStatusTag);"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"wangtao0717"},"content":"     * Parses {@code Collection\u003cString\u003e CleanStatusTag} into a {@code Set\u003cCleanStatusTag\u003e} if {@code CleanStatusTag}"},{"lineNumber":76,"author":{"gitId":"wangtao0717"},"content":"     * is non-empty."},{"lineNumber":77,"author":{"gitId":"wangtao0717"},"content":"     * If {@code CleanStatusTag} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":78,"author":{"gitId":"wangtao0717"},"content":"     * {@code Set\u003cCleanStatusTag\u003e} containing zero tags."},{"lineNumber":79,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"    private Optional\u003cSet\u003cCleanStatusTag\u003e\u003e parseCleanStatusTagForEdit("},{"lineNumber":81,"author":{"gitId":"wangtao0717"},"content":"            Collection\u003cString\u003e cleanStatusTag) throws ParseException {"},{"lineNumber":82,"author":{"gitId":"wangtao0717"},"content":"        assert cleanStatusTag !\u003d null;"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"        if (cleanStatusTag.isEmpty()) {"},{"lineNumber":85,"author":{"gitId":"wangtao0717"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"wangtao0717"},"content":"        Collection\u003cString\u003e cleanStatusTagSet \u003d cleanStatusTag.size() \u003d\u003d 1 \u0026\u0026 cleanStatusTag.contains(\"\")"},{"lineNumber":88,"author":{"gitId":"wangtao0717"},"content":"                ? Collections.emptySet() : cleanStatusTag;"},{"lineNumber":89,"author":{"gitId":"wangtao0717"},"content":"        return Optional.of(ParserUtil.parseCleanStatusTags(cleanStatusTagSet));"},{"lineNumber":90,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":26,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"wangtao0717"},"content":"     * Parses a {@code String clean status(y or n)} into a {@code CleanStatusTag}."},{"lineNumber":102,"author":{"gitId":"wangtao0717"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"wangtao0717"},"content":"     * @throws ParseException if the given {@code cleanstatus} is invalid."},{"lineNumber":105,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"wangtao0717"},"content":"    public static CleanStatusTag parseCleanStatusTag(String cleanStatus) throws ParseException {"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"        requireNonNull(cleanStatus);"},{"lineNumber":108,"author":{"gitId":"wangtao0717"},"content":"        String trimmedTag \u003d cleanStatus.trim();"},{"lineNumber":109,"author":{"gitId":"wangtao0717"},"content":"        if (!CleanStatusTag.isValidCleanStatusTag(trimmedTag)) {"},{"lineNumber":110,"author":{"gitId":"wangtao0717"},"content":"            throw new ParseException(CleanStatusTag.getMessageConstraints());"},{"lineNumber":111,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"wangtao0717"},"content":"        return new CleanStatusTag(trimmedTag);"},{"lineNumber":113,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"     * Parses {@code Collection\u003cString\u003e cleanStatusTags} into a {@code Set\u003cCleanStatusTag\u003e}."},{"lineNumber":132,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"wangtao0717"},"content":"    public static Set\u003cCleanStatusTag\u003e parseCleanStatusTags(Collection\u003cString\u003e cleanStatusTag) throws ParseException {"},{"lineNumber":134,"author":{"gitId":"wangtao0717"},"content":"        requireNonNull(cleanStatusTag);"},{"lineNumber":135,"author":{"gitId":"wangtao0717"},"content":"        final Set\u003cCleanStatusTag\u003e CleanStatusTagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":136,"author":{"gitId":"wangtao0717"},"content":"        for (String tagName : cleanStatusTag) {"},{"lineNumber":137,"author":{"gitId":"wangtao0717"},"content":"            CleanStatusTagSet.add(parseCleanStatusTag(tagName));"},{"lineNumber":138,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"wangtao0717"},"content":"        return CleanStatusTagSet;"},{"lineNumber":140,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":29,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/ResidenceTrackerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTrackerParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":75}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"     * Returns the user prefs\u0027 residence tracker file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"     * Sets the user prefs\u0027 residence tracker file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    void setResidenceTrackerFilePath(Path residenceTrackerFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"     * Replaces address book data with the data in {@code residenceTracker}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"    void setResidenceTracker(ReadOnlyResidenceTracker residenceTracker);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    ReadOnlyResidenceTracker getResidenceTracker();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"     * The person must exist in the residence tracker."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"     * {@code person} must not already exist in the residence tracker."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"     * {@code target} must exist in the residence tracker."},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the residence"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"     * tracker."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":12,"-":76}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTracker residenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    public ModelManager(ReadOnlyResidenceTracker residenceTracker, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"        requireAllNonNull(residenceTracker, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"        logger.fine(\"Initializing with address book: \" + residenceTracker + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"        this.residenceTracker \u003d new ResidenceTracker(residenceTracker);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.residenceTracker.getPersonList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"        this(new ResidenceTracker(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"    public void setResidenceTrackerFilePath(Path residenceTrackerFilePath) {"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(residenceTrackerFilePath);"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"        userPrefs.setAddressBookFilePath(residenceTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"whatthelump"},"content":"    public void setResidenceTracker(ReadOnlyResidenceTracker residenceTracker) {"},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":"        this.residenceTracker.resetData(residenceTracker);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"    public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":94,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker.hasPerson(person);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":99,"author":{"gitId":"whatthelump"},"content":"        residenceTracker.removePerson(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":104,"author":{"gitId":"whatthelump"},"content":"        residenceTracker.addPerson(person);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"whatthelump"},"content":"        residenceTracker.setPerson(target, editedPerson);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"whatthelump"},"content":"     * {@code versionedResidenceTracker}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker.equals(other.residenceTracker)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":21,"-":130}},{"path":"src/main/java/seedu/address/model/ReadOnlyResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":" * Unmodifiable view of a residence tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":"public interface ReadOnlyResidenceTracker {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"-":15}},{"path":"src/main/java/seedu/address/model/ResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":" * Wraps all data at the residence-tracker level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTracker implements ReadOnlyResidenceTracker {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"     * Creates a ResidenceTracker using the Persons in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker(ReadOnlyResidenceTracker toBeCopied) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"     * Resets the existing data of this {@code ResidenceTracker} with {@code newData}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public void resetData(ReadOnlyResidenceTracker newData) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the residence tracker."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"     * Adds a person to the residence tracker."},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"     * The person must not already exist in the residence tracker."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":"     * {@code target} must exist in the residence tracker."},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the residence"},{"lineNumber":81,"author":{"gitId":"whatthelump"},"content":"     * tracker."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"whatthelump"},"content":"     * Removes {@code key} from this {@code ResidenceTracker}."},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"     * {@code key} must exist in the residence tracker."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof ResidenceTracker // instanceof handles nulls"},{"lineNumber":114,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 persons.equals(((ResidenceTracker) other).persons));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":17,"-":104}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"    private final Set\u003cCleanStatusTag\u003e cleanStatusTag \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"                  Set\u003cCleanStatusTag\u003e cleanStatusTag, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"        this.cleanStatusTag.addAll(cleanStatusTag);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"     * Returns an immutable clean status tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":"     * if modification is attempted."},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":"    public Set\u003cCleanStatusTag\u003e getCleanStatusTags() {"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"        return Collections.unmodifiableSet(cleanStatusTag);"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 otherPerson.getCleanStatusTags().equals(getCleanStatusTags())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":"        return Objects.hash(name, phone, email, address, cleanStatusTag, tags);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"wangtao0717"},"content":"        Set\u003cCleanStatusTag\u003e cleanStatusTags \u003d getCleanStatusTags();"},{"lineNumber":129,"author":{"gitId":"wangtao0717"},"content":"        if (!cleanStatusTags.isEmpty()) {"},{"lineNumber":130,"author":{"gitId":"wangtao0717"},"content":"            builder.append(\"; CleanStatus: \");"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"            cleanStatusTags.forEach(builder::append);"},{"lineNumber":132,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":21,"-":121}},{"path":"src/main/java/seedu/address/model/residence/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if a given string is a valid address."},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":55,"awzhenyi":1,"VRSoorya":1}},{"path":"src/main/java/seedu/address/model/residence/BookingDetails.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"public class BookingDetails {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"    public final String bookingDetails;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"    public BookingDetails(String bookingDetails) {"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"        this.bookingDetails \u003d bookingDetails;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":10}},{"path":"src/main/java/seedu/address/model/residence/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":58,"awzhenyi":1}},{"path":"src/main/java/seedu/address/model/residence/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":" * Tests that a {@code Residence}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cResidence\u003e {"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"    public boolean test(Residence residence) {"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(residence.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":27,"awzhenyi":4}},{"path":"src/main/java/seedu/address/model/residence/Residence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence in the address book."},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"public class Residence {"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    // Data fields"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"    private final Address address;"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"    private final BookingDetails bookingDetails;"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    private final Set\u003cCleanStatusTag\u003e cleanStatusTag \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"    public Residence(Name name, Address address, BookingDetails bookingDetails,"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"                     Set\u003cCleanStatusTag\u003e cleanStatusTag, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"        this.bookingDetails \u003d bookingDetails;"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"        requireAllNonNull(name, address, cleanStatusTag, tags);"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"        this.cleanStatusTag.addAll(cleanStatusTag);"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        this.tags.addAll(tags);"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    public Name getName() {"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"        return name;"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    public Address getAddress() {"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"        return address;"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"    public BookingDetails getBookingDetails() {"},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"        return bookingDetails;"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"     * Returns an immutable clean status tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":"     * if modification is attempted."},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"    public Set\u003cCleanStatusTag\u003e getCleanStatusTag() {"},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"        return Collections.unmodifiableSet(cleanStatusTag);"},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"     * if modification is attempted."},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":67,"author":{"gitId":"whatthelump"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if both residences have the same name."},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"     * This defines a weaker notion of equality between two residences."},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"    public boolean isSameResidence(Residence otherResidence) {"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"        if (otherResidence \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"        return otherResidence !\u003d null"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getName().equals(getName());"},{"lineNumber":81,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if both residence have the same identity and data fields."},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"     * This defines a stronger notion of equality between two residence."},{"lineNumber":86,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":90,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"        if (!(other instanceof Residence)) {"},{"lineNumber":94,"author":{"gitId":"whatthelump"},"content":"            return false;"},{"lineNumber":95,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":97,"author":{"gitId":"awzhenyi"},"content":"        Residence otherResidence \u003d (Residence) other;"},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        return otherResidence.getName().equals(getName())"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getAddress().equals(getAddress())"},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getBookingDetails().equals(getBookingDetails())"},{"lineNumber":101,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 otherResidence.getCleanStatusTag().equals(getCleanStatusTag())"},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getTags().equals(getTags());"},{"lineNumber":103,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":105,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitId":"whatthelump"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":108,"author":{"gitId":"wangtao0717"},"content":"        return Objects.hash(name, address, bookingDetails, cleanStatusTag, tags);"},{"lineNumber":109,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":111,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitId":"whatthelump"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":114,"author":{"gitId":"whatthelump"},"content":"        builder.append(getName())"},{"lineNumber":115,"author":{"gitId":"whatthelump"},"content":"                .append(\"; Address: \")"},{"lineNumber":116,"author":{"gitId":"awzhenyi"},"content":"                .append(getAddress())"},{"lineNumber":117,"author":{"gitId":"awzhenyi"},"content":"                .append(\"; Booking Details: \")"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"                .append(getBookingDetails());"},{"lineNumber":119,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":120,"author":{"gitId":"wangtao0717"},"content":"        Set\u003cCleanStatusTag\u003e cleanStatusTags \u003d getCleanStatusTag();"},{"lineNumber":121,"author":{"gitId":"wangtao0717"},"content":"        if (!cleanStatusTags.isEmpty()) {"},{"lineNumber":122,"author":{"gitId":"wangtao0717"},"content":"            builder.append(\"; CleanStatus: \");"},{"lineNumber":123,"author":{"gitId":"wangtao0717"},"content":"            cleanStatusTags.forEach(builder::append);"},{"lineNumber":124,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":126,"author":{"gitId":"whatthelump"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":127,"author":{"gitId":"whatthelump"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":128,"author":{"gitId":"whatthelump"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":129,"author":{"gitId":"whatthelump"},"content":"            tags.forEach(builder::append);"},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"whatthelump"},"content":"        return builder.toString();"},{"lineNumber":132,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":134,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":86,"awzhenyi":21,"wangtao0717":23,"VRSoorya":4}},{"path":"src/main/java/seedu/address/model/residence/UniqueResidenceList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.DuplicateResidenceException;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.ResidenceNotFoundException;"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":" * A list of residences that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":" * A residence is considered unique by comparing using {@code Residence#isSameResidence(Residence)}."},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":" * As such, adding and updating of residences uses Residence#isSameResidence(Residence) for equality"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":" * so as to ensure that the residence being added or updated is unique in terms of identity in the UniqueResidenceList."},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":" * However, the removal of a Residence uses Residence#equals(Object) so as to ensure that the Residence"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":" * with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":" * @see Residence#isSameResidence(Residence)"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"public class UniqueResidenceList implements Iterable\u003cResidence\u003e {"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if the list contains an equivalent residence as the given argument."},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    public boolean contains(Residence toCheck) {"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResidence);"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"     * Adds a Residence to the list."},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"     * The residence must not already exist in the list."},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"    public void add(Residence toAdd) {"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the residence {@code target} in the list with {@code editedResidence}."},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"     * The residence identity of {@code editedResidence} must not be the same as another existing residence in the list."},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"    public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":58,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(target, editedResidence);"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"        if (!target.isSameResidence(editedResidence) \u0026\u0026 contains(editedResidence)) {"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        internalList.set(index, editedResidence);"},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"     * Removes the equivalent residence from the list."},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"     * The residence must exist in the list."},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"    public void remove(Residence toRemove) {"},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(UniqueResidenceList replacement) {"},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the contents of this list with {@code residences}."},{"lineNumber":90,"author":{"gitId":"awzhenyi"},"content":"     * {@code residences} must not contain duplicate residences."},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(List\u003cResidence\u003e residences) {"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(residences);"},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        if (!residencesAreUnique(residences)) {"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(residences);"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":101,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"    public Iterator\u003cResidence\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"awzhenyi"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"awzhenyi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"awzhenyi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"awzhenyi"},"content":"                || (other instanceof UniqueResidenceList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 internalList.equals(((UniqueResidenceList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"awzhenyi"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":125,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if {@code residences} contains only unique residences."},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"awzhenyi"},"content":"    private boolean residencesAreUnique(List\u003cResidence\u003e residences) {"},{"lineNumber":129,"author":{"gitId":"awzhenyi"},"content":"        for (int i \u003d 0; i \u003c residences.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"awzhenyi"},"content":"            for (int j \u003d i + 1; j \u003c residences.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"awzhenyi"},"content":"                if (residences.get(i).isSameResidence(residences.get(j))) {"},{"lineNumber":132,"author":{"gitId":"awzhenyi"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"awzhenyi"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"awzhenyi"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"awzhenyi"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":139,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":140,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":141,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":142,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":141,"VRSoorya":1}},{"path":"src/main/java/seedu/address/model/residence/exceptions/DuplicateResidenceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":" * Signals that the operation will result in duplicate Residences (Residences are considered duplicates"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":" * if they have the same identity)."},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"public class DuplicateResidenceException extends RuntimeException {"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    public DuplicateResidenceException() {"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"        super(\"Operation would result in duplicate residences\");"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":12}},{"path":"src/main/java/seedu/address/model/residence/exceptions/ResidenceNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"public class ResidenceNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":5}},{"path":"src/main/java/seedu/address/model/tag/CleanStatusTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"public class CleanStatusTag {"},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":"    private static String MESSAGE_CONSTRAINTS \u003d \"should use y or n to show clean status \";"},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"    public final String cleanStatus;"},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"     * @param cleanStatus define the clean status by y or n ."},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    public CleanStatusTag(String cleanStatus) {"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"        requireNonNull(cleanStatus);"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"        checkArgument(isValidCleanStatusTag(cleanStatus), MESSAGE_CONSTRAINTS);"},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"        if (cleanStatus.equals(\"y\") || cleanStatus.equals(\"Cleaned\")) {"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"            this.cleanStatus \u003d \"Cleaned\";"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"            this.cleanStatus \u003d \"Uncleaned\";"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"    public static boolean isValidCleanStatusTag(String test) {"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"        return test.equals(\"y\") || test.equals(\"Cleaned\")"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"                || test.equals(\"n\") || test.equals(\"Uncleaned\");"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 cleanStatus.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"        return cleanStatus.hashCode();"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"wangtao0717"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"wangtao0717"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"wangtao0717"},"content":"        return \u0027[\u0027 + cleanStatus + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"    public static String getMessageConstraints() {"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":"        return MESSAGE_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"}"}],"authorContributionMap":{"wangtao0717":57}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new Person[]{"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 30 Geylang Street 29, #06-40\"), getCleanStatusTagSet(\"y\"),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                        getTagSet(\"friends\")),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), getCleanStatusTagSet(\"y\"),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), getCleanStatusTagSet(\"n\"),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                        getTagSet(\"neighbours\")),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), getCleanStatusTagSet(),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                        getTagSet(\"family\")),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 47 Tampines Street 20, #17-35\"), getCleanStatusTagSet(),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                        getTagSet(\"classmates\")),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"), getCleanStatusTagSet(),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                        getTagSet(\"colleagues\"))"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"    public static ReadOnlyResidenceTracker getSampleAddressBook() {"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker sampleAb \u003d new ResidenceTracker();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"     * Returns a CleanStatusTag set containing the list of strings given."},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":"    public static Set\u003cCleanStatusTag\u003e getCleanStatusTagSet(String... strings) {"},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"        return Arrays.stream(strings)"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"                .map(CleanStatusTag::new)"},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":4,"wangtao0717":16,"-":50}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCleanStatusTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":" * Jackson-friendly version of {@link Tag}."},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":" */"},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"class JsonAdaptedCleanStatusTag {"},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"    private final String cleanStatus;"},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"    @JsonCreator"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"    public JsonAdaptedCleanStatusTag(String cleanStatus) {"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":"        this.cleanStatus \u003d cleanStatus;"},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"    public JsonAdaptedCleanStatusTag(CleanStatusTag source) {"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"        cleanStatus \u003d source.cleanStatus;"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    @JsonValue"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"    public String getCleanStatus() {"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"        return cleanStatus;"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"     * Converts this Jackson-friendly adapted cleanStatusTag object into the model\u0027s {@code CleanStatusTag} object."},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted CleanStatusTag."},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":"    public CleanStatusTag toModelType() throws IllegalValueException {"},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"        if (!CleanStatusTag.isValidCleanStatusTag(cleanStatus)) {"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"            throw new IllegalValueException(CleanStatusTag.getMessageConstraints());"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":"        return new CleanStatusTag(cleanStatus);"},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"}"}],"authorContributionMap":{"wangtao0717":49}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    private final List\u003cJsonAdaptedCleanStatusTag\u003e cleanStatusTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"                             @JsonProperty(\"cleanStatusTagged\") List\u003cJsonAdaptedCleanStatusTag\u003e cleanStatusTagged,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"        if (cleanStatusTagged !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"wangtao0717"},"content":"            this.cleanStatusTagged.addAll(cleanStatusTagged);"},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":"     * Converts a given {@code Person} into this class for Json use."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":"        cleanStatusTagged.addAll(source.getCleanStatusTags().stream()"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"                .map(JsonAdaptedCleanStatusTag::new)"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"     * Converts this Json-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":77,"author":{"gitId":"wangtao0717"},"content":"        final List\u003cCleanStatusTag\u003e personCleanStatusTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"wangtao0717"},"content":"        for (JsonAdaptedCleanStatusTag cleanStatusTag : cleanStatusTagged) {"},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"            personCleanStatusTag.add(cleanStatusTag.toModelType());"},{"lineNumber":81,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":117,"author":{"gitId":"wangtao0717"},"content":"        final Set\u003cCleanStatusTag\u003e modelCleanStatusTag \u003d new HashSet\u003c\u003e(personCleanStatusTag);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":119,"author":{"gitId":"wangtao0717"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelCleanStatusTag, modelTags);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"wangtao0717":15,"-":105}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" * Json-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":47}},{"path":"src/main/java/seedu/address/storage/JsonResidenceTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":" * A class to access ResidenceTracker data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"public class JsonResidenceTrackerStorage implements ResidenceTrackerStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonResidenceTrackerStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    public JsonResidenceTrackerStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"        return readResidenceTracker(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"     * Similar to {@link #readResidenceTracker()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"        Optional\u003cJsonSerializableResidenceTracker\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"                filePath, JsonSerializableResidenceTracker.class);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException {"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        saveResidenceTracker(residenceTracker, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"     * Similar to {@link #saveResidenceTracker(ReadOnlyResidenceTracker)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(residenceTracker);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableResidenceTracker(residenceTracker), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":18,"-":62}},{"path":"src/main/java/seedu/address/storage/JsonSerializableResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":" * An Immutable ResidenceTracker that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"@JsonRootName(value \u003d \"residencetracker\")"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"class JsonSerializableResidenceTracker {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     * Constructs a {@code JsonSerializableResidenceTracker} with the given persons."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    public JsonSerializableResidenceTracker(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Converts a given {@code ReadOnlyResidenceTracker} into this class for Json use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableResidenceTracker}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    public JsonSerializableResidenceTracker(ReadOnlyResidenceTracker source) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"     * Converts this address book into the model\u0027s {@code ResidenceTracker} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker residenceTracker \u003d new ResidenceTracker();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"            if (residenceTracker.hasPerson(person)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"            residenceTracker.addPerson(person);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":16,"-":44}},{"path":"src/main/java/seedu/address/storage/ResidenceTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":" * Represents a storage for {@link ResidenceTracker}."},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"public interface ResidenceTrackerStorage {"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"     * Returns ResidenceTracker data as a {@link ReadOnlyResidenceTracker}."},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     * @see #getResidenceTrackerFilePath()"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Saves the given {@link ReadOnlyResidenceTracker} to the storage."},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"     * @param residenceTracker cannot be null."},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException;"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"     * @see #saveResidenceTracker(ReadOnlyResidenceTracker)"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":46}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"public interface Storage extends ResidenceTrackerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":5,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":" * Manages storage of ResidenceTracker data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    private ResidenceTrackerStorage residenceTrackerStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * Creates a {@code StorageManager} with the given {@code ResidenceTrackerStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    public StorageManager(ResidenceTrackerStorage residenceTrackerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        this.residenceTrackerStorage \u003d residenceTrackerStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return residenceTrackerStorage.getResidenceTrackerFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        return readResidenceTracker(residenceTrackerStorage.getResidenceTrackerFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath)"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"        return residenceTrackerStorage.readResidenceTracker(filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException {"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        saveResidenceTracker(residenceTracker, residenceTrackerStorage.getResidenceTrackerFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        residenceTrackerStorage.saveResidenceTracker(residenceTracker, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":17,"-":63}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S2-CS2103-T16-3/\""},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"tp/blob/master/docs/UserGuide.md\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":2,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"whatthelump"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getResidenceTrackerFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":195}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":"    private FlowPane cleanStatusTags;"},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"        person.getCleanStatusTags().stream()"},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"               .sorted(Comparator.comparing(cleanStatusTag -\u003e cleanStatusTag.cleanStatus))"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"                .forEach(cleanStatusTag -\u003e cleanStatusTags.getChildren().add(new Label(cleanStatusTag.cleanStatus)));"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":7,"-":77}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}"},{"lineNumber":314,"author":{"gitId":"-"},"content":""},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}"},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"wangtao0717"},"content":"#cleanStatusTags {"},{"lineNumber":341,"author":{"gitId":"wangtao0717"},"content":"    -fx-hgap: 7;"},{"lineNumber":342,"author":{"gitId":"wangtao0717"},"content":"    -fx-vgap: 3;"},{"lineNumber":343,"author":{"gitId":"wangtao0717"},"content":"}"},{"lineNumber":344,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":345,"author":{"gitId":"wangtao0717"},"content":"#cleanStatusTags .label {"},{"lineNumber":346,"author":{"gitId":"wangtao0717"},"content":"    -fx-text-fill: white;"},{"lineNumber":347,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: #9b95c9;"},{"lineNumber":348,"author":{"gitId":"wangtao0717"},"content":"    -fx-padding: 1 3 1 5;"},{"lineNumber":349,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-radius: 2;"},{"lineNumber":350,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-radius: 2;"},{"lineNumber":351,"author":{"gitId":"wangtao0717"},"content":"    -fx-font-size: 11;"},{"lineNumber":352,"author":{"gitId":"wangtao0717"},"content":"}"},{"lineNumber":353,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":357,"author":{"gitId":"-"},"content":"}"},{"lineNumber":358,"author":{"gitId":"-"},"content":""},{"lineNumber":359,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":361,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":366,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":14,"-":352}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"        \u003cFlowPane fx:id\u003d\"cleanStatusTags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"wangtao0717":1,"-":36}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.JsonResidenceTrackerStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"                new JsonResidenceTrackerStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"                new JsonResidenceTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"whatthelump"},"content":"    private static class JsonResidenceTrackerIoExceptionThrowingStub extends JsonResidenceTrackerStorage {"},{"lineNumber":153,"author":{"gitId":"whatthelump"},"content":"        private JsonResidenceTrackerIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"whatthelump"},"content":"        public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"-":152}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"        Person personInList \u003d model.getResidenceTracker().getPersonList().get(0);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"-":43}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"whatthelump"},"content":"        public Path getResidenceTrackerFilePath() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"whatthelump"},"content":"        public void setResidenceTrackerFilePath(Path residenceTrackerFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"whatthelump"},"content":"        public void setResidenceTracker(ReadOnlyResidenceTracker newData) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"whatthelump"},"content":"        public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":189,"author":{"gitId":"whatthelump"},"content":"        public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":190,"author":{"gitId":"whatthelump"},"content":"            return new ResidenceTracker();"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":8,"-":186}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        expectedModel.setResidenceTracker(new ResidenceTracker());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":107,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker expectedAddressBook \u003d new ResidenceTracker(actualModel.getResidenceTracker());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":111,"author":{"gitId":"whatthelump"},"content":"        assertEquals(expectedAddressBook, actualModel.getResidenceTracker());"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"-":125}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResidenceTracker().getPersonList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"-":106}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":115,"author":{"gitId":"whatthelump"},"content":"        Person personInList \u003d model.getResidenceTracker().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"whatthelump"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResidenceTracker().getPersonList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":7,"-":166}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"        expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":38}},{"path":"src/test/java/seedu/address/logic/parser/ResidenceTrackerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTrackerParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTrackerParser parser \u003d new ResidenceTrackerParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"-":99}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTracker addressBook \u003d new ResidenceTracker();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"        ResidenceTrackerStub newData \u003d new ResidenceTrackerStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"    private static class ResidenceTrackerStub implements ReadOnlyResidenceTracker {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":"        ResidenceTrackerStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":5,"-":97}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        assertEquals(new ResidenceTracker(), new ResidenceTracker(modelManager.getResidenceTracker()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setResidenceTrackerFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        modelManager.setResidenceTrackerFilePath(path);"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"        assertEquals(path, modelManager.getResidenceTrackerFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker differentAddressBook \u003d new ResidenceTracker();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":6,"-":126}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    private static final String INVALID_CLEAN_STATUS_TAG \u003d \"NO MEANING\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    private static final List\u003cJsonAdaptedCleanStatusTag\u003e VALID_CLEAN_STATUS_TAG \u003d BENSON.getCleanStatusTags().stream()"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"            .map(JsonAdaptedCleanStatusTag::new)"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":48,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":"                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"wangtao0717"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":74,"author":{"gitId":"wangtao0717"},"content":"                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":82,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":"                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitId":"wangtao0717"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":91,"author":{"gitId":"wangtao0717"},"content":"                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":99,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":100,"author":{"gitId":"wangtao0717"},"content":"                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":108,"author":{"gitId":"wangtao0717"},"content":"                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":"    public void toModelType_invalidCleanStatusTag_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitId":"wangtao0717"},"content":"        List\u003cJsonAdaptedCleanStatusTag\u003e invalidCleanStatusTag \u003d new ArrayList\u003c\u003e(VALID_CLEAN_STATUS_TAG);"},{"lineNumber":116,"author":{"gitId":"wangtao0717"},"content":"        invalidCleanStatusTag.add(new JsonAdaptedCleanStatusTag(INVALID_CLEAN_STATUS_TAG));"},{"lineNumber":117,"author":{"gitId":"wangtao0717"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":118,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":119,"author":{"gitId":"wangtao0717"},"content":"                        invalidCleanStatusTag, VALID_TAGS);"},{"lineNumber":120,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":121,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":128,"author":{"gitId":"wangtao0717"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":129,"author":{"gitId":"wangtao0717"},"content":"                        VALID_CLEAN_STATUS_TAG, invalidTags);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":32,"-":101}},{"path":"src/test/java/seedu/address/storage/JsonResidenceTrackerStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"public class JsonResidenceTrackerStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"    private java.util.Optional\u003cReadOnlyResidenceTracker\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"        return new JsonResidenceTrackerStorage(Paths.get(filePath))"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"            .readResidenceTracker(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":67,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker original \u003d getTypicalAddressBook();"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage jsonAddressBookStorage \u003d new JsonResidenceTrackerStorage(filePath);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        jsonAddressBookStorage.saveResidenceTracker(original, filePath);"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"        ReadOnlyResidenceTracker readBack \u003d jsonAddressBookStorage.readResidenceTracker(filePath).get();"},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);"},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"        jsonAddressBookStorage.saveResidenceTracker(original, filePath);"},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":"        readBack \u003d jsonAddressBookStorage.readResidenceTracker(filePath).get();"},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);"},{"lineNumber":84,"author":{"gitId":"whatthelump"},"content":"        jsonAddressBookStorage.saveResidenceTracker(original); // file path not specified"},{"lineNumber":85,"author":{"gitId":"whatthelump"},"content":"        readBack \u003d jsonAddressBookStorage.readResidenceTracker().get(); // file path not specified"},{"lineNumber":86,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"whatthelump"},"content":"    private void saveAddressBook(ReadOnlyResidenceTracker addressBook, String filePath) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"whatthelump"},"content":"            new JsonResidenceTrackerStorage(Paths.get(filePath))"},{"lineNumber":101,"author":{"gitId":"whatthelump"},"content":"                    .saveResidenceTracker(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitId":"whatthelump"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new ResidenceTracker(), null));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":21,"-":90}},{"path":"src/test/java/seedu/address/storage/JsonSerializableResidenceTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.TypicalPersons;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"public class JsonSerializableResidenceTrackerTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableResidenceTracker.MESSAGE_DUPLICATE_PERSON,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":11,"-":36}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d new JsonResidenceTrackerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker original \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"        storageManager.saveResidenceTracker(original);"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        ReadOnlyResidenceTracker retrieved \u003d storageManager.readResidenceTracker().get();"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"        assertNotNull(storageManager.getResidenceTrackerFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":8,"-":60}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"    private ResidenceTracker addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"        addressBook \u003d new ResidenceTracker();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    public AddressBookBuilder(ResidenceTracker addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":5,"-":29}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"    private Set\u003cCleanStatusTag\u003e cleanStatusTags;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"        cleanStatusTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"        cleanStatusTags \u003d new HashSet\u003c\u003e(personToCopy.getCleanStatusTags());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"     * Parses the {@code cleanStatusTags} into a {@code Set\u003ccleanStatusTag\u003e} and set it to the {@code Person}"},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":"     * that we are building."},{"lineNumber":67,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"wangtao0717"},"content":"    public PersonBuilder withCleanStatusTags(String... cleanStatusTags) {"},{"lineNumber":69,"author":{"gitId":"wangtao0717"},"content":"        this.cleanStatusTags \u003d SampleDataUtil.getCleanStatusTagSet(cleanStatusTags);"},{"lineNumber":70,"author":{"gitId":"wangtao0717"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String... tags) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":106,"author":{"gitId":"wangtao0717"},"content":"        return new Person(name, phone, email, address, cleanStatusTags, tags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":14,"-":95}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withTags(\"friends\").build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"    public static ResidenceTracker getTypicalAddressBook() {"},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker ab \u003d new ResidenceTracker();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"-":73}}]
