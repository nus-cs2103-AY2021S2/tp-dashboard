[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T16-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jaredtengsw"},"content":"## User Interface"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jaredtengsw"},"content":"##About ResidenceTracker\u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":"ResidenceTracker is a command line based desktop application that assists landlords in managing their residences that they are listing out on the Airbnb platform for rent."},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":"* It gives user convenience by providing a centralised overview of all of the user\u0027s residences and the respective booking/cleaning statuses of each residence. "},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"* It uses a **quick CLI** way to note down bookings and track status of different residence, such as "},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"  clean or needs cleaning/booked or available, so the landlord can process bookings more efficiently and inform the cleaning agent as necessary before the next leasee arrives."},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"* It is **written in OOP fashion**."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"* For more details on ResidenceTracker, please refer to our [User Guide](docs/UserGuide.md)."},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":""}],"authorContributionMap":{"jaredtengsw":7,"awzhenyi":4,"wangtao0717":7,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"### Lim Li Gang"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"\u003cimg src\u003d\"images/whatthelump.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"[[github](https://github.com/whatthelump)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"* Role: Code Quality and Documentation"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"* Responsibilities: _TBC_"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"### Aw Zhen Yi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"\u003cimg src\u003d\"images/awzhenyi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"[[github](http://github.com/awzhenyi)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":"* Responsibilities: _TBC_"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"### Teng Shu Wei Jared"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"\u003cimg src\u003d\"images/jaredtengsw.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"[[github](http://github.com/jaredtengsw)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"* Responsibilities: _TBC_"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"### V R Soorya"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/vrsoorya.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"[[github](http://github.com/vrsoorya)]"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"[[portfolio](team/vrsoorya.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* Responsibilities: Dev Ops"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"### Wang Tao"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/wangtao0717.png\" width\u003d\"200px\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"[[github](http://github.com/wangtao0717)]"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"[[portfolio](team/wangtao0717.md)]"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"* Responsibilities: _TBC_"}],"authorContributionMap":{"whatthelump":5,"awzhenyi":5,"jaredtengsw":4,"wangtao0717":4,"-":33,"VRSoorya":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"whatthelump"},"content":"* has to manage a considerable number of residences"},{"lineNumber":240,"author":{"gitId":"whatthelump"},"content":"* is constantly renting out residences; high turnover rate"},{"lineNumber":241,"author":{"gitId":"whatthelump"},"content":"* prefers working on their laptop over using their phone"},{"lineNumber":242,"author":{"gitId":"whatthelump"},"content":"* is able to type quickly"},{"lineNumber":243,"author":{"gitId":"whatthelump"},"content":"* prefers using a keyboard to using a mouse"},{"lineNumber":244,"author":{"gitId":"whatthelump"},"content":"* is reasonably familiar with CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"whatthelump"},"content":"**Value proposition**: easily keep track of residences and inform cleaning agency whenever necessary"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                    | So that I can…​                                                       |"},{"lineNumber":254,"author":{"gitId":"VRSoorya"},"content":"| -------- | ------------------------------------------ | ---------------------------------- | ----------------------------------------------------------------------   |"},{"lineNumber":255,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | new user                                   | See a list of all commands         | refer to instructions when I forget how to use the App                   |"},{"lineNumber":256,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | add a new residence                | keep track of all my residences                                                                         |"},{"lineNumber":257,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | delete a residence                 | remove places that I no longer need to track                             |"},{"lineNumber":258,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | find a residence by name           | locate details of residence without having to go through the entire list |"},{"lineNumber":259,"author":{"gitId":"VRSoorya"},"content":"| `* *`    | user                                       | edit a residence status            | keep track of all my residences status as and when they change           |"},{"lineNumber":260,"author":{"gitId":"VRSoorya"},"content":"| `*`      | user owning and renting out many residences| view list of all residence status  | minimize the time needed to get a quick overview of all my residences    |"},{"lineNumber":261,"author":{"gitId":"VRSoorya"},"content":"| `*`      | busy advanced user                         | clear user input quickly           | my time is used more efficiently                                         |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"wangtao0717"},"content":"(For all use cases below, the **System** is the `ResidenceTracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC01): Add a residence**\u003cbr\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"wangtao0717"},"content":"1.  User adds in the details of a residence"},{"lineNumber":273,"author":{"gitId":"wangtao0717"},"content":"2.  User confirms the addition"},{"lineNumber":274,"author":{"gitId":"wangtao0717"},"content":"3.  System confirms the addition and residence is added to the list of existing residence"},{"lineNumber":275,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"jaredtengsw"},"content":"* 2a. Error in submission if user did not provide all relevant fields. \u003cbr\u003e"},{"lineNumber":280,"author":{"gitId":"jaredtengsw"},"content":"    * 2a1. ResidenceTracker shows an error message. \u003cbr\u003e"},{"lineNumber":281,"author":{"gitId":"wangtao0717"},"content":"      use case restarts from 1."},{"lineNumber":282,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":283,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":284,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":285,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC02): Delete a residence**"},{"lineNumber":286,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":287,"author":{"gitId":"jaredtengsw"},"content":"**MSS**"},{"lineNumber":288,"author":{"gitId":"wangtao0717"},"content":"1.  User deletes a residence with a INDEX"},{"lineNumber":289,"author":{"gitId":"wangtao0717"},"content":"2.  System confirms the input number"},{"lineNumber":290,"author":{"gitId":"wangtao0717"},"content":"3.  System deletes the respective entry of the residence"},{"lineNumber":291,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"wangtao0717"},"content":"**Extensions**"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the correct format of deletion."},{"lineNumber":298,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct delete command with INDEX."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":303,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":304,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC03): Find a residence** \u003cbr\u003e"},{"lineNumber":305,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":306,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the keywords to search residences"},{"lineNumber":307,"author":{"gitId":"wangtao0717"},"content":"2.  System returns the residence(s) which include the keyword in their name"},{"lineNumber":308,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":309,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":310,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":311,"author":{"gitId":"wangtao0717"},"content":"* 1a. no matching residences are found"},{"lineNumber":312,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":313,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":314,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":315,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":316,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":317,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC04): View list of all residences**\u003cbr\u003e"},{"lineNumber":318,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":319,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the list command"},{"lineNumber":320,"author":{"gitId":"wangtao0717"},"content":"2.  System lists all residences"},{"lineNumber":321,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":322,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":323,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":324,"author":{"gitId":"wangtao0717"},"content":"* 1a. no residences are found"},{"lineNumber":325,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":326,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":327,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":328,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":329,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":330,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC05): Edit status of a residence** \u003cbr\u003e"},{"lineNumber":331,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":332,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the index and status of the residence to be edited"},{"lineNumber":333,"author":{"gitId":"wangtao0717"},"content":"2.  System validates the edition"},{"lineNumber":334,"author":{"gitId":"wangtao0717"},"content":"3.  System updates the residence status"},{"lineNumber":335,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":336,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":337,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":338,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX or in entered status"},{"lineNumber":339,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":340,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the expected format of edit command."},{"lineNumber":341,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct edit command with necessary details."},{"lineNumber":342,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case resumes at step 2."},{"lineNumber":343,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":344,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":345,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":346,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC06): Show all available commands** \u003cbr\u003e"},{"lineNumber":347,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":348,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the help command"},{"lineNumber":349,"author":{"gitId":"wangtao0717"},"content":"2.  System shows a list of all available commands to help master the use of the app and the URL to the User Guide"},{"lineNumber":350,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":351,"author":{"gitId":"wangtao0717"},"content":"    Use case ends."},{"lineNumber":352,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":353,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":354,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":355,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC07): Exit the application** \u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":357,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the exit command"},{"lineNumber":358,"author":{"gitId":"wangtao0717"},"content":"2.  System closes"},{"lineNumber":359,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":360,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":361,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":367,"author":{"gitId":"awzhenyi"},"content":"2.  Should be able to hold up to 100 residences without a noticeable sluggishness in performance for typical usage."},{"lineNumber":368,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":375,"author":{"gitId":"awzhenyi"},"content":"* **Residence Status**:"},{"lineNumber":376,"author":{"gitId":"awzhenyi"},"content":"    * **Clean**: The residence has been cleaned"},{"lineNumber":377,"author":{"gitId":"awzhenyi"},"content":"    * **Unclean**: The residence needs to be cleaned"},{"lineNumber":378,"author":{"gitId":"awzhenyi"},"content":"    * **Book**: ***TBC***"},{"lineNumber":379,"author":{"gitId":"awzhenyi"},"content":"    * **Unbook**: ***TBC***"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":388,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":405,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":416,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":419,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":422,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"whatthelump":7,"jaredtengsw":40,"awzhenyi":6,"wangtao0717":43,"-":328,"VRSoorya":8}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker (RT) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RT can get your residence management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"1. Download the latest `residencetracker.jar` from [here](https://github.com/AY2021S2-CS2103-T16-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your ResidenceTracker."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"   * **`list`** : Lists all residences in the app."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"   * **`add`**`n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y` : Adds a residence named `Clementi HDB` to the ResidenceTracker."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"   * **`delete`**`3` : Deletes the 3rd residence shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"   * **`clear`** : Deletes all residences."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Amber Heights`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/Amber Heights t/friend` or as `n/Amber Heights`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"  e.g. if the command specifies `n/NAME a/ADDRESS`, `a/ADDRESS n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"  e.g. if you specify `a/Jurong West St 60 a/Jurong West St 70`, only `a/Jurong West St 70` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"### Adding a residence: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"Adds a new residence to the list of residences,default for CLEANING_STATUS and BOOKING_STATUS is ‘cleaned’ and ‘not-booked’ respectively."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"Format: ` add n/NAME_OF_APARTMENT a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":"* `add n/Melville Park a/22 Simei Street 1, #10-02, S529948`"},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"* `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"whatthelump"},"content":"### Listing all residences: `list`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"jaredtengsw"},"content":"Shows a list of all residences in the app."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"### Editing a residence: `edit`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"Edits the booking/cleaning status of an existing residence"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"Format: `edit u/(un)clean [INDEX] u/(un)book [INDEX]`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"* Edits the residence status at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"* At least one of the optional fields (either clean or book status) must be provided."},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":"* If both fields are provided, `INDEX` field should be of the same value."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/clean 1` Edits the clean status of the 1st residence on the list from `Unclean` to `Clean`. Booking status remains unchanged from original value."},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/unclean 2 u/unbook 2`  Edits the clean status of the 2nd residence on the list from `Unclean` to `Clean`, booking status of the same residence from `Booked` to `Unbooked`."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"### Locating residences by name: `find`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"Finds residences whose names contain any of the given keywords."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"VRSoorya"},"content":"* The search is case-insensitive. e.g `duxton` will match `Duxton`"},{"lineNumber":113,"author":{"gitId":"VRSoorya"},"content":"* The order of the keywords does not matter. e.g. `Gardens Bay` will match `Bay Gardens`"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":115,"author":{"gitId":"VRSoorya"},"content":"* Only full words will be matched e.g. `Dux` will not match `Duxton`"},{"lineNumber":116,"author":{"gitId":"VRSoorya"},"content":"* Apartments matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":"  e.g. `Gardens Bay` will return `Botanic Gardens`, `Bay Area`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitId":"VRSoorya"},"content":"* `find heights` returns `Hillview Heights` and `Aspen Heights`"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"* `find east coast` returns `East View`, `West Coast`\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"whatthelump"},"content":"### Deleting a residence: `delete`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"whatthelump"},"content":"Deletes the specified residence from the list of residences."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"whatthelump"},"content":"* Deletes the residence at the specified `INDEX`."},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"* The index refers to the index number shown in the displayed residences list (i.e. **NOT** zero-indexed)."},{"lineNumber":131,"author":{"gitId":"whatthelump"},"content":"* The index must be a **positive integer** (\u003e0)"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitId":"whatthelump"},"content":"* `list` followed by `delete 3` deletes the 3rd residence in the list of residences."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"whatthelump"},"content":"Clears all entries from the residence tracker."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved as a JSON file `[JAR file location]/data/ResidenceTracker.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":157,"author":{"gitId":"whatthelump"},"content":"If your changes to the data file makes its format invalid, ResidenceTracker will discard all data and start with an empty data file at the next run."},{"lineNumber":158,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"whatthelump"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ResidenceTracker home folder."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":176,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":177,"author":{"gitId":"whatthelump"},"content":"**Add** | `add n/NAME_OF_RESIDENCE a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]]…​` \u003cbr\u003e e.g., `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":178,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":179,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":180,"author":{"gitId":"awzhenyi"},"content":"**Edit** | `edit u/(un)clean [INDEX] u/(un)book [INDEX]`\u003cbr\u003e e.g.,`edit u/unclean 2 u/unbook 2`"},{"lineNumber":181,"author":{"gitId":"whatthelump"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find Heights`"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":183,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":184,"author":{"gitId":"jaredtengsw"},"content":"**Exit** | `exit`"}],"authorContributionMap":{"whatthelump":28,"jaredtengsw":4,"awzhenyi":9,"wangtao0717":3,"-":133,"VRSoorya":7}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: AddressBook Level-3"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp/branch/master/graph/badge.svg?token\u003dU5L6JM6HMZ)](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":18,"VRSoorya":1}},{"path":"docs/team/vrsoorya.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"NOTE: to be edited by Soorya accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"  * User Guide:"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"  * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"VRSoorya":47}},{"path":"docs/team/wangtao.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"NOTE: to be edited by Wang Tao accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"    * User Guide:"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"    * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"wangtao0717":47}},{"path":"src/main/java/seedu/address/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.JsonResidenceTrackerStorage;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.ResidenceTrackerStorage;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":51,"author":{"gitId":"jaredtengsw"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ResidenceTracker ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        ResidenceTrackerStorage residenceTrackerStorage \u003d"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"            new JsonResidenceTrackerStorage(userPrefs.getResidenceTrackerFilePath());"},{"lineNumber":61,"author":{"gitId":"whatthelump"},"content":"        storage \u003d new StorageManager(residenceTrackerStorage, userPrefsStorage);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        initLogging(config);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"jaredtengsw"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s residence tracker and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"     * The data from the sample residence tracker will be used instead if {@code storage}\u0027s residence tracker is not"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"     * found, or an empty residence tracker will be used instead if errors occur when reading {@code storage}\u0027s"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"     * residence tracker."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":79,"author":{"gitId":"jaredtengsw"},"content":"        Optional\u003cReadOnlyResidenceTracker\u003e residenceTrackerOptional;"},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"        ReadOnlyResidenceTracker initialData;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"jaredtengsw"},"content":"            residenceTrackerOptional \u003d storage.readResidenceTracker();"},{"lineNumber":83,"author":{"gitId":"jaredtengsw"},"content":"            if (!residenceTrackerOptional.isPresent()) {"},{"lineNumber":84,"author":{"gitId":"jaredtengsw"},"content":"                logger.info(\"Data file not found. Will be starting with a sample ResidenceTracker\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"jaredtengsw"},"content":"            initialData \u003d residenceTrackerOptional.orElseGet(SampleDataUtil::getSampleResidenceTracker);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":88,"author":{"gitId":"jaredtengsw"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty ResidenceTracker\");"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"            initialData \u003d new ResidenceTracker();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":91,"author":{"gitId":"jaredtengsw"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty ResidenceTracker\");"},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":"            initialData \u003d new ResidenceTracker();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Config initializedConfig;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":125,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return initializedConfig;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * reading from the file."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":153,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":156,"author":{"gitId":"jaredtengsw"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty ResidenceTracker\");"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return initializedPrefs;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":172,"author":{"gitId":"jaredtengsw"},"content":"        logger.info(\"Starting ResidenceTracker \" + MainApp.VERSION);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void stop() {"},{"lineNumber":178,"author":{"gitId":"jaredtengsw"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping ResidenceTracker ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":13,"jaredtengsw":12,"-":160}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX \u003d \"The residence index provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_RESIDENCE_LISTED_OVERVIEW \u003d \"%1$d residences listed!\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":13,"VRSoorya":2}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"     * Returns the ResidenceTracker."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     * @see seedu.address.model.Model#getResidenceTracker()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    ReadOnlyResidenceTracker getResidenceTracker();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"     * Returns an unmodifiable view of the filtered list of persons"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"    ObservableList\u003cResidence\u003e getFilteredResidenceList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"     * Returns the user prefs\u0027 residence tracker file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":6,"awzhenyi":2,"wangtao0717":4,"-":41}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.logic.parser.ResidenceTrackerParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTrackerParser residenceTrackerParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        residenceTrackerParser \u003d new ResidenceTrackerParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"        Command command \u003d residenceTrackerParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"            storage.saveResidenceTracker(model.getResidenceTracker());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"    public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        return model.getResidenceTracker();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e getFilteredResidenceList() {"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":"        return model.getFilteredResidenceList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":"        return model.getResidenceTrackerFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"awzhenyi":3,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_DETAILS;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_ADDRESS;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":" * Adds a residence to the residence tracker."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a residence to the residence tracker. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"            + PREFIX_RESIDENCE_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"            + PREFIX_RESIDENCE_ADDRESS + \"ADDRESS \""},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"            + PREFIX_BOOKING_DETAILS + \"BOOKING DETAILS \""},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"            + \"[\" + PREFIX_CLEAN_STATUS_TAG + \"y or n]\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"            + PREFIX_RESIDENCE_NAME + \"Seaside Villa \""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"            + PREFIX_RESIDENCE_ADDRESS + \"311, Pasir Ris Ave 2, #02-25 \""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"            + PREFIX_BOOKING_DETAILS + \"Family of 3 \""},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"            + PREFIX_CLEAN_STATUS_TAG + \"y\""},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"            + PREFIX_TAG + \"friends \";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New residence added: %1$s\";"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENCE \u003d \"This residence already exists in the residence tracker\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"    private final Residence toAdd;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"     * Creates an AddCommand to add the specified {@code Residence}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"    public AddCommand(Residence residence) {"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(residence);"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"        toAdd \u003d residence;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"        if (model.hasResidence(toAdd)) {"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_RESIDENCE);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"        model.addResidence(toAdd);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":6,"awzhenyi":9,"wangtao0717":2,"-":40,"VRSoorya":9}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" * Clears the residence tracker."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Residence Tracker has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"        model.setResidenceTracker(new ResidenceTracker());"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":3,"-":19,"VRSoorya":1}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":" * Deletes a person identified using it\u0027s displayed index from the residence tracker."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"    public static final String MESSAGE_DELETE_RESIDENCE_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"        List\u003cResidence\u003e lastShownList \u003d model.getFilteredResidenceList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"        Residence personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"        model.deleteResidence(personToDelete);"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_RESIDENCE_SUCCESS, personToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"awzhenyi":4,"-":46,"VRSoorya":2}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENCES;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":" * Edits the details of an existing residence in the residence tracker."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the residence identified \""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"            + \"by the index number used in the displayed residence list. \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"            + \"[\" + PREFIX_CLEAN_STATUS_TAG + \" y/n] \""},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"            + \"Example: \" + COMMAND_WORD"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"            + PREFIX_CLEAN_STATUS_TAG + \" y 1 \";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":"    public static final String MESSAGE_EDIT_RESIDENCE_SUCCESS \u003d \"Edited Residence: %1$s\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENCE \u003d \"This residence already exists in the residence tracker.\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"    private final EditResidenceDescriptor editResidenceDescriptor;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"     * @param index of the residence in the filtered residence list to edit"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"     * @param editResidenceDescriptor details to edit the residence with"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    public EditCommand(Index index, EditResidenceDescriptor editResidenceDescriptor) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(editResidenceDescriptor);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"        this.editResidenceDescriptor \u003d new EditResidenceDescriptor(editResidenceDescriptor);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"        List\u003cResidence\u003e lastShownList \u003d model.getFilteredResidenceList();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":"        Residence residenceToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        Residence editedResidence \u003d createEditedResidence(residenceToEdit, editResidenceDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":"        model.setResidence(residenceToEdit, editedResidence);"},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":"        model.updateFilteredResidenceList(PREDICATE_SHOW_ALL_RESIDENCES);"},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_RESIDENCE_SUCCESS, editedResidence));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"     * Creates and returns a {@code Residence} with the details of {@code residenceToEdit}"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"     * edited with {@code editResidenceDescriptor}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"    private static Residence createEditedResidence(Residence residenceToEdit,"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"                                                   EditResidenceDescriptor editResidenceDescriptor) {"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":"        assert residenceToEdit !\u003d null;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"        ResidenceName updatedName \u003d editResidenceDescriptor.getResidenceName()"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"                .orElse(residenceToEdit.getResidenceName());"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"        ResidenceAddress updatedAddress \u003d editResidenceDescriptor.getResidenceAddress()"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"                .orElse(residenceToEdit.getResidenceAddress());"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"        Booking updatedBooking \u003d editResidenceDescriptor.getBookingDetails()"},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"                .orElse(residenceToEdit.getBookingDetails());"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"        CleanStatusTag updatedCleanStatus \u003d editResidenceDescriptor.getCleanStatusTag().orElse("},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"                residenceToEdit.getCleanStatusTag());"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"        Set\u003cTag\u003e updatedTags \u003d editResidenceDescriptor.getTags().orElse(residenceToEdit.getTags());"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"VRSoorya"},"content":"        return new Residence(updatedName, updatedAddress, updatedBooking, updatedCleanStatus, updatedTags);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":112,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 editResidenceDescriptor.equals(e.editResidenceDescriptor);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":"    public static class EditResidenceDescriptor {"},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"        private ResidenceName residenceName;"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"        private ResidenceAddress residenceAddress;"},{"lineNumber":122,"author":{"gitId":"VRSoorya"},"content":"        private Booking booking;"},{"lineNumber":123,"author":{"gitId":"VRSoorya"},"content":"        private CleanStatusTag cleanStatusTag;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"awzhenyi"},"content":"        public EditResidenceDescriptor() {"},{"lineNumber":127,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":131,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":133,"author":{"gitId":"awzhenyi"},"content":"        public EditResidenceDescriptor(EditResidenceDescriptor toCopy) {"},{"lineNumber":134,"author":{"gitId":"awzhenyi"},"content":"            setResidenceName(toCopy.residenceName);"},{"lineNumber":135,"author":{"gitId":"awzhenyi"},"content":"            setResidenceAddress(toCopy.residenceAddress);"},{"lineNumber":136,"author":{"gitId":"VRSoorya"},"content":"            setBookingDetails(toCopy.booking);"},{"lineNumber":137,"author":{"gitId":"wangtao0717"},"content":"            setCleanStatusTag(toCopy.cleanStatusTag);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":143,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":145,"author":{"gitId":"VRSoorya"},"content":"            return CollectionUtil.isAnyNonNull(residenceName, residenceAddress, booking, cleanStatusTag, tags);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"awzhenyi"},"content":"        public void setResidenceName(ResidenceName name) {"},{"lineNumber":149,"author":{"gitId":"awzhenyi"},"content":"            this.residenceName \u003d name;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"awzhenyi"},"content":"        public Optional\u003cResidenceName\u003e getResidenceName() {"},{"lineNumber":153,"author":{"gitId":"awzhenyi"},"content":"            return Optional.ofNullable(residenceName);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"awzhenyi"},"content":"        public void setResidenceAddress(ResidenceAddress address) {"},{"lineNumber":157,"author":{"gitId":"awzhenyi"},"content":"            this.residenceAddress \u003d address;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"awzhenyi"},"content":"        public Optional\u003cResidenceAddress\u003e getResidenceAddress() {"},{"lineNumber":161,"author":{"gitId":"awzhenyi"},"content":"            return Optional.ofNullable(residenceAddress);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"VRSoorya"},"content":"        public void setBookingDetails(Booking booking) {"},{"lineNumber":165,"author":{"gitId":"VRSoorya"},"content":"            this.booking \u003d booking;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"VRSoorya"},"content":"        public Optional\u003cBooking\u003e getBookingDetails() {"},{"lineNumber":169,"author":{"gitId":"VRSoorya"},"content":"            return Optional.ofNullable(booking);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"wangtao0717"},"content":"        /**"},{"lineNumber":173,"author":{"gitId":"wangtao0717"},"content":"         * Sets {@code cleanStatusTag} to this object\u0027s {@code cleanStatusTag}."},{"lineNumber":174,"author":{"gitId":"wangtao0717"},"content":"         * A defensive copy of {@code cleanStatusTag} is used internally."},{"lineNumber":175,"author":{"gitId":"wangtao0717"},"content":"         */"},{"lineNumber":176,"author":{"gitId":"VRSoorya"},"content":"        public void setCleanStatusTag(CleanStatusTag cleanStatusTag) {"},{"lineNumber":177,"author":{"gitId":"VRSoorya"},"content":"            this.cleanStatusTag \u003d cleanStatusTag;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":181,"author":{"gitId":"VRSoorya"},"content":"         * Returns an unmodifiable cleanStatusTag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":182,"author":{"gitId":"VRSoorya"},"content":"         * if modification is attempted."},{"lineNumber":183,"author":{"gitId":"VRSoorya"},"content":"         * Returns {@code Optional#empty()} if {@code cleanStatusTag} is null."},{"lineNumber":184,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":185,"author":{"gitId":"VRSoorya"},"content":"        public Optional\u003cCleanStatusTag\u003e getCleanStatusTag() {"},{"lineNumber":186,"author":{"gitId":"VRSoorya"},"content":"            return Optional.ofNullable(cleanStatusTag);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":191,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":192,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":198,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":214,"author":{"gitId":"awzhenyi"},"content":"            if (!(other instanceof EditResidenceDescriptor)) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":219,"author":{"gitId":"awzhenyi"},"content":"            EditResidenceDescriptor e \u003d (EditResidenceDescriptor) other;"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"awzhenyi"},"content":"            return getResidenceName().equals(e.getResidenceName())"},{"lineNumber":222,"author":{"gitId":"awzhenyi"},"content":"                    \u0026\u0026 getResidenceAddress().equals(e.getResidenceAddress())"},{"lineNumber":223,"author":{"gitId":"awzhenyi"},"content":"                    \u0026\u0026 getBookingDetails().equals(e.getBookingDetails())"},{"lineNumber":224,"author":{"gitId":"wangtao0717"},"content":"                    \u0026\u0026 getCleanStatusTag().equals(e.getCleanStatusTag())"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":57,"wangtao0717":10,"-":142,"VRSoorya":19}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Residence Tracker as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"jaredtengsw"},"content":" * Finds and lists all residences in residence tracker whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"jaredtengsw"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all residences whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"        model.updateFilteredResidenceList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"jaredtengsw"},"content":"                String.format(Messages.MESSAGE_RESIDENCE_LISTED_OVERVIEW, model.getFilteredResidenceList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":4,"awzhenyi":1,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENCES;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":" * Lists all residences in the residence tracker to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"jaredtengsw"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all residences\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"        model.updateFilteredResidenceList(PREDICATE_SHOW_ALL_RESIDENCES);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":2,"jaredtengsw":2,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_DETAILS;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_ADDRESS;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENCE_NAME, PREFIX_RESIDENCE_ADDRESS,"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"                        PREFIX_BOOKING_DETAILS, PREFIX_CLEAN_STATUS_TAG, PREFIX_TAG);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_RESIDENCE_NAME, PREFIX_RESIDENCE_ADDRESS)"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"        ResidenceName name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_RESIDENCE_NAME).get());"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"        ResidenceAddress address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_RESIDENCE_ADDRESS).get());"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        Booking booking;"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        if (argMultimap.getAllValues(PREFIX_BOOKING_DETAILS).size() \u003e 0) {"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"            booking \u003d ParserUtil.parseBooking("},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"                    argMultimap.getValue(PREFIX_BOOKING_DETAILS).get());"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"            booking \u003d new Booking();"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"        CleanStatusTag cleanStatusTag;"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        if (argMultimap.getAllValues(PREFIX_CLEAN_STATUS_TAG).size() \u003e 0) {"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"            cleanStatusTag \u003d ParserUtil.parseCleanStatusTag("},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"                    argMultimap.getValue(PREFIX_CLEAN_STATUS_TAG).get());"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"            cleanStatusTag \u003d new CleanStatusTag();"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        Residence residence \u003d new Residence(name, address, booking, cleanStatusTag, tagList);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"        return new AddCommand(residence);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":11,"wangtao0717":3,"-":43,"VRSoorya":19}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    public static final Prefix PREFIX_RESIDENCE_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"    public static final Prefix PREFIX_BOOKING_DETAILS \u003d new Prefix(\"b/\");"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":"    public static final Prefix PREFIX_RESIDENCE_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"    public static final Prefix PREFIX_CLEAN_STATUS_TAG \u003d new Prefix(\"clean/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":5,"wangtao0717":1,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_DETAILS;"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_ADDRESS;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_RESIDENCE_NAME, PREFIX_RESIDENCE_ADDRESS,"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"                        PREFIX_BOOKING_DETAILS, PREFIX_CLEAN_STATUS_TAG, PREFIX_TAG);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor editResidenceDescriptor \u003d new EditResidenceDescriptor();"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"        if (argMultimap.getValue(PREFIX_RESIDENCE_NAME).isPresent()) {"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"            editResidenceDescriptor.setResidenceName("},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"                    ParserUtil.parseName(argMultimap.getValue(PREFIX_RESIDENCE_NAME).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"        if (argMultimap.getValue(PREFIX_RESIDENCE_ADDRESS).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"            editResidenceDescriptor.setResidenceAddress("},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"                    ParserUtil.parseAddress(argMultimap.getValue(PREFIX_RESIDENCE_ADDRESS).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"        if (argMultimap.getValue(PREFIX_BOOKING_DETAILS).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"            editResidenceDescriptor.setBookingDetails("},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"                    ParserUtil.parseBooking(argMultimap.getValue(PREFIX_BOOKING_DETAILS).get()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"        if (argMultimap.getValue(PREFIX_CLEAN_STATUS_TAG).isPresent()) {"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"            editResidenceDescriptor.setCleanStatusTag("},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"                    ParserUtil.parseCleanStatusTag(argMultimap.getValue(PREFIX_CLEAN_STATUS_TAG).get()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editResidenceDescriptor::setTags);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        if (!editResidenceDescriptor.isAnyFieldEdited()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"        return new EditCommand(index, editResidenceDescriptor);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":16,"wangtao0717":7,"-":65,"VRSoorya":3}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it."},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":16}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"    public static ResidenceName parseName(String name) throws ParseException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"        if (!ResidenceName.isValidResidenceName(trimmedName)) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"        return new ResidenceName(trimmedName);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"    public static ResidenceAddress parseAddress(String address) throws ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":"        if (!ResidenceAddress.isValidResidenceAddress(trimmedAddress)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        return new ResidenceAddress(trimmedAddress);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"VRSoorya"},"content":"     * Parses a {@code String bookingDetails} into an {@code Booking}."},{"lineNumber":105,"author":{"gitId":"VRSoorya"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":106,"author":{"gitId":"VRSoorya"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"VRSoorya"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":108,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"VRSoorya"},"content":"    public static Booking parseBooking(String bookingDetails) throws ParseException {"},{"lineNumber":110,"author":{"gitId":"VRSoorya"},"content":"        requireNonNull(bookingDetails);"},{"lineNumber":111,"author":{"gitId":"VRSoorya"},"content":"        String trimmedBooking \u003d bookingDetails.trim();"},{"lineNumber":112,"author":{"gitId":"VRSoorya"},"content":"        if (!seedu.address.model.residence.Booking.isValidBooking(trimmedBooking)) {"},{"lineNumber":113,"author":{"gitId":"VRSoorya"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"VRSoorya"},"content":"        return new Booking(trimmedBooking);"},{"lineNumber":116,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":118,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"wangtao0717"},"content":"     * Parses a {@code String clean status(y or n)} into a {@code CleanStatusTag}."},{"lineNumber":120,"author":{"gitId":"wangtao0717"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":121,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"wangtao0717"},"content":"     * @throws ParseException if the given {@code cleanstatus} is invalid."},{"lineNumber":123,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"wangtao0717"},"content":"    public static CleanStatusTag parseCleanStatusTag(String cleanStatus) throws ParseException {"},{"lineNumber":125,"author":{"gitId":"wangtao0717"},"content":"        requireNonNull(cleanStatus);"},{"lineNumber":126,"author":{"gitId":"wangtao0717"},"content":"        String trimmedTag \u003d cleanStatus.trim();"},{"lineNumber":127,"author":{"gitId":"wangtao0717"},"content":"        if (!CleanStatusTag.isValidCleanStatusTag(trimmedTag)) {"},{"lineNumber":128,"author":{"gitId":"wangtao0717"},"content":"            throw new ParseException(CleanStatusTag.getMessageConstraints());"},{"lineNumber":129,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"wangtao0717"},"content":"        return new CleanStatusTag(trimmedTag);"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":8,"wangtao0717":17,"-":118,"VRSoorya":16}},{"path":"src/main/java/seedu/address/logic/parser/ResidenceTrackerParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTrackerParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":75}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"    Predicate\u003cResidence\u003e PREDICATE_SHOW_ALL_RESIDENCES \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"     * Returns the user prefs\u0027 residence tracker file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"     * Sets the user prefs\u0027 residence tracker file path."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    void setResidenceTrackerFilePath(Path residenceTrackerFilePath);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"     * Replaces address book data with the data in {@code residenceTracker}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    void setResidenceTracker(ReadOnlyResidenceTracker residenceTracker);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"    /** Returns the ResidenceTracker */"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    ReadOnlyResidenceTracker getResidenceTracker();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jaredtengsw"},"content":"     * Returns true if a residence with the same identity as {@code residence} exists in the address book."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"    boolean hasResidence(Residence residence);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"jaredtengsw"},"content":"     * Deletes the given residence."},{"lineNumber":64,"author":{"gitId":"jaredtengsw"},"content":"     * The residence must exist in the residence tracker."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"    void deleteResidence(Residence target);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"     * Adds the given residence."},{"lineNumber":70,"author":{"gitId":"jaredtengsw"},"content":"     * {@code residence} must not already exist in the residence tracker."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":"    void addResidence(Residence residence);"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the given residence {@code target} with {@code editedResidence}."},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"     * {@code target} must exist in the residence tracker."},{"lineNumber":77,"author":{"gitId":"jaredtengsw"},"content":"     * The residence identity of {@code editedResidence} must not be the same as another existing residence in the"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"     * residence tracker."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"    void setResidence(Residence target, Residence editedResidence);"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"    /** Returns an unmodifiable view of the filtered residence list */"},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"    ObservableList\u003cResidence\u003e getFilteredResidenceList();"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"     * Updates the filter of the filtered residence list to filter by the given {@code predicate}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"awzhenyi"},"content":"    void updateFilteredResidenceList(Predicate\u003cResidence\u003e predicate);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":8,"awzhenyi":14,"jaredtengsw":6,"-":63}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":" * Represents the in-memory model of the residence tracker data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTracker residenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"    private final FilteredList\u003cResidence\u003e filteredResidences;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     * Initializes a ModelManager with the given residenceTracker and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    public ModelManager(ReadOnlyResidenceTracker residenceTracker, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"        requireAllNonNull(residenceTracker, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"        logger.fine(\"Initializing with residence tracker: \" + residenceTracker + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"        this.residenceTracker \u003d new ResidenceTracker(residenceTracker);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        filteredResidences \u003d new FilteredList\u003c\u003e(this.residenceTracker.getResidenceList());"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"        this(new ResidenceTracker(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        return userPrefs.getResidenceTrackerFilePath();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"    public void setResidenceTrackerFilePath(Path residenceTrackerFilePath) {"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(residenceTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        userPrefs.setResidenceTrackerFilePath(residenceTrackerFilePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ResidenceTracker \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":"    public void setResidenceTracker(ReadOnlyResidenceTracker residenceTracker) {"},{"lineNumber":84,"author":{"gitId":"whatthelump"},"content":"        this.residenceTracker.resetData(residenceTracker);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"    public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"    public boolean hasResidence(Residence residence) {"},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(residence);"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"        return residenceTracker.hasResidence(residence);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"    public void deleteResidence(Residence target) {"},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":"        residenceTracker.removeResidence(target);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    public void addResidence(Residence residence) {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        residenceTracker.addResidence(residence);"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"        updateFilteredResidenceList(PREDICATE_SHOW_ALL_RESIDENCES);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"awzhenyi"},"content":"    public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":111,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(target, editedResidence);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"        residenceTracker.setResidence(target, editedResidence);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"whatthelump"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Residence and Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":"     * Returns an unmodifiable view of the list of {@code Residence} backed by the internal list of"},{"lineNumber":120,"author":{"gitId":"whatthelump"},"content":"     * {@code versionedResidenceTracker}"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e getFilteredResidenceList() {"},{"lineNumber":124,"author":{"gitId":"awzhenyi"},"content":"        return filteredResidences;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"awzhenyi"},"content":"    public void updateFilteredResidenceList(Predicate\u003cResidence\u003e predicate) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":131,"author":{"gitId":"awzhenyi"},"content":"        filteredResidences.setPredicate(predicate);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":148,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker.equals(other.residenceTracker)"},{"lineNumber":149,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":150,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 filteredResidences.equals(other.filteredResidences);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":20,"awzhenyi":23,"-":110}},{"path":"src/main/java/seedu/address/model/ReadOnlyResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":" * Unmodifiable view of a residence tracker."},{"lineNumber":8,"author":{"gitId":"-"},"content":" */"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":"public interface ReadOnlyResidenceTracker {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":13,"author":{"gitId":"jaredtengsw"},"content":"     * This list will not contain any duplicate residences."},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"     * @return"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"    ObservableList\u003cResidence\u003e getResidenceList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"awzhenyi":3,"jaredtengsw":1,"-":12}},{"path":"src/main/java/seedu/address/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":15}},{"path":"src/main/java/seedu/address/model/ResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.UniqueResidenceList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":" * Wraps all data at the residence-tracker level"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTracker implements ReadOnlyResidenceTracker {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"    private final UniqueResidenceList residences;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"        residences \u003d new UniqueResidenceList();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker() {}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"     * Creates a ResidenceTracker using the Residences in the {@code toBeCopied}"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker(ReadOnlyResidenceTracker toBeCopied) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the contents of the residence list with {@code residences}."},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"     * {@code residences} must not contain duplicate residences."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(List\u003cResidence\u003e residences) {"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"        this.residences.setResidences(residences);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"     * Resets the existing data of this {@code ResidenceTracker} with {@code newData}."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    public void resetData(ReadOnlyResidenceTracker newData) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"        setResidences(newData.getResidenceList());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"jaredtengsw"},"content":"    //// residence-level operations"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"jaredtengsw"},"content":"     * Returns true if a residence with the same identity as {@code residence} exists in the residence tracker."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"    public boolean hasResidence(Residence residence) {"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(residence);"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"        return residences.contains(residence);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"jaredtengsw"},"content":"     * Adds a residence to the residence tracker."},{"lineNumber":72,"author":{"gitId":"jaredtengsw"},"content":"     * The residence must not already exist in the residence tracker."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"    public void addResidence(Residence r) {"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"        residences.add(r);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"jaredtengsw"},"content":"     * Replaces the given residence {@code target} in the list with {@code editedResidence}."},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"     * {@code target} must exist in the residence tracker."},{"lineNumber":81,"author":{"gitId":"jaredtengsw"},"content":"     * The residence identity of {@code editedResidence} must not be the same as another existing residence"},{"lineNumber":82,"author":{"gitId":"jaredtengsw"},"content":"     * in the residence tracker."},{"lineNumber":83,"author":{"gitId":"jaredtengsw"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"    public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(editedResidence);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"        residences.setResidence(target, editedResidence);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":"     * Removes {@code key} from this {@code ResidenceTracker}."},{"lineNumber":93,"author":{"gitId":"whatthelump"},"content":"     * {@code key} must exist in the residence tracker."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"    public void removeResidence(Residence key) {"},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"        residences.remove(key);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"        return residences.asUnmodifiableObservableList().size() + \" residences\";"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e getResidenceList() {"},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"        return residences.asUnmodifiableObservableList();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof ResidenceTracker // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 residences.equals(((ResidenceTracker) other).residences));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"        return residences.hashCode();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"awzhenyi":26,"jaredtengsw":8,"-":79}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"    private Path residenceTrackerFilePath \u003d Paths.get(\"data\" , \"residencetracker.json\");"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        setResidenceTrackerFilePath(newUserPrefs.getResidenceTrackerFilePath());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"        return residenceTrackerFilePath;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    public void setResidenceTrackerFilePath(Path residenceTrackerFilePath) {"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(residenceTrackerFilePath);"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":"        this.residenceTrackerFilePath \u003d residenceTrackerFilePath;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 residenceTrackerFilePath.equals(o.residenceTrackerFilePath);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"        return Objects.hash(guiSettings, residenceTrackerFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);"},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":"        sb.append(\"\\nLocal data file location : \" + residenceTrackerFilePath);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"-":77}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"    private final Set\u003cCleanStatusTag\u003e cleanStatusTag \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"                  Set\u003cCleanStatusTag\u003e cleanStatusTag, Set\u003cTag\u003e tags) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"        this.cleanStatusTag.addAll(cleanStatusTag);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"     * Returns an immutable clean status tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":"     * if modification is attempted."},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":"    public Set\u003cCleanStatusTag\u003e getCleanStatusTags() {"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"        return Collections.unmodifiableSet(cleanStatusTag);"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 otherPerson.getCleanStatusTags().equals(getCleanStatusTags())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":"        return Objects.hash(name, phone, email, address, cleanStatusTag, tags);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"wangtao0717"},"content":"        Set\u003cCleanStatusTag\u003e cleanStatusTags \u003d getCleanStatusTags();"},{"lineNumber":129,"author":{"gitId":"wangtao0717"},"content":"        if (!cleanStatusTags.isEmpty()) {"},{"lineNumber":130,"author":{"gitId":"wangtao0717"},"content":"            builder.append(\"; CleanStatus: \");"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"            cleanStatusTags.forEach(builder::append);"},{"lineNumber":132,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":21,"-":121}},{"path":"src/main/java/seedu/address/model/residence/Booking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"public class Booking {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Booking details can take any values, and it should not be blank\";"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"    private String booking;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a {@code Booking}."},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"     * @param bookingDetails define the booking time."},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    public Booking(String bookingDetails) {"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"        this.booking \u003d bookingDetails;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a default {@code Booking} with no booking."},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"    public Booking() {"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"        this.booking \u003d \"No Booking\";"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a {@code Booking}."},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    public static boolean isValidBooking(String trimmedBooking) {"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"        return true;"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"     * Returns value of this {@code Booking}."},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"    public String getValue() {"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        return booking;"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"        return booking;"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"awzhenyi":6,"wangtao0717":4,"VRSoorya":30}},{"path":"src/main/java/seedu/address/model/residence/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":" * Tests that a {@code Residence}\u0027s {@code ResidenceName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cResidence\u003e {"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"    public boolean test(Residence residence) {"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"jaredtengsw"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(residence.getResidenceName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":27,"jaredtengsw":2,"awzhenyi":2}},{"path":"src/main/java/seedu/address/model/residence/Residence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jaredtengsw"},"content":" * Represents a Residence in ResidenceTracker."},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"public class Residence {"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    // Identity fields"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":"    private final ResidenceName residenceName;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    // Data fields"},{"lineNumber":23,"author":{"gitId":"jaredtengsw"},"content":"    private final ResidenceAddress residenceAddress;"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    private final Booking booking;"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    private CleanStatusTag cleanStatusTag;"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    public Residence(ResidenceName residenceName, ResidenceAddress residenceAddress, Booking booking,"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"                     CleanStatusTag cleanStatusTag, Set\u003cTag\u003e tags) {"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        this.booking \u003d booking;"},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"        requireAllNonNull(residenceName, residenceAddress, cleanStatusTag, tags);"},{"lineNumber":35,"author":{"gitId":"jaredtengsw"},"content":"        this.residenceName \u003d residenceName;"},{"lineNumber":36,"author":{"gitId":"jaredtengsw"},"content":"        this.residenceAddress \u003d residenceAddress;"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        this.cleanStatusTag \u003d cleanStatusTag;"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        this.tags.addAll(tags);"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"jaredtengsw"},"content":"    public ResidenceName getResidenceName() {"},{"lineNumber":42,"author":{"gitId":"jaredtengsw"},"content":"        return residenceName;"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":45,"author":{"gitId":"jaredtengsw"},"content":"    public ResidenceAddress getResidenceAddress() {"},{"lineNumber":46,"author":{"gitId":"jaredtengsw"},"content":"        return residenceAddress;"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"    public Booking getBookingDetails() {"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"        return booking;"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"     * Returns an immutable clean status tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":"     * if modification is attempted."},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"     * @return"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"    public CleanStatusTag getCleanStatusTag() {"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"        return cleanStatusTag;"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"     * if modification is attempted."},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"whatthelump"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"jaredtengsw"},"content":"     * Returns true if both residences have the same residenceName."},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"     * This defines a weaker notion of equality between two residences."},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"    public boolean isSameResidence(Residence otherResidence) {"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"        if (otherResidence \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        return otherResidence !\u003d null"},{"lineNumber":81,"author":{"gitId":"jaredtengsw"},"content":"                \u0026\u0026 otherResidence.getResidenceName().equals(getResidenceName());"},{"lineNumber":82,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":84,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if both residence have the same identity and data fields."},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"     * This defines a stronger notion of equality between two residence."},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":90,"author":{"gitId":"whatthelump"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        if (!(other instanceof Residence)) {"},{"lineNumber":95,"author":{"gitId":"whatthelump"},"content":"            return false;"},{"lineNumber":96,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        Residence otherResidence \u003d (Residence) other;"},{"lineNumber":99,"author":{"gitId":"jaredtengsw"},"content":"        return otherResidence.getResidenceName().equals(getResidenceName())"},{"lineNumber":100,"author":{"gitId":"jaredtengsw"},"content":"                \u0026\u0026 otherResidence.getResidenceAddress().equals(getResidenceAddress())"},{"lineNumber":101,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getBookingDetails().equals(getBookingDetails())"},{"lineNumber":102,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 otherResidence.getCleanStatusTag().equals(getCleanStatusTag())"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getTags().equals(getTags());"},{"lineNumber":104,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":109,"author":{"gitId":"VRSoorya"},"content":"        return Objects.hash(residenceName, residenceAddress, booking, cleanStatusTag, tags);"},{"lineNumber":110,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":112,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":114,"author":{"gitId":"whatthelump"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":115,"author":{"gitId":"jaredtengsw"},"content":"        builder.append(getResidenceName())"},{"lineNumber":116,"author":{"gitId":"jaredtengsw"},"content":"                .append(\"; Residence Address: \")"},{"lineNumber":117,"author":{"gitId":"jaredtengsw"},"content":"                .append(getResidenceAddress())"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"                .append(\"; Booking Details: \")"},{"lineNumber":119,"author":{"gitId":"VRSoorya"},"content":"                .append(getBookingDetails())"},{"lineNumber":120,"author":{"gitId":"VRSoorya"},"content":"                .append(\"; Clean Status: \")"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"                .append(getCleanStatusTag());"},{"lineNumber":122,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":123,"author":{"gitId":"whatthelump"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":124,"author":{"gitId":"whatthelump"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":125,"author":{"gitId":"whatthelump"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":126,"author":{"gitId":"whatthelump"},"content":"            tags.forEach(builder::append);"},{"lineNumber":127,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"whatthelump"},"content":"        return builder.toString();"},{"lineNumber":129,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":131,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":75,"jaredtengsw":17,"awzhenyi":11,"wangtao0717":10,"VRSoorya":18}},{"path":"src/main/java/seedu/address/model/residence/ResidenceAddress.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":" * Represents a Residence\u0027s address in ResidenceTracker."},{"lineNumber":8,"author":{"gitId":"jaredtengsw"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidResidenceAddress(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jaredtengsw"},"content":"public class ResidenceAddress {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"jaredtengsw"},"content":"     * The first character of the Residence\u0027s address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"jaredtengsw"},"content":"     * Constructs an {@code ResidenceAddress}."},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"    public ResidenceAddress(String address) {"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"jaredtengsw"},"content":"        checkArgument(isValidResidenceAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if a given string is a valid address."},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jaredtengsw"},"content":"    public static boolean isValidResidenceAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"     * Returns value of this {@code ResidenceAddress}."},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"    public String getValue() {"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        return value;"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"        return value;"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"jaredtengsw"},"content":"                || (other instanceof ResidenceAddress // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"jaredtengsw"},"content":"                \u0026\u0026 value.equals(((ResidenceAddress) other).value)); // state check"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"whatthelump"},"content":"        return value.hashCode();"},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":46,"jaredtengsw":10,"VRSoorya":8}},{"path":"src/main/java/seedu/address/model/residence/ResidenceName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":" * Represents a Residence\u0027s name in the ResidenceTracker."},{"lineNumber":8,"author":{"gitId":"jaredtengsw"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidResidenceName(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jaredtengsw"},"content":"public class ResidenceName {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"jaredtengsw"},"content":"     * The first character of the Residence\u0027s name must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jaredtengsw"},"content":"     * Constructs a {@code ResidenceName}."},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"jaredtengsw"},"content":"    public ResidenceName(String name) {"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"        checkArgument(isValidResidenceName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"    public static boolean isValidResidenceName(String test) {"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"     * Returns value of this {@code ResidenceName}."},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"    public String getValue() {"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"        return fullName;"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"        return fullName;"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitId":"jaredtengsw"},"content":"                || (other instanceof ResidenceName // instanceof handles nulls"},{"lineNumber":57,"author":{"gitId":"jaredtengsw"},"content":"                \u0026\u0026 fullName.equals(((ResidenceName) other).fullName)); // state check"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"        return fullName.hashCode();"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":49,"jaredtengsw":10,"VRSoorya":6}},{"path":"src/main/java/seedu/address/model/residence/ResidenceNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":" * Tests that a {@code ResidenceName} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"public class ResidenceNameContainsKeywordsPredicate implements Predicate\u003cResidence\u003e {"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"    public boolean test(Residence residence) {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(residence.getResidenceName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"                || (other instanceof ResidenceNameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"                \u0026\u0026 keywords.equals(((ResidenceNameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":31}},{"path":"src/main/java/seedu/address/model/residence/UniqueResidenceList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.DuplicateResidenceException;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.ResidenceNotFoundException;"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":" * A list of residences that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":" * A residence is considered unique by comparing using {@code Residence#isSameResidence(Residence)}."},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":" * As such, adding and updating of residences uses Residence#isSameResidence(Residence) for equality"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":" * so as to ensure that the residence being added or updated is unique in terms of identity in the UniqueResidenceList."},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":" * However, the removal of a Residence uses Residence#equals(Object) so as to ensure that the Residence"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":" * with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":" * @see Residence#isSameResidence(Residence)"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"public class UniqueResidenceList implements Iterable\u003cResidence\u003e {"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if the list contains an equivalent residence as the given argument."},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    public boolean contains(Residence toCheck) {"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResidence);"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"     * Adds a Residence to the list."},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"     * The residence must not already exist in the list."},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"    public void add(Residence toAdd) {"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the residence {@code target} in the list with {@code editedResidence}."},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"     * The residence identity of {@code editedResidence} must not be the same as another existing residence in the list."},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"    public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":58,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(target, editedResidence);"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"        if (!target.isSameResidence(editedResidence) \u0026\u0026 contains(editedResidence)) {"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        internalList.set(index, editedResidence);"},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"     * Removes the equivalent residence from the list."},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"     * The residence must exist in the list."},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"    public void remove(Residence toRemove) {"},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(UniqueResidenceList replacement) {"},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the contents of this list with {@code residences}."},{"lineNumber":90,"author":{"gitId":"awzhenyi"},"content":"     * {@code residences} must not contain duplicate residences."},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(List\u003cResidence\u003e residences) {"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(residences);"},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        if (!residencesAreUnique(residences)) {"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(residences);"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":101,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"    public Iterator\u003cResidence\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"awzhenyi"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"awzhenyi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"awzhenyi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"awzhenyi"},"content":"                || (other instanceof UniqueResidenceList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 internalList.equals(((UniqueResidenceList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"awzhenyi"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":125,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if {@code residences} contains only unique residences."},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"awzhenyi"},"content":"    private boolean residencesAreUnique(List\u003cResidence\u003e residences) {"},{"lineNumber":129,"author":{"gitId":"awzhenyi"},"content":"        for (int i \u003d 0; i \u003c residences.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"awzhenyi"},"content":"            for (int j \u003d i + 1; j \u003c residences.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"awzhenyi"},"content":"                if (residences.get(i).isSameResidence(residences.get(j))) {"},{"lineNumber":132,"author":{"gitId":"awzhenyi"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"awzhenyi"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"awzhenyi"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"awzhenyi"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":139,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":140,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":141,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":142,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":141,"VRSoorya":1}},{"path":"src/main/java/seedu/address/model/residence/exceptions/DuplicateResidenceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":" * Signals that the operation will result in duplicate Residences (Residences are considered duplicates"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":" * if they have the same identity)."},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"public class DuplicateResidenceException extends RuntimeException {"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    public DuplicateResidenceException() {"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"        super(\"Operation would result in duplicate residences\");"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":12}},{"path":"src/main/java/seedu/address/model/residence/exceptions/ResidenceNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"public class ResidenceNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":5}},{"path":"src/main/java/seedu/address/model/tag/CleanStatusTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"public class CleanStatusTag {"},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"    public static final String CLEAN \u003d \"Clean\";"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"    public static final String UNCLEAN \u003d \"Unclean\";"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"    private static String MESSAGE_CONSTRAINTS \u003d \"should use y or n to show clean status\";"},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    private String cleanStatus;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a default {@code CleanStatusTag} with status value \"Clean\"."},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"    public CleanStatusTag() {"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"        this.cleanStatus \u003d CLEAN;"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a {@code CleanStatusTag}."},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"     * @param cleanStatus define the clean status by y or n."},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    public CleanStatusTag(String cleanStatus) {"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"        requireNonNull(cleanStatus);"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"        System.out.println(\"TESTING FOR CLEAN STATUS: \" + cleanStatus);"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"        checkArgument(isValidCleanStatusTag(cleanStatus), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        if (cleanStatus.equalsIgnoreCase(\"y\")) {"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"            this.cleanStatus \u003d CLEAN;"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        } else if (cleanStatus.equalsIgnoreCase(\"n\")) {"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"            this.cleanStatus \u003d UNCLEAN;"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"    public static boolean isValidCleanStatusTag(String test) {"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        return test.equalsIgnoreCase(\"y\") || test.equalsIgnoreCase(\"n\");"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"     * Returns value of this {@code CleanStatusTag}."},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"    public String getValue() {"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"        return cleanStatus;"},{"lineNumber":50,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"    public boolean equals(Object other) {"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"                \u0026\u0026 cleanStatus.equals(((Tag) other).tagName)); // state check"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"    public int hashCode() {"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":"        return cleanStatus.hashCode();"},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"     * Format state as text for viewing."},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"wangtao0717"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"wangtao0717"},"content":"        return \u0027[\u0027 + cleanStatus + \u0027]\u0027;"},{"lineNumber":69,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":71,"author":{"gitId":"wangtao0717"},"content":"    public static String getMessageConstraints() {"},{"lineNumber":72,"author":{"gitId":"wangtao0717"},"content":"        return MESSAGE_CONSTRAINTS;"},{"lineNumber":73,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"wangtao0717"},"content":"}"}],"authorContributionMap":{"wangtao0717":49,"VRSoorya":25}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":" * Contains utility methods for populating {@code ResidenceTracker} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"    public static Residence[] getSampleResidence() {"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"        return new Residence[]{"},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"            new Residence(new ResidenceName(\"HDB\"), new ResidenceAddress(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"                    new Booking(\"someone is coming\"), getCleanStatusTag(\"y\"), getTagSet(\"Booked\")),"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"            new Residence(new ResidenceName(\"Condo\"), new ResidenceAddress(\"Blk 45 Tampines Street 29, #08-01\"),"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"                    new Booking(\"4 adults\"), getCleanStatusTag(\"n\"), getTagSet(\"Reserved\")),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    public static ReadOnlyResidenceTracker getSampleResidenceTracker() {"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTracker sampleRt \u003d new ResidenceTracker();"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"        for (Residence sampleResidence : getSampleResidence()) {"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"            sampleRt.addResidence(sampleResidence);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        return sampleRt;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"     * Returns a CleanStatusTag containing the list of strings given."},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"    public static CleanStatusTag getCleanStatusTag(String status) {"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"        return new CleanStatusTag(status);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":4,"awzhenyi":8,"wangtao0717":3,"-":29,"VRSoorya":9}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCleanStatusTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"//package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"//import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"//import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"///**"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"// * Jackson-friendly version of {@link CleanStatusTag}."},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"// */"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"//class JsonAdaptedCleanStatusTag {"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"//    private final String cleanStatus;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"//     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"//    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"//    public JsonAdaptedCleanStatusTag(String cleanStatus) {"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"//        this.cleanStatus \u003d cleanStatus;"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"//     * Converts a given {@code CleanStatusTag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"//    public JsonAdaptedCleanStatusTag(CleanStatusTag source) {"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"//        cleanStatus \u003d source.getValue();"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"//    @JsonValue"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"//    public String getCleanStatus() {"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"//        return cleanStatus;"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"//     * Converts this Jackson-friendly adapted cleanStatusTag object into the model\u0027s {@code CleanStatusTag} object."},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"//     *"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"//     * @throws IllegalValueException if there were any data constraints violated in the adapted CleanStatusTag."},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"//    public CleanStatusTag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"//        if (!CleanStatusTag.isValidCleanStatusTag(cleanStatus)) {"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"//            throw new IllegalValueException(CleanStatusTag.getMessageConstraints());"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"//        }"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"//        return new CleanStatusTag(cleanStatus);"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"//}"}],"authorContributionMap":{"VRSoorya":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    //    private final List\u003cJsonAdaptedCleanStatusTag\u003e cleanStatusTagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        //        if (cleanStatusTagged !\u003d null) {"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        //            this.cleanStatusTagged.addAll(cleanStatusTagged);"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        //        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"     * Converts a given {@code Person} into this class for Json use."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"        //        cleanStatusTagged.addAll(source.getCleanStatusTags().stream()"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        //                .map(JsonAdaptedCleanStatusTag::new)"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"        //                .collect(Collectors.toList()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"     * Converts this Json-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":76,"author":{"gitId":"wangtao0717"},"content":"        final List\u003cCleanStatusTag\u003e personCleanStatusTag \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"        //        for (JsonAdaptedCleanStatusTag cleanStatusTag : cleanStatusTagged) {"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"        //            personCleanStatusTag.add(cleanStatusTag.toModelType());"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"        //        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":116,"author":{"gitId":"wangtao0717"},"content":"        final Set\u003cCleanStatusTag\u003e modelCleanStatusTag \u003d new HashSet\u003c\u003e(personCleanStatusTag);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":118,"author":{"gitId":"wangtao0717"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelCleanStatusTag, modelTags);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"wangtao0717":4,"-":105,"VRSoorya":10}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedResidence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"public class JsonAdaptedResidence {"},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Residence\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"    private final String residenceName;"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":"    private final String residenceAddress;"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    private final String booking;"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"    private final String cleanStatusTagged;"},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":"     * Constructs a {@code JsonAdaptedResidence} with the given person details."},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"    @JsonCreator"},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"    public JsonAdaptedResidence(@JsonProperty(\"name\") String residenceName,"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"                                @JsonProperty(\"address\") String residenceAddress,"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"                                @JsonProperty(\"bookingDetails\") String booking,"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"                                @JsonProperty(\"cleanStatusTagged\") String cleanStatusTagged,"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"                                @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":"        this.residenceName \u003d residenceName;"},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"        this.residenceAddress \u003d residenceAddress;"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        this.booking \u003d booking;"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        this.cleanStatusTagged \u003d cleanStatusTagged;"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"     * Converts a given {@code Residence} into this class for Json use."},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"    public JsonAdaptedResidence(Residence source) {"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        residenceName \u003d source.getResidenceName().getValue();"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"        residenceAddress \u003d source.getResidenceAddress().getValue();"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        booking \u003d source.getBookingDetails().getValue();"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"        cleanStatusTagged \u003d source.getCleanStatusTag().getValue();"},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":58,"author":{"gitId":"awzhenyi"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"     * Converts this Json-friendly adapted person object into the model\u0027s {@code Residence} object."},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"    public Residence toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":"        final List\u003cTag\u003e residenceTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"            residenceTags.add(tag.toModelType());"},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"        if (residenceName \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"                    ResidenceName.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"        if (!ResidenceName.isValidResidenceName(residenceName)) {"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"            throw new IllegalValueException(ResidenceName.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        final ResidenceName modelName \u003d new ResidenceName(residenceName);"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":"        if (residenceAddress \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"                    ResidenceAddress.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"        if (!ResidenceAddress.isValidResidenceAddress(residenceAddress)) {"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"            throw new IllegalValueException(ResidenceAddress.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"        final ResidenceAddress modelAddress \u003d new ResidenceAddress(residenceAddress);"},{"lineNumber":90,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"        //might need to do valid and null check for booking details but skip first"},{"lineNumber":92,"author":{"gitId":"VRSoorya"},"content":"        final Booking modelBooking \u003d new Booking(booking);"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":94,"author":{"gitId":"VRSoorya"},"content":"        String cleanStatusTag;"},{"lineNumber":95,"author":{"gitId":"VRSoorya"},"content":"        if (cleanStatusTagged.equals(new CleanStatusTag().CLEAN)) {"},{"lineNumber":96,"author":{"gitId":"VRSoorya"},"content":"            cleanStatusTag \u003d \"y\";"},{"lineNumber":97,"author":{"gitId":"VRSoorya"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"VRSoorya"},"content":"            cleanStatusTag \u003d \"n\";"},{"lineNumber":99,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"VRSoorya"},"content":"        final CleanStatusTag modelCleanStatusTag \u003d new CleanStatusTag(cleanStatusTag);"},{"lineNumber":101,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(residenceTags);"},{"lineNumber":103,"author":{"gitId":"VRSoorya"},"content":"        return new Residence(modelName, modelAddress, modelBooking, modelCleanStatusTag, modelTags);"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":107,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":110,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":88,"VRSoorya":22}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" * Json-friendly version of {@link Tag}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":47}},{"path":"src/main/java/seedu/address/storage/JsonResidenceTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":" * A class to access ResidenceTracker data stored as a json file on the hard disk."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"public class JsonResidenceTrackerStorage implements ResidenceTrackerStorage {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonResidenceTrackerStorage.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    public JsonResidenceTrackerStorage(Path filePath) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException {"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"        return readResidenceTracker(filePath);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"     * Similar to {@link #readResidenceTracker()}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath) throws DataConversionException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        Optional\u003cJsonSerializableResidenceTracker\u003e jsonResidenceTracker \u003d JsonUtil.readJsonFile("},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"                filePath, JsonSerializableResidenceTracker.class);"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"        if (!jsonResidenceTracker.isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"            return Optional.of(jsonResidenceTracker.get().toModelType());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException {"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        saveResidenceTracker(residenceTracker, filePath);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"     * Similar to {@link #saveResidenceTracker(ReadOnlyResidenceTracker)}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(residenceTracker);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableResidenceTracker(residenceTracker), filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":17,"-":60,"VRSoorya":3}},{"path":"src/main/java/seedu/address/storage/JsonSerializableResidenceTracker.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":" * An Immutable ResidenceTracker that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"@JsonRootName(value \u003d \"residencetracker\")"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"class JsonSerializableResidenceTracker {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"    public static final String MESSAGE_DUPLICATE_RESIDENCE \u003d \"Residences list contains duplicate residences(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"    private final List\u003cJsonAdaptedResidence\u003e residences \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"     * Constructs a {@code JsonSerializableResidenceTracker} with the given residences."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    public JsonSerializableResidenceTracker(@JsonProperty(\"residences\") List\u003cJsonAdaptedResidence\u003e residences) {"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"        this.residences.addAll(residences);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Converts a given {@code ReadOnlyResidenceTracker} into this class for Json use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableResidenceTracker}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    public JsonSerializableResidenceTracker(ReadOnlyResidenceTracker source) {"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":"        residences.addAll(source.getResidenceList()"},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"                .stream().map(JsonAdaptedResidence::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"     * Converts this address book into the model\u0027s {@code ResidenceTracker} object."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"    public ResidenceTracker toModelType() throws IllegalValueException {"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker residenceTracker \u003d new ResidenceTracker();"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"        for (JsonAdaptedResidence jsonAdaptedResidence : residences) {"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"            Residence residence \u003d jsonAdaptedResidence.toModelType();"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"            if (residenceTracker.hasResidence(residence)) {"},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_RESIDENCE);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"            residenceTracker.addResidence(residence);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"        return residenceTracker;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":12,"awzhenyi":12,"-":36,"VRSoorya":1}},{"path":"src/main/java/seedu/address/storage/ResidenceTrackerStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":" * Represents a storage for {@link ResidenceTracker}."},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"public interface ResidenceTrackerStorage {"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     * Returns the file path of the data file."},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"     * Returns ResidenceTracker data as a {@link ReadOnlyResidenceTracker}."},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"     * @see #getResidenceTrackerFilePath()"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath) throws DataConversionException, IOException;"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Saves the given {@link ReadOnlyResidenceTracker} to the storage."},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"     * @param residenceTracker cannot be null."},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException;"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"     * @see #saveResidenceTracker(ReadOnlyResidenceTracker)"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":46}},{"path":"src/main/java/seedu/address/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"public interface Storage extends ResidenceTrackerStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    Path getResidenceTrackerFilePath();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"    void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":5,"-":27}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":" * Manages storage of ResidenceTracker data in local storage."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    private ResidenceTrackerStorage residenceTrackerStorage;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * Creates a {@code StorageManager} with the given {@code ResidenceTrackerStorage} and {@code UserPrefStorage}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    public StorageManager(ResidenceTrackerStorage residenceTrackerStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        this.residenceTrackerStorage \u003d residenceTrackerStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public Path getResidenceTrackerFilePath() {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return residenceTrackerStorage.getResidenceTrackerFilePath();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker() throws DataConversionException, IOException {"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        return readResidenceTracker(residenceTrackerStorage.getResidenceTrackerFilePath());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"    public Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(Path filePath)"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"        return residenceTrackerStorage.readResidenceTracker(filePath);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker) throws IOException {"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        saveResidenceTracker(residenceTracker, residenceTrackerStorage.getResidenceTrackerFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"    public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"        residenceTrackerStorage.saveResidenceTracker(residenceTracker, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":17,"-":63}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S2-CS2103-T16-3/\""},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"tp/blob/master/docs/UserGuide.md\";"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":21,"author":{"gitId":"jaredtengsw"},"content":"    public static final String ADD_PROMPT \u003d \"add - Adds a residence into ResidenceTracker.\""},{"lineNumber":22,"author":{"gitId":"jaredtengsw"},"content":"                                          + \"\\nEnter \\\"add n/NAME_OF_RESIDENCE a/ADDRESS [clean/[y or n]] \""},{"lineNumber":23,"author":{"gitId":"jaredtengsw"},"content":"                                          + \"[book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]]...\\\"\""},{"lineNumber":24,"author":{"gitId":"jaredtengsw"},"content":"                                          + \"\\nExample: add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 \""},{"lineNumber":25,"author":{"gitId":"jaredtengsw"},"content":"                                          + \"clean/n book/y\\n\\n\";"},{"lineNumber":26,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"    public static final String CLEAR_PROMPT \u003d \"clear - Clears all entries from the residence tracker.\""},{"lineNumber":28,"author":{"gitId":"jaredtengsw"},"content":"                                            + \"\\nEnter \\\"clear\\\"\\n\\n\";"},{"lineNumber":29,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"    public static final String DELETE_PROMPT \u003d \"delete - Deletes the specified residence from the list of residences.\""},{"lineNumber":31,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"based on index.\""},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"\\nEnter \\\"delete INDEX\\\"\""},{"lineNumber":33,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"\\nExample: delete 3\\n\\n\";"},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":35,"author":{"gitId":"jaredtengsw"},"content":"    public static final String EDIT_PROMPT \u003d \"edit - Edits the booking/cleaning status of an existing residence.\""},{"lineNumber":36,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\nEnter \\\"edit INDEX clean/[y or n] \\\"\""},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\nExample: edit u/unclean 2\\n\\n\";"},{"lineNumber":38,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":39,"author":{"gitId":"jaredtengsw"},"content":"    public static final String FIND_PROMPT \u003d \"find - Finds residences whose name contains the given keyword.\""},{"lineNumber":40,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\nEnter \\\"find KEYWORD\\\"\""},{"lineNumber":41,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\nExample: find Heights\\n\\n\";"},{"lineNumber":42,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":43,"author":{"gitId":"jaredtengsw"},"content":"    public static final String LIST_PROMPT \u003d \"list - Shows a list of all residences in ResidenceTracker app.\""},{"lineNumber":44,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\n Enter \\\"list\\\"\\n\\n\";"},{"lineNumber":45,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":46,"author":{"gitId":"jaredtengsw"},"content":"    public static final String EXIT_PROMPT \u003d \"exit - Exits the program.\""},{"lineNumber":47,"author":{"gitId":"jaredtengsw"},"content":"                                           + \"\\n Enter \\\"exit\\\"\\n\\n\";"},{"lineNumber":48,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":49,"author":{"gitId":"jaredtengsw"},"content":"    public static final String HELP_MESSAGE \u003d \"List of commands:\\n\""},{"lineNumber":50,"author":{"gitId":"jaredtengsw"},"content":"                                            + ADD_PROMPT"},{"lineNumber":51,"author":{"gitId":"jaredtengsw"},"content":"                                            + CLEAR_PROMPT"},{"lineNumber":52,"author":{"gitId":"jaredtengsw"},"content":"                                            + DELETE_PROMPT"},{"lineNumber":53,"author":{"gitId":"jaredtengsw"},"content":"                                            + EDIT_PROMPT"},{"lineNumber":54,"author":{"gitId":"jaredtengsw"},"content":"                                            + FIND_PROMPT"},{"lineNumber":55,"author":{"gitId":"jaredtengsw"},"content":"                                            + LIST_PROMPT"},{"lineNumber":56,"author":{"gitId":"jaredtengsw"},"content":"                                            + EXIT_PROMPT;"},{"lineNumber":57,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":58,"author":{"gitId":"jaredtengsw"},"content":"    public static final String URL_MESSAGE \u003d \"For more info, refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"    @FXML"},{"lineNumber":70,"author":{"gitId":"jaredtengsw"},"content":"    private Label urlMessage;"},{"lineNumber":71,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":80,"author":{"gitId":"jaredtengsw"},"content":"        urlMessage.setText(URL_MESSAGE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":45,"-":100}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"    private ResidenceListPanel residenceListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"        residenceListPanel \u003d new ResidenceListPanel(logic.getFilteredResidenceList());"},{"lineNumber":114,"author":{"gitId":"awzhenyi"},"content":"        personListPanelPlaceholder.getChildren().add(residenceListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"whatthelump"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getResidenceTrackerFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"awzhenyi"},"content":"    public ResidenceListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitId":"awzhenyi"},"content":"        return residenceListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"awzhenyi":5,"-":190}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":"    private FlowPane cleanStatusTags;"},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"        person.getCleanStatusTags().stream()"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"               .sorted(Comparator.comparing(cleanStatusTag -\u003e cleanStatusTag.getValue()))"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"                .forEach(cleanStatusTag -\u003e cleanStatusTags.getChildren().add(new Label(cleanStatusTag.getValue())));"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":5,"-":77,"VRSoorya":2}},{"path":"src/main/java/seedu/address/ui/ResidenceCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"public class ResidenceCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"    private static final String FXML \u003d \"ResidenceListCard.fxml\";"},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"    public final Residence residence;"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"    private HBox cardPane;"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"    private Label name;"},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"    private Label id;"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"    private Label address;"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    private Label booking;"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    private FlowPane cleanStatusTags;"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"    private FlowPane tags;"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    public ResidenceCard(Residence residence, int displayedIndex) {"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        super(FXML);"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        this.residence \u003d residence;"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"        name.setText(residence.getResidenceName().getValue());"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"        address.setText(residence.getResidenceAddress().getValue());"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        booking.setText(residence.getBookingDetails().getValue());"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        cleanStatusTags.getChildren().add(new Label(residence.getCleanStatusTag().getValue()));"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"        residence.getTags().stream()"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"        // short circuit if same object"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"            return true;"},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"        // instanceof handles nulls"},{"lineNumber":58,"author":{"gitId":"awzhenyi"},"content":"        if (!(other instanceof ResidenceCard)) {"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"        // state check"},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"        ResidenceCard card \u003d (ResidenceCard) other;"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 residence.equals(card.residence);"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":62,"VRSoorya":5}},{"path":"src/main/java/seedu/address/ui/ResidenceListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":"public class ResidenceListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"    private static final String FXML \u003d \"ResidenceListPanel.fxml\";"},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ResidenceListPanel.class);"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"    @javafx.fxml.FXML"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"    private ListView\u003cResidence\u003e residenceListView;"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"    public ResidenceListPanel(ObservableList\u003cResidence\u003e residenceList) {"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"        super(FXML);"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"        residenceListView.setItems(residenceList);"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":"        residenceListView.setCellFactory(listView -\u003e new ResidenceListPanel.ResidenceListViewCell());"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":"    class ResidenceListViewCell extends ListCell\u003cResidence\u003e {"},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"        @Override"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"        protected void updateItem(Residence residence, boolean empty) {"},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"            super.updateItem(residence, empty);"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"            if (empty || residence \u003d\u003d null) {"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"                setGraphic(null);"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"                setText(null);"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":"            } else {"},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"                setGraphic(new ResidenceCard(residence, getIndex() + 1).getRoot());"},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":46}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/residence_tracker.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":88}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: derive(#FFFAFA, 20%);"},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"    background-color: #FFFAFA; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"    -fx-control-inner-background: #FAEBD7;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"},{"lineNumber":90,"author":{"gitId":"wangtao0717"},"content":"//////"},{"lineNumber":91,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":94,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: derive(#C2DAF2, 20%);"},{"lineNumber":95,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":106,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-image:url(/images/background.png);"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-repeat:no-repeat ;"},{"lineNumber":108,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-size:100% 100%;"},{"lineNumber":109,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-attachment: fixed;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-image:url(/images/background.png);"},{"lineNumber":115,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-repeat:no-repeat ;"},{"lineNumber":116,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-size:100% 100%;"},{"lineNumber":117,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-attachment: fixed;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":126,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-width: 4;"},{"lineNumber":127,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-style: dashed;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"    -fx-text-fill: black;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":142,"author":{"gitId":"wangtao0717"},"content":"    -fx-font-size: 14px;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":148,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-image:url(/images/background.png);"},{"lineNumber":149,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-repeat:no-repeat ;"},{"lineNumber":150,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-size:100% 100%;"},{"lineNumber":151,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-attachment: fixed;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":155,"author":{"gitId":"wangtao0717"},"content":"     -fx-background-color: transparent;"},{"lineNumber":156,"author":{"gitId":"wangtao0717"},"content":"     -fx-border-color: transparent;"},{"lineNumber":157,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-image:url(/images/background.png);"},{"lineNumber":158,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-repeat:no-repeat ;"},{"lineNumber":159,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-size:100% 100%;"},{"lineNumber":160,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-attachment: fixed;"},{"lineNumber":161,"author":{"gitId":"wangtao0717"},"content":"     -fx-border-top-width: 2px;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":165,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: #53868B;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":172,"author":{"gitId":"wangtao0717"},"content":"    -fx-text-fill: black;;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"}"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":215,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: #528B8B;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"}"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":230,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":231,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":232,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":233,"author":{"gitId":"-"},"content":" */"},{"lineNumber":234,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":272,"author":{"gitId":"-"},"content":"}"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":276,"author":{"gitId":"-"},"content":"}"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}"},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"}"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"}"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"}"},{"lineNumber":302,"author":{"gitId":"-"},"content":""},{"lineNumber":303,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":304,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: derive(#BFCDE7, 30%);"},{"lineNumber":305,"author":{"gitId":"-"},"content":"}"},{"lineNumber":306,"author":{"gitId":"-"},"content":""},{"lineNumber":307,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":308,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: derive(#F4E8F6, 50%);"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":315,"author":{"gitId":"-"},"content":"}"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"}"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"}"},{"lineNumber":328,"author":{"gitId":"-"},"content":""},{"lineNumber":329,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":331,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-width: 2;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"}"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":340,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: #F0F8FF;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":347,"author":{"gitId":"wangtao0717"},"content":"    -fx-text-fill: #452e52;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":355,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: \ttransparent;"},{"lineNumber":356,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-image:url(/images/resultBar.png);"},{"lineNumber":357,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-repeat:no-repeat ;"},{"lineNumber":358,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-size:100% 100%;"},{"lineNumber":359,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-attachment: fixed;"},{"lineNumber":360,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":361,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-insets: 0;"},{"lineNumber":362,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-width: 1;"},{"lineNumber":363,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":364,"author":{"gitId":"-"},"content":"}"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"wangtao0717"},"content":"#cleanStatusTags {"},{"lineNumber":367,"author":{"gitId":"wangtao0717"},"content":"    -fx-hgap: 7;"},{"lineNumber":368,"author":{"gitId":"wangtao0717"},"content":"    -fx-vgap: 3;"},{"lineNumber":369,"author":{"gitId":"wangtao0717"},"content":"}"},{"lineNumber":370,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":371,"author":{"gitId":"wangtao0717"},"content":"#cleanStatusTags .label {"},{"lineNumber":372,"author":{"gitId":"wangtao0717"},"content":"    -fx-text-fill: white;"},{"lineNumber":373,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-color: #65357e;"},{"lineNumber":374,"author":{"gitId":"wangtao0717"},"content":"    -fx-padding: 1 3 1 5;"},{"lineNumber":375,"author":{"gitId":"wangtao0717"},"content":"    -fx-border-radius: 2;"},{"lineNumber":376,"author":{"gitId":"wangtao0717"},"content":"    -fx-background-radius: 2;"},{"lineNumber":377,"author":{"gitId":"wangtao0717"},"content":"    -fx-font-size: 13;"},{"lineNumber":378,"author":{"gitId":"wangtao0717"},"content":"}"},{"lineNumber":379,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":381,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":382,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":383,"author":{"gitId":"-"},"content":"}"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":386,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":387,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":388,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":390,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":391,"author":{"gitId":"wangtao0717"},"content":"    -fx-font-size: 13;"},{"lineNumber":392,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":61,"-":331}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":""},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d06651 !important; /* The error class should always override the default text-fill style */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /* Empty cells will not have alternating colours */"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":"    -fx-background: #C2DAF2;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":".tag-selector {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-color: white;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":".tooltip-text {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":19}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"         \u003cVBox alignment\u003d\"CENTER\"\u003e"},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\" /\u003e"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":"               \u003cHBox prefHeight\u003d\"26.0\" prefWidth\u003d\"200.0\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                  \u003cchildren\u003e"},{"lineNumber":22,"author":{"gitId":"jaredtengsw"},"content":"                     \u003cLabel fx:id\u003d\"urlMessage\" text\u003d\"Label\" /\u003e"},{"lineNumber":23,"author":{"gitId":"jaredtengsw"},"content":"                     \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                  \u003c/children\u003e"},{"lineNumber":25,"author":{"gitId":"jaredtengsw"},"content":"               \u003c/HBox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003copaqueInsets\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003c/opaqueInsets\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"         \u003c/VBox\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jaredtengsw":9,"-":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"         title\u003d\"Residence Tracker\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    \u003cImage url\u003d\"@/images/residence_tracker.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"wangtao0717":2,"-":58}},{"path":"src/main/resources/view/ResidenceListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"            \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"            \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"                \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"            \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"            \u003cFlowPane fx:id\u003d\"cleanStatusTags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"            \u003cLabel fx:id\u003d\"booking\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$booking\" /\u003e"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"        \u003c/VBox\u003e"},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"awzhenyi":35,"VRSoorya":1}},{"path":"src/main/resources/view/ResidenceListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"    \u003cListView fx:id\u003d\"residenceListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"awzhenyi":8}},{"path":"src/test/data/JsonResidenceTrackerStorageTest/invalidAndValidResidenceResidenceTracker.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"jaredtengsw"},"content":"    \"name\": \"Valid Residence\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"jaredtengsw"},"content":"    \"name\": \"Residence With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":2,"-":11}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE1;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"import seedu.address.storage.JsonResidenceTrackerStorage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"                new JsonResidenceTrackerStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"                new JsonResidenceTrackerIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":81,"author":{"gitId":"wangtao0717"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE1 + TAG_DESC_RESERVED;"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"        Residence expectedResidence \u003d new ResidenceBuilder(RESIDENCE1).withTags().build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"        expectedModel.addResidence(expectedResidence);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"    public void getFilteredResidenceList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredResidenceList().remove(0));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"whatthelump"},"content":"    private static class JsonResidenceTrackerIoExceptionThrowingStub extends JsonResidenceTrackerStorage {"},{"lineNumber":151,"author":{"gitId":"whatthelump"},"content":"        private JsonResidenceTrackerIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":156,"author":{"gitId":"whatthelump"},"content":"        public void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, Path filePath) throws IOException {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":10,"wangtao0717":1,"-":141,"VRSoorya":8}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"jaredtengsw"},"content":"    public void execute_newResidence_success() {"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        Residence validResidence \u003d new ResidenceBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        expectedModel.addResidence(validResidence);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        assertCommandSuccess(new AddCommand(validResidence), model,"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validResidence), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"jaredtengsw"},"content":"    public void execute_duplicateResidence_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"        Residence residenceInList \u003d model.getResidenceTracker().getResidenceList().get(0);"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        assertCommandFailure(new AddCommand(residenceInList), model, AddCommand.MESSAGE_DUPLICATE_RESIDENCE);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"jaredtengsw":2,"-":32,"VRSoorya":10}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        ModelStubAcceptingResidenceAdded modelStub \u003d new ModelStubAcceptingResidenceAdded();"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"        Residence validResidence \u003d new ResidenceBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"        CommandResult commandResult \u003d new AddCommand(validResidence).execute(modelStub);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validResidence), commandResult.getFeedbackToUser());"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(Arrays.asList(validResidence), modelStub.personsAdded);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        Residence validResidence \u003d new ResidenceBuilder().build();"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"        AddCommand addCommand \u003d new AddCommand(validResidence);"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"        ModelStub modelStub \u003d new ModelStubWithResidence(validResidence);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_RESIDENCE, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"        Residence residence1 \u003d new ResidenceBuilder().withName(\"Amber Heights\").build();"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"        Residence residence2 \u003d new ResidenceBuilder().withName(\"Beauty World\").build();"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"        AddCommand addFirstCommand \u003d new AddCommand(residence1);"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"        AddCommand addSecondCommand \u003d new AddCommand(residence2);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(addFirstCommand.equals(addFirstCommand));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(residence1);"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(addFirstCommand.equals(addAliceCommandCopy));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(addFirstCommand.equals(1));"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(addFirstCommand.equals(null));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(addFirstCommand.equals(addSecondCommand));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"whatthelump"},"content":"        public Path getResidenceTrackerFilePath() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":109,"author":{"gitId":"whatthelump"},"content":"        public void setResidenceTrackerFilePath(Path residenceTrackerFilePath) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":114,"author":{"gitId":"VRSoorya"},"content":"        public void addResidence(Residence residence) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":119,"author":{"gitId":"whatthelump"},"content":"        public void setResidenceTracker(ReadOnlyResidenceTracker newData) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":124,"author":{"gitId":"whatthelump"},"content":"        public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":129,"author":{"gitId":"VRSoorya"},"content":"        public boolean hasResidence(Residence residence) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":134,"author":{"gitId":"VRSoorya"},"content":"        public void deleteResidence(Residence target) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":139,"author":{"gitId":"VRSoorya"},"content":"        public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":144,"author":{"gitId":"VRSoorya"},"content":"        public ObservableList\u003cResidence\u003e getFilteredResidenceList() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":149,"author":{"gitId":"VRSoorya"},"content":"        public void updateFilteredResidenceList(Predicate\u003cResidence\u003e predicate) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"VRSoorya"},"content":"     * A Model stub that contains a single residence."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"VRSoorya"},"content":"    private class ModelStubWithResidence extends ModelStub {"},{"lineNumber":158,"author":{"gitId":"VRSoorya"},"content":"        private final Residence residence;"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"VRSoorya"},"content":"        ModelStubWithResidence(Residence residence) {"},{"lineNumber":161,"author":{"gitId":"VRSoorya"},"content":"            requireNonNull(residence);"},{"lineNumber":162,"author":{"gitId":"VRSoorya"},"content":"            this.residence \u003d residence;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":166,"author":{"gitId":"VRSoorya"},"content":"        public boolean hasResidence(Residence residence) {"},{"lineNumber":167,"author":{"gitId":"VRSoorya"},"content":"            requireNonNull(residence);"},{"lineNumber":168,"author":{"gitId":"VRSoorya"},"content":"            return this.residence.isSameResidence(residence);"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"VRSoorya"},"content":"     * A Model stub that always accept the residence being added."},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"VRSoorya"},"content":"    private class ModelStubAcceptingResidenceAdded extends ModelStub {"},{"lineNumber":176,"author":{"gitId":"VRSoorya"},"content":"        final ArrayList\u003cResidence\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":179,"author":{"gitId":"VRSoorya"},"content":"        public boolean hasResidence(Residence residence) {"},{"lineNumber":180,"author":{"gitId":"VRSoorya"},"content":"            requireNonNull(residence);"},{"lineNumber":181,"author":{"gitId":"VRSoorya"},"content":"            return personsAdded.stream().anyMatch(residence::isSameResidence);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"VRSoorya"},"content":"        public void addResidence(Residence residence) {"},{"lineNumber":186,"author":{"gitId":"VRSoorya"},"content":"            requireNonNull(residence);"},{"lineNumber":187,"author":{"gitId":"VRSoorya"},"content":"            personsAdded.add(residence);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":191,"author":{"gitId":"whatthelump"},"content":"        public ReadOnlyResidenceTracker getResidenceTracker() {"},{"lineNumber":192,"author":{"gitId":"whatthelump"},"content":"            return new ResidenceTracker();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":8,"-":143,"VRSoorya":45}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        Model model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        expectedModel.setResidenceTracker(new ResidenceTracker());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"-":27,"VRSoorya":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_DETAILS;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_ADDRESS;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_NAME;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.EditResidenceDescriptorBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    public static final String VALID_NAME_RESIDENCE1 \u003d \"Amber Park\";"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_NAME_RESIDENCE2 \u003d \"Duxton\";"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_ADDRESS_RESIDENCE1 \u003d \"14 Amber Gardens, 439960\";"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_ADDRESS_RESIDENCE2 \u003d \"Block 50, Cantonment Rd\";"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_BOOKING_DETAILS \u003d \"4 Adults\";"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"    public static final String VALID_BOOKING_DETAILS_RESIDENCE1 \u003d \"4 Adults\";"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"    public static final String VALID_BOOKING_DETAILS_RESIDENCE2 \u003d \"2 Teenagers\";"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_CLEAN_TAG \u003d \"Y\";"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_UNCLEAN_TAG \u003d \"n\";"},{"lineNumber":40,"author":{"gitId":"jaredtengsw"},"content":"    public static final String VALID_BOOKED_TAG \u003d \"y\";"},{"lineNumber":41,"author":{"gitId":"jaredtengsw"},"content":"    public static final String VALID_UNBOOKED_TAG \u003d \"n\";"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_TAG_RESERVED \u003d \"reserved\";"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"    public static final String VALID_TAG_REPAIR \u003d \"sink needs plumbing\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"jaredtengsw"},"content":"    public static final String BOOKING_DETAILS_DESC_RESIDENCE1 \u003d \" \" + PREFIX_BOOKING_DETAILS + VALID_BOOKING_DETAILS;"},{"lineNumber":51,"author":{"gitId":"wangtao0717"},"content":"    public static final String BOOKING_DETAILS_DESC_RESIDENCE2 \u003d \" \" + PREFIX_BOOKING_DETAILS + VALID_BOOKING_DETAILS;"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"    public static final String NAME_DESC_RESIDENCE1 \u003d \" \" + PREFIX_RESIDENCE_NAME + VALID_NAME_RESIDENCE1;"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public static final String NAME_DESC_RESIDENCE2 \u003d \" \" + PREFIX_RESIDENCE_NAME + VALID_NAME_RESIDENCE2;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"    public static final String ADDRESS_DESC_RESIDENCE1 \u003d \" \" + PREFIX_RESIDENCE_ADDRESS + VALID_ADDRESS_RESIDENCE1;"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"    public static final String ADDRESS_DESC_RESIDENCE2 \u003d \" \" + PREFIX_RESIDENCE_ADDRESS + VALID_ADDRESS_RESIDENCE2;"},{"lineNumber":60,"author":{"gitId":"jaredtengsw"},"content":"    public static final String TAG_DESC_BOOKED \u003d \" \" + PREFIX_TAG + VALID_BOOKED_TAG;"},{"lineNumber":61,"author":{"gitId":"jaredtengsw"},"content":"    public static final String TAG_DESC_UNBOOKED \u003d \" \" + PREFIX_TAG + VALID_UNBOOKED_TAG;"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"    public static final String TAG_DESC_RESERVED \u003d \" \" + PREFIX_TAG + VALID_TAG_RESERVED;"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"    public static final String TAG_DESC_REPAIR \u003d \" \" + PREFIX_TAG + VALID_TAG_REPAIR;"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"    public static final String CLEAN_STATUS_DESC \u003d \" \" + PREFIX_CLEAN_STATUS_TAG + VALID_CLEAN_TAG;"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"    public static final String UNCLEAN_STATUS_DESC \u003d \" \" + PREFIX_CLEAN_STATUS_TAG + VALID_UNCLEAN_TAG;"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_RESIDENCE_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_RESIDENCE_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"    public static final String INVALID_BOOKING_DETAILS_DESC \u003d \" \" + PREFIX_BOOKING_DETAILS; // empty string not allowed for booking details"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"    public static final String INVALID_CLEAN_TAG_DESC \u003d \" \" + PREFIX_CLEAN_STATUS_TAG + \"yup\"; // must be \u0027y\u0027 or \u0027clean\u0027"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"    public static final String INVALID_UNCLEAN_TAG_DESC \u003d \" \" + PREFIX_CLEAN_STATUS_TAG + \"CLEAN IT!!\"; // must be \u0027n\u0027 or \u0027unclean\u0027"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"    public static final EditCommand.EditResidenceDescriptor DESC_RESIDENCE1;"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"    public static final EditCommand.EditResidenceDescriptor DESC_RESIDENCE2;"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"        DESC_RESIDENCE1 \u003d new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":84,"author":{"gitId":"whatthelump"},"content":"                .withAddress(VALID_ADDRESS_RESIDENCE1).withBookingDetails(VALID_BOOKING_DETAILS_RESIDENCE1)"},{"lineNumber":85,"author":{"gitId":"whatthelump"},"content":"                .withCleanStatusTag(VALID_CLEAN_TAG).withTags(VALID_TAG_RESERVED).build();"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"        DESC_RESIDENCE2 \u003d new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"                .withAddress(VALID_ADDRESS_RESIDENCE2).withBookingDetails(VALID_BOOKING_DETAILS_RESIDENCE2)"},{"lineNumber":88,"author":{"gitId":"whatthelump"},"content":"                .withCleanStatusTag(VALID_CLEAN_TAG).withTags(VALID_TAG_RESERVED, VALID_TAG_REPAIR).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"     * - the residence tracker, filtered residence list and selected residence in {@code actualModel} remain unchanged"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":126,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker expectedAddressBook \u003d new ResidenceTracker(actualModel.getResidenceTracker());"},{"lineNumber":127,"author":{"gitId":"VRSoorya"},"content":"        List\u003cResidence\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredResidenceList());"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"        assertEquals(expectedAddressBook, actualModel.getResidenceTracker());"},{"lineNumber":131,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredResidenceList());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"VRSoorya"},"content":"     * Updates {@code model}\u0027s filtered list to show only the residence at the given {@code targetIndex} in the"},{"lineNumber":135,"author":{"gitId":"VRSoorya"},"content":"     * {@code model}\u0027s Residence Tracker."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"VRSoorya"},"content":"    public static void showResidenceAtIndex(Model model, Index targetIndex) {"},{"lineNumber":138,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredResidenceList().size());"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"VRSoorya"},"content":"        Residence residence \u003d model.getFilteredResidenceList().get(targetIndex.getZeroBased());"},{"lineNumber":141,"author":{"gitId":"VRSoorya"},"content":"        final String[] splitName \u003d residence.getResidenceName().fullName.split(\"\\\\s+\");"},{"lineNumber":142,"author":{"gitId":"VRSoorya"},"content":"        model.updateFilteredResidenceList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"awzhenyi"},"content":"        assertEquals(1, model.getFilteredResidenceList().size());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":11,"awzhenyi":3,"jaredtengsw":5,"wangtao0717":2,"-":86,"VRSoorya":40}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidenceAtIndex;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENCE;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    private Model model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        Residence residenceToDelete \u003d model.getFilteredResidenceList().get(INDEX_FIRST_RESIDENCE.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RESIDENCE);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RESIDENCE_SUCCESS, residenceToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        expectedModel.deleteResidence(residenceToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidenceList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"        Residence residenceToDelete \u003d model.getFilteredResidenceList().get(INDEX_FIRST_RESIDENCE.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_RESIDENCE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_RESIDENCE_SUCCESS, residenceToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(model.getResidenceTracker(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"        expectedModel.deleteResidence(residenceToDelete);"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"        showNoResidence(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_RESIDENCE;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResidenceTracker().getResidenceList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_RESIDENCE);"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_RESIDENCE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_RESIDENCE);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"VRSoorya"},"content":"    private void showNoResidence(Model model) {"},{"lineNumber":105,"author":{"gitId":"VRSoorya"},"content":"        model.updateFilteredResidenceList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(model.getFilteredResidenceList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"awzhenyi":8,"-":80,"VRSoorya":19}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_RESIDENCE1;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CLEAN_TAG;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RESIDENCE1;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_UNCLEAN_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidenceAtIndex;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENCE;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.testutil.EditResidenceDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"    private Model model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        Residence editedResidence \u003d new ResidenceBuilder().build();"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder(editedResidence).build();"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RESIDENCE, descriptor);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RESIDENCE_SUCCESS, editedResidence);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"        expectedModel.setResidence(model.getFilteredResidenceList().get(0), editedResidence);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"        Index indexLastResidence \u003d Index.fromOneBased(model.getFilteredResidenceList().size());"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"        Residence lastResidence \u003d model.getFilteredResidenceList().get(indexLastResidence.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"        ResidenceBuilder residenceInList \u003d new ResidenceBuilder(lastResidence);"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"        Residence editedResidence \u003d residenceInList.withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"                .withCleanStatusTags(VALID_CLEAN_TAG).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"                .withCleanStatusTag(VALID_UNCLEAN_TAG).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastResidence, descriptor);"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RESIDENCE_SUCCESS, editedResidence);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":"        expectedModel.setResidence(lastResidence, editedResidence);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RESIDENCE, new EditResidenceDescriptor());"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"        Residence editedResidence \u003d model.getFilteredResidenceList().get(INDEX_FIRST_RESIDENCE.getZeroBased());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RESIDENCE_SUCCESS, editedResidence);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"        Residence residenceInFilteredList \u003d model.getFilteredResidenceList().get(INDEX_FIRST_RESIDENCE.getZeroBased());"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"        Residence editedResidence \u003d new ResidenceBuilder(residenceInFilteredList)"},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":"                .withName(VALID_NAME_RESIDENCE1).build();"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RESIDENCE,"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"                new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1).build());"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_RESIDENCE_SUCCESS, editedResidence);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"whatthelump"},"content":"        Model expectedModel \u003d new ModelManager(new ResidenceTracker(model.getResidenceTracker()), new UserPrefs());"},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        expectedModel.setResidence(model.getFilteredResidenceList().get(0), editedResidence);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    public void execute_duplicateResidenceUnfilteredList_failure() {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        Residence firstResidence \u003d model.getFilteredResidenceList().get(INDEX_FIRST_RESIDENCE.getZeroBased());"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder(firstResidence).build();"},{"lineNumber":107,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_RESIDENCE, descriptor);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RESIDENCE);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"    public void execute_duplicateResidenceFilteredList_failure() {"},{"lineNumber":114,"author":{"gitId":"awzhenyi"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":"        Residence residenceInList \u003d model.getResidenceTracker().getResidenceList()"},{"lineNumber":118,"author":{"gitId":"VRSoorya"},"content":"                .get(INDEX_SECOND_RESIDENCE.getZeroBased());"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_RESIDENCE,"},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"                new EditResidenceDescriptorBuilder(residenceInList).build());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"awzhenyi"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_RESIDENCE);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredResidenceList().size() + 1);"},{"lineNumber":128,"author":{"gitId":"VRSoorya"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder()"},{"lineNumber":129,"author":{"gitId":"VRSoorya"},"content":"                .withName(VALID_NAME_RESIDENCE1).build();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"awzhenyi"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"awzhenyi"},"content":"    public void execute_invalidResidenceIndexFilteredList_failure() {"},{"lineNumber":141,"author":{"gitId":"awzhenyi"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":142,"author":{"gitId":"awzhenyi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_RESIDENCE;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":144,"author":{"gitId":"awzhenyi"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getResidenceTracker().getResidenceList().size());"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":147,"author":{"gitId":"awzhenyi"},"content":"                new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1).build());"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"awzhenyi"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_RESIDENCE_DISPLAYED_INDEX);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":154,"author":{"gitId":"awzhenyi"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_RESIDENCE, DESC_RESIDENCE1);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor copyDescriptor \u003d new EditResidenceDescriptor(DESC_RESIDENCE1);"},{"lineNumber":158,"author":{"gitId":"awzhenyi"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_RESIDENCE, copyDescriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":171,"author":{"gitId":"awzhenyi"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RESIDENCE, DESC_RESIDENCE1)));"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":174,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_RESIDENCE, DESC_RESIDENCE1)));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":5,"awzhenyi":53,"-":105,"VRSoorya":14}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":"*/"}],"authorContributionMap":{"awzhenyi":3,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_C;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_E;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_F;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    private Model model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"    public void execute_zeroKeywords_noResidenceFound() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"jaredtengsw"},"content":"        expectedModel.updateFilteredResidenceList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredResidenceList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"jaredtengsw"},"content":"        expectedModel.updateFilteredResidenceList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(Arrays.asList(RESIDENCE_C, RESIDENCE_E, RESIDENCE_F), model.getFilteredResidenceList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":3,"-":71,"VRSoorya":9}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showResidenceAtIndex;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        model \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"        expectedModel \u003d new ModelManager(getTypicalResidenceTracker(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        showResidenceAtIndex(model, INDEX_FIRST_RESIDENCE);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":1,"-":33,"VRSoorya":5}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE1;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE2;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"        Residence expectedResidence \u003d new ResidenceBuilder(RESIDENCE2).withTags(VALID_TAG_RESERVED).build();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE1 + CLEAN_STATUS_DESC"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"                + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE1 + NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"                + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"                + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"        // multiple booking details - last booking detail accepted"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE1 + BOOKING_DETAILS_DESC_RESIDENCE2"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"                + CLEAN_STATUS_DESC + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"        // multiple clean tags - last clean tag accepted"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"                + CLEAN_STATUS_DESC + UNCLEAN_STATUS_DESC + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        Residence expectedResidenceMultipleTags \u003d new ResidenceBuilder(RESIDENCE2).withTags(VALID_TAG_REPAIR,"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"                VALID_TAG_RESERVED)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"                + TAG_DESC_RESERVED + TAG_DESC_REPAIR, new AddCommand(expectedResidenceMultipleTags));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        Residence expectedResidence \u003d new ResidenceBuilder(RESIDENCE1).withTags().build();"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"        "},{"lineNumber":66,"author":{"gitId":"whatthelump"},"content":"        // zero bookings"},{"lineNumber":67,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE1"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"                + CLEAN_STATUS_DESC + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":"        "},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"        // zero clean status tags"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE1"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE1 + TAG_DESC_RESERVED, new AddCommand(expectedResidence));"},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"        "},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"        assertParseSuccess(parser, NAME_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE1"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE1 + CLEAN_STATUS_DESC, new AddCommand(expectedResidence));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":84,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, VALID_NAME_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2, expectedMessage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, NAME_DESC_RESIDENCE2 + VALID_ADDRESS_RESIDENCE2, expectedMessage);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":90,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, VALID_NAME_RESIDENCE2 + VALID_ADDRESS_RESIDENCE2"},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"                + VALID_BOOKING_DETAILS_RESIDENCE2 + VALID_CLEAN_TAG, expectedMessage);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":97,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":98,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC, ResidenceName.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"whatthelump"},"content":"        // invalid address"},{"lineNumber":101,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, NAME_DESC_RESIDENCE2 + INVALID_ADDRESS_DESC"},{"lineNumber":102,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC, ResidenceAddress.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"whatthelump"},"content":"        // invalid booking details"},{"lineNumber":105,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"                + INVALID_BOOKING_DETAILS_DESC + CLEAN_STATUS_DESC, Booking.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"        // invalid clean status tag"},{"lineNumber":109,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":110,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + INVALID_CLEAN_TAG_DESC, CleanStatusTag.getMessageConstraints());"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":113,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":114,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":117,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_ADDRESS_DESC"},{"lineNumber":118,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC, ResidenceName.MESSAGE_CONSTRAINTS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":121,"author":{"gitId":"whatthelump"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_RESIDENCE2 + ADDRESS_DESC_RESIDENCE2"},{"lineNumber":122,"author":{"gitId":"whatthelump"},"content":"                + BOOKING_DETAILS_DESC_RESIDENCE2 + CLEAN_STATUS_DESC + TAG_DESC_RESERVED + TAG_DESC_REPAIR,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":63,"awzhenyi":1,"-":59,"VRSoorya":2}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_RESIDENCE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_RESIDENCE1;"},{"lineNumber":5,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BOOKING_DETAILS_DESC_RESIDENCE1;"},{"lineNumber":6,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.CLEAN_STATUS_DESC;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_RESIDENCE1;"},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOOKED;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_RESERVED;"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_RESIDENCE1;"},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_DETAILS;"},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RESIDENCE1;"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RESERVED;"},{"lineNumber":17,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CLEAN_TAG;"},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_RESIDENCE;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":31,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.testutil.EditResidenceDescriptorBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, VALID_ADDRESS_RESIDENCE1, MESSAGE_INVALID_FORMAT);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_RESIDENCE1, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_RESIDENCE1, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":73,"author":{"gitId":"jaredtengsw"},"content":"        // invalid name"},{"lineNumber":74,"author":{"gitId":"jaredtengsw"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, ResidenceName.MESSAGE_CONSTRAINTS);"},{"lineNumber":75,"author":{"gitId":"jaredtengsw"},"content":"        // invalid address"},{"lineNumber":76,"author":{"gitId":"jaredtengsw"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, ResidenceAddress.MESSAGE_CONSTRAINTS);"},{"lineNumber":77,"author":{"gitId":"jaredtengsw"},"content":"        // invalid tag"},{"lineNumber":78,"author":{"gitId":"jaredtengsw"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":80,"author":{"gitId":"jaredtengsw"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Residence} being edited,"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_RESERVED + TAG_DESC_BOOKED + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_RESERVED + TAG_EMPTY + TAG_DESC_BOOKED, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_ADDRESS_DESC + VALID_ADDRESS_RESIDENCE1,"},{"lineNumber":87,"author":{"gitId":"jaredtengsw"},"content":"                ResidenceName.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"        Index targetIndex \u003d INDEX_SECOND_RESIDENCE;"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_RESIDENCE1 + ADDRESS_DESC_RESIDENCE1"},{"lineNumber":94,"author":{"gitId":"jaredtengsw"},"content":"                + TAG_DESC_RESERVED + BOOKING_DETAILS_DESC_RESIDENCE1 + CLEAN_STATUS_DESC;"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder().withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"                .withAddress(VALID_ADDRESS_RESIDENCE1).withBookingDetails(VALID_BOOKING_DETAILS)"},{"lineNumber":97,"author":{"gitId":"jaredtengsw"},"content":"                .withCleanStatusTag(VALID_CLEAN_TAG).withTags(VALID_TAG_RESERVED).build();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENCE;"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"        String userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_RESIDENCE1 + NAME_DESC_RESIDENCE1;"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder().withAddress(ADDRESS_DESC_RESIDENCE1)"},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"                .withName(NAME_DESC_RESIDENCE1).build();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENCE;"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_RESIDENCE1;"},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder()"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"                .withName(VALID_NAME_RESIDENCE1).build();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"awzhenyi"},"content":"        // address"},{"lineNumber":126,"author":{"gitId":"awzhenyi"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_RESIDENCE1;"},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":"        descriptor \u003d new EditResidenceDescriptorBuilder().withAddress(VALID_ADDRESS_RESIDENCE1).build();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"awzhenyi"},"content":"        // booking details"},{"lineNumber":132,"author":{"gitId":"awzhenyi"},"content":"        userInput \u003d targetIndex.getOneBased() + BOOKING_DETAILS_DESC_RESIDENCE1;"},{"lineNumber":133,"author":{"gitId":"awzhenyi"},"content":"        descriptor \u003d new EditResidenceDescriptorBuilder().withBookingDetails(VALID_BOOKING_DETAILS).build();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"awzhenyi"},"content":"        // Clean Status Tag"},{"lineNumber":138,"author":{"gitId":"jaredtengsw"},"content":"        userInput \u003d targetIndex.getOneBased() + CLEAN_STATUS_DESC;"},{"lineNumber":139,"author":{"gitId":"jaredtengsw"},"content":"        descriptor \u003d new EditResidenceDescriptorBuilder().withCleanStatusTag(VALID_CLEAN_TAG).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":144,"author":{"gitId":"awzhenyi"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_RESERVED;"},{"lineNumber":145,"author":{"gitId":"awzhenyi"},"content":"        descriptor \u003d new EditResidenceDescriptorBuilder().withTags(VALID_TAG_RESERVED).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"awzhenyi"},"content":"    /*@Test"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":163,"author":{"gitId":"awzhenyi"},"content":"    }*/"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":168,"author":{"gitId":"awzhenyi"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENCE;"},{"lineNumber":169,"author":{"gitId":"awzhenyi"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_ADDRESS_DESC + VALID_ADDRESS_RESIDENCE1;"},{"lineNumber":170,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder()"},{"lineNumber":171,"author":{"gitId":"awzhenyi"},"content":"                .withAddress(VALID_ADDRESS_RESIDENCE1).build();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":176,"author":{"gitId":"awzhenyi"},"content":"        /*userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_RESIDENCE1 + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitId":"awzhenyi"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);*/"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":186,"author":{"gitId":"awzhenyi"},"content":"        Index targetIndex \u003d INDEX_FIRST_RESIDENCE;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"awzhenyi"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder().withTags().build();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":48,"jaredtengsw":20,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"        assertEquals(INDEX_FIRST_RESIDENCE, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"        assertEquals(INDEX_FIRST_RESIDENCE, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":3,"-":193}},{"path":"src/test/java/seedu/address/logic/parser/ResidenceTrackerParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_RESIDENCE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":28,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.testutil.EditResidenceDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"import seedu.address.testutil.ResidenceUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"public class ResidenceTrackerParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    private final ResidenceTrackerParser parser \u003d new ResidenceTrackerParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"jaredtengsw"},"content":"        Residence residence \u003d new ResidenceBuilder().build();"},{"lineNumber":39,"author":{"gitId":"jaredtengsw"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(ResidenceUtil.getAddCommand(residence));"},{"lineNumber":40,"author":{"gitId":"jaredtengsw"},"content":"        assertEquals(new AddCommand(residence), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_RESIDENCE.getOneBased());"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_RESIDENCE), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"jaredtengsw"},"content":"        Residence residence \u003d new ResidenceBuilder().build();"},{"lineNumber":59,"author":{"gitId":"jaredtengsw"},"content":"        EditResidenceDescriptor descriptor \u003d new EditResidenceDescriptorBuilder(residence).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"jaredtengsw"},"content":"                + INDEX_FIRST_RESIDENCE.getOneBased() + \" \" + ResidenceUtil.getEditResidenceDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_RESIDENCE, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"awzhenyi":4,"jaredtengsw":12,"-":83}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RESIDENCES;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_A;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_B;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceTrackerBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        assertEquals(new ResidenceTracker(), new ResidenceTracker(modelManager.getResidenceTracker()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"        userPrefs.setResidenceTrackerFilePath(Paths.get(\"residence/tracker/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"        userPrefs.setResidenceTrackerFilePath(Paths.get(\"new/residence/tracker/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"    public void setResidenceTrackerFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setResidenceTrackerFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"wangtao0717"},"content":"    public void setResidenceTrackerFilePath_validPath_setsResidenceTrackerFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"whatthelump"},"content":"        modelManager.setResidenceTrackerFilePath(path);"},{"lineNumber":72,"author":{"gitId":"whatthelump"},"content":"        assertEquals(path, modelManager.getResidenceTrackerFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"wangtao0717"},"content":"    public void hasResidence_nullResidence_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasResidence(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"wangtao0717"},"content":"    public void hasResidence_personNotInResidenceTracker_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(modelManager.hasResidence(RESIDENCE_A));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"wangtao0717"},"content":"    public void hasResidence_residenceInResidenceTracker_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"        modelManager.addResidence(RESIDENCE_A);"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(modelManager.hasResidence(RESIDENCE_A));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredResidenceList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"wangtao0717"},"content":"        ResidenceTracker residenceTracker \u003d new ResidenceTrackerBuilder().withResidence(RESIDENCE_A)"},{"lineNumber":99,"author":{"gitId":"VRSoorya"},"content":"                .withResidence(RESIDENCE_B).build();"},{"lineNumber":100,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker differentAddressBook \u003d new ResidenceTracker();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":104,"author":{"gitId":"wangtao0717"},"content":"        modelManager \u003d new ModelManager(residenceTracker, userPrefs);"},{"lineNumber":105,"author":{"gitId":"wangtao0717"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(residenceTracker, userPrefs);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"        String[] keywords \u003d RESIDENCE_A.getResidenceName().fullName.split(\"\\\\s+\");"},{"lineNumber":122,"author":{"gitId":"VRSoorya"},"content":"        modelManager.updateFilteredResidenceList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":123,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(modelManager.equals(new ModelManager(residenceTracker, userPrefs)));"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":126,"author":{"gitId":"VRSoorya"},"content":"        modelManager.updateFilteredResidenceList(PREDICATE_SHOW_ALL_RESIDENCES);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"        differentUserPrefs.setResidenceTrackerFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(modelManager.equals(new ModelManager(residenceTracker, differentUserPrefs)));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":8,"wangtao0717":11,"-":101,"VRSoorya":13}},{"path":"src/test/java/seedu/address/model/ResidenceTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE1;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"public class ResidenceTrackerTest {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    private final ResidenceTracker residenceTracker \u003d new ResidenceTracker();"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"    public void constructor() {"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(Collections.emptyList(), residenceTracker.getResidenceList());"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e residenceTracker.resetData(null));"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTracker newData \u003d getTypicalResidenceTracker();"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"        residenceTracker.resetData(newData);"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"        assertEquals(newData, residenceTracker);"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"    public void resetData_withDuplicateResidences_throwsDuplicateResidenceException() {"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        // Two persons with the same identity fields"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        Residence editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withAddress(VALID_ADDRESS_RESIDENCE2)"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"                .withTags(VALID_TAG_REPAIR).build();"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"        List\u003cResidence\u003e newResidences \u003d Arrays.asList(RESIDENCE1, editedR1);"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTrackerStub newData \u003d new ResidenceTrackerStub(newResidences);"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e residenceTracker.resetData(newData));"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"    public void hasResidence_nullResidence_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e residenceTracker.hasResidence(null));"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"    public void hasResidence_residenceNotInResidenceTracker_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(residenceTracker.hasResidence(RESIDENCE1));"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"    public void hasResidence_residenceInResidenceTracker_returnsTrue() {"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"        residenceTracker.addResidence(RESIDENCE1);"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(residenceTracker.hasResidence(RESIDENCE1));"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"    public void hasResidence_residenceWithSameIdentityFieldsInResidenceTracker_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"        residenceTracker.addResidence(RESIDENCE1);"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"        Residence editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withAddress(VALID_ADDRESS_RESIDENCE2)"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"                .withTags(VALID_TAG_REPAIR).build();"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(residenceTracker.hasResidence(editedR1));"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"    public void getResidenceList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e residenceTracker.getResidenceList().remove(0));"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"     * A stub ReadOnlyResidenceTracker whose list of residence can violate interface constraints."},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"    private static class ResidenceTrackerStub implements ReadOnlyResidenceTracker {"},{"lineNumber":89,"author":{"gitId":"VRSoorya"},"content":"        private final ObservableList\u003cResidence\u003e residences \u003d FXCollections.observableArrayList();"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTrackerStub(Collection\u003cResidence\u003e residences) {"},{"lineNumber":92,"author":{"gitId":"VRSoorya"},"content":"            this.residences.setAll(residences);"},{"lineNumber":93,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":95,"author":{"gitId":"VRSoorya"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"VRSoorya"},"content":"        public ObservableList\u003cResidence\u003e getResidenceList() {"},{"lineNumber":97,"author":{"gitId":"VRSoorya"},"content":"            return residences;"},{"lineNumber":98,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":101,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":101}},{"path":"src/test/java/seedu/address/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setResidenceTrackerFilePath(null));"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":20}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"//package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"//public class PersonTest {"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"//        Person person \u003d new PersonBuilder().build();"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"//    public void isSamePerson() {"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"//        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"//        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"//        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"//        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"//                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"//        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"//        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"//        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"//        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"//        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"//        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"//        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"//    public void equals() {"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"//        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"//        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"//        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"//        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"//        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"//        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"//        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"//        // different person -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"//        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"//        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"//        // different email -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"//        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"//        // different tags -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"//        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"VRSoorya"},"content":"//        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":"//}"}],"authorContributionMap":{"VRSoorya":91}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jaredtengsw"},"content":"//package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":3,"author":{"gitId":"jaredtengsw"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"jaredtengsw"},"content":"//import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"jaredtengsw"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"jaredtengsw"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"jaredtengsw"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":"//import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"jaredtengsw"},"content":"//import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"//import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"jaredtengsw"},"content":"//import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"jaredtengsw"},"content":"//import java.util.List;"},{"lineNumber":15,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":16,"author":{"gitId":"jaredtengsw"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"//import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"//import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":"//import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":22,"author":{"gitId":"jaredtengsw"},"content":"//public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":24,"author":{"gitId":"jaredtengsw"},"content":"//    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":26,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"//    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":31,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"//    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"jaredtengsw"},"content":"//        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":35,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":36,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"//    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"jaredtengsw"},"content":"//        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":41,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":42,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":43,"author":{"gitId":"jaredtengsw"},"content":"//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"jaredtengsw"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"jaredtengsw"},"content":"//                .build();"},{"lineNumber":47,"author":{"gitId":"jaredtengsw"},"content":"//        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":49,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":50,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":51,"author":{"gitId":"jaredtengsw"},"content":"//    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":54,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":55,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":56,"author":{"gitId":"jaredtengsw"},"content":"//    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":60,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":61,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":62,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":65,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":66,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":67,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":70,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":71,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":72,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":75,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":76,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":77,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"jaredtengsw"},"content":"//        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":84,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":85,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":86,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"jaredtengsw"},"content":"//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"jaredtengsw"},"content":"//                .build();"},{"lineNumber":90,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"jaredtengsw"},"content":"//        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":95,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":96,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":97,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"jaredtengsw"},"content":"//        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":104,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":105,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":106,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":111,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":112,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":113,"author":{"gitId":"jaredtengsw"},"content":"//    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":116,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":117,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":118,"author":{"gitId":"jaredtengsw"},"content":"//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":121,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":122,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":123,"author":{"gitId":"jaredtengsw"},"content":"//    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":129,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":130,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":131,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":134,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":135,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":136,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"jaredtengsw"},"content":"//        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":143,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":144,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":145,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":148,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":149,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":150,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"jaredtengsw"},"content":"//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"jaredtengsw"},"content":"//        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"jaredtengsw"},"content":"//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"jaredtengsw"},"content":"//        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"jaredtengsw"},"content":"//        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":158,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":159,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":160,"author":{"gitId":"jaredtengsw"},"content":"//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"jaredtengsw"},"content":"//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":164,"author":{"gitId":"jaredtengsw"},"content":"//"},{"lineNumber":165,"author":{"gitId":"jaredtengsw"},"content":"//    @Test"},{"lineNumber":166,"author":{"gitId":"jaredtengsw"},"content":"//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"jaredtengsw"},"content":"//        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"jaredtengsw"},"content":"//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"jaredtengsw"},"content":"//    }"},{"lineNumber":170,"author":{"gitId":"jaredtengsw"},"content":"//}"}],"authorContributionMap":{"jaredtengsw":170}},{"path":"src/test/java/seedu/address/model/residence/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"public class AddressTest {"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"    public void isValidAddress() {"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"        // null address"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"        // invalid addresses"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        // valid addresses"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":38}},{"path":"src/test/java/seedu/address/model/residence/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import java.util.Collections;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"        seedu.address.model.person.NameContainsKeywordsPredicate firstPredicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"        seedu.address.model.person.NameContainsKeywordsPredicate secondPredicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"        seedu.address.model.person.NameContainsKeywordsPredicate firstPredicateCopy \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        // different person -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        seedu.address.model.person.NameContainsKeywordsPredicate predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"        predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"        predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        seedu.address.model.person.NameContainsKeywordsPredicate predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"        predicate \u003d new seedu.address.model.person.NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":75}},{"path":"src/test/java/seedu/address/model/residence/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"public class NameTest {"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"    public void isValidName() {"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"        // null name"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Name.isValidName(\"Hudson Village\")); // alphabets only"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Name.isValidName(\"North Tower 2\")); // alphanumeric characters"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(Name.isValidName(\"Capital Heights\")); // with capital letters"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(Name.isValidName(\"Pinnacle Duxton Cantonment Rd HDB\")); // long names"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"wangtao0717":1,"VRSoorya":41}},{"path":"src/test/java/seedu/address/model/residence/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.commands.CommandTestUtil.*;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE1;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE2;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"public class PersonTest {"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"        Residence residence \u003d new ResidenceBuilder().build();"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e residence.getTags().remove(0));"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"    public void isSameResidence() {"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(RESIDENCE1.isSameResidence(RESIDENCE1));"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        // null -\u003e returns false"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.isSameResidence(null));"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"        Residence editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withAddress(VALID_ADDRESS_RESIDENCE2)"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"                .withBookingDetails(\"booking changed\").withCleanStatusTags(\"n\").withTags(VALID_TAG_REPAIR).build();"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(RESIDENCE1.isSameResidence(editedR1));"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withName(\"new name\").build();"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.isSameResidence(editedR1));"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"        Residence editedR2 \u003d new ResidenceBuilder(RESIDENCE2).withName(VALID_NAME_RESIDENCE2.toUpperCase()).build();"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE2.isSameResidence(editedR2));"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_RESIDENCE2 + \" \";"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"        editedR2 \u003d new ResidenceBuilder(RESIDENCE2).withName(nameWithTrailingSpaces).build();"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE2.isSameResidence(editedR2));"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"    public void equals() {"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"        // same values -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"        Residence r1Copy \u003d new ResidenceBuilder(RESIDENCE1).build();"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(RESIDENCE1.equals(r1Copy));"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        // same object -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"        assertTrue(RESIDENCE1.equals(r1Copy));"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"        // null -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(null));"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"        // different type -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(5));"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"        // different person -\u003e returns false"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(RESIDENCE2));"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"        // different name -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"        Residence editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withName(VALID_NAME_RESIDENCE2).build();"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(editedR1));"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"        // different clean status tag -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"        editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withCleanStatusTags(VALID_UNCLEAN_TAG).build();"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(editedR1));"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"        // different booking details -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"        editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withBookingDetails(VALID_BOOKING_DETAILS).build();"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(editedR1));"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"        // different address -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"        editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withAddress(VALID_ADDRESS_RESIDENCE2).build();"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(editedR1));"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"        // different tags -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"        editedR1 \u003d new ResidenceBuilder(RESIDENCE1).withTags(VALID_TAG_REPAIR).build();"},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"        assertFalse(RESIDENCE1.equals(editedR1));"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":87}},{"path":"src/test/java/seedu/address/model/residence/UniqueResidenceListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.residence.PersonTest;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.residence.UniqueResidenceList;"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.residence.exceptions.DuplicateResidenceException;"},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.residence.exceptions.ResidenceNotFoundException;"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.testutil.ResidenceBuilder;"},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_RESIDENCE1;"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_RESIDENCE2;"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_A;"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_B;"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"public class UniqueResidenceListTest {"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    private final UniqueResidenceList uniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"    public void contains_nullResidence_throwsNullPointerException() {"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.contains(null));"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"    public void contains_residenceNotInList_returnsFalse() {"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(uniqueResidenceList.contains(RESIDENCE_A));"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    public void contains_residenceInList_returnsTrue() {"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(uniqueResidenceList.contains(RESIDENCE_A));"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"    public void contains_ResidenceWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":"        Residence editedAlice \u003d new ResidenceBuilder(RESIDENCE_A).withAddress(VALID_ADDRESS_RESIDENCE1)"},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"                .withTags(VALID_ADDRESS_RESIDENCE2).build();"},{"lineNumber":48,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(uniqueResidenceList.contains(editedAlice));"},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":51,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"    public void add_nullResidence_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.add(null));"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":56,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"    public void add_duplicateResidence_throwsDuplicateResidenceException() {"},{"lineNumber":58,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":59,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(DuplicateResidenceException.class, () -\u003e uniqueResidenceList.add(RESIDENCE_A));"},{"lineNumber":60,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":62,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_nullTargetResidence_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.setResidence(null, RESIDENCE_A));"},{"lineNumber":65,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":67,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_nullEditedResidence_throwsNullPointerException() {"},{"lineNumber":69,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList"},{"lineNumber":70,"author":{"gitId":"wangtao0717"},"content":"                .setResidence(RESIDENCE_A, null));"},{"lineNumber":71,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":73,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_targetResidenceNotInList_throwsResidenceNotFoundException() {"},{"lineNumber":75,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(ResidenceNotFoundException.class, () -\u003e uniqueResidenceList"},{"lineNumber":76,"author":{"gitId":"wangtao0717"},"content":"                .setResidence(RESIDENCE_A, RESIDENCE_A));"},{"lineNumber":77,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":79,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_editedResidenceIsSamePerson_success() {"},{"lineNumber":81,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":82,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.setResidence(RESIDENCE_A, RESIDENCE_A);"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"        expectedUniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":85,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":86,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":88,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_editedResidenceHasSameIdentity_success() {"},{"lineNumber":90,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":91,"author":{"gitId":"wangtao0717"},"content":"        Residence editedAlice \u003d new ResidenceBuilder(RESIDENCE_A)"},{"lineNumber":92,"author":{"gitId":"wangtao0717"},"content":"                .withAddress(VALID_ADDRESS_RESIDENCE1).withTags(VALID_ADDRESS_RESIDENCE2)"},{"lineNumber":93,"author":{"gitId":"wangtao0717"},"content":"                .build();"},{"lineNumber":94,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.setResidence(RESIDENCE_A, editedAlice);"},{"lineNumber":95,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":96,"author":{"gitId":"wangtao0717"},"content":"        expectedUniqueResidenceList.add(editedAlice);"},{"lineNumber":97,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":98,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":100,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_editedResidenceHasDifferentIdentity_success() {"},{"lineNumber":102,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":103,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.setResidence(RESIDENCE_A, RESIDENCE_B);"},{"lineNumber":104,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":105,"author":{"gitId":"wangtao0717"},"content":"        expectedUniqueResidenceList.add(RESIDENCE_B);"},{"lineNumber":106,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":107,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":109,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_editedResidenceHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":111,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":112,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_B);"},{"lineNumber":113,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(DuplicateResidenceException.class, () -\u003e"},{"lineNumber":114,"author":{"gitId":"wangtao0717"},"content":"                uniqueResidenceList.setResidence(RESIDENCE_A, RESIDENCE_B));"},{"lineNumber":115,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":117,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"wangtao0717"},"content":"    public void remove_nullResidence_throwsNullPointerException() {"},{"lineNumber":119,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.remove(null));"},{"lineNumber":120,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":122,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"wangtao0717"},"content":"    public void remove_residenceDoesNotExist_throwsResidenceNotFoundException() {"},{"lineNumber":124,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(ResidenceNotFoundException.class, () -\u003e uniqueResidenceList.remove(RESIDENCE_A));"},{"lineNumber":125,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":127,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"wangtao0717"},"content":"    public void remove_existingResidence_removesPerson() {"},{"lineNumber":129,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":130,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.remove(RESIDENCE_A);"},{"lineNumber":131,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":132,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":133,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":135,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_nullUniqueResidenceList_throwsNullPointerException() {"},{"lineNumber":137,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.setResidences((UniqueResidenceList) null));"},{"lineNumber":138,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":140,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":141,"author":{"gitId":"wangtao0717"},"content":"    public void setResidence_uniqueResidenceList_replacesOwnListWithProvidedUniqueResidenceList() {"},{"lineNumber":142,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":143,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":144,"author":{"gitId":"wangtao0717"},"content":"        expectedUniqueResidenceList.add(RESIDENCE_B);"},{"lineNumber":145,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.setResidences(expectedUniqueResidenceList);"},{"lineNumber":146,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":147,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":149,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"wangtao0717"},"content":"    public void setResidences_nullList_throwsNullPointerException() {"},{"lineNumber":151,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueResidenceList.setResidences((List\u003cResidence\u003e) null));"},{"lineNumber":152,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":154,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"wangtao0717"},"content":"    public void setResidences_list_replacesOwnListWithProvidedList() {"},{"lineNumber":156,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.add(RESIDENCE_A);"},{"lineNumber":157,"author":{"gitId":"wangtao0717"},"content":"        List\u003cResidence\u003e ResidenceList \u003d Collections.singletonList(RESIDENCE_B);"},{"lineNumber":158,"author":{"gitId":"wangtao0717"},"content":"        uniqueResidenceList.setResidences(ResidenceList);"},{"lineNumber":159,"author":{"gitId":"wangtao0717"},"content":"        UniqueResidenceList expectedUniqueResidenceList \u003d new UniqueResidenceList();"},{"lineNumber":160,"author":{"gitId":"wangtao0717"},"content":"        expectedUniqueResidenceList.add(RESIDENCE_B);"},{"lineNumber":161,"author":{"gitId":"wangtao0717"},"content":"        assertEquals(expectedUniqueResidenceList, uniqueResidenceList);"},{"lineNumber":162,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":164,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"wangtao0717"},"content":"    public void setResidences_listWithDuplicateResidences_throwsDuplicateResidenceException() {"},{"lineNumber":166,"author":{"gitId":"wangtao0717"},"content":"        List\u003cResidence\u003e listWithDuplicateResidences \u003d Arrays.asList(RESIDENCE_A, RESIDENCE_A);"},{"lineNumber":167,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(DuplicateResidenceException.class, () -\u003e uniqueResidenceList.setResidences(listWithDuplicateResidences));"},{"lineNumber":168,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":170,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":171,"author":{"gitId":"wangtao0717"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":172,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":173,"author":{"gitId":"wangtao0717"},"content":"            -\u003e uniqueResidenceList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":174,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"wangtao0717"},"content":"}"}],"authorContributionMap":{"wangtao0717":175}},{"path":"src/test/java/seedu/address/model/tag/CleanStatusTagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"public class CleanStatusTagTest {"},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CleanStatusTag(null));"},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new CleanStatusTag(invalidName));"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":"    public void isValidName() {"},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"        // null name"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e CleanStatusTag.isValidCleanStatusTag(null));"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"        // invalid name"},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(CleanStatusTag.isValidCleanStatusTag(\"\")); // empty string"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(CleanStatusTag.isValidCleanStatusTag(\" \")); // spaces only"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(CleanStatusTag.isValidCleanStatusTag(\"^\")); // only non-alphanumeric characters"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"        assertFalse(CleanStatusTag.isValidCleanStatusTag(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"        // valid name"},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(CleanStatusTag.isValidCleanStatusTag(\"y\")); // lowercase y"},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(CleanStatusTag.isValidCleanStatusTag(\"Y\")); // uppercase Y"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(CleanStatusTag.isValidCleanStatusTag(\"n\")); // lowercase n"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"        assertTrue(CleanStatusTag.isValidCleanStatusTag(\"N\")); // uppercase N"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"}"}],"authorContributionMap":{"wangtao0717":41}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"//package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"//import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"//import java.util.List;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"//import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"//import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"//public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_CLEAN_STATUS_TAG \u003d \"NO MEANING\";"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"//    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"//    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"//    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"//    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"//    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"//    private static final List\u003cJsonAdaptedCleanStatusTag\u003e VALID_CLEAN_STATUS_TAG \u003d BENSON.getCleanStatusTags().stream()"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"//            .map(JsonAdaptedCleanStatusTag::new)"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"//            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"//    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"//            .map(JsonAdaptedTag::new)"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"//            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"//        assertEquals(BENSON, person.toModelType());"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"//                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"//                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"//                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"//                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"//                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":89,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":"//                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":92,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":93,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":94,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":95,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":96,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":97,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":98,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":99,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":100,"author":{"gitId":"VRSoorya"},"content":"//                        VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":101,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":102,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":103,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":104,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":105,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":106,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":107,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":108,"author":{"gitId":"VRSoorya"},"content":"//                VALID_CLEAN_STATUS_TAG, VALID_TAGS);"},{"lineNumber":109,"author":{"gitId":"VRSoorya"},"content":"//        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":110,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":111,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":112,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":113,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":114,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidCleanStatusTag_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitId":"VRSoorya"},"content":"//        List\u003cJsonAdaptedCleanStatusTag\u003e invalidCleanStatusTag \u003d new ArrayList\u003c\u003e(VALID_CLEAN_STATUS_TAG);"},{"lineNumber":116,"author":{"gitId":"VRSoorya"},"content":"//        invalidCleanStatusTag.add(new JsonAdaptedCleanStatusTag(INVALID_CLEAN_STATUS_TAG));"},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":118,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":119,"author":{"gitId":"VRSoorya"},"content":"//                        invalidCleanStatusTag, VALID_TAGS);"},{"lineNumber":120,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":122,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":123,"author":{"gitId":"VRSoorya"},"content":"//    @Test"},{"lineNumber":124,"author":{"gitId":"VRSoorya"},"content":"//    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":125,"author":{"gitId":"VRSoorya"},"content":"//        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":126,"author":{"gitId":"VRSoorya"},"content":"//        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":127,"author":{"gitId":"VRSoorya"},"content":"//        JsonAdaptedPerson person \u003d"},{"lineNumber":128,"author":{"gitId":"VRSoorya"},"content":"//                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":129,"author":{"gitId":"VRSoorya"},"content":"//                        VALID_CLEAN_STATUS_TAG, invalidTags);"},{"lineNumber":130,"author":{"gitId":"VRSoorya"},"content":"//        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":131,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":132,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":133,"author":{"gitId":"VRSoorya"},"content":"//}"}],"authorContributionMap":{"VRSoorya":133}},{"path":"src/test/java/seedu/address/storage/JsonResidenceTrackerStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.RESIDENCE_A;"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.EXTRA_R1;"},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.EXTRA_R2;"},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"public class JsonResidenceTrackerStorageTest {"},{"lineNumber":24,"author":{"gitId":"jaredtengsw"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonResidenceTrackerStorageTest\");"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"    public void readResidenceTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"jaredtengsw"},"content":"        assertThrows(NullPointerException.class, () -\u003e readResidenceTracker(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"    private java.util.Optional\u003cReadOnlyResidenceTracker\u003e readResidenceTracker(String filePath) throws Exception {"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"        return new JsonResidenceTrackerStorage(Paths.get(filePath))"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"            .readResidenceTracker(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":47,"author":{"gitId":"jaredtengsw"},"content":"        assertFalse(readResidenceTracker(\"NonExistentFile.json\").isPresent());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":52,"author":{"gitId":"jaredtengsw"},"content":"        assertThrows(DataConversionException.class, () -\u003e readResidenceTracker(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":57,"author":{"gitId":"jaredtengsw"},"content":"        assertThrows(DataConversionException.class, () -\u003e readResidenceTracker(\"invalidResidenceResidenceTracker.json\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"},{"lineNumber":62,"author":{"gitId":"jaredtengsw"},"content":"        assertThrows(DataConversionException.class, () -\u003e readResidenceTracker(\"invalidAndValidResidenceResidenceTracker.json\"));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":68,"author":{"gitId":"wangtao0717"},"content":"        ResidenceTracker original \u003d getTypicalResidenceTracker();"},{"lineNumber":69,"author":{"gitId":"wangtao0717"},"content":"        JsonResidenceTrackerStorage jsonResidenceTrackerStorage \u003d new JsonResidenceTrackerStorage(filePath);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":72,"author":{"gitId":"wangtao0717"},"content":"        jsonResidenceTrackerStorage.saveResidenceTracker(original, filePath);"},{"lineNumber":73,"author":{"gitId":"wangtao0717"},"content":"        ReadOnlyResidenceTracker readBack \u003d jsonResidenceTrackerStorage.readResidenceTracker(filePath).get();"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":77,"author":{"gitId":"wangtao0717"},"content":"        original.addResidence(EXTRA_R1);"},{"lineNumber":78,"author":{"gitId":"wangtao0717"},"content":"        original.removeResidence(RESIDENCE_A);"},{"lineNumber":79,"author":{"gitId":"wangtao0717"},"content":"        jsonResidenceTrackerStorage.saveResidenceTracker(original, filePath);"},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"        readBack \u003d jsonResidenceTrackerStorage.readResidenceTracker(filePath).get();"},{"lineNumber":81,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"        original.addResidence(EXTRA_R2);"},{"lineNumber":85,"author":{"gitId":"wangtao0717"},"content":"        jsonResidenceTrackerStorage.saveResidenceTracker(original); // file path not specified"},{"lineNumber":86,"author":{"gitId":"wangtao0717"},"content":"        readBack \u003d jsonResidenceTrackerStorage.readResidenceTracker().get(); // file path not specified"},{"lineNumber":87,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(readBack));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"wangtao0717"},"content":"    public void saveResidenceTracker_nullResidenceTracker_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveResidenceTracker(null, \"SomeFile.json\"));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"wangtao0717"},"content":"    private void saveResidenceTracker(ReadOnlyResidenceTracker residenceTracker, String filePath) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"whatthelump"},"content":"            new JsonResidenceTrackerStorage(Paths.get(filePath))"},{"lineNumber":102,"author":{"gitId":"wangtao0717"},"content":"                    .saveResidenceTracker(residenceTracker, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"wangtao0717"},"content":"    public void saveResidenceTracker_nullFilePath_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitId":"wangtao0717"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveResidenceTracker(new ResidenceTracker(), null));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":9,"jaredtengsw":8,"wangtao0717":21,"-":74}},{"path":"src/test/java/seedu/address/storage/JsonSerializableResidenceTrackerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.testutil.TypicalResidences;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"public class JsonSerializableResidenceTrackerTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalResidencesResidenceTracker.json\");"},{"lineNumber":20,"author":{"gitId":"jaredtengsw"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidResidenceResidenceTracker.json\");"},{"lineNumber":21,"author":{"gitId":"jaredtengsw"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateResidenceResidenceTracker.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        ResidenceTracker addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTracker typicalPersonsAddressBook \u003d TypicalResidences.getTypicalResidenceTracker();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"        JsonSerializableResidenceTracker dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"                JsonSerializableResidenceTracker.class).get();"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableResidenceTracker.MESSAGE_DUPLICATE_RESIDENCE,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":9,"jaredtengsw":3,"-":32,"VRSoorya":3}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"        userPrefs.setResidenceTrackerFilePath(Paths.get(\"residencetracker.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":1,"-":122}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.testutil.TypicalResidences.getTypicalResidenceTracker;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ReadOnlyResidenceTracker;"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"        JsonResidenceTrackerStorage addressBookStorage \u003d new JsonResidenceTrackerStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"        ResidenceTracker original \u003d getTypicalResidenceTracker();"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":"        storageManager.saveResidenceTracker(original);"},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"        ReadOnlyResidenceTracker retrieved \u003d storageManager.readResidenceTracker().get();"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"        assertEquals(original, new ResidenceTracker(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"wangtao0717"},"content":"    public void getResidenceTrackerFilePath() {"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":"        assertNotNull(storageManager.getResidenceTrackerFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"whatthelump":7,"wangtao0717":3,"-":58}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"*/"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":" *//*"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"    */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"     *//*"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"*/"}],"authorContributionMap":{"awzhenyi":23,"-":80}},{"path":"src/test/java/seedu/address/testutil/EditResidenceDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"public class EditResidenceDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"    private EditResidenceDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"        descriptor \u003d new EditResidenceDescriptor();"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder(EditResidenceDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        this.descriptor \u003d new EditResidenceDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"     * Returns an {@code EditResidenceDescriptor} with fields containing {@code residence}\u0027s details"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder(Residence residence) {"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        descriptor \u003d new EditResidenceDescriptor();"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setResidenceName(residence.getResidenceName());"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setResidenceAddress(residence.getResidenceAddress());"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        descriptor.setBookingDetails(residence.getBookingDetails());"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        descriptor.setCleanStatusTag(residence.getCleanStatusTag());"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setTags(residence.getTags());"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"     * Sets the {@code ResidenceName} of the {@code EditResidenceDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setResidenceName(new ResidenceName(name));"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"     * Sets the {@code ResidenceAddress} of the {@code EditResidenceDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder withAddress(String address) {"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setResidenceAddress(new ResidenceAddress(address));"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"     * Sets the {@code Booking} of the {@code EditResidenceDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"whatthelump"},"content":"    public EditResidenceDescriptorBuilder withBookingDetails(String bookingDetails) {"},{"lineNumber":62,"author":{"gitId":"whatthelump"},"content":"        descriptor.setBookingDetails(new Booking(bookingDetails));"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"     * that we are building."},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder withCleanStatusTag(String cleanStatusTag) {"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setCleanStatusTag(new CleanStatusTag(cleanStatusTag));"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditResidenceDescriptor}"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptorBuilder withTags(String... tags) {"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"    public EditResidenceDescriptor build() {"},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"        return descriptor;"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"whatthelump":2,"awzhenyi":3,"VRSoorya":83}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":"    private Set\u003cCleanStatusTag\u003e cleanStatusTags;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"        cleanStatusTags \u003d new HashSet\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":52,"author":{"gitId":"wangtao0717"},"content":"        cleanStatusTags \u003d new HashSet\u003c\u003e(personToCopy.getCleanStatusTags());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String... tags) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":97,"author":{"gitId":"wangtao0717"},"content":"        return new Person(name, phone, email, address, cleanStatusTags, tags);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"wangtao0717":5,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"//package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"//import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"///**"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"// * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"// */"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"//public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"//     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"//    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"//        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"//     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"//    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"//        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"//        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"//        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"//        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"//        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"//        person.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"//            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"//        );"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"//        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"//     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"//    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"//        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"//        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"//        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"//        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"//        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"//        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"//            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"//            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"//                sb.append(PREFIX_TAG);"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"//            } else {"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"//                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"//            }"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"//        }"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"//        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"//}"}],"authorContributionMap":{"VRSoorya":62}},{"path":"src/test/java/seedu/address/testutil/ResidenceBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Booking;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.ResidenceAddress;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.ResidenceName;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.tag.CleanStatusTag;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":" * A utility class to help with building Residence objects."},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"public class ResidenceBuilder {"},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":"    public static final String DEFAULT_RESIDENCE_NAME \u003d \"Amber Park\";"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"    public static final String DEFAULT_RESIDENCE_ADDRESS \u003d \"14 Amber Gardens, 439960\";"},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":"    public static final String DEFAULT_BOOKING_DETAILS \u003d \"4 adults\";"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"    public static final String DEFAULT_CLEAN_STATUS \u003d \"y\";"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"    private ResidenceName name;"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    private ResidenceAddress address;"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"    private Booking booking;"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    private CleanStatusTag cleanStatusTag;"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"     * Creates a {@code ResidenceBuilder} with the default details."},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder() {"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        name \u003d new ResidenceName(DEFAULT_RESIDENCE_NAME);"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        address \u003d new ResidenceAddress(DEFAULT_RESIDENCE_ADDRESS);"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        booking \u003d new Booking(DEFAULT_BOOKING_DETAILS);"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        cleanStatusTag \u003d new CleanStatusTag(DEFAULT_CLEAN_STATUS);"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"     * Initializes the ResidenceBuilder with the data of {@code residenceToCopy}."},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder(Residence residenceToCopy) {"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"        name \u003d residenceToCopy.getResidenceName();"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"        address \u003d residenceToCopy.getResidenceAddress();"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        booking \u003d residenceToCopy.getBookingDetails();"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        cleanStatusTag \u003d residenceToCopy.getCleanStatusTag();"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"        tags \u003d new HashSet\u003c\u003e(residenceToCopy.getTags());"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"     * Sets the {@code ResidenceName} of the {@code Residence} that we are building."},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder withName(String name) {"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        this.name \u003d new ResidenceName(name);"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"     * Sets the {@code ResidenceAddress} of the {@code Residence} that we are building."},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder withAddress(String address) {"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        this.address \u003d new ResidenceAddress(address);"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"     * Sets the {@code Booking} of the {@code Residence} that we are building."},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder withBookingDetails(String bookingDetails) {"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"        this.booking \u003d new Booking(bookingDetails);"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"     * Parses the {@code String cleanStatusTag} into a {@code cleanStatusTag} and set it to the {@code Residence}"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"     * that we are building."},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder withCleanStatusTags(String cleanStatusTag) {"},{"lineNumber":80,"author":{"gitId":"VRSoorya"},"content":"        this.cleanStatusTag \u003d SampleDataUtil.getCleanStatusTag(cleanStatusTag);"},{"lineNumber":81,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":84,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"VRSoorya"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Residence} that we are building."},{"lineNumber":86,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceBuilder withTags(String... tags) {"},{"lineNumber":88,"author":{"gitId":"VRSoorya"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":89,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":92,"author":{"gitId":"VRSoorya"},"content":"    public Residence build() {"},{"lineNumber":93,"author":{"gitId":"VRSoorya"},"content":"        return new Residence(name, address, booking, cleanStatusTag, tags);"},{"lineNumber":94,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":96,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"awzhenyi":4,"VRSoorya":92}},{"path":"src/test/java/seedu/address/testutil/ResidenceTrackerBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":" * A utility class to help with building ResidenceTracker objects."},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":" *     {@code ResidenceTracker rt \u003d new ResidenceTrackerBuilder().withResidence(new Residence(...)).build();}"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"public class ResidenceTrackerBuilder {"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"    private ResidenceTracker residenceTracker;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceTrackerBuilder() {"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"        residenceTracker \u003d new ResidenceTracker();"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceTrackerBuilder(ResidenceTracker residenceTracker) {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"        this.residenceTracker \u003d residenceTracker;"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"     * Adds a new {@code Residence} to the {@code ResidenceTracker} that we are building."},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceTrackerBuilder withResidence(Residence residence) {"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"        residenceTracker.addResidence(residence);"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    public ResidenceTracker build() {"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"        return residenceTracker;"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"VRSoorya":34}},{"path":"src/test/java/seedu/address/testutil/ResidenceUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING_DETAILS;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_CLEAN_STATUS_TAG;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_RESIDENCE_NAME;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.logic.commands.EditCommand.EditResidenceDescriptor;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"jaredtengsw"},"content":" * A utility class for Residence."},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"public class ResidenceUtil {"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jaredtengsw"},"content":"     * Returns an add command string for adding the {@code residence}."},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"    public static String getAddCommand(Residence residence) {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getResidenceDetails(residence);"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"     * Returns the part of command string for the given {@code residence}\u0027s details."},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"    public static String getResidenceDetails(Residence residence) {"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"        sb.append(PREFIX_RESIDENCE_NAME + residence.getResidenceName().getValue() + \" \");"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"        sb.append(PREFIX_RESIDENCE_ADDRESS + residence.getResidenceAddress().getValue() + \" \");"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"        sb.append(PREFIX_BOOKING_DETAILS + residence.getBookingDetails().getValue() + \" \");"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"        residence.getTags().stream().forEach("},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"        );"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"        return sb.toString();"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"jaredtengsw"},"content":"     * Returns the part of command string for the given {@code EditResidenceDescriptor}\u0027s details."},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"jaredtengsw"},"content":"    public static String getEditResidenceDescriptorDetails(EditResidenceDescriptor descriptor) {"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"        descriptor.getResidenceName().ifPresent(name -\u003e sb.append(PREFIX_RESIDENCE_NAME)"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"                .append(name.getValue()).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"        descriptor.getResidenceAddress().ifPresent(address -\u003e sb.append(PREFIX_RESIDENCE_ADDRESS)"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"                .append(address.getValue()).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"        descriptor.getBookingDetails().ifPresent(booking -\u003e sb.append(PREFIX_BOOKING_DETAILS)"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"                .append(booking.getValue()).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        descriptor.getCleanStatusTag().ifPresent(cleanStatusTag -\u003e sb.append(PREFIX_CLEAN_STATUS_TAG)"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"                .append(cleanStatusTag.getValue()).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"            } else {"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"        return sb.toString();"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"jaredtengsw":4,"VRSoorya":61}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"        return Index.fromOneBased(model.getFilteredResidenceList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"        return Index.fromOneBased(model.getFilteredResidenceList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"     * Returns the residence in the {@code model}\u0027s residence list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"    public static Residence getResidence(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"        return model.getFilteredResidenceList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":49,"VRSoorya":6}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    public static final Index INDEX_FIRST_RESIDENCE \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"    public static final Index INDEX_SECOND_RESIDENCE \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"    public static final Index INDEX_THIRD_RESIDENCE \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"awzhenyi":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"//package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":"//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"//import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"//import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"//import java.util.List;"},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.ResidenceTracker;"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"//import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"///**"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":"// * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"// */"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"//public class TypicalPersons {"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"//            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"//            .withPhone(\"94351253\")"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"//            .withTags(\"friends\").build();"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"//            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"//            .withTags(\"owesMoney\", \"friends\").build();"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"//    // Manually added"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"//    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":53,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"VRSoorya"},"content":"//    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"//            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":56,"author":{"gitId":"VRSoorya"},"content":"//            .build();"},{"lineNumber":57,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"//    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":"//    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":"//    /**"},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"//     * Todo: person to keep in RT? currently no addPerson method"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"//     * Returns an {@code ResidenceTracker} with all the typical persons."},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"//     */"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"//    public static ResidenceTracker getTypicalAddressBook() {"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"//        ResidenceTracker ab \u003d new ResidenceTracker();"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"//        for (Person person : getTypicalPersons()) {"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"//            // ab.addPerson(person);"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"//        }"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"//        return ab;"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":"//"},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"//    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"//        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"//    }"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"//}"}],"authorContributionMap":{"VRSoorya":77}},{"path":"src/test/java/seedu/address/testutil/TypicalResidences.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.ResidenceTracker;"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"import seedu.address.model.residence.Residence;"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":10,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_RESIDENCE1;"},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_RESIDENCE2;"},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_DETAILS_RESIDENCE1;"},{"lineNumber":13,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_DETAILS_RESIDENCE2;"},{"lineNumber":14,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CLEAN_TAG;"},{"lineNumber":15,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RESIDENCE1;"},{"lineNumber":16,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_RESIDENCE2;"},{"lineNumber":17,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_REPAIR;"},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_RESERVED;"},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CLEAN_TAG;"},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_DETAILS_RESIDENCE1;"},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BOOKING_DETAILS_RESIDENCE2;"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":" */"},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"public class TypicalResidences {"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_A \u003d new ResidenceBuilder().withName(\"Amber Heights\")"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withBookingDetails(\"Not booked\")"},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"            .withTags(\"valuable\").build();"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_B \u003d new ResidenceBuilder().withName(\"Beverly Hills\")"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withBookingDetails(\"\")"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"            .withTags(\"needs repair\", \"popular\").build();"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_C \u003d new ResidenceBuilder().withName(\"Casuarina Apartment\")"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"            .withBookingDetails(\"C booked\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_D \u003d new ResidenceBuilder().withName(\"Dover Condominium\")"},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"            .withBookingDetails(\"Clean\").withAddress(\"10th street\").withTags(\"for friends\").build();"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_E \u003d new ResidenceBuilder().withName(\"Emerald Hill\")"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"            .withBookingDetails(\"Not cleaned\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_F \u003d new ResidenceBuilder().withName(\"Floravale\")"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"            .withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    public static final Residence RESIDENCE_G \u003d new ResidenceBuilder().withName(\"Gem Residences\")"},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"            .withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"    public static final Residence EXTRA_R1 \u003d new ResidenceBuilder().withName(\"Hillview\")"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"            .withBookingDetails(\"Cleaning\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    public static final Residence EXTRA_R2 \u003d new ResidenceBuilder().withName(\"iSuites\")"},{"lineNumber":49,"author":{"gitId":"VRSoorya"},"content":"            .withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"    // Manually added - Residence\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"VRSoorya"},"content":"    public static final Residence RESIDENCE1 \u003d new ResidenceBuilder().withName(VALID_NAME_RESIDENCE1)"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"            .withAddress(VALID_ADDRESS_RESIDENCE1).withBookingDetails(VALID_BOOKING_DETAILS_RESIDENCE1)"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"            .withCleanStatusTags(VALID_CLEAN_TAG).withTags(VALID_TAG_RESERVED).build();"},{"lineNumber":55,"author":{"gitId":"VRSoorya"},"content":"    public static final Residence RESIDENCE2 \u003d new ResidenceBuilder().withName(VALID_NAME_RESIDENCE2)"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":"            .withAddress(VALID_ADDRESS_RESIDENCE2).withBookingDetails(VALID_BOOKING_DETAILS_RESIDENCE2)"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"            .withCleanStatusTags(VALID_CLEAN_TAG).withTags(VALID_TAG_REPAIR, VALID_TAG_RESERVED).build();"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":60,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":61,"author":{"gitId":"VRSoorya"},"content":"    private TypicalResidences() {} // prevents instantiation"},{"lineNumber":62,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":63,"author":{"gitId":"VRSoorya"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"VRSoorya"},"content":"     * Returns an {@code ResidenceTracker} with all the typical residences."},{"lineNumber":65,"author":{"gitId":"VRSoorya"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"VRSoorya"},"content":"    public static ResidenceTracker getTypicalResidenceTracker() {"},{"lineNumber":67,"author":{"gitId":"VRSoorya"},"content":"        ResidenceTracker rt \u003d new ResidenceTracker();"},{"lineNumber":68,"author":{"gitId":"VRSoorya"},"content":"        for (Residence residence : getTypicalResidences()) {"},{"lineNumber":69,"author":{"gitId":"VRSoorya"},"content":"            rt.addResidence(residence);"},{"lineNumber":70,"author":{"gitId":"VRSoorya"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"        return rt;"},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":74,"author":{"gitId":"VRSoorya"},"content":"    public static List\u003cResidence\u003e getTypicalResidences() {"},{"lineNumber":75,"author":{"gitId":"VRSoorya"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(RESIDENCE_A, RESIDENCE_B, RESIDENCE_C,"},{"lineNumber":76,"author":{"gitId":"VRSoorya"},"content":"                RESIDENCE_D, RESIDENCE_E, RESIDENCE_F, RESIDENCE_G));"},{"lineNumber":77,"author":{"gitId":"VRSoorya"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"VRSoorya"},"content":"}"}],"authorContributionMap":{"whatthelump":14,"jaredtengsw":9,"wangtao0717":3,"VRSoorya":52}}]
