[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-T16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-T16-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"jaredtengsw"},"content":"## User Interface"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"jaredtengsw"},"content":"##About ResidenceTracker\u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"jaredtengsw"},"content":"ResidenceTracker is a command line based desktop application that assists landlords in managing their residences that they are listing out on the Airbnb platform for rent."},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"jaredtengsw"},"content":"* It gives user convenience by providing a centralised overview of all of the user\u0027s residences and the respective booking/cleaning statuses of each residence. "},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":11,"author":{"gitId":"jaredtengsw"},"content":"* It uses a **quick CLI** way to note down bookings and track status of different residence, such as "},{"lineNumber":12,"author":{"gitId":"jaredtengsw"},"content":"  clean or needs cleaning/booked or available, so the landlord can process bookings more efficiently and inform the cleaning agent as necessary before the next leasee arrives."},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"* It is **written in OOP fashion**."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"* For more details on ResidenceTracker, please refer to our [User Guide](docs/UserGuide.md)."},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":"  "},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":""}],"authorContributionMap":{"jaredtengsw":7,"awzhenyi":4,"wangtao0717":7,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"### Lim Li Gang"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"\u003cimg src\u003d\"images/whatthelump.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"[[github](https://github.com/whatthelump)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"* Role: Code Quality and Documentation"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"* Responsibilities: _TBC_"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"### Aw Zhen Yi"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"\u003cimg src\u003d\"images/awzhenyi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":"[[github](http://github.com/awzhenyi)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":"* Responsibilities: _TBC_"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"jaredtengsw"},"content":"### Teng Shu Wei Jared"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"jaredtengsw"},"content":"\u003cimg src\u003d\"images/jaredtengsw.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"jaredtengsw"},"content":"[[github](http://github.com/jaredtengsw)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"jaredtengsw"},"content":"* Responsibilities: _TBC_"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"### V R Soorya"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/vrsoorya.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"[[github](http://github.com/vrsoorya)]"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"[[portfolio](team/vrsoorya.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* Responsibilities: Dev Ops"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"wangtao0717"},"content":"### Wang Tao"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"VRSoorya"},"content":"\u003cimg src\u003d\"images/wangtao0717.png\" width\u003d\"200px\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"wangtao0717"},"content":"[[github](http://github.com/wangtao0717)]"},{"lineNumber":54,"author":{"gitId":"wangtao0717"},"content":"[[portfolio](team/wangtao0717.md)]"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":57,"author":{"gitId":"wangtao0717"},"content":"* Responsibilities: _TBC_"}],"authorContributionMap":{"whatthelump":5,"awzhenyi":5,"jaredtengsw":4,"wangtao0717":4,"-":33,"VRSoorya":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"whatthelump"},"content":"* has to manage a considerable number of residences"},{"lineNumber":240,"author":{"gitId":"whatthelump"},"content":"* is constantly renting out residences; high turnover rate"},{"lineNumber":241,"author":{"gitId":"whatthelump"},"content":"* prefers working on their laptop over using their phone"},{"lineNumber":242,"author":{"gitId":"whatthelump"},"content":"* is able to type quickly"},{"lineNumber":243,"author":{"gitId":"whatthelump"},"content":"* prefers using a keyboard to using a mouse"},{"lineNumber":244,"author":{"gitId":"whatthelump"},"content":"* is reasonably familiar with CLI apps"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"whatthelump"},"content":"**Value proposition**: easily keep track of residences and inform cleaning agency whenever necessary"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                    | So that I can…​                                                       |"},{"lineNumber":254,"author":{"gitId":"VRSoorya"},"content":"| -------- | ------------------------------------------ | ---------------------------------- | ----------------------------------------------------------------------   |"},{"lineNumber":255,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | new user                                   | See a list of all commands         | refer to instructions when I forget how to use the App                   |"},{"lineNumber":256,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | add a new residence                | keep track of all my residences                                                                         |"},{"lineNumber":257,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | delete a residence                 | remove places that I no longer need to track                             |"},{"lineNumber":258,"author":{"gitId":"VRSoorya"},"content":"| `* * *`  | user                                       | find a residence by name           | locate details of residence without having to go through the entire list |"},{"lineNumber":259,"author":{"gitId":"VRSoorya"},"content":"| `* *`    | user                                       | edit a residence status            | keep track of all my residences status as and when they change           |"},{"lineNumber":260,"author":{"gitId":"VRSoorya"},"content":"| `*`      | user owning and renting out many residences| view list of all residence status  | minimize the time needed to get a quick overview of all my residences    |"},{"lineNumber":261,"author":{"gitId":"VRSoorya"},"content":"| `*`      | busy advanced user                         | clear user input quickly           | my time is used more efficiently                                         |"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"wangtao0717"},"content":"(For all use cases below, the **System** is the `ResidenceTracker` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC01): Add a residence**\u003cbr\u003e"},{"lineNumber":270,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"wangtao0717"},"content":"1.  User adds in the details of a residence"},{"lineNumber":273,"author":{"gitId":"wangtao0717"},"content":"2.  User confirms the addition"},{"lineNumber":274,"author":{"gitId":"wangtao0717"},"content":"3.  System confirms the addition and residence is added to the list of existing residence"},{"lineNumber":275,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"jaredtengsw"},"content":"* 2a. Error in submission if user did not provide all relevant fields. \u003cbr\u003e"},{"lineNumber":280,"author":{"gitId":"jaredtengsw"},"content":"    * 2a1. ResidenceTracker shows an error message. \u003cbr\u003e"},{"lineNumber":281,"author":{"gitId":"wangtao0717"},"content":"      use case restarts from 1."},{"lineNumber":282,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":283,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":284,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":285,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC02): Delete a residence**"},{"lineNumber":286,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":287,"author":{"gitId":"jaredtengsw"},"content":"**MSS**"},{"lineNumber":288,"author":{"gitId":"wangtao0717"},"content":"1.  User deletes a residence with a INDEX"},{"lineNumber":289,"author":{"gitId":"wangtao0717"},"content":"2.  System confirms the input number"},{"lineNumber":290,"author":{"gitId":"wangtao0717"},"content":"3.  System deletes the respective entry of the residence"},{"lineNumber":291,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"wangtao0717"},"content":"**Extensions**"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the correct format of deletion."},{"lineNumber":298,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct delete command with INDEX."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":303,"author":{"gitId":"wangtao0717"},"content":"      "},{"lineNumber":304,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC03): Find a residence** \u003cbr\u003e"},{"lineNumber":305,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":306,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the keywords to search residences"},{"lineNumber":307,"author":{"gitId":"wangtao0717"},"content":"2.  System returns the residence(s) which include the keyword in their name"},{"lineNumber":308,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":309,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":310,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":311,"author":{"gitId":"wangtao0717"},"content":"* 1a. no matching residences are found"},{"lineNumber":312,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":313,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":314,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":315,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":316,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":317,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC04): View list of all residences**\u003cbr\u003e"},{"lineNumber":318,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":319,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the list command"},{"lineNumber":320,"author":{"gitId":"wangtao0717"},"content":"2.  System lists all residences"},{"lineNumber":321,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":322,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":323,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":324,"author":{"gitId":"wangtao0717"},"content":"* 1a. no residences are found"},{"lineNumber":325,"author":{"gitId":"jaredtengsw"},"content":"    * 1ai. a corresponding message is displayed."},{"lineNumber":326,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case ends."},{"lineNumber":327,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":328,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":329,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":330,"author":{"gitId":"jaredtengsw"},"content":"**Use case(UC05): Edit status of a residence** \u003cbr\u003e"},{"lineNumber":331,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":332,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the index and status of the residence to be edited"},{"lineNumber":333,"author":{"gitId":"wangtao0717"},"content":"2.  System validates the edition"},{"lineNumber":334,"author":{"gitId":"wangtao0717"},"content":"3.  System updates the residence status"},{"lineNumber":335,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":336,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":337,"author":{"gitId":"jaredtengsw"},"content":"**Extensions** \u003cbr\u003e"},{"lineNumber":338,"author":{"gitId":"wangtao0717"},"content":"* 2a. System detects an error in the entered INDEX or in entered status"},{"lineNumber":339,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":340,"author":{"gitId":"jaredtengsw"},"content":"    * 2ai. System requests for the expected format of edit command."},{"lineNumber":341,"author":{"gitId":"jaredtengsw"},"content":"    * 2aii. User inputs the correct edit command with necessary details."},{"lineNumber":342,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e      Use case resumes at step 2."},{"lineNumber":343,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":344,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":345,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":346,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC06): Show all available commands** \u003cbr\u003e"},{"lineNumber":347,"author":{"gitId":"jaredtengsw"},"content":"**MSS**\u003cbr\u003e"},{"lineNumber":348,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the help command"},{"lineNumber":349,"author":{"gitId":"wangtao0717"},"content":"2.  System shows a list of all available commands to help master the use of the app and the URL to the User Guide"},{"lineNumber":350,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":351,"author":{"gitId":"wangtao0717"},"content":"    Use case ends."},{"lineNumber":352,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":353,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e"},{"lineNumber":354,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":355,"author":{"gitId":"jaredtengsw"},"content":"**Use case (UC07): Exit the application** \u003cbr\u003e"},{"lineNumber":356,"author":{"gitId":"jaredtengsw"},"content":"**MSS** \u003cbr\u003e"},{"lineNumber":357,"author":{"gitId":"wangtao0717"},"content":"1.  User keys in the exit command"},{"lineNumber":358,"author":{"gitId":"wangtao0717"},"content":"2.  System closes"},{"lineNumber":359,"author":{"gitId":"jaredtengsw"},"content":"\u003cbr\u003e    Use case ends."},{"lineNumber":360,"author":{"gitId":"jaredtengsw"},"content":""},{"lineNumber":361,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":365,"author":{"gitId":"-"},"content":""},{"lineNumber":366,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":367,"author":{"gitId":"awzhenyi"},"content":"2.  Should be able to hold up to 100 residences without a noticeable sluggishness in performance for typical usage."},{"lineNumber":368,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":375,"author":{"gitId":"awzhenyi"},"content":"* **Residence Status**:"},{"lineNumber":376,"author":{"gitId":"awzhenyi"},"content":"    * **Clean**: The residence has been cleaned"},{"lineNumber":377,"author":{"gitId":"awzhenyi"},"content":"    * **Unclean**: The residence needs to be cleaned"},{"lineNumber":378,"author":{"gitId":"awzhenyi"},"content":"    * **Book**: ***TBC***"},{"lineNumber":379,"author":{"gitId":"awzhenyi"},"content":"    * **Unbook**: ***TBC***"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":388,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":405,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":410,"author":{"gitId":"-"},"content":""},{"lineNumber":411,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":416,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":419,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":422,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":423,"author":{"gitId":"-"},"content":""},{"lineNumber":424,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":425,"author":{"gitId":"-"},"content":""},{"lineNumber":426,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":427,"author":{"gitId":"-"},"content":""},{"lineNumber":428,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":429,"author":{"gitId":"-"},"content":""},{"lineNumber":430,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"whatthelump":7,"jaredtengsw":40,"awzhenyi":6,"wangtao0717":43,"-":328,"VRSoorya":8}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker (RT) is a **desktop app for managing contacts, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RT can get your residence management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"1. Download the latest `residencetracker.jar` from [here](https://github.com/AY2021S2-CS2103-T16-3/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your ResidenceTracker."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"jaredtengsw"},"content":"   * **`list`** : Lists all residences in the app."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"   * **`add`**`n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y` : Adds a residence named `Clementi HDB` to the ResidenceTracker."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"   * **`delete`**`3` : Deletes the 3rd residence shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"   * **`clear`** : Deletes all residences."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/Amber Heights`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/Amber Heights t/friend` or as `n/Amber Heights`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"  e.g. if the command specifies `n/NAME a/ADDRESS`, `a/ADDRESS n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"  e.g. if you specify `a/Jurong West St 60 a/Jurong West St 70`, only `a/Jurong West St 70` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"jaredtengsw"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"### Adding a residence: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"Adds a new residence to the list of residences,default for CLEANING_STATUS and BOOKING_STATUS is ‘cleaned’ and ‘not-booked’ respectively."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"wangtao0717"},"content":"Format: ` add n/NAME_OF_APARTMENT a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":83,"author":{"gitId":"wangtao0717"},"content":"* `add n/Melville Park a/22 Simei Street 1, #10-02, S529948`"},{"lineNumber":84,"author":{"gitId":"wangtao0717"},"content":"* `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"whatthelump"},"content":"### Listing all residences: `list`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"jaredtengsw"},"content":"Shows a list of all residences in the app."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"### Editing a residence: `edit`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"Edits the booking/cleaning status of an existing residence"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"Format: `edit u/(un)clean [INDEX] u/(un)book [INDEX]`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"* Edits the residence status at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"* At least one of the optional fields (either clean or book status) must be provided."},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":"* If both fields are provided, `INDEX` field should be of the same value."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/clean 1` Edits the clean status of the 1st residence on the list from `Unclean` to `Clean`. Booking status remains unchanged from original value."},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"*  `edit u/unclean 2 u/unbook 2`  Edits the clean status of the 2nd residence on the list from `Unclean` to `Clean`, booking status of the same residence from `Booked` to `Unbooked`."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"### Locating residences by name: `find`"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"Finds residences whose names contain any of the given keywords."},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"VRSoorya"},"content":"* The search is case-insensitive. e.g `duxton` will match `Duxton`"},{"lineNumber":113,"author":{"gitId":"VRSoorya"},"content":"* The order of the keywords does not matter. e.g. `Gardens Bay` will match `Bay Gardens`"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":115,"author":{"gitId":"VRSoorya"},"content":"* Only full words will be matched e.g. `Dux` will not match `Duxton`"},{"lineNumber":116,"author":{"gitId":"VRSoorya"},"content":"* Apartments matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":117,"author":{"gitId":"VRSoorya"},"content":"  e.g. `Gardens Bay` will return `Botanic Gardens`, `Bay Area`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":120,"author":{"gitId":"VRSoorya"},"content":"* `find heights` returns `Hillview Heights` and `Aspen Heights`"},{"lineNumber":121,"author":{"gitId":"VRSoorya"},"content":"* `find east coast` returns `East View`, `West Coast`\u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"whatthelump"},"content":"### Deleting a residence: `delete`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"whatthelump"},"content":"Deletes the specified residence from the list of residences."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"whatthelump"},"content":"* Deletes the residence at the specified `INDEX`."},{"lineNumber":130,"author":{"gitId":"whatthelump"},"content":"* The index refers to the index number shown in the displayed residences list (i.e. **NOT** zero-indexed)."},{"lineNumber":131,"author":{"gitId":"whatthelump"},"content":"* The index must be a **positive integer** (\u003e0)"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitId":"whatthelump"},"content":"* `list` followed by `delete 3` deletes the 3rd residence in the list of residences."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"whatthelump"},"content":"Clears all entries from the residence tracker."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"whatthelump"},"content":"ResidenceTracker data are saved as a JSON file `[JAR file location]/data/ResidenceTracker.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":157,"author":{"gitId":"whatthelump"},"content":"If your changes to the data file makes its format invalid, ResidenceTracker will discard all data and start with an empty data file at the next run."},{"lineNumber":158,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":169,"author":{"gitId":"whatthelump"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous ResidenceTracker home folder."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":176,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":177,"author":{"gitId":"whatthelump"},"content":"**Add** | `add n/NAME_OF_RESIDENCE a/ADDRESS [clean/[y or n]] [book/[y or n]] [p/LOCK_PASSWORD] [d/BOOKING_DETAILS]]…​` \u003cbr\u003e e.g., `add n/Clementi HDB a/459A Clementi Ave 3, #04-257, S121459 clean/n book/y`"},{"lineNumber":178,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":179,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":180,"author":{"gitId":"awzhenyi"},"content":"**Edit** | `edit u/(un)clean [INDEX] u/(un)book [INDEX]`\u003cbr\u003e e.g.,`edit u/unclean 2 u/unbook 2`"},{"lineNumber":181,"author":{"gitId":"whatthelump"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find Heights`"},{"lineNumber":182,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":183,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":184,"author":{"gitId":"jaredtengsw"},"content":"**Exit** | `exit`"}],"authorContributionMap":{"whatthelump":28,"jaredtengsw":4,"awzhenyi":9,"wangtao0717":3,"-":133,"VRSoorya":7}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: AddressBook Level-3"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)"},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp/branch/master/graph/badge.svg?token\u003dU5L6JM6HMZ)](https://codecov.io/gh/AY2021S2-CS2103-T16-3/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"**AddressBook is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":18,"VRSoorya":1}},{"path":"docs/team/vrsoorya.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":2,"author":{"gitId":"VRSoorya"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"VRSoorya"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"VRSoorya"},"content":"NOTE: to be edited by Soorya accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"VRSoorya"},"content":"---"},{"lineNumber":6,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":7,"author":{"gitId":"VRSoorya"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":9,"author":{"gitId":"VRSoorya"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":11,"author":{"gitId":"VRSoorya"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":13,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"VRSoorya"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"VRSoorya"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"VRSoorya"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"VRSoorya"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":21,"author":{"gitId":"VRSoorya"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":23,"author":{"gitId":"VRSoorya"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"VRSoorya"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":26,"author":{"gitId":"VRSoorya"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"VRSoorya"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"VRSoorya"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":30,"author":{"gitId":"VRSoorya"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"VRSoorya"},"content":"  * User Guide:"},{"lineNumber":32,"author":{"gitId":"VRSoorya"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"VRSoorya"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"VRSoorya"},"content":"  * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"VRSoorya"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":37,"author":{"gitId":"VRSoorya"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"VRSoorya"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"VRSoorya"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"VRSoorya"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"VRSoorya"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":43,"author":{"gitId":"VRSoorya"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"VRSoorya"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"VRSoorya"},"content":""},{"lineNumber":47,"author":{"gitId":"VRSoorya"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"VRSoorya":47}},{"path":"docs/team/wangtao.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":2,"author":{"gitId":"wangtao0717"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"wangtao0717"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"wangtao0717"},"content":"NOTE: to be edited by Wang Tao accordingly as development progresses"},{"lineNumber":5,"author":{"gitId":"wangtao0717"},"content":"---"},{"lineNumber":6,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":7,"author":{"gitId":"wangtao0717"},"content":"## Project: AddressBook Level 3"},{"lineNumber":8,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":9,"author":{"gitId":"wangtao0717"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":10,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":11,"author":{"gitId":"wangtao0717"},"content":"Given below are my contributions to the project."},{"lineNumber":12,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":13,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":14,"author":{"gitId":"wangtao0717"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":15,"author":{"gitId":"wangtao0717"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":16,"author":{"gitId":"wangtao0717"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":17,"author":{"gitId":"wangtao0717"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":18,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":19,"author":{"gitId":"wangtao0717"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":20,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":21,"author":{"gitId":"wangtao0717"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":22,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":23,"author":{"gitId":"wangtao0717"},"content":"* **Project management**:"},{"lineNumber":24,"author":{"gitId":"wangtao0717"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":25,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":26,"author":{"gitId":"wangtao0717"},"content":"* **Enhancements to existing features**:"},{"lineNumber":27,"author":{"gitId":"wangtao0717"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":28,"author":{"gitId":"wangtao0717"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":29,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":30,"author":{"gitId":"wangtao0717"},"content":"* **Documentation**:"},{"lineNumber":31,"author":{"gitId":"wangtao0717"},"content":"    * User Guide:"},{"lineNumber":32,"author":{"gitId":"wangtao0717"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":33,"author":{"gitId":"wangtao0717"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":34,"author":{"gitId":"wangtao0717"},"content":"    * Developer Guide:"},{"lineNumber":35,"author":{"gitId":"wangtao0717"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":36,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":37,"author":{"gitId":"wangtao0717"},"content":"* **Community**:"},{"lineNumber":38,"author":{"gitId":"wangtao0717"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":39,"author":{"gitId":"wangtao0717"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":40,"author":{"gitId":"wangtao0717"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":41,"author":{"gitId":"wangtao0717"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":42,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":43,"author":{"gitId":"wangtao0717"},"content":"* **Tools**:"},{"lineNumber":44,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":45,"author":{"gitId":"wangtao0717"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":46,"author":{"gitId":"wangtao0717"},"content":""},{"lineNumber":47,"author":{"gitId":"wangtao0717"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"wangtao0717":47}},{"path":"src/main/java/seedu/address/model/residence/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":56,"awzhenyi":1}},{"path":"src/main/java/seedu/address/model/residence/BookingDetails.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"public class BookingDetails {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"    public final String bookingDetails;"},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"    public BookingDetails(String bookingDetails) {"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"        this.bookingDetails \u003d bookingDetails;"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":10}},{"path":"src/main/java/seedu/address/model/residence/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":47,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":59,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":58,"awzhenyi":1}},{"path":"src/main/java/seedu/address/model/residence/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":" * Tests that a {@code Residence}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cResidence\u003e {"},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"awzhenyi"},"content":"    public boolean test(Residence residence) {"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(residence.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":31,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":27,"awzhenyi":4}},{"path":"src/main/java/seedu/address/model/residence/Residence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"whatthelump"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":3,"author":{"gitId":"whatthelump"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":5,"author":{"gitId":"whatthelump"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"whatthelump"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"whatthelump"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"whatthelump"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":10,"author":{"gitId":"whatthelump"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":12,"author":{"gitId":"whatthelump"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":" * Represents a Residence in the address book."},{"lineNumber":14,"author":{"gitId":"whatthelump"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"whatthelump"},"content":" */"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":"public class Residence {"},{"lineNumber":17,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":18,"author":{"gitId":"whatthelump"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"whatthelump"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":21,"author":{"gitId":"whatthelump"},"content":"    // Data fields"},{"lineNumber":22,"author":{"gitId":"whatthelump"},"content":"    private final Address address;"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":"    private final BookingDetails bookingDetails;"},{"lineNumber":24,"author":{"gitId":"whatthelump"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":26,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"whatthelump"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    public Residence(Name name, Address address, BookingDetails bookingDetails, Set\u003cTag\u003e tags) {"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"        this.bookingDetails \u003d bookingDetails;"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(name, address, tags);"},{"lineNumber":32,"author":{"gitId":"whatthelump"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"whatthelump"},"content":"        this.address \u003d address;"},{"lineNumber":34,"author":{"gitId":"whatthelump"},"content":"        this.tags.addAll(tags);"},{"lineNumber":35,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":37,"author":{"gitId":"whatthelump"},"content":"    public Name getName() {"},{"lineNumber":38,"author":{"gitId":"whatthelump"},"content":"        return name;"},{"lineNumber":39,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":41,"author":{"gitId":"whatthelump"},"content":"    public Address getAddress() {"},{"lineNumber":42,"author":{"gitId":"whatthelump"},"content":"        return address;"},{"lineNumber":43,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"    public BookingDetails getBookingDetails() {"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"        return bookingDetails;"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":49,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"whatthelump"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":51,"author":{"gitId":"whatthelump"},"content":"     * if modification is attempted."},{"lineNumber":52,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"whatthelump"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":54,"author":{"gitId":"whatthelump"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":55,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":57,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if both residences have the same name."},{"lineNumber":59,"author":{"gitId":"VRSoorya"},"content":"     * This defines a weaker notion of equality between two residences."},{"lineNumber":60,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":"    public boolean isSameResidence(Residence otherResidence) {"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"        if (otherResidence \u003d\u003d this) {"},{"lineNumber":63,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":64,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"        return otherResidence !\u003d null"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getName().equals(getName());"},{"lineNumber":68,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":70,"author":{"gitId":"whatthelump"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"VRSoorya"},"content":"     * Returns true if both residence have the same identity and data fields."},{"lineNumber":72,"author":{"gitId":"VRSoorya"},"content":"     * This defines a stronger notion of equality between two residence."},{"lineNumber":73,"author":{"gitId":"whatthelump"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"whatthelump"},"content":"    public boolean equals(Object other) {"},{"lineNumber":76,"author":{"gitId":"whatthelump"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"whatthelump"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        if (!(other instanceof Residence)) {"},{"lineNumber":81,"author":{"gitId":"whatthelump"},"content":"            return false;"},{"lineNumber":82,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"        Residence otherResidence \u003d (Residence) other;"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        return otherResidence.getName().equals(getName())"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getAddress().equals(getAddress())"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getBookingDetails().equals(getBookingDetails())"},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 otherResidence.getTags().equals(getTags());"},{"lineNumber":89,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":91,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"whatthelump"},"content":"    public int hashCode() {"},{"lineNumber":93,"author":{"gitId":"whatthelump"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        return Objects.hash(name, address, bookingDetails, tags);"},{"lineNumber":95,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":97,"author":{"gitId":"whatthelump"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"whatthelump"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"whatthelump"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":100,"author":{"gitId":"whatthelump"},"content":"        builder.append(getName())"},{"lineNumber":101,"author":{"gitId":"whatthelump"},"content":"                .append(\"; Address: \")"},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"                .append(getAddress())"},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"                .append(\"; Booking Details: \")"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"                .append(getBookingDetails());"},{"lineNumber":105,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":106,"author":{"gitId":"whatthelump"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":107,"author":{"gitId":"whatthelump"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":108,"author":{"gitId":"whatthelump"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":109,"author":{"gitId":"whatthelump"},"content":"            tags.forEach(builder::append);"},{"lineNumber":110,"author":{"gitId":"whatthelump"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"whatthelump"},"content":"        return builder.toString();"},{"lineNumber":112,"author":{"gitId":"whatthelump"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"whatthelump"},"content":""},{"lineNumber":114,"author":{"gitId":"whatthelump"},"content":"}"}],"authorContributionMap":{"whatthelump":86,"awzhenyi":24,"VRSoorya":4}},{"path":"src/main/java/seedu/address/model/residence/UniqueResidenceList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.DuplicateResidenceException;"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"import seedu.address.model.residence.exceptions.ResidenceNotFoundException;"},{"lineNumber":13,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":14,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":15,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"awzhenyi"},"content":" * A list of residences that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitId":"awzhenyi"},"content":" * A residence is considered unique by comparing using {@code Residence#isSameResidence(Residence)}."},{"lineNumber":18,"author":{"gitId":"awzhenyi"},"content":" * As such, adding and updating of residences uses Residence#isSameResidence(Residence) for equality"},{"lineNumber":19,"author":{"gitId":"VRSoorya"},"content":" * so as to ensure that the residence being added or updated is unique in terms of identity in the UniqueResidenceList."},{"lineNumber":20,"author":{"gitId":"awzhenyi"},"content":" * However, the removal of a Residence uses Residence#equals(Object) so as to ensure that the Residence"},{"lineNumber":21,"author":{"gitId":"awzhenyi"},"content":" * with exactly the same fields will be removed."},{"lineNumber":22,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":23,"author":{"gitId":"awzhenyi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":24,"author":{"gitId":"awzhenyi"},"content":" *"},{"lineNumber":25,"author":{"gitId":"awzhenyi"},"content":" * @see Residence#isSameResidence(Residence)"},{"lineNumber":26,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"awzhenyi"},"content":"public class UniqueResidenceList implements Iterable\u003cResidence\u003e {"},{"lineNumber":28,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":29,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":30,"author":{"gitId":"awzhenyi"},"content":"    private final ObservableList\u003cResidence\u003e internalUnmodifiableList \u003d"},{"lineNumber":31,"author":{"gitId":"awzhenyi"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":32,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":33,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if the list contains an equivalent residence as the given argument."},{"lineNumber":35,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"awzhenyi"},"content":"    public boolean contains(Residence toCheck) {"},{"lineNumber":37,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":38,"author":{"gitId":"awzhenyi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameResidence);"},{"lineNumber":39,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":41,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"awzhenyi"},"content":"     * Adds a Residence to the list."},{"lineNumber":43,"author":{"gitId":"awzhenyi"},"content":"     * The residence must not already exist in the list."},{"lineNumber":44,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"awzhenyi"},"content":"    public void add(Residence toAdd) {"},{"lineNumber":46,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":47,"author":{"gitId":"awzhenyi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":48,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":49,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"awzhenyi"},"content":"        internalList.add(toAdd);"},{"lineNumber":51,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the residence {@code target} in the list with {@code editedResidence}."},{"lineNumber":54,"author":{"gitId":"awzhenyi"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"awzhenyi"},"content":"     * The residence identity of {@code editedResidence} must not be the same as another existing residence in the list."},{"lineNumber":56,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"awzhenyi"},"content":"    public void setResidence(Residence target, Residence editedResidence) {"},{"lineNumber":58,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(target, editedResidence);"},{"lineNumber":59,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":60,"author":{"gitId":"awzhenyi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"awzhenyi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":63,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":65,"author":{"gitId":"awzhenyi"},"content":"        if (!target.isSameResidence(editedResidence) \u0026\u0026 contains(editedResidence)) {"},{"lineNumber":66,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":67,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":69,"author":{"gitId":"awzhenyi"},"content":"        internalList.set(index, editedResidence);"},{"lineNumber":70,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":72,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"awzhenyi"},"content":"     * Removes the equivalent residence from the list."},{"lineNumber":74,"author":{"gitId":"awzhenyi"},"content":"     * The residence must exist in the list."},{"lineNumber":75,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"awzhenyi"},"content":"    public void remove(Residence toRemove) {"},{"lineNumber":77,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"awzhenyi"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"awzhenyi"},"content":"            throw new ResidenceNotFoundException();"},{"lineNumber":80,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":83,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(UniqueResidenceList replacement) {"},{"lineNumber":84,"author":{"gitId":"awzhenyi"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":88,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"awzhenyi"},"content":"     * Replaces the contents of this list with {@code residences}."},{"lineNumber":90,"author":{"gitId":"awzhenyi"},"content":"     * {@code residences} must not contain duplicate residences."},{"lineNumber":91,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"awzhenyi"},"content":"    public void setResidences(List\u003cResidence\u003e residences) {"},{"lineNumber":93,"author":{"gitId":"awzhenyi"},"content":"        requireAllNonNull(residences);"},{"lineNumber":94,"author":{"gitId":"awzhenyi"},"content":"        if (!residencesAreUnique(residences)) {"},{"lineNumber":95,"author":{"gitId":"awzhenyi"},"content":"            throw new DuplicateResidenceException();"},{"lineNumber":96,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":98,"author":{"gitId":"awzhenyi"},"content":"        internalList.setAll(residences);"},{"lineNumber":99,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":101,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"awzhenyi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"awzhenyi"},"content":"    public ObservableList\u003cResidence\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"awzhenyi"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":108,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"awzhenyi"},"content":"    public Iterator\u003cResidence\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"awzhenyi"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":113,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"awzhenyi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"awzhenyi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"awzhenyi"},"content":"                || (other instanceof UniqueResidenceList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"awzhenyi"},"content":"                \u0026\u0026 internalList.equals(((UniqueResidenceList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":120,"author":{"gitId":"awzhenyi"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"awzhenyi"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"awzhenyi"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":125,"author":{"gitId":"awzhenyi"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"awzhenyi"},"content":"     * Returns true if {@code residences} contains only unique residences."},{"lineNumber":127,"author":{"gitId":"awzhenyi"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"awzhenyi"},"content":"    private boolean residencesAreUnique(List\u003cResidence\u003e residences) {"},{"lineNumber":129,"author":{"gitId":"awzhenyi"},"content":"        for (int i \u003d 0; i \u003c residences.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"awzhenyi"},"content":"            for (int j \u003d i + 1; j \u003c residences.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"awzhenyi"},"content":"                if (residences.get(i).isSameResidence(residences.get(j))) {"},{"lineNumber":132,"author":{"gitId":"awzhenyi"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"awzhenyi"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"awzhenyi"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"awzhenyi"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"awzhenyi"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":139,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":140,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":141,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":142,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":141,"VRSoorya":1}},{"path":"src/main/java/seedu/address/model/residence/exceptions/DuplicateResidenceException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":" * Signals that the operation will result in duplicate Residences (Residences are considered duplicates"},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":" * if they have the same identity)."},{"lineNumber":6,"author":{"gitId":"awzhenyi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":8,"author":{"gitId":"awzhenyi"},"content":"public class DuplicateResidenceException extends RuntimeException {"},{"lineNumber":9,"author":{"gitId":"awzhenyi"},"content":"    public DuplicateResidenceException() {"},{"lineNumber":10,"author":{"gitId":"awzhenyi"},"content":"        super(\"Operation would result in duplicate residences\");"},{"lineNumber":11,"author":{"gitId":"awzhenyi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":12}},{"path":"src/main/java/seedu/address/model/residence/exceptions/ResidenceNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"awzhenyi"},"content":"package seedu.address.model.residence.exceptions;"},{"lineNumber":2,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":3,"author":{"gitId":"awzhenyi"},"content":"public class ResidenceNotFoundException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"awzhenyi"},"content":""},{"lineNumber":5,"author":{"gitId":"awzhenyi"},"content":"}"}],"authorContributionMap":{"awzhenyi":5}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"jaredtengsw"},"content":"    public static final String USERGUIDE_URL \u003d \"https://github.com/AY2021S2-CS2103-T16-3/\""},{"lineNumber":19,"author":{"gitId":"jaredtengsw"},"content":"                                             + \"tp/blob/master/docs/UserGuide.md\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jaredtengsw":2,"-":101}}]
