[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W16-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W16-2/tp/actions)"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-W16-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-W16-2/tp)"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"# Cheese Inventory Management (CHIM)"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"**Cheese Inventory Management (CHIM)** is a desktop CLI app for managing the inventory of a cheese making business. It comes with features to manage data such as:"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"1) order details"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"1) cheese details"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"1) customer details"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"For the detailed documentation of this project, see the **[CHIM Product Website](https://ay2021s2-cs2103-w16-2.github.io/tp)**."},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"## Acknowledgements"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"This is an extension from the **AddressBook Level 3** project for Software Engineering (SE) students."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"The project is a **part of the se-education.org** initiative. If you would like to contribute code to the project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info."}],"authorContributionMap":{"-":2,"aaronsms":16}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"### Aaron Saw Min Sern"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"\u003cimg src\u003d\"images/aaronsms.png\" width\u003d\"200px\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"[[github](https://github.com/aaronsms)]"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"[[portfolio](team/aaronsms.md)]"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"* Role: Developer"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"* Responsibilities: Software Testing"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"### Daniel Lau Yew En"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"\u003cimg src\u003d\"images/daniellau88.png\" width\u003d\"200px\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"[[github](http://github.com/daniellau88)]"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"[[portfolio](team/daniellau.md)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"* Responsibilities: DevOps (CI)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"### Lauren Lee Hui Ying"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"\u003cimg src\u003d\"images/laurenlhy.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"[[github](http://github.com/laurenlhy)]"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"[[portfolio](team/laurenlhy.md)]"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"* Responsibilities:"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"### Lim Li Quan"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"\u003cimg src\u003d\"images/ahquanz.png\" width\u003d\"200px\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"[[github](http://github.com/ahquanz)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"[[portfolio](team/ahquanz.md)]"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"* Responsibilities:"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"### Ng Wei Xue"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"weixue123"},"content":"\u003cimg src\u003d\"images/weixue123.png\" width\u003d\"200px\"\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"weixue123"},"content":"[[github](http://github.com/weixue123)]"},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"[[portfolio](team/weixue123.md)]"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":59,"author":{"gitId":"weixue123"},"content":"* Responsibilities: Documentation"}],"authorContributionMap":{"AhQuanz":3,"laurenlhy":3,"daniellau88":12,"weixue123":4,"-":32,"aaronsms":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"## **Design** [In Progress]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"## **Implementation** [In Progress]"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"## **Documentation, logging, testing, configuration, dev-ops** [In Progress]"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"* Freelance cheesemaker"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"* Runs home-based business"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"* Prefers desktop apps over other types"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"* Can type fast"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"**Value proposition**:"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"1. Specific properties of each cheese"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"2. Track order status of each cheese (either by batches or individually)"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"| Priority | As a …​                      | I want to …​                     | So that I can …​                                                        |"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"| -------- | ----------------------------| ------------------------------- | ---------------------------------------------------------------------- |"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"| `* * *`  | New user                    | Input a new order |  |"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"| `* * *`  | New user                    | Remove an existing order |  |"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"| `* * *`  | New user                    | Add cheese entries |  |"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"| `* * *`  | New user                    | Mark a sample order as delivered |  |"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"| `* * *`  | New user                    | Search for a customer | Find the customer’s contact information |"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"| `* *`    | New user                    | Save the data input | Retrieve the same information later |"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"| `* *`    | User with some familiarity  | View a summary of my inventory | See if there is a need to increase production |"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"| `* *`    | User                        | See the introduction message |  |"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"| `*`      | User with some familiarity  | Search up orders of a specific customer | Efficiently find the order status |"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"[More to be added]"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"(For all use cases below, the **System** is the `CHIM` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"#### Use case: Input a new order"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"weixue123"},"content":"**MSS**"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"weixue123"},"content":"1. User adds an order by specifying the cheese type and quantity of the order, and the phone number of the customer."},{"lineNumber":78,"author":{"gitId":"weixue123"},"content":"2. CHIM creates the order."},{"lineNumber":79,"author":{"gitId":"weixue123"},"content":"3. CHIM shows the details of the new order."},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"weixue123"},"content":"   Use case ends."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"weixue123"},"content":"**Extensions**"},{"lineNumber":84,"author":{"gitId":"weixue123"},"content":"1a. The given cheese quantity is invalid."},{"lineNumber":85,"author":{"gitId":"weixue123"},"content":"  * 1a1. CHIM shows an error message."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"weixue123"},"content":"    Use case resumes at step 1."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"weixue123"},"content":"1b. The customer with the given phone number cannot be found."},{"lineNumber":90,"author":{"gitId":"weixue123"},"content":"  * 1b1. CHIM shows an error message."},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"weixue123"},"content":"    Use case resumes at step 1."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"weixue123"},"content":"2a. The current cheese supply is insufficient to fulfil the order."},{"lineNumber":95,"author":{"gitId":"weixue123"},"content":"  * 2a1. CHIM will show a warning message."},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"weixue123"},"content":"    Use case resumes at step 3."},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"weixue123"},"content":"#### Use case: Input a cheese"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"weixue123"},"content":"**MSS**"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"weixue123"},"content":"1. User adds a cheese to the inventory by specifying its type and quantity."},{"lineNumber":104,"author":{"gitId":"weixue123"},"content":"2. CHIM shows a confirmation message that the cheese has been added."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"weixue123"},"content":"   Use case ends."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"weixue123"},"content":"**Extensions**"},{"lineNumber":109,"author":{"gitId":"weixue123"},"content":"1a. The given cheese quantity is invalid."},{"lineNumber":110,"author":{"gitId":"weixue123"},"content":"  * 1a1. CHIM shows an error message."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"weixue123"},"content":"    Use case reumes at step 1."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"#### Use case: Input a Customer"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"laurenlhy"},"content":"**MSS**"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"laurenlhy"},"content":"1. User adds a customer by specifying name, phone number and address."},{"lineNumber":119,"author":{"gitId":"laurenlhy"},"content":"2. CHIM creates the new customer and shows details of the new customer."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"laurenlhy"},"content":"   Use case ends."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":"**Extensions**"},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"* 1a. The given phone number is invalid."},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"  * 1a1. CHIM displays an error message."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"    Use case resumes at step 1."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":"* 1b. The given phone number is a duplicated customer."},{"lineNumber":130,"author":{"gitId":"laurenlhy"},"content":"  * 1b1. CHIM displays an error message."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"laurenlhy"},"content":"    Use case resumes at step 1."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"laurenlhy"},"content":"#### Use case: Remove an Order"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"laurenlhy"},"content":"**MSS**"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"1. User enters an order number to remove."},{"lineNumber":139,"author":{"gitId":"laurenlhy"},"content":"2. CHIM removes the order from the list of orders."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"laurenlhy"},"content":"   Use case ends."},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"laurenlhy"},"content":"**Extensions**"},{"lineNumber":144,"author":{"gitId":"laurenlhy"},"content":"* 1a. No such order with the specified order number exists."},{"lineNumber":145,"author":{"gitId":"laurenlhy"},"content":"  * 1a1. CHIM displays an error message."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"laurenlhy"},"content":"    Use case resumes at step 1."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"AhQuanz"},"content":"#### Use case: Remove a cheese"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"AhQuanz"},"content":"**MSS**"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"AhQuanz"},"content":"1. User enters the index of cheese to be removed."},{"lineNumber":154,"author":{"gitId":"AhQuanz"},"content":"2. CHIM removes the cheese from the list of cheese."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"AhQuanz"},"content":"   Use case ends."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"AhQuanz"},"content":"**Extensions**"},{"lineNumber":159,"author":{"gitId":"AhQuanz"},"content":"* 1a. The list is empty."},{"lineNumber":160,"author":{"gitId":"AhQuanz"},"content":"    * 1a1. CHIM responds that there are no existing customers."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"AhQuanz"},"content":"        Use case ends."},{"lineNumber":163,"author":{"gitId":"AhQuanz"},"content":"* 1b. No such cheese with the specified cheese number."},{"lineNumber":164,"author":{"gitId":"AhQuanz"},"content":"    * 1b1. CHIM shows an error message."},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"AhQuanz"},"content":"        Use case resumes at step 1."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"AhQuanz"},"content":"#### Use case: Remove a customer"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"AhQuanz"},"content":"**MSS**"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"AhQuanz"},"content":"1. User enters the index of the customer to be removed."},{"lineNumber":173,"author":{"gitId":"AhQuanz"},"content":"2. CHIM deletes the customer."},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"AhQuanz"},"content":"   Use case ends."},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"AhQuanz"},"content":"**Extensions**"},{"lineNumber":178,"author":{"gitId":"AhQuanz"},"content":"* 1a. The list is empty."},{"lineNumber":179,"author":{"gitId":"AhQuanz"},"content":"    * 1a1. CHIM responds that there are no existing customers."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"AhQuanz"},"content":"        Use case ends."},{"lineNumber":182,"author":{"gitId":"AhQuanz"},"content":"* 1b. The given index is invalid."},{"lineNumber":183,"author":{"gitId":"AhQuanz"},"content":"    * 1b1. CHIM shows an error message."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"AhQuanz"},"content":"        Use case resumes at step 1."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"aaronsms"},"content":"#### Use case: List orders"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"aaronsms"},"content":"**MSS**"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"aaronsms"},"content":"1. User enters the command to list all the orders recorded in CHIM."},{"lineNumber":193,"author":{"gitId":"aaronsms"},"content":"2. CHIM displays a list with the customers’ summary details."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"aaronsms"},"content":"   Use case ends."},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"aaronsms"},"content":"**Extensions**"},{"lineNumber":198,"author":{"gitId":"aaronsms"},"content":"* 1a. CHIM does not have any orders added."},{"lineNumber":199,"author":{"gitId":"aaronsms"},"content":"  * 1a1. CHIM informs the user that there are no orders recorded in the application."},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"aaronsms"},"content":"    Use case resumes at step 1."},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"aaronsms"},"content":"#### Use case: List cheese"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"aaronsms"},"content":"**MSS**"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"aaronsms"},"content":"1. User enters the command to list all the cheeses recorded in CHIM."},{"lineNumber":208,"author":{"gitId":"aaronsms"},"content":"2. CHIM displays all the cheeses in CHIM."},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"aaronsms"},"content":"   Use case ends."},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"aaronsms"},"content":"**Extensions**"},{"lineNumber":213,"author":{"gitId":"aaronsms"},"content":"* 1a. CHIM does not have any cheese added."},{"lineNumber":214,"author":{"gitId":"aaronsms"},"content":"  * 1a1. CHIM informs the user that there is no cheese recorded in the application."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"aaronsms"},"content":"    Use case resumes at step 1."},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"aaronsms"},"content":"* 1b. User provides an optional parameter, CHEESE_TYPE."},{"lineNumber":219,"author":{"gitId":"aaronsms"},"content":"  * 1b1. User enters a valid CHEESE_TYPE."},{"lineNumber":220,"author":{"gitId":"aaronsms"},"content":"    * 1b1a1. CHIM displays the current inventory count for the specific cheese_TYPE."},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"aaronsms"},"content":"      Use case resumes at step 1."},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"aaronsms"},"content":"  * 1b1. User enters a invalid CHEESE_TYPE."},{"lineNumber":225,"author":{"gitId":"aaronsms"},"content":"    * 1b1b1. CHIM displays an error message."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"aaronsms"},"content":"      Use case resumes at step 1."},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"daniellau88"},"content":"#### Use case: List customers"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"daniellau88"},"content":"1. User enters the command to list all the customers recorded in CHIM."},{"lineNumber":234,"author":{"gitId":"daniellau88"},"content":"1. CHIM displays a list with the customers’ summary details."},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"daniellau88"},"content":"   Use case ends."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"daniellau88"},"content":"**Extensions**"},{"lineNumber":239,"author":{"gitId":"daniellau88"},"content":"* 1a. CHIM does not have any customers added."},{"lineNumber":240,"author":{"gitId":"daniellau88"},"content":"  * 1a1. CHIM informs the user that there are no customers recorded in the application."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"daniellau88"},"content":"    Use case resumes at step 1."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":""},{"lineNumber":245,"author":{"gitId":"daniellau88"},"content":"#### Use case: Marks order as complete"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"daniellau88"},"content":"**MSS**"},{"lineNumber":248,"author":{"gitId":"daniellau88"},"content":"1. User enters the index of the order to be marked as complete."},{"lineNumber":249,"author":{"gitId":"daniellau88"},"content":"1. CHIM marks the order as complete."},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"aaronsms"},"content":"   Use case ends."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"daniellau88"},"content":"**Extensions**"},{"lineNumber":254,"author":{"gitId":"daniellau88"},"content":"* 1a. User provides an index which does not exist."},{"lineNumber":255,"author":{"gitId":"daniellau88"},"content":"  * 1a1. CHIM displays an error message."},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"daniellau88"},"content":"    Use case resumes at step 1."},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":""},{"lineNumber":260,"author":{"gitId":"daniellau88"},"content":"#### Use case: Search for a customer"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":263,"author":{"gitId":"daniellau88"},"content":"1. User enters a request to search for a customer by a particular name."},{"lineNumber":264,"author":{"gitId":"daniellau88"},"content":"1. CHIM shows the customer’s details."},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"daniellau88"},"content":"   Use case ends."},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":269,"author":{"gitId":"daniellau88"},"content":"* 1a. More than one customer has the input name."},{"lineNumber":270,"author":{"gitId":"daniellau88"},"content":"  * 1a1. CHIM shows a list of customers with the matching name."},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"daniellau88"},"content":"    Use case ends."},{"lineNumber":273,"author":{"gitId":"daniellau88"},"content":"* 1b. There are no existing customers with the input name."},{"lineNumber":274,"author":{"gitId":"daniellau88"},"content":"  * 1b1. CHIM responds that there are no existing customers with the input name."},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"daniellau88"},"content":"    Use case resumes at step 1."},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"daniellau88"},"content":"#### Use case: Exit the application"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"daniellau88"},"content":"**MSS**"},{"lineNumber":282,"author":{"gitId":"daniellau88"},"content":"1. User enters the command to exit the application."},{"lineNumber":283,"author":{"gitId":"daniellau88"},"content":"1. CHIM saves customers, orders and cheese data into data files."},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"daniellau88"},"content":"   Use case ends."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":300,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"AhQuanz":24,"laurenlhy":38,"daniellau88":35,"weixue123":26,"-":151,"aaronsms":26}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"Chesse Inventory Management (CHIM) is a desktop app for managing the contacts, inventory, and orders of a home-based"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":"cheese making business."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"weixue123"},"content":"The app is optimized for use via a Command Line Interface (CLI) while still having the"},{"lineNumber":10,"author":{"gitId":"weixue123"},"content":"benefits of a Graphical User Interface (GUI). If you can type fast, CHIM can get your management tasks done"},{"lineNumber":11,"author":{"gitId":"weixue123"},"content":"faster than traditional GUI apps."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"weixue123"},"content":"* Table of Content"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"  - [Quick start](#quick-start)"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"  - [Features](#features)"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"  - [FAQ](#faq)"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"  - [Command summary](#command-summary)"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":34,"author":{"gitId":"weixue123"},"content":"  e.g. in `addcustomer n/CUSTOMER_NAME`, `CUSTOMER_NAME` is a parameter that is to be used"},{"lineNumber":35,"author":{"gitId":"weixue123"},"content":"  as `addcustomer n/John Doe ...`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"weixue123"},"content":"  e.g. `listcheese [t/CHEESE_TYPE]` can be used as `listcheese` or as `listcheese t/Brie`."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"weixue123"},"content":"  e.g. if the command specifies `n/CUSTOMER_NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/CUSTOMER_NAME` is also acceptable."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"weixue123"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of"},{"lineNumber":44,"author":{"gitId":"weixue123"},"content":"  the parameter will be taken.\u003cbr\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"weixue123"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `list` and `exit`) will be ignored.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"weixue123"},"content":"  e.g. if the command specifies `list 123`, it will be interpreted as `list`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"weixue123"},"content":"### Adding an order: `addorder`"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"weixue123"},"content":"Adds an order to CHIM."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"weixue123"},"content":"Format: `addorder t/CHEESE_TYPE q/QUANTITY p/PHONE_NUMBER`"},{"lineNumber":57,"author":{"gitId":"weixue123"},"content":"* The specified `QUANTITY` must be a positive integer."},{"lineNumber":58,"author":{"gitId":"weixue123"},"content":"* The specified `PHONE_NUMBER` must belong to an existing user."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"weixue123"},"content":"Example: `addorder t/Parmesan q/2 p/65555555`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"weixue123"},"content":"### Adding a cheese: `addcheese`"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"weixue123"},"content":"Adds a cheese to CHIM."},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"weixue123"},"content":"Format: `addcheese t/CHEESE_TYPE q/QUANTITY`"},{"lineNumber":67,"author":{"gitId":"weixue123"},"content":"* The specified `QUANTITY` must be a positive integer."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"weixue123"},"content":"Example: `addcheese t/Parmesan q/2`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"### Adding a customer: `addcustomer`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"weixue123"},"content":"Adds a customer to CHIM."},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"Format: `addcustomer n/CUSTOMER_NAME p/PHONE_NUMBER a/ADDRESS`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"Example: `addcustomer n/John Doe p/65555555 a/Blk 436 Serangoon Gardens St 26 #01-01`"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"### Remove an order: `removeorder`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"Removes a specific order from CHIM, identified by its index."},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"laurenlhy"},"content":"Format: `removeorder ORDER_INDEX`"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"* Removes the order at the specified `ORDER_INDEX`. The index must be a positive integer."},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"Example: `removeorder 2`"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"* Removes the second order in the list of orders."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"### Remove cheese from inventory: `removecheese`"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"Removes some specified quantity of a specified cheese type from the inventory."},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"Format: `removecheese CHEESE_INDEX`"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"* Removes the cheese at the specified `CHEESE_INDEX`. The index must be a positive integer."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"Example: `removecheese 2`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"### Remove customer: `removecustomer`"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":"Removes a customer from the list of customers, using their phone number as identifier."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":"Format: `removecustomer p/PHONE_NUMBER`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"Example: `removecustomer p/65555555`"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"weixue123"},"content":"### Listing orders: `listorder`"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"Displays all incomplete orders in CHIM."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"Format: `listorder`"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"weixue123"},"content":"### Listing cheese: `listcheese`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"weixue123"},"content":"Displays the current inventory count. If a cheese type is specified, then display the current inventory count for that particular cheese."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"Format: `listcheese [t/CHEESE_TYPE]`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":"Example: `listcheese t/Mozzarella`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"weixue123"},"content":"### Listing customers: `listcustomer`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"daniellau88"},"content":"Displays the customers in CHIM."},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"daniellau88"},"content":"Format: `listcustomer`"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"weixue123"},"content":"### Marking an order as complete: `done`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"daniellau88"},"content":"Marks an incomplete order as complete from CHIM, identified by its index."},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"daniellau88"},"content":"Format: `done ORDER_INDEX`"},{"lineNumber":132,"author":{"gitId":"daniellau88"},"content":"* Marks the order at the specified `ORDER_INDEX`."},{"lineNumber":133,"author":{"gitId":"daniellau88"},"content":"* The `ORDER_INDEX` must be a positive integer."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"AhQuanz"},"content":"Example: `done 2`"},{"lineNumber":136,"author":{"gitId":"weixue123"},"content":"* Mark the second order in the list of orders as complete."},{"lineNumber":137,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":138,"author":{"gitId":"weixue123"},"content":"### Searching for customers: `search`"},{"lineNumber":139,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":140,"author":{"gitId":"daniellau88"},"content":"Searches for a customer in CHIM."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"daniellau88"},"content":"Format: `search n/NAME`"},{"lineNumber":143,"author":{"gitId":"weixue123"},"content":"* Search is case-insensitive, e.g. Betty will match betty."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":146,"author":{"gitId":"daniellau88"},"content":"* `search n/Betty`"},{"lineNumber":147,"author":{"gitId":"daniellau88"},"content":"* `search n/Robin Lee`"},{"lineNumber":148,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":149,"author":{"gitId":"daniellau88"},"content":"### Exiting the program: `exit`"},{"lineNumber":150,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":151,"author":{"gitId":"daniellau88"},"content":"Exits the program."},{"lineNumber":152,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":153,"author":{"gitId":"daniellau88"},"content":"Format: `exit`"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":161,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":168,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":169,"author":{"gitId":"weixue123"},"content":"**Add Order** | `addorder t/CHEESE_TYPE q/QUANTITY p/PHONE_NUMBER` \u003cbr\u003e e.g. `addorder t/Parmesan q/2 p/65555555`"},{"lineNumber":170,"author":{"gitId":"weixue123"},"content":"**Add Cheese** | `addcheese t/CHEESE_TYPE q/QUANTITY` \u003cbr\u003e e.g. `addcheese t/CHEESE_TYPE q/QUANTITY`"},{"lineNumber":171,"author":{"gitId":"weixue123"},"content":"**Add Customer** | `addcustomer n/CUSTOMER_NAME p/PHONE_NUMBER a/ADDRESS` \u003cbr\u003e e.g. `addcustomer n/John Doe p/65555555 a/Blk 436 Serangoon Gardens St 26 #01-01`"},{"lineNumber":172,"author":{"gitId":"weixue123"},"content":"**Remove Order** | `removeorder ORDER_INDEX` \u003cbr\u003e e.g. `removeorder 2`"},{"lineNumber":173,"author":{"gitId":"AhQuanz"},"content":"**Remove Cheese** | `removecheese CHEESE_INDEX` \u003cbr\u003e Example: `removecheese 5`"},{"lineNumber":174,"author":{"gitId":"AhQuanz"},"content":"**Remove Customer**| `removecustomer p/PHONE_NUMBER` \u003cbr\u003e Example: `removecustomer p/65555555`"},{"lineNumber":175,"author":{"gitId":"weixue123"},"content":"**List Orders** | `listorder`"},{"lineNumber":176,"author":{"gitId":"weixue123"},"content":"**List Cheese** | `listcheese [t/CHEESE_TYPE]` \u003cbr\u003e e.g. `listcheese t/Mozzarella`"},{"lineNumber":177,"author":{"gitId":"daniellau88"},"content":"**List Customer** | `listcustomer`"},{"lineNumber":178,"author":{"gitId":"weixue123"},"content":"**Mark As Done** | `done INDEX` \u003cbr\u003e e.g. `done 2`"},{"lineNumber":179,"author":{"gitId":"daniellau88"},"content":"**Search** | `search n/NAME` \u003cbr\u003e e.g. `search n/Betty`"},{"lineNumber":180,"author":{"gitId":"daniellau88"},"content":"**Exit** | `exit`"}],"authorContributionMap":{"AhQuanz":17,"laurenlhy":9,"weixue123":41,"daniellau88":21,"-":89,"aaronsms":3}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"ecp -\u003e ec ++: index, editCustomerDescriptor"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"laurenlhy":1,"-":20}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"title: Cheese Inventory Management (CHIM)"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103-W16-2/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103-W16-2/tp/actions)"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103-W16-2/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103-W16-2/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"**Cheese Inventory Management (CHIM)** is a desktop CLI app for managing the inventory of a cheese making business."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"* If you are interested in using AddressBook, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"-"},"content":"* If you are interested about developing AddressBook, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":15,"aaronsms":4}},{"path":"docs/team/AhQuanz.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"---"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"title: Li Quan\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"---"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"## Project: Chesse Inventory Management (CHIM)"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"[Coming Soon]"}],"authorContributionMap":{"AhQuanz":8}},{"path":"docs/team/aaronsms.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"---"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"title: Aaron Saw\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"---"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"## Project: Chesse Inventory Management (CHIM)"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"[Coming Soon]"}],"authorContributionMap":{"aaronsms":8}},{"path":"docs/team/daniellau.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"---"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"title: Daniel Lau\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"---"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"## Project: Chesse Inventory Management (CHIM)"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"[Coming Soon]"}],"authorContributionMap":{"daniellau88":8}},{"path":"docs/team/laurenlhy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"---"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"title: Lauren Lee\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"---"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"## Project: Cheese Inventory Management (CHIM)"}],"authorContributionMap":{"laurenlhy":6}},{"path":"docs/team/weixue123.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"weixue123"},"content":"---"},{"lineNumber":2,"author":{"gitId":"weixue123"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"weixue123"},"content":"title: Wei Xue Ng\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"weixue123"},"content":"---"},{"lineNumber":5,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":6,"author":{"gitId":"weixue123"},"content":"## Project: Chesse Inventory Management (CHIM)"},{"lineNumber":7,"author":{"gitId":"weixue123"},"content":""},{"lineNumber":8,"author":{"gitId":"weixue123"},"content":"[Coming Soon]"}],"authorContributionMap":{"weixue123":8}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":" * Changes the remark of an existing customer in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47)."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the customer identified \""},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"            + \"by the index number used in the last customer listing. \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\""},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\""},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"```"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user."},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Make the command accept parameters"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":92,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":94,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private final String remark;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"     * @param index of the customer in the filtered customer list to edit the remark"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"     * @param remark of the customer to be updated to"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":"```"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-34ace715a8a8d2e5a66e71289f017b47) after you are done."},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"### Parse user input"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":151,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":152,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"},{"lineNumber":153,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the"},{"lineNumber":154,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string."},{"lineNumber":155,"author":{"gitId":"-"},"content":" *"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"},{"lineNumber":158,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * arguments"},{"lineNumber":161,"author":{"gitId":"-"},"content":" */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"```"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":169,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":170,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}."},{"lineNumber":171,"author":{"gitId":"-"},"content":" */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));"},{"lineNumber":176,"author":{"gitId":"-"},"content":"}"},{"lineNumber":177,"author":{"gitId":"-"},"content":"```"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":184,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"```"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user."},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below."},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":195,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    requireNonNull(args);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    Index index;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    try {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"}"},{"lineNumber":212,"author":{"gitId":"-"},"content":"```"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample"},{"lineNumber":221,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-fc19ecee89c3732a62fbc8c840250508)."},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Add `Remark` to the model"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"laurenlhy"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of customer data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the customer’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a customer."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"### Add a new `Remark` class"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"laurenlhy"},"content":"Create a new `Remark` in `seedu.address.model.customer`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-af2f075d24dfcd333876f0fbce321f25). Note how `Remark` has no constrains and thus does not require input"},{"lineNumber":232,"author":{"gitId":"-"},"content":"validation."},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"### Make use of `Remark`"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes."},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"laurenlhy"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each customer."},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"Simply add the following to [`seedu.address.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-0c6b6abcfac8c205e075294f25e851fe)."},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":247,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":248,"author":{"gitId":"-"},"content":"private Label remark;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"```"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later."},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-12580431f55d7880578aa4c16f249e71)."},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"},{"lineNumber":260,"author":{"gitId":"-"},"content":"```"},{"lineNumber":261,"author":{"gitId":"-"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:"},{"lineNumber":263,"author":{"gitId":"-"},"content":""},{"lineNumber":264,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field"},{"lineNumber":267,"author":{"gitId":"-"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"},{"lineNumber":269,"author":{"gitId":"-"},"content":""},{"lineNumber":270,"author":{"gitId":"-"},"content":"### Modify `Person`"},{"lineNumber":271,"author":{"gitId":"-"},"content":""},{"lineNumber":272,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition."},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"### Update other usages of `Person`"},{"lineNumber":275,"author":{"gitId":"-"},"content":""},{"lineNumber":276,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"},{"lineNumber":277,"author":{"gitId":"-"},"content":""},{"lineNumber":278,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."},{"lineNumber":281,"author":{"gitId":"-"},"content":""},{"lineNumber":282,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"## Updating Storage"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!"},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)"},{"lineNumber":300,"author":{"gitId":"-"},"content":"to see what the changes entail."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"## Finalizing the UI"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":311,"author":{"gitId":"laurenlhy"},"content":"public PersonCard(Person customer, int displayedIndex) {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    //..."},{"lineNumber":313,"author":{"gitId":"laurenlhy"},"content":"    remark.setText(customer.getRemark().value);"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":"```"},{"lineNumber":316,"author":{"gitId":"-"},"content":""},{"lineNumber":317,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Putting everything together"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps."},{"lineNumber":322,"author":{"gitId":"-"},"content":""},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and"},{"lineNumber":326,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`."},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":331,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":332,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//..."},{"lineNumber":335,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":341,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"laurenlhy"},"content":"        Person customerToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":344,"author":{"gitId":"laurenlhy"},"content":"        Person editedCustomer \u003d new Person(customerToEdit.getName(), customerToEdit.getPhone(), customerToEdit.getEmail(),"},{"lineNumber":345,"author":{"gitId":"laurenlhy"},"content":"                customerToEdit.getAddress(), remark, customerToEdit.getTags());"},{"lineNumber":346,"author":{"gitId":"-"},"content":""},{"lineNumber":347,"author":{"gitId":"laurenlhy"},"content":"        model.setPerson(customerToEdit, editedCustomer);"},{"lineNumber":348,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"laurenlhy"},"content":"        return new CommandResult(generateSuccessMessage(editedCustomer));"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":352,"author":{"gitId":"-"},"content":""},{"lineNumber":353,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":354,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether the remark is added to or removed from"},{"lineNumber":355,"author":{"gitId":"laurenlhy"},"content":"     * {@code customerToEdit}."},{"lineNumber":356,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"laurenlhy"},"content":"    private String generateSuccessMessage(Person customerToEdit) {"},{"lineNumber":358,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"},{"lineNumber":359,"author":{"gitId":"laurenlhy"},"content":"        return String.format(message, customerToEdit);"},{"lineNumber":360,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":361,"author":{"gitId":"-"},"content":"```"},{"lineNumber":362,"author":{"gitId":"-"},"content":""},{"lineNumber":363,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)"},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"## Writing tests"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior."},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Automatically generating tests"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be"},{"lineNumber":376,"author":{"gitId":"-"},"content":"`execute_filteredList_success`."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-d749de38392f7ea504da7824641ba8d9)."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":393,"author":{"gitId":"-"},"content":""},{"lineNumber":394,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook."}],"authorContributionMap":{"laurenlhy":18,"-":376}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on AddressBook, you will most likely find that some features and fields that are no longer necessary. In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"In this tutorial, we’ll do exactly just that and remove the `address` field from `Person`."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Safely deleting `Address`"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Fortunately, IntelliJ IDEA provides a robust refactoring tool that can identify *most* usages. Let’s try to use it as much as we can."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"### Assisted refactoring"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"The `address` field in `Person` is actually an instance of the `seedu.address.model.customer.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry. You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor."},{"lineNumber":47,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"### Manual refactoring"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`)."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"**`PersonCard.java`**"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"``` java"},{"lineNumber":66,"author":{"gitId":"-"},"content":"..."},{"lineNumber":67,"author":{"gitId":"-"},"content":"@FXML"},{"lineNumber":68,"author":{"gitId":"-"},"content":"private Label address;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"..."},{"lineNumber":70,"author":{"gitId":"-"},"content":"```"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` xml"},{"lineNumber":75,"author":{"gitId":"-"},"content":"..."},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"..."},{"lineNumber":80,"author":{"gitId":"-"},"content":"```"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass."},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"## Tidying up"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"```json"},{"lineNumber":93,"author":{"gitId":"-"},"content":"{"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"  \"customers\": [ {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":96,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":97,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":98,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":99,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field."}],"authorContributionMap":{"laurenlhy":2,"-":101}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\""},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write."},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"![Architecture sequence diagram from the developer"},{"lineNumber":24,"author":{"gitId":"-"},"content":"guide](../images/ArchitectureSequenceDiagram.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Note how the diagram shows only how the execution flows *between* the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram succeeds in informing the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Setting a break point"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in `seedu.address.ui.CommandBox.CommandExecutor`."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"![Using the `Search for target by name` feature. `Navigate` \\\u003e `Symbol`.](../images/tracing/Execute.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"A quick look at the class confirms that this is indeed close to what we’re looking for. However, it is just an `Interface`. Let’s delve further and find the implementation of the interface by using the `Find Usages` feature in IntelliJ IDEA."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below."},{"lineNumber":46,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Tracing the execution path"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to jot down what happens inside the component and where the execution transfers to another component."},{"lineNumber":55,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"1. Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and look something like this:\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"1. Use the `Show execution point` feature to jump to the line of code that we stopped at:\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"1. `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s `Step in` into that method call:\u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()`. Let’s take a look at the body of the method and annotate what we can deduce."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":77,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here."},{"lineNumber":93,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"1. `Step over` the logging code since it is of no interest to us now. ![StepOver](../images/tracing/StepOver.png)"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. `Step into` the line where user input in parsed from a String to a Command."},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    **`AddressBookParser\\#parseCommand()`**"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":113,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":114,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":116,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"1. `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. Stepping into the `switch`, we obviously stop at **`AddressBookParser\\#parseCommand()`.**"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":127,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    ..."},{"lineNumber":130,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:** Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them\\!"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   \u003c/div\u003e"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the `Variable` tool window.\u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far matches with the diagram?\u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. Now let’s see what happens when we call `command#execute()`\\!"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"   **`EditCommand\\#execute()`:**"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":152,"author":{"gitId":"-"},"content":"   @Override"},{"lineNumber":153,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"       ..."},{"lineNumber":155,"author":{"gitId":"laurenlhy"},"content":"       Person customerToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":156,"author":{"gitId":"laurenlhy"},"content":"       Person editedCustomer \u003d createEditedPerson(customerToEdit, editCustomerDescriptor);"},{"lineNumber":157,"author":{"gitId":"laurenlhy"},"content":"       if (!customerToEdit.isSamePerson(editedCustomer) \u0026\u0026 model.hasPerson(editedCustomer)) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"       }"},{"lineNumber":160,"author":{"gitId":"laurenlhy"},"content":"       model.setPerson(customerToEdit, editedCustomer);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":162,"author":{"gitId":"laurenlhy"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedCustomer));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to `model`."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"1. We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    `JsonAddressBook#saveAddressBook()`."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"1. Again, it appears that the heavy lifting is delegated. Let’s take a look at `JsonSerializableAddressBook`\u0027s constructor."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook\\#JsonSerializableAddressBook()`:**"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ``` java"},{"lineNumber":176,"author":{"gitId":"-"},"content":"   /**"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":178,"author":{"gitId":"-"},"content":"    *"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    * @param source future changes to this will not affect the created"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    * {@code JsonSerializableAddressBook}."},{"lineNumber":181,"author":{"gitId":"-"},"content":"    */"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":183,"author":{"gitId":"laurenlhy"},"content":"       customers.addAll("},{"lineNumber":184,"author":{"gitId":"-"},"content":"           source.getPersonList()"},{"lineNumber":185,"author":{"gitId":"-"},"content":"                 .stream()"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                 .map(JsonAdaptedPerson::new)"},{"lineNumber":187,"author":{"gitId":"-"},"content":"                 .collect(Collectors.toList()));"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`."},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"1. We can continue to step through until we return to `MainWindow#executeCommand()`."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"    **`ResultDisplay\\#setFeedbackToUser()`**"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    ``` java"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    ```"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"1. Finally, we step through until we reach the end of"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    `MainWindow#executeCommand()`."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"## Conclusion"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to"},{"lineNumber":212,"author":{"gitId":"-"},"content":"the result being displayed to the user. From this tutorial, you learned"},{"lineNumber":213,"author":{"gitId":"-"},"content":"more about the inner workings of AddressBook and how the various"},{"lineNumber":214,"author":{"gitId":"-"},"content":"components mesh together to form one cohesive product."},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your"},{"lineNumber":217,"author":{"gitId":"-"},"content":"execution path tracing. In some cases, you can do further tracing for"},{"lineNumber":218,"author":{"gitId":"-"},"content":"the given commands to find exactly what happens."},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown(if any), where"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"    4.  `edit 1`"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    enhancements to the application?"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time"},{"lineNumber":243,"author":{"gitId":"-"},"content":""},{"lineNumber":244,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"    4.  Add a new command"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book"}],"authorContributionMap":{"laurenlhy":6,"-":244}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX \u003d \"The customer index provided is invalid\";"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_CUSTOMERS_LISTED_OVERVIEW \u003d \"%1$d customers listed!\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":48}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        return model.getFilteredCustomerList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":3,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":" * Adds a customer to the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to the address book. \""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New customer added: %1$s\";"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the address book\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"    private final Customer toAdd;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"     * Creates an AddCommand to add the specified {@code Customer}"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"    public AddCommand(Customer customer) {"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(customer);"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"        toAdd \u003d customer;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        if (model.hasCustomer(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        model.addCustomer(toAdd);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"    public Customer getToAdd() {"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"        return toAdd;"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":13,"daniellau88":4,"-":54}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":" * Deletes a customer identified using it\u0027s displayed index from the address book."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"            + \": Deletes the customer identified by the index number used in the displayed customer list.\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_DELETE_CUSTOMER_SUCCESS \u003d \"Deleted Customer: %1$s\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"        Customer customerToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"        model.deleteCustomer(customerToDelete);"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":9,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":" * Edits the details of an existing customer in the address book."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the customer identified \""},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"            + \"by the index number used in the displayed customer list. \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_EDIT_CUSTOMER_SUCCESS \u003d \"Edited Customer: %1$s\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"This customer already exists in the address book.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"    protected final Index index;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    protected final EditCustomerDescriptor editCustomerDescriptor;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"     * @param index of the customer in the filtered customer list to edit"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"     * @param editCustomerDescriptor details to edit the customer with"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"    public EditCommand(Index index, EditCustomerDescriptor editCustomerDescriptor) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(editCustomerDescriptor);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"        this.editCustomerDescriptor \u003d new EditCustomerDescriptor(editCustomerDescriptor);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e lastShownList \u003d model.getFilteredCustomerList();"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"        Customer customerToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"        Customer editedCustomer \u003d createEditedCustomer(customerToEdit, editCustomerDescriptor);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"        if (!customerToEdit.isSameCustomer(editedCustomer) \u0026\u0026 model.hasCustomer(editedCustomer)) {"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"        model.setCustomer(customerToEdit, editedCustomer);"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"     * Creates and returns a {@code Customer} with the details of {@code customerToEdit}"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"     * edited with {@code editCustomerDescriptor}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"    private static Customer createEditedCustomer(Customer customerToEdit,"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"                                                 EditCustomerDescriptor editCustomerDescriptor) {"},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":"        assert customerToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"        Name updatedName \u003d editCustomerDescriptor.getName().orElse(customerToEdit.getName());"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        Phone updatedPhone \u003d editCustomerDescriptor.getPhone().orElse(customerToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"laurenlhy"},"content":"        Email updatedEmail \u003d editCustomerDescriptor.getEmail().orElse(customerToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"laurenlhy"},"content":"        Address updatedAddress \u003d editCustomerDescriptor.getAddress().orElse(customerToEdit.getAddress());"},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"        Set\u003cTag\u003e updatedTags \u003d editCustomerDescriptor.getTags().orElse(customerToEdit.getTags());"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"        CustomerId updatedId \u003d editCustomerDescriptor.getId().orElse(customerToEdit.getId());"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"        return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedId);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 editCustomerDescriptor.equals(e.editCustomerDescriptor);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"     * Stores the details to edit the customer with. Each non-empty field value will replace the"},{"lineNumber":128,"author":{"gitId":"laurenlhy"},"content":"     * corresponding field value of the customer."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"laurenlhy"},"content":"    public static class EditCustomerDescriptor {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":136,"author":{"gitId":"daniellau88"},"content":"        private CustomerId customerId;"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"        public EditCustomerDescriptor() {}"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":143,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":144,"author":{"gitId":"laurenlhy"},"content":"        public EditCustomerDescriptor(EditCustomerDescriptor toCopy) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":150,"author":{"gitId":"daniellau88"},"content":"            setId(toCopy.customerId);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":155,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"daniellau88"},"content":"        public void setId(CustomerId customerId) {"},{"lineNumber":193,"author":{"gitId":"daniellau88"},"content":"            this.customerId \u003d customerId;"},{"lineNumber":194,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":196,"author":{"gitId":"daniellau88"},"content":"        public Optional\u003cCustomerId\u003e getId() {"},{"lineNumber":197,"author":{"gitId":"daniellau88"},"content":"            return Optional.ofNullable(customerId);"},{"lineNumber":198,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":203,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":209,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":210,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":211,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":212,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"-"},"content":""},{"lineNumber":224,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":225,"author":{"gitId":"laurenlhy"},"content":"            if (!(other instanceof EditCustomerDescriptor)) {"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":230,"author":{"gitId":"laurenlhy"},"content":"            EditCustomerDescriptor e \u003d (EditCustomerDescriptor) other;"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"daniellau88"},"content":"            return getId().equals(e.getId())"},{"lineNumber":233,"author":{"gitId":"daniellau88"},"content":"                    \u0026\u0026 getName().equals(e.getName())"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":43,"daniellau88":17,"-":180}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"        model.updateFilteredCustomerList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"                String.format(Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW, model.getFilteredCustomerList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":3,"-":39}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"        model.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        Customer customer \u003d new Customer(name, phone, email, address, tagList);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        return new AddCommand(customer);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":7,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand.EditCustomerDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor editCustomerDescriptor \u003d new EditCustomerDescriptor();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"            editCustomerDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"            editCustomerDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"            editCustomerDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"            editCustomerDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editCustomerDescriptor::setTags);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"        if (!editCustomerDescriptor.isAnyFieldEdited()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        return new EditCommand(index, editCustomerDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":9,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":4,"-":120}},{"path":"src/main/java/seedu/address/model/AbstractDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import java.util.Locale;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public abstract class AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        \"Dates should be given in the following formats (dd/MM/yyyy or yyyy-MM-dd or MMM d yyyy)\";"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public static final DateTimeFormatter INPUT_DATE_TIME_FORMATTER \u003d new DateTimeFormatterBuilder()"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"        .appendPattern(\"[d/M/yyyy HH:mm]\")"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[d/M/yyyy]\")"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[yyyy-M-d HH:mm]\")"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[yyyy-M-d]\")"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[MMM d yyyy HH:mm]\")"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        .appendPattern(\"[MMM d yyyy]\")"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        .toFormatter(Locale.ENGLISH);"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    public static final DateTimeFormatter TO_STRING_FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d HH:mm\");"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public final LocalDateTime value;"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code Date}."},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid String date."},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    public AbstractDate(String date) {"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        requireNonNull(date);"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        LocalDateTime dateTime \u003d parseDate(date);"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        checkArgument(dateTime !\u003d null, MESSAGE_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        value \u003d dateTime;"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"     * @param dateText A String containing date"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"     * @return null if date is invalid otherwise a LocalDateTime object of String date"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"    public static LocalDateTime parseDate(String dateText) {"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"            return LocalDateTime.parse(dateText, INPUT_DATE_TIME_FORMATTER);"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"            return null;"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        return value.format(TO_STRING_FORMATTER);"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"            || (other instanceof AbstractDate // instanceof handles nulls"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 value.equals(((AbstractDate) other).value)); // state check"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"    public int hashCode() {"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        return value.hashCode();"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":1,"daniellau88":72}},{"path":"src/main/java/seedu/address/model/AbstractId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public abstract class AbstractId\u003cU\u003e implements Comparable\u003cAbstractId\u003e {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"ID must be a positive number.\";"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    public final int value;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code Id}."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"     * @param id A valid id."},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public AbstractId(int id) {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidId(id), MESSAGE_CONSTRAINTS);"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        value \u003d id;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"     * Returns if a given integer is a valid quantity."},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    public static boolean isValidId(int id) {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        return id \u003e 0;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        return Integer.toString(value);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"            || (other instanceof AbstractId // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 value \u003d\u003d ((AbstractId) other).value); // state check"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    public int compareTo(AbstractId id) {"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        if (value \u003e id.value) {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"            return 1;"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        } else if (value \u003c id.value) {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"            return -1;"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        return 0;"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":48}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.UniqueCustomerList;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"import seedu.address.model.order.UniqueOrderList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":" * Duplicates are not allowed (by .isSameCustomer comparison)"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"    private final UniqueCustomerList customers;"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"    private final UniqueOrderList orders;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"        customers \u003d new UniqueCustomerList();"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"        orders \u003d new UniqueOrderList();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"     * Replaces the contents of the customer list with {@code customers}."},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"     * {@code customers} must not contain duplicate customers."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers(List\u003cCustomer\u003e customers) {"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"        this.customers.setCustomers(customers);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"     * Replaces the contents of the orders list with {@code orders}."},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"     * {@code orders} must not contain duplicate customers."},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"    public void setOrders(List\u003cOrder\u003e orders) {"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        this.orders.setOrders(orders);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        setCustomers(newData.getCustomerList());"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        setOrders(newData.getOrderList());"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    //// order-level operations"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"     * Returns true if a orders with the same identity as {@code orders} exists in the address book."},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    public boolean hasOrder(Order order) {"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"        requireNonNull(order);"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"        return orders.contains(order);"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"     * Adds a order to the address book."},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"     * The order must not already exist in the address book."},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"    public void addOrder(Order o) {"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        orders.add(o);"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"     * Replaces the given order {@code target} in the list with {@code editedOrder}."},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"     * The order identity of {@code editedOrder} must not be the same as another existing customer"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"     * in the address book."},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"    public void setOrder(Order target, Order editedOrder) {"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"        requireNonNull(editedOrder);"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"        orders.setOrder(target, editedOrder);"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"    public void removeOrder(Order key) {"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"        orders.remove(key);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"    //// customer-level operations"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"     * Returns true if a customer with the same identity as {@code customer} exists in the address book."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"laurenlhy"},"content":"    public boolean hasCustomer(Customer customer) {"},{"lineNumber":116,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(customer);"},{"lineNumber":117,"author":{"gitId":"laurenlhy"},"content":"        return customers.contains(customer);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"laurenlhy"},"content":"     * Adds a customer to the address book."},{"lineNumber":122,"author":{"gitId":"laurenlhy"},"content":"     * The customer must not already exist in the address book."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"    public void addCustomer(Customer p) {"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"        customers.add(p);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":"     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":131,"author":{"gitId":"laurenlhy"},"content":"     * The customer identity of {@code editedCustomer} must not be the same as another existing customer"},{"lineNumber":132,"author":{"gitId":"laurenlhy"},"content":"     * in the address book."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer(Customer target, Customer editedCustomer) {"},{"lineNumber":135,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(editedCustomer);"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"laurenlhy"},"content":"        customers.setCustomer(target, editedCustomer);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"laurenlhy"},"content":"    public void removeCustomer(Customer key) {"},{"lineNumber":145,"author":{"gitId":"laurenlhy"},"content":"        customers.remove(key);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":152,"author":{"gitId":"laurenlhy"},"content":"        return customers.asUnmodifiableObservableList().size() + \" customers\";"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":157,"author":{"gitId":"laurenlhy"},"content":"    public ObservableList\u003cCustomer\u003e getCustomerList() {"},{"lineNumber":158,"author":{"gitId":"laurenlhy"},"content":"        return customers.asUnmodifiableObservableList();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":162,"author":{"gitId":"daniellau88"},"content":"    public ObservableList\u003cOrder\u003e getOrderList() {"},{"lineNumber":163,"author":{"gitId":"daniellau88"},"content":"        return orders.asUnmodifiableObservableList();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":169,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":170,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 customers.equals(((AddressBook) other).customers));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":175,"author":{"gitId":"laurenlhy"},"content":"        return customers.hashCode();"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"AhQuanz":3,"laurenlhy":32,"daniellau88":49,"-":93}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"     * Returns true if a customer with the same identity as {@code customer} exists in the address book."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"    boolean hasCustomer(Customer customer);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"     * Deletes the given customer."},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"     * The customer must exist in the address book."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"    void deleteCustomer(Customer target);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"     * Adds the given customer."},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"     * {@code customer} must not already exist in the address book."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"    void addCustomer(Customer customer);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"     * Replaces the given customer {@code target} with {@code editedCustomer}."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"     * the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"    void setCustomer(Customer target, Customer editedCustomer);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":"    /** Returns an unmodifiable view of the filtered customer list */"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":18,"-":70}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    private final FilteredList\u003cCustomer\u003e filteredCustomers;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        filteredCustomers \u003d new FilteredList\u003c\u003e(this.addressBook.getCustomerList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"    public boolean hasCustomer(Customer customer) {"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(customer);"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"        return addressBook.hasCustomer(customer);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"    public void deleteCustomer(Customer target) {"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        addressBook.removeCustomer(target);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"    public void addCustomer(Customer customer) {"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":"        addressBook.addCustomer(customer);"},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer(Customer target, Customer editedCustomer) {"},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"        requireAllNonNull(target, editedCustomer);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"laurenlhy"},"content":"        addressBook.setCustomer(target, editedCustomer);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"laurenlhy"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"laurenlhy"},"content":"     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"laurenlhy"},"content":"    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":"        return filteredCustomers;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":"        filteredCustomers.setPredicate(predicate);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":148,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":21,"-":130}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"    ObservableList\u003cCustomer\u003e getCustomerList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    ObservableList\u003cOrder\u003e getOrderList();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"daniellau88":6,"-":16}},{"path":"src/main/java/seedu/address/model/cheese/Cheese.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese in the Cheese Inventory Management System (CHIM)"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class Cheese {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    // Identity fields"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    // Primary key for Cheese"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    private final CheeseId cheeseId;"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    private final CheeseType cheeseType;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    // Data fields"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    private final ManufactureDate manufactureDate;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private final MaturityDate maturityDate;"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    private final ExpiryDate expiryDate;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    public Cheese(CheeseType cheeseType, ManufactureDate manufactureDate, MaturityDate maturityDate,"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"                  ExpiryDate expiryDate) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        this(cheeseType, manufactureDate, maturityDate, expiryDate, CheeseId.getNextId());"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public Cheese(CheeseType cheeseType, ManufactureDate manufactureDate, MaturityDate maturityDate,"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"                  ExpiryDate expiryDate, CheeseId cheeseId) {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        requireAllNonNull(cheeseType, manufactureDate, maturityDate, expiryDate);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        this.cheeseType \u003d cheeseType;"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        this.manufactureDate \u003d manufactureDate;"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        this.maturityDate \u003d maturityDate;"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        this.expiryDate \u003d expiryDate;"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        this.cheeseId \u003d cheeseId;"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    public CheeseType getCheeseType() {"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        return cheeseType;"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    public ManufactureDate getManufactureDate() {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        return manufactureDate;"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    public MaturityDate getMaturityDate() {"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        return maturityDate;"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"    public ExpiryDate getExpiryDate() {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"        return expiryDate;"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    public CheeseId getCheeseId() {"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        return cheeseId;"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"     * Returns true if both cheeses have the same name."},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"     * This defines a weaker notion of equality between two cheeses."},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    public boolean isSameCheese(Cheese otherCheese) {"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"        if (otherCheese \u003d\u003d this) {"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"            return true;"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"        return otherCheese !\u003d null"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 otherCheese.cheeseId.equals(cheeseId);"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"     * Returns true if both cheeses have the same identity and data fields."},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"     * This defines a stronger notion of equality between two cheeses."},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"            return true;"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        if (!(other instanceof Cheese)) {"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        Cheese otherCheese \u003d (Cheese) other;"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        return otherCheese.getCheeseId().equals(getCheeseId())"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 otherCheese.getCheeseType().equals(getCheeseType())"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 otherCheese.getManufactureDate().equals(getManufactureDate())"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 otherCheese.getMaturityDate().equals(getMaturityDate())"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 otherCheese.getExpiryDate().equals(getExpiryDate());"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":3,"daniellau88":91}},{"path":"src/main/java/seedu/address/model/cheese/CheeseId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractId;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public class CheeseId extends AbstractId\u003cCheeseId\u003e {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    private static int nextId \u003d 1;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code CheeseId}."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"     * @param id A valid id."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public CheeseId(int id) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        super(id);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        updateNextId(this);"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public static CheeseId getNextId() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        return new CheeseId(nextId);"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private static void updateNextId(CheeseId otherId) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        if (nextId \u003c\u003d otherId.value) {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"            nextId \u003d otherId.value + 1;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":27}},{"path":"src/main/java/seedu/address/model/cheese/CheeseType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.util.HashMap;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese\u0027s type in the Cheese Inventory Management System (CHIM)."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"public class CheeseType {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Cheese type can take any values, and it should not be blank\";"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\w]+[\\\\s\u0026\\\\w+]*\";"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    private static final Map\u003cString, CheeseType\u003e typeToCheeseMap \u003d new HashMap\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code CheeseType}."},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"     * @param type A valid cheese type."},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    private CheeseType(String type) {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        requireNonNull(type);"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"        checkArgument(isValidType(type), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        value \u003d type;"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"    public static boolean isValidType(String test) {"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    public static CheeseType getCheeseType(String type) {"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        if (typeToCheeseMap.containsKey(type)) {"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"            return typeToCheeseMap.get(type);"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        CheeseType newCheeseType \u003d new CheeseType(type);"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        typeToCheeseMap.put(type, newCheeseType);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        return newCheeseType;"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"    public static Map\u003cString, CheeseType\u003e getReadOnlyCheeseTypeMap() {"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        return Collections.unmodifiableMap(typeToCheeseMap);"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        return value;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"            || (other instanceof CheeseType // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 value.equals(((CheeseType) other).value)); // state check"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        return value.hashCode();"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":10,"daniellau88":59}},{"path":"src/main/java/seedu/address/model/cheese/ExpiryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese\u0027s expiry date in the Cheese Inventory Management System (CHIM)."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class ExpiryDate extends AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code ExpiryDate}."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid expiry date."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public ExpiryDate(String date) {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        super(date);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidManufactureDate(this.value), MESSAGE_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isValidManufactureDate(LocalDateTime value) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":28}},{"path":"src/main/java/seedu/address/model/cheese/ManufactureDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese\u0027s manufacture date in the Cheese Inventory Management System (CHIM)."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class ManufactureDate extends AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code ManufactureDate}."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid manufacture date."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public ManufactureDate(String date) {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        super(date);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidManufactureDate(this.value), MESSAGE_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isValidManufactureDate(LocalDateTime value) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":28}},{"path":"src/main/java/seedu/address/model/cheese/MaturityDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese\u0027s maturity date in the Cheese Inventory Management System (CHIM)."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class MaturityDate extends AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code MaturityDate}."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid maturity date."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public MaturityDate(String date) {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        super(date);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidMaturityDate(this.value), MESSAGE_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isValidMaturityDate(LocalDateTime value) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":28}},{"path":"src/main/java/seedu/address/model/customer/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":" * Represents a Customer\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":55}},{"path":"src/main/java/seedu/address/model/customer/Customer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":" * Represents a Customer in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"public class Customer {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    private final CustomerId customerId;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, CustomerId customerId) {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        requireAllNonNull(name, phone, email, address, tags, customerId);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d customerId;"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        this(name, phone, email, address, tags, CustomerId.getNextId());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"    public CustomerId getId() {"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"        return customerId;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"    public boolean isSameCustomer(Customer otherCustomer) {"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        if (otherCustomer \u003d\u003d this) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":"        return otherCustomer !\u003d null"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherCustomer.getId().equals(getId())"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 otherCustomer.getName().equals(getName());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"        if (!(other instanceof Customer)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        Customer otherCustomer \u003d (Customer) other;"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"        return otherCustomer.getId().equals(getId())"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherCustomer.getName().equals(getName())"},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 otherCustomer.getPhone().equals(getPhone())"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 otherCustomer.getAddress().equals(getAddress())"},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 otherCustomer.getTags().equals(getTags());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":13,"daniellau88":12,"-":108}},{"path":"src/main/java/seedu/address/model/customer/CustomerId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractId;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public class CustomerId extends AbstractId\u003cCustomerId\u003e {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    private static int nextId \u003d 1;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code CustomerId}."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"     * @param id A valid id."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    protected CustomerId(int id) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        super(id);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public static CustomerId getNextId() {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        return getNextId(nextId);"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public static CustomerId getNextId(int id) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        CustomerId result \u003d new CustomerId(id);"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        updateNextId(result);"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        return result;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    private static void updateNextId(CustomerId otherId) {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        if (nextId \u003c\u003d otherId.value) {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            // Do not increment ID if it is creating a stub object"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"            // Ensures that the tests will produce customer ids of the same value"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"            nextId \u003d otherId.value + 1;"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    // To be used by stub"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    protected static int getNextIdValue() {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        return nextId;"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":41}},{"path":"src/main/java/seedu/address/model/customer/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":" * Represents a Customer\u0027s email in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param email A valid email address."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Email(String email) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        value \u003d email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":65}},{"path":"src/main/java/seedu/address/model/customer/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":" * Represents a Customer\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":57}},{"path":"src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":" * Tests that a {@code Customer}\u0027s {@code Name} matches any of the keywords given."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"    public boolean test(Customer customer) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":5,"-":26}},{"path":"src/main/java/seedu/address/model/customer/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":" * Represents a Customer\u0027s phone number in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":51}},{"path":"src/main/java/seedu/address/model/customer/UniqueCustomerList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.exceptions.CustomerNotFoundException;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.exceptions.DuplicateCustomerException;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":" * A list of customers that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":" * A customer is considered unique by comparing using {@code Customer#isSameCustomer(Customer)}. As such, adding and"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":" * updating of customer uses Customer#isSameCustomer(Customer) for equality so as to ensure that the customer being"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":" * added or updated is unique in terms of identity in the UniqueCustomerList. However, the removal of a customer uses"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":" * Customer#equals(Object) so as to ensure that the customer with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":" *"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":" *"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":" * @see Customer#isSameCustomer(Customer)"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":" */"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"     * Returns true if the list contains an equivalent customer as the given argument."},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"    public boolean contains(Customer toCheck) {"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        return internalList.stream().anyMatch(toCheck::isSameCustomer);"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"     * Adds a customer to the list."},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"     * The customer must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"    public void add(Customer toAdd) {"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"            throw new DuplicateCustomerException();"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"     * Replaces the customer {@code target} in the list with {@code editedCustomer}."},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer(Customer target, Customer editedCustomer) {"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        requireAllNonNull(target, editedCustomer);"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"            throw new CustomerNotFoundException();"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        if (!target.isSameCustomer(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"            throw new DuplicateCustomerException();"},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        internalList.set(index, editedCustomer);"},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"     * Removes the equivalent customer from the list."},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"     * The customer must exist in the list."},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"    public void remove(Customer toRemove) {"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"            throw new CustomerNotFoundException();"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers(UniqueCustomerList replacement) {"},{"lineNumber":83,"author":{"gitId":"laurenlhy"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"     * Replaces the contents of this list with {@code customers}."},{"lineNumber":89,"author":{"gitId":"laurenlhy"},"content":"     * {@code customers} must not contain duplicate customers."},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers(List\u003cCustomer\u003e customers) {"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"        requireAllNonNull(customers);"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"        if (!customersAreUnique(customers)) {"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"            throw new DuplicateCustomerException();"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":97,"author":{"gitId":"laurenlhy"},"content":"        internalList.setAll(customers);"},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":100,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"laurenlhy"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":107,"author":{"gitId":"laurenlhy"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"laurenlhy"},"content":"    public Iterator\u003cCustomer\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"laurenlhy"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":112,"author":{"gitId":"laurenlhy"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"laurenlhy"},"content":"                || (other instanceof UniqueCustomerList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"laurenlhy"},"content":"                        \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":119,"author":{"gitId":"laurenlhy"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"laurenlhy"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"laurenlhy"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"     * Returns true if {@code customers} contains only unique customers."},{"lineNumber":126,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"    private boolean customersAreUnique(List\u003cCustomer\u003e customers) {"},{"lineNumber":128,"author":{"gitId":"laurenlhy"},"content":"        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":"            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"laurenlhy"},"content":"                if (customers.get(i).isSameCustomer(customers.get(j))) {"},{"lineNumber":131,"author":{"gitId":"laurenlhy"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"laurenlhy"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"laurenlhy"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"laurenlhy"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"laurenlhy"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"laurenlhy"},"content":"}"}],"authorContributionMap":{"laurenlhy":137}},{"path":"src/main/java/seedu/address/model/customer/exceptions/CustomerNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer.exceptions;"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":" * Signals that the operation is unable to find the specified customer."},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":" */"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"public class CustomerNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"laurenlhy":6}},{"path":"src/main/java/seedu/address/model/customer/exceptions/DuplicateCustomerException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer.exceptions;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"-"},"content":" */"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"public class DuplicateCustomerException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"    public DuplicateCustomerException() {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":3,"-":8}},{"path":"src/main/java/seedu/address/model/order/CompletedDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Represents an Order\u0027s completed date in the Cheese Inventory Management System (CHIM)."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class CompletedDate extends AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code CompletedDate}."},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid completed date."},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public CompletedDate(String date) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        super(date);"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidCompletedDate(this.value), MESSAGE_CONSTRAINTS);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public boolean isValidCompletedDate(LocalDateTime value) {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":27}},{"path":"src/main/java/seedu/address/model/order/Order.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.CheeseId;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.CheeseType;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":" * Represents a Order in the Cheese Inventory Management System (CHIM)."},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":" * Guarantees: details are present and not null, field values are validated."},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"public class Order {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    // Primary key for Order"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    private final OrderId orderId;"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    private final CheeseType orderCheeseType;"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private final Quantity quantity;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    private final CustomerId customerId;"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    // Data fields"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    private final OrderDate orderDate;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    private final CompletedDate completedDate;"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    // Set of cheese IDs for this order"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    private final Set\u003cCheeseId\u003e cheeses \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public Order(CheeseType cheeseType, Quantity quantity, OrderDate orderDate,"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"                 CompletedDate completedDate, CustomerId customerId) {"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        this(cheeseType, quantity, orderDate, completedDate, new HashSet\u003c\u003e(), customerId);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    public Order(CheeseType cheeseType, Quantity quantity, OrderDate orderDate, CompletedDate completedDate,"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"                 Set\u003cCheeseId\u003e cheeses, CustomerId customerId) {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        this(cheeseType, quantity, orderDate, completedDate, cheeses, OrderId.getNextId(), customerId);"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"    public Order(CheeseType cheeseType, Quantity quantity, OrderDate orderDate, CompletedDate completedDate,"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"                 OrderId orderId, CustomerId customerId) {"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        this(cheeseType, quantity, orderDate, completedDate, new HashSet\u003c\u003e(), orderId, customerId);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"     * Every field must be present and not null."},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    public Order(CheeseType cheeseType, Quantity quantity, OrderDate orderDate, CompletedDate completedDate,"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"                 Set\u003cCheeseId\u003e cheeses, OrderId orderId, CustomerId customerId) {"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"        requireAllNonNull(orderDate, cheeseType, cheeses, customerId);"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        this.orderCheeseType \u003d cheeseType;"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        this.quantity \u003d quantity;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        this.orderDate \u003d orderDate;"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        this.completedDate \u003d completedDate;"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"        this.orderId \u003d orderId;"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d customerId;"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        this.cheeses.addAll(cheeses);"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    public CheeseType getCheeseType() {"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        return orderCheeseType;"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"    public Quantity getQuantity() {"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"        return quantity;"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    public OrderDate getOrderDate() {"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"        return orderDate;"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"    public CompletedDate getCompletedDate() {"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        return completedDate;"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"    public OrderId getOrderId() {"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"        return orderId;"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"    public CustomerId getCustomerId() {"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"        return customerId;"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"     * Returns an immutable Cheese Ids set, which throws {@code UnsupportedOperationException}"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"     * if modification is attempted."},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"    public Set\u003cCheeseId\u003e getCheeses() {"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"        return Collections.unmodifiableSet(cheeses);"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"     * Returns true if both orders have the same name."},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"     * This defines a weaker notion of equality between two orders."},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"    public boolean isSameOrder(Order otherOrder) {"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"        if (otherOrder \u003d\u003d this) {"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"            return true;"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"        return otherOrder !\u003d null"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.orderId.equals(orderId)"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.customerId.equals(customerId);"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":108,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"daniellau88"},"content":"     * Returns true if both orders have the same identity and data fields."},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"     * This defines a stronger notion of equality between two orders."},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"            return true;"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":"        if (!(other instanceof Order)) {"},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":"            return false;"},{"lineNumber":120,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":122,"author":{"gitId":"daniellau88"},"content":"        Order otherOrder \u003d (Order) other;"},{"lineNumber":123,"author":{"gitId":"daniellau88"},"content":"        return otherOrder.getOrderId().equals(getOrderId())"},{"lineNumber":124,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getCustomerId().equals(getCustomerId())"},{"lineNumber":125,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getCheeseType().equals(getCheeseType())"},{"lineNumber":126,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getQuantity().equals(getQuantity())"},{"lineNumber":127,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getOrderDate().equals(getOrderDate())"},{"lineNumber":128,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getCompletedDate().equals(getCompletedDate())"},{"lineNumber":129,"author":{"gitId":"daniellau88"},"content":"                \u0026\u0026 otherOrder.getCheeses().equals(getCheeses());"},{"lineNumber":130,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":3,"daniellau88":128}},{"path":"src/main/java/seedu/address/model/order/OrderDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":" * Represents an Order\u0027s order date in the Cheese Inventory Management System (CHIM)."},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class OrderDate extends AbstractDate {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code OrderDate}."},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     * @param date A valid order date."},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public OrderDate(String date) {"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        super(date);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidOrderDate(this.value), MESSAGE_CONSTRAINTS);"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public boolean isValidOrderDate(LocalDateTime value) {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":28}},{"path":"src/main/java/seedu/address/model/order/OrderId.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.AbstractId;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public class OrderId extends AbstractId\u003cOrderId\u003e {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    private static int nextId \u003d 1;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code OrderId}."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"     * @param id A valid id."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    public OrderId(int id) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        super(id);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        updateNextId(this);"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public static OrderId getNextId() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        return new OrderId(nextId);"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private static void updateNextId(OrderId otherId) {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        if (nextId \u003c\u003d otherId.value) {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"            nextId \u003d otherId.value + 1;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":27}},{"path":"src/main/java/seedu/address/model/order/Quantity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":" * Represents an Order\u0027s quantity in the Cheese Inventory Management System (CHIM)."},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidQuantity(int)}"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class Quantity {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Quantity must be a positive number.\";"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public final int value;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"     * Constructs an {@code Quantity}."},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"     * @param quantity A valid quantity."},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public Quantity(int quantity) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        value \u003d quantity;"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"     * Returns if a given integer is a valid quantity."},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    public static boolean isValidQuantity(int quantity) {"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        return quantity \u003e 0;"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        return Integer.toString(value);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"            || (other instanceof Quantity // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"            \u0026\u0026 value \u003d\u003d ((Quantity) other).value); // state check"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":42}},{"path":"src/main/java/seedu/address/model/order/UniqueOrderList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"import seedu.address.model.order.exceptions.DuplicateOrderException;"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"import seedu.address.model.order.exceptions.OrderNotFoundException;"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":" * A list of Order that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":" * A Order is considered unique by comparing using {@code Order#isSameOrder(Order)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":" * persons uses Order#isSameOrder(Order) for equality so as to ensure that the Order being added or updated is"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":" * unique in terms of identity in the UniqueOrderList. However, the removal of a Order uses Order#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":" * as to ensure that the Order with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":" *"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":" *"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":" * @see Order#isSameOrder(Order)"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"public class UniqueOrderList implements Iterable\u003cOrder\u003e {"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"     * Returns true if the list contains an equivalent person as the given argument."},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"    public boolean contains(Order toCheck) {"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"        requireNonNull(toCheck);"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"        return internalList.stream().anyMatch(toCheck::isSameOrder);"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"     * Adds a Order to the list."},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"     * The person must not already exist in the list."},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"    public void add(Order toAdd) {"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"        requireNonNull(toAdd);"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"        if (contains(toAdd)) {"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"        internalList.add(toAdd);"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"     * Replaces the Order {@code target} in the list with {@code editedPerson}."},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"     * {@code target} must exist in the list."},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"     * The Order identity of {@code editedOrder} must not be the same as another existing Order in the list."},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"    public void setOrder(Order target, Order editedOrder) {"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"        requireAllNonNull(target, editedOrder);"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"            throw new OrderNotFoundException();"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"        internalList.set(index, editedOrder);"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitId":"AhQuanz"},"content":"     * The person must exist in the list."},{"lineNumber":73,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"    public void remove(Order toRemove) {"},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"        requireNonNull(toRemove);"},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"            throw new OrderNotFoundException();"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":"     * Replaces the contents of this list with {@code orders}."},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":"     * {@code orders} must not contain duplicate orders."},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"    public void setOrders(List\u003cOrder\u003e orders) {"},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"        requireAllNonNull(orders);"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"        if (!ordersAreUnique(orders)) {"},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"            throw new DuplicateOrderException();"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"        internalList.setAll(orders);"},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":"    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"        return internalUnmodifiableList;"},{"lineNumber":99,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":101,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":"    public Iterator\u003cOrder\u003e iterator() {"},{"lineNumber":103,"author":{"gitId":"AhQuanz"},"content":"        return internalList.iterator();"},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":106,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"AhQuanz"},"content":"    public boolean equals(Object other) {"},{"lineNumber":108,"author":{"gitId":"AhQuanz"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":109,"author":{"gitId":"AhQuanz"},"content":"                || (other instanceof UniqueOrderList // instanceof handles nulls"},{"lineNumber":110,"author":{"gitId":"AhQuanz"},"content":"                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"},{"lineNumber":111,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":113,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"AhQuanz"},"content":"    public int hashCode() {"},{"lineNumber":115,"author":{"gitId":"AhQuanz"},"content":"        return internalList.hashCode();"},{"lineNumber":116,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":118,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":"     * Returns true if {@code persons} contains only unique persons."},{"lineNumber":120,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"AhQuanz"},"content":"    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"},{"lineNumber":122,"author":{"gitId":"AhQuanz"},"content":"        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"},{"lineNumber":123,"author":{"gitId":"AhQuanz"},"content":"            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"},{"lineNumber":124,"author":{"gitId":"AhQuanz"},"content":"                if (orders.get(i).isSameOrder(orders.get(j))) {"},{"lineNumber":125,"author":{"gitId":"AhQuanz"},"content":"                    return false;"},{"lineNumber":126,"author":{"gitId":"AhQuanz"},"content":"                }"},{"lineNumber":127,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"AhQuanz"},"content":"        return true;"},{"lineNumber":130,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":131}},{"path":"src/main/java/seedu/address/model/order/exceptions/DuplicateOrderException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"package seedu.address.model.order.exceptions;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":" * Signals that the operation will result in duplicate orders (Orders are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"public class DuplicateOrderException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    public DuplicateOrderException() {"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"        super(\"Operation would result in duplicate orders\");"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":11}},{"path":"src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"package seedu.address.model.order.exceptions;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":" * Signals that the operation is unable to find the specified order."},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"public class OrderNotFoundException extends RuntimeException {}"}],"authorContributionMap":{"AhQuanz":6}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"    public static Customer[] getSampleCustomers() {"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"        return new Customer[] {"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"            new Customer(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        for (Customer sampleCustomer : getSampleCustomers()) {"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"            sampleAb.addCustomer(sampleCustomer);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":15,"-":45}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedCustomer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":" * Jackson-friendly version of {@link Customer}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"class JsonAdaptedCustomer {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Customer\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    private final Integer customerId;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"     * Constructs a {@code JsonAdaptedCustomer} with the given customer details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"    public JsonAdaptedCustomer(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                               @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"                               @JsonProperty(\"customerId\") Integer customerId,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                               @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d customerId;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"     * Converts a given {@code Customer} into this class for Jackson use."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"    public JsonAdaptedCustomer(Customer source) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"        customerId \u003d source.getId().value;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"     * Converts this Jackson-friendly adapted customer object into the model\u0027s {@code Customer} object."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted customer."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"    public Customer toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"        final List\u003cTag\u003e customerTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"            customerTags.add(tag.toModelType());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"        if (customerId \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":"            throw new IllegalValueException("},{"lineNumber":112,"author":{"gitId":"daniellau88"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomerId.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"        if (!CustomerId.isValidId(customerId)) {"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"            throw new IllegalValueException(CustomerId.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":"        final CustomerId modelId \u003d CustomerId.getNextId(customerId);"},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":120,"author":{"gitId":"laurenlhy"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(customerTags);"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":"        return new Customer(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelId);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":18,"daniellau88":16,"-":90}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"    public static final String MESSAGE_DUPLICATE_CUSTOMER \u003d \"Customers list contains duplicate customer(s).\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    private final List\u003cJsonAdaptedCustomer\u003e customers \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given customers."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"customers\") List\u003cJsonAdaptedCustomer\u003e customers) {"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"        this.customers.addAll(customers);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        customers.addAll(source.getCustomerList().stream().map(JsonAdaptedCustomer::new).collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        for (JsonAdaptedCustomer jsonAdaptedCustomer : customers) {"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"            Customer customer \u003d jsonAdaptedCustomer.toModelType();"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"            if (addressBook.hasCustomer(customer)) {"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"            addressBook.addCustomer(customer);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":12,"-":48}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":87,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":88,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":89,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":90,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":96,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":100,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredCustomerList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":172,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":193,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":195}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":" * An UI component that displays information of a {@code Customer}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    public final Customer customer;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"     * Creates a {@code PersonCode} with the given {@code Customer} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"    public PersonCard(Customer customer, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        this.customer \u003d customer;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"        name.setText(customer.getName().fullName);"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        phone.setText(customer.getPhone().value);"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        address.setText(customer.getAddress().value);"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"        email.setText(customer.getEmail().value);"},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"        customer.getTags().stream()"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"                \u0026\u0026 customer.equals(card.customer);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":12,"-":65}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":" * Panel containing the list of customers."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"    private ListView\u003cCustomer\u003e personListView;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    public PersonListPanel(ObservableList\u003cCustomer\u003e customerList) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"        personListView.setItems(customerList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code PersonCard}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"    class PersonListViewCell extends ListCell\u003cCustomer\u003e {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        protected void updateItem(Customer customer, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"            super.updateItem(customer, empty);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"            if (empty || customer \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"                setGraphic(new PersonCard(customer, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":11,"-":38}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        \u003cVBox fx:id\u003d\"customerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"laurenlhy":1,"-":59}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidCustomerAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":"  \"customers\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":12}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidCustomerAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":"  \"customers\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":7,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicateCustomerAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":"  \"customers\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 1,"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"tagged\": [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    \"address\": \"4th street\","},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"daniellau88":3,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidCustomerAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":"  \"customers\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    \"address\": \"4th street\","},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 1,"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"daniellau88":3,"-":6}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalCustomersAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"  \"customers\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 1,"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 2,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 3,"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 4,"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"tagged\" : [ \"friends\" ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 5,"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 6,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"    \"customerId\" : 7,"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":52,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"daniellau88":7,"-":45}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withId(CustomerIdStub.getNextId()).withTags().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.addCustomer(expectedCustomer);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"    public void getFilteredCustomerList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredCustomerList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":8,"daniellau88":2,"-":153}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"    public void execute_newCustomer_success() {"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"        Customer validCustomer \u003d new CustomerBuilder().build();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.addCustomer(validCustomer);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"        assertCommandSuccess(new AddCommand(validCustomer), model,"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validCustomer), expectedModel);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"    public void execute_duplicateCustomer_throwsCommandException() {"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        Customer customerInList \u003d model.getAddressBook().getCustomerList().get(0);"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(new AddCommand(customerInList), model, AddCommand.MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":11,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"    public void constructor_nullCustomer_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"    public void execute_customerAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"        ModelStubAcceptingCustomerAdded modelStub \u003d new ModelStubAcceptingCustomerAdded();"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        Customer validCustomer \u003d new CustomerBuilder().build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        CommandResult commandResult \u003d new AddCommand(validCustomer).execute(modelStub);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validCustomer), commandResult.getFeedbackToUser());"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(Arrays.asList(validCustomer), modelStub.customersAdded);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"    public void execute_duplicateCustomer_throwsCommandException() {"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"        Customer validCustomer \u003d new CustomerBuilder().build();"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        AddCommand addCommand \u003d new AddCommand(validCustomer);"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"        ModelStub modelStub \u003d new ModelStubWithCustomer(validCustomer);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CUSTOMER, () -\u003e addCommand"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"                .execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"        Customer alice \u003d new CustomerBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        Customer bob \u003d new CustomerBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"        // different customer -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"        public void addCustomer(Customer customer) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"laurenlhy"},"content":"        public boolean hasCustomer(Customer customer) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"laurenlhy"},"content":"        public void deleteCustomer(Customer target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"        public void setCustomer(Customer target, Customer editedCustomer) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"laurenlhy"},"content":"        public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"laurenlhy"},"content":"        public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"laurenlhy"},"content":"     * A Model stub that contains a single customer."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"laurenlhy"},"content":"    private class ModelStubWithCustomer extends ModelStub {"},{"lineNumber":157,"author":{"gitId":"laurenlhy"},"content":"        private final Customer customer;"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"laurenlhy"},"content":"        ModelStubWithCustomer(Customer customer) {"},{"lineNumber":160,"author":{"gitId":"laurenlhy"},"content":"            requireNonNull(customer);"},{"lineNumber":161,"author":{"gitId":"laurenlhy"},"content":"            this.customer \u003d customer;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"laurenlhy"},"content":"        public boolean hasCustomer(Customer customer) {"},{"lineNumber":166,"author":{"gitId":"laurenlhy"},"content":"            requireNonNull(customer);"},{"lineNumber":167,"author":{"gitId":"laurenlhy"},"content":"            return this.customer.isSameCustomer(customer);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"laurenlhy"},"content":"     * A Model stub that always accept the customer being added."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"laurenlhy"},"content":"    private class ModelStubAcceptingCustomerAdded extends ModelStub {"},{"lineNumber":175,"author":{"gitId":"laurenlhy"},"content":"        final ArrayList\u003cCustomer\u003e customersAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitId":"laurenlhy"},"content":"        public boolean hasCustomer(Customer customer) {"},{"lineNumber":179,"author":{"gitId":"laurenlhy"},"content":"            requireNonNull(customer);"},{"lineNumber":180,"author":{"gitId":"laurenlhy"},"content":"            return customersAdded.stream().anyMatch(customer::isSameCustomer);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"laurenlhy"},"content":"        public void addCustomer(Customer customer) {"},{"lineNumber":185,"author":{"gitId":"laurenlhy"},"content":"            requireNonNull(customer);"},{"lineNumber":186,"author":{"gitId":"laurenlhy"},"content":"            customersAdded.add(customer);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":42,"-":153}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":31}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.EditCustomerDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"    public static final EditCommand.EditCustomerDescriptor DESC_AMY;"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"    public static final EditCommand.EditCustomerDescriptor DESC_BOB;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    public static final int VALID_QUANTITY_1 \u003d 1;"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"    public static final int VALID_QUANTITY_5 \u003d 5;"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_CHEESE_TYPE_BRIE \u003d \"Brie\";"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_CHEESE_TYPE_CAMEMBERT \u003d \"Camembert\";"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_CHEESE_TYPE_FETA \u003d \"Feta\";"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_MANUFACTURE_DATE_1 \u003d \"2021-03-04 07:00\";"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_MANUFACTURE_DATE_2 \u003d \"2021-03-06 07:00\";"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_MATURITY_DATE_1 \u003d \"2021-04-04 07:00\";"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_MATURITY_DATE_2 \u003d \"2021-04-06 07:00\";"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_EXPIRY_DATE_1 \u003d \"2022-03-04 06:00\";"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_EXPIRY_DATE_2 \u003d \"2023-04-04 06:00\";"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_ORDER_DATE_1 \u003d \"2021-02-05 07:00\";"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_ORDER_DATE_2 \u003d \"2021-03-06 08:00\";"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_COMPLETED_DATE_1 \u003d \"2022-02-10 13:00\";"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    public static final String VALID_COMPLETED_DATE_2 \u003d \"2022-03-06 10:00\";"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"        DESC_AMY \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"        DESC_BOB \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":119,"author":{"gitId":"laurenlhy"},"content":"     * - the address book, filtered customer list and selected customer in {@code actualModel} remain unchanged"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":124,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredCustomerList());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredCustomerList());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"laurenlhy"},"content":"     * Updates {@code model}\u0027s filtered list to show only the customer at the given {@code targetIndex} in the"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"laurenlhy"},"content":"    public static void showCustomerAtIndex(Model model, Index targetIndex) {"},{"lineNumber":136,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredCustomerList().size());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"        Customer customer \u003d model.getFilteredCustomerList().get(targetIndex.getZeroBased());"},{"lineNumber":139,"author":{"gitId":"laurenlhy"},"content":"        final String[] splitName \u003d customer.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":140,"author":{"gitId":"laurenlhy"},"content":"        model.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(1, model.getFilteredCustomerList().size());"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":17,"daniellau88":16,"-":112}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CUSTOMER);"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.deleteCustomer(customerToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"        Customer customerToDelete \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CUSTOMER);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_CUSTOMER_SUCCESS, customerToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.deleteCustomer(customerToDelete);"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"        showNoCustomer(expectedModel);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getCustomerList().size());"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CUSTOMER);"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CUSTOMER);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CUSTOMER);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"laurenlhy"},"content":"        // different customer -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":"    private void showNoCustomer(Model model) {"},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"        model.updateFilteredCustomerList(p -\u003e false);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(model.getFilteredCustomerList().isEmpty());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":28,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"public class EditCommandStub extends EditCommand {"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"    public EditCommandStub(EditCommand editCommand, EditCustomerDescriptor editCustomerDescriptor) {"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"        super(editCommand.index, editCustomerDescriptor);"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":7}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.EditCustomerDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        Customer editedCustomer \u003d new CustomerBuilder().build();"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(editedCustomer).build();"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CUSTOMER, descriptor);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        Index indexLastCustomer \u003d Index.fromOneBased(model.getFilteredCustomerList().size());"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        Customer lastCustomer \u003d model.getFilteredCustomerList().get(indexLastCustomer.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"        CustomerBuilder customerInListInList \u003d new CustomerBuilder(lastCustomer);"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"        Customer editedCustomer \u003d customerInListInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastCustomer, descriptor);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.setCustomer(lastCustomer, editedCustomer);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CUSTOMER, new EditCommand.EditCustomerDescriptor());"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"        Customer editedCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        Customer customerInFilteredList \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"        Customer editedCustomer \u003d new CustomerBuilder(customerInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":89,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CUSTOMER,"},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"                new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CUSTOMER_SUCCESS, editedCustomer);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.setCustomer(model.getFilteredCustomerList().get(0), editedCustomer);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"laurenlhy"},"content":"    public void execute_duplicateCustomerUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"        Customer firstCustomer \u003d model.getFilteredCustomerList().get(INDEX_FIRST_CUSTOMER.getZeroBased());"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(firstCustomer).build();"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CUSTOMER, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"    public void execute_duplicateCustomerFilteredList_failure() {"},{"lineNumber":111,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"        // edit customer in filtered list into a duplicate in address book"},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"        Customer customerInList \u003d model.getAddressBook().getCustomerList().get(INDEX_SECOND_CUSTOMER.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"laurenlhy"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CUSTOMER,"},{"lineNumber":116,"author":{"gitId":"laurenlhy"},"content":"                new EditCustomerDescriptorBuilder(customerInList).build());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CUSTOMER);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"laurenlhy"},"content":"    public void execute_invalidCustomerIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredCustomerList().size() + 1);"},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"                new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"laurenlhy"},"content":"    public void execute_invalidCustomerIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CUSTOMER;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getCustomerList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"laurenlhy"},"content":"                new EditCustomerDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"laurenlhy"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CUSTOMER_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"laurenlhy"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CUSTOMER, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor copyDescriptor \u003d new EditCommand.EditCustomerDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"laurenlhy"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CUSTOMER, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_CUSTOMER, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_CUSTOMER, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":58,"-":115}},{"path":"src/test/java/seedu/address/logic/commands/EditCustomerDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand.EditCustomerDescriptor;"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.EditCustomerDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"public class EditCustomerDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor descriptorWithSameValues \u003d new EditCustomerDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"        editedAmy \u003d new EditCustomerDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":9,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CUSTOMERS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.CARL;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ELLE;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.FIONA;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        // different customer -\u003e returns false"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"    public void execute_zeroKeywords_noCustomerFound() {"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 0);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.updateFilteredCustomerList(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredCustomerList());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"    public void execute_multipleKeywords_multipleCustomersFound() {"},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CUSTOMERS_LISTED_OVERVIEW, 3);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"        expectedModel.updateFilteredCustomerList(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredCustomerList());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":15,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showCustomerAtIndex;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        showCustomerAtIndex(model, INDEX_FIRST_CUSTOMER);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":4,"-":35}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.AMY;"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        Customer expectedCustomer \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCustomer));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        expectedCustomer \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCustomer));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        expectedCustomer \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCustomer));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        expectedCustomer \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCustomer));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"        expectedCustomer \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedCustomer));"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"        Customer expectedCustomerMultipleTags \u003d new CustomerBuilder(BOB).withId(CustomerIdStub.getNextId())"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedCustomerMultipleTags));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"        Customer expectedCustomer \u003d new CustomerBuilder(AMY).withId(CustomerIdStub.getNextId()).withTags().build();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":"                new AddCommand(expectedCustomer));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":144,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":15,"daniellau88":14,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"import seedu.address.logic.commands.EditCommandStub;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerUtil;"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.EditCustomerDescriptorBuilder;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        Customer customer \u003d new CustomerBuilder().withId(CustomerIdStub.getNextId()).build();"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(CustomerUtil.getAddCommand(customer));"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(new AddCommand(customer), command);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CUSTOMER.getOneBased());"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_CUSTOMER), command);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        Customer customer \u003d new CustomerBuilder().withId(CustomerIdStub.getNextId()).build();"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder(customer).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"                + INDEX_FIRST_CUSTOMER.getOneBased() + \" \" + CustomerUtil.getEditCustomerDescriptorDetails(descriptor));"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        command \u003d new EditCommandStub(command, descriptor);"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_CUSTOMER, descriptor), command);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":77,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":13,"daniellau88":5,"-":85}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CUSTOMER));"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CUSTOMER;"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CUSTOMER;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand.EditCustomerDescriptor;"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.EditCustomerDescriptorBuilder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"laurenlhy"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Customer} being edited,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_SECOND_CUSTOMER;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":137,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_THIRD_CUSTOMER;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":139,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":151,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":157,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":163,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":170,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":176,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":186,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_FIRST_CUSTOMER;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":188,"author":{"gitId":"laurenlhy"},"content":"        EditCommand.EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder()"},{"lineNumber":189,"author":{"gitId":"laurenlhy"},"content":"                .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":204,"author":{"gitId":"laurenlhy"},"content":"        Index targetIndex \u003d INDEX_THIRD_CUSTOMER;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"laurenlhy"},"content":"        EditCustomerDescriptor descriptor \u003d new EditCustomerDescriptorBuilder().withTags().build();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":28,"-":184}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CUSTOMER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(INDEX_FIRST_CUSTOMER, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(INDEX_FIRST_CUSTOMER, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":7,"-":189}},{"path":"src/test/java/seedu/address/model/AbstractDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"public class AbstractDateTest {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public static class ImplementedAbstractDate extends AbstractDate {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        public ImplementedAbstractDate(String date) {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"            super(date);"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        assertThrows(NullPointerException.class, () -\u003e new ImplementedAbstractDate(null));"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public void constructor_invalidExpiryDate_throwsIllegalArgumentException() {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        String invalidDate \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new ImplementedAbstractDate(invalidDate));"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public void parseDate() {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        // Valid Dates"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        LocalDateTime validDate \u003d LocalDateTime.of(2020, 02, 06, 8, 1, 0);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"06/2/2020 08:01\"), validDate);"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"6/02/2020 08:01\"), validDate);"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        validDate \u003d LocalDateTime.of(2020, 07, 01, 0, 0, 0);"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"1/07/2020\"), validDate);"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"01/7/2020\"), validDate);"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d] format"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        validDate \u003d LocalDateTime.of(2020, 02, 10, 0, 0, 0);"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-02-10\"), validDate);"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10\"), validDate);"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm]"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        validDate \u003d LocalDateTime.of(2020, 02, 10, 8, 1, 0);"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-02-10 08:01\"), validDate);"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10 08:01\"), validDate);"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        validDate \u003d LocalDateTime.of(2020, 03, 8, 9, 10, 0);"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 8 2020 09:10\"), validDate);"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 08 2020 09:10\"), validDate);"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        validDate \u003d LocalDateTime.of(2020, 06, 8, 0, 0, 0);"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Jun 8 2020\"), validDate);"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Jun 08 2020\"), validDate);"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"        // Invalid Dates"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        // Missing information"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"        // Missing Day"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"/23/2020 08:01\"), null);"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"/-10/2020\"), null);"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2- 08:01\"), null);"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-12-\"), null);"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb  2020 09:10\"), null);"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb  2020\"), null);"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        // Missing Month"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"10//2020 08:01\"), null);"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"10//2020\"), null);"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-10 08:01\"), null);"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-10\"), null);"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\" 2 2020 09:10\"), null);"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\" 10 2020\"), null);"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"        // Missing Year"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"3/12/ 08:01\"), null);"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"13/10/\"), null);"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"-2-23 08:01\"), null);"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"12-40\"), null);"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 2  09:10\"), null);"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb 10 \"), null);"},{"lineNumber":108,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":109,"author":{"gitId":"daniellau88"},"content":"        // Missing Hour"},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"6/02/2020 :01\"), null);"},{"lineNumber":112,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm]"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10 01\"), null);"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 08 2020 :10\"), null);"},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":"        // Missing Minutes"},{"lineNumber":120,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"6/02/2020 08:\"), null);"},{"lineNumber":122,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":123,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm]"},{"lineNumber":124,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10 08\"), null);"},{"lineNumber":125,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":126,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":127,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 08 2020 09:\"), null);"},{"lineNumber":128,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":129,"author":{"gitId":"daniellau88"},"content":"        // Additional information"},{"lineNumber":130,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2019-05-07 08:01am\"), null);"},{"lineNumber":131,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2019-05-07 08:01pm\"), null);"},{"lineNumber":132,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2019-5-07 08:01EXTRA\"), null);"},{"lineNumber":133,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"EXTRA2019-5-07 08:01\"), null);"},{"lineNumber":134,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2019-5-07EXTRA08:01\"), null);"},{"lineNumber":135,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":136,"author":{"gitId":"daniellau88"},"content":"        // Invalid day"},{"lineNumber":137,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":138,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"-23/23/2020 08:01\"), null);"},{"lineNumber":139,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":140,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"99/-10/2020\"), null);"},{"lineNumber":141,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":142,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-0 08:01\"), null);"},{"lineNumber":143,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":144,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-12-40\"), null);"},{"lineNumber":145,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":146,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb 561 2020 09:10\"), null);"},{"lineNumber":147,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":148,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb -40 2020\"), null);"},{"lineNumber":149,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":150,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":151,"author":{"gitId":"daniellau88"},"content":"        // Invalid month"},{"lineNumber":152,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":153,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"10/23/2020 08:01\"), null);"},{"lineNumber":154,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":155,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"10/-10/2020\"), null);"},{"lineNumber":156,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":157,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-13-10 08:01\"), null);"},{"lineNumber":158,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":159,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-0-10\"), null);"},{"lineNumber":160,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":161,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"ASD 2 2020 09:10\"), null);"},{"lineNumber":162,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":163,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Q 10 2020\"), null);"},{"lineNumber":164,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":165,"author":{"gitId":"daniellau88"},"content":"        // Invalid year"},{"lineNumber":166,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":167,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"3/12/-234 08:01\"), null);"},{"lineNumber":168,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy] format"},{"lineNumber":169,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"13/10/23\"), null);"},{"lineNumber":170,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm] format"},{"lineNumber":171,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"0-2-23 08:01\"), null);"},{"lineNumber":172,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-m-d] format"},{"lineNumber":173,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"12341-12-40\"), null);"},{"lineNumber":174,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":175,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 2 -135 09:10\"), null);"},{"lineNumber":176,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy] format"},{"lineNumber":177,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Feb 10 21\"), null);"},{"lineNumber":178,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":179,"author":{"gitId":"daniellau88"},"content":"        // Invalid Hour"},{"lineNumber":180,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":181,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"6/02/2020 63:01\"), null);"},{"lineNumber":182,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":183,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm]"},{"lineNumber":184,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10 -10:01\"), null);"},{"lineNumber":185,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":186,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":187,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 08 2020 25:10\"), null);"},{"lineNumber":188,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":189,"author":{"gitId":"daniellau88"},"content":"        // Invalid Minutes"},{"lineNumber":190,"author":{"gitId":"daniellau88"},"content":"        // [d/M/yyyy HHmm] format"},{"lineNumber":191,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"6/02/2020 08:-94\"), null);"},{"lineNumber":192,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":193,"author":{"gitId":"daniellau88"},"content":"        // [yyyy-M-d HH:mm]"},{"lineNumber":194,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"2020-2-10 08:-\"), null);"},{"lineNumber":195,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":196,"author":{"gitId":"daniellau88"},"content":"        // [MMM d yyyy HH:mm] format"},{"lineNumber":197,"author":{"gitId":"daniellau88"},"content":"        assertEquals(AbstractDate.parseDate(\"Mar 08 2020 09:68\"), null);"},{"lineNumber":198,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":199,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":200}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.exceptions.DuplicateCustomerException;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(Collections.emptyList(), addressBook.getCustomerList());"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"    public void resetData_withDuplicateCustomers_throwsDuplicateCustomerException() {"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        // Two customers with the same identity fields"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e newCustomers \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newCustomers);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(DuplicateCustomerException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_nullCustomer_throwsNullPointerException() {"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasCustomer(null));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_customerNotInAddressBook_returnsFalse() {"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(addressBook.hasCustomer(ALICE));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_customerInAddressBook_returnsTrue() {"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"        addressBook.addCustomer(ALICE);"},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(addressBook.hasCustomer(ALICE));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_customerWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        addressBook.addCustomer(ALICE);"},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(addressBook.hasCustomer(editedAlice));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"laurenlhy"},"content":"    public void getCustomerList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getCustomerList().remove(0));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"     * A stub ReadOnlyAddressBook whose customers list can violate interface constraints."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"        private final ObservableList\u003cCustomer\u003e customers \u003d FXCollections.observableArrayList();"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"        AddressBookStub(Collection\u003cCustomer\u003e customers) {"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"            this.customers.setAll(customers);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        public ObservableList\u003cCustomer\u003e getCustomerList() {"},{"lineNumber":100,"author":{"gitId":"laurenlhy"},"content":"            return customers;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"        @Override"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"        public ObservableList\u003cOrder\u003e getOrderList() {"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"            return orders;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":31,"daniellau88":6,"-":72}},{"path":"src/test/java/seedu/address/model/CustomerIdStub.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"public class CustomerIdStub extends CustomerId {"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"     * Constructs a {@code Id}."},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"     * @param id A valid id."},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    private CustomerIdStub(int id) {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"        super(id);"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public static CustomerIdStub getNextId() {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        return getNextId(getNextIdValue());"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public static CustomerIdStub getNextId(int id) {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        return new CustomerIdStub(id);"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":22}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CUSTOMERS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.NameContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_nullCustomer_throwsNullPointerException() {"},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCustomer(null));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_customerNotInAddressBook_returnsFalse() {"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(modelManager.hasCustomer(ALICE));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"    public void hasCustomer_customerInAddressBook_returnsTrue() {"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        modelManager.addCustomer(ALICE);"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(modelManager.hasCustomer(ALICE));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"    public void getFilteredCustomerList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCustomerList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withCustomer(ALICE).withCustomer(BENSON).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":121,"author":{"gitId":"laurenlhy"},"content":"        modelManager.updateFilteredCustomerList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"        modelManager.updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":16,"-":116}},{"path":"src/test/java/seedu/address/model/cheese/CheeseIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"public class CheeseIdTest {"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        int invalidId \u003d -1;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new CheeseId(invalidId));"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_autoincrement_success() {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        CheeseId cheeseId \u003d CheeseId.getNextId();"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        CheeseId cheeseId2 \u003d CheeseId.getNextId();"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        assertEquals(cheeseId.value + 1, cheeseId2.value);"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_maxAutoincrement_success() {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        // Creates a cheese id with the given large value"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        final int largeValue \u003d 1000;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        new CheeseId(largeValue);"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        CheeseId orderId2 \u003d CheeseId.getNextId();"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        assertEquals(largeValue + 1, orderId2.value);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":31}},{"path":"src/test/java/seedu/address/model/cheese/CheeseTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_CAMEMBERT;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_FETA;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_1;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_2;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MANUFACTURE_DATE_1;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MANUFACTURE_DATE_2;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATURITY_DATE_2;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalCheese.CAMEMBERT;"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"import static seedu.address.testutil.TypicalCheese.FETA;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"import seedu.address.testutil.CheeseBuilder;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":" * Represents a Cheese in the address book."},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"public class CheeseTest {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CheeseBuilder().withCheeseType(null).build());"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    public void idAutoIncrement() {"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        final int cheeseId \u003d 10;"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        Cheese cheese \u003d new CheeseBuilder().withCheeseId(cheeseId).build();"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        Cheese cheese2 \u003d new CheeseBuilder().build();"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        assertTrue(cheese.getCheeseId().compareTo(cheese2.getCheeseId()) \u003c 0);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"    public void isSameCheese() {"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"        // Same object -\u003e return true"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"        assertTrue(CAMEMBERT.isSameCheese(CAMEMBERT));"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"        // Null -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.isSameCheese(null));"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"        // Same id, all other attributes different -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        Cheese editedCamembert \u003d"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"            new CheeseBuilder(CAMEMBERT).withExpiryDate(VALID_EXPIRY_DATE_2)"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"                .withCheeseType(VALID_CHEESE_TYPE_FETA)"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"                .withManufactureDate(VALID_MANUFACTURE_DATE_2).build();"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        assertTrue(CAMEMBERT.isSameCheese(editedCamembert));"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        // Different id, all other attributes same -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        Cheese newSimilarCamembert \u003d"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"            new CheeseBuilder().withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT)"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"                .withExpiryDate(VALID_EXPIRY_DATE_1)"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"                .withManufactureDate(VALID_MANUFACTURE_DATE_1)"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.isSameCheese(newSimilarCamembert));"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    public void equals() {"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"        // Same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        Cheese camembertCopy \u003d new CheeseBuilder(CAMEMBERT).build();"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        assertTrue(CAMEMBERT.equals(camembertCopy));"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"        // Same object -\u003e returns true"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        assertTrue(CAMEMBERT.equals(CAMEMBERT));"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"        // Null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.equals(null));"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"        // Different type -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.equals(5));"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"        // Different cheese -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CAMEMBERT.equals(FETA));"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"        // Different id --\u003e return false"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        Cheese editedCamembert \u003d new CheeseBuilder()"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"                .withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT)"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"                .withManufactureDate(VALID_MANUFACTURE_DATE_1)"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"                .withExpiryDate(VALID_EXPIRY_DATE_1).build();"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CAMEMBERT.equals(editedCamembert));"},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"        // Different cheese type -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"        editedCamembert \u003d new CheeseBuilder(CAMEMBERT)"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"                .withCheeseType(VALID_CHEESE_TYPE_FETA).build();"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CAMEMBERT.equals(editedCamembert));"},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"        // Different manufacturing date -\u003e return false"},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"        editedCamembert \u003d new CheeseBuilder(CAMEMBERT)"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"                .withManufactureDate(VALID_MANUFACTURE_DATE_2).build();"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.equals(editedCamembert));"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"        // Different maturity date --\u003e return false"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        editedCamembert \u003d new CheeseBuilder(CAMEMBERT)"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"                .withMaturityDate(VALID_MATURITY_DATE_2).build();"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.equals(editedCamembert));"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"        // Different expire date -\u003e returns false"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"        editedCamembert \u003d"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"            new CheeseBuilder(CAMEMBERT).withExpiryDate(VALID_EXPIRY_DATE_2).build();"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"        assertFalse(CAMEMBERT.equals(editedCamembert));"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":25,"daniellau88":82}},{"path":"src/test/java/seedu/address/model/cheese/CheeseTypeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.cheese;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_BRIE;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_CAMEMBERT;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_FETA;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class CheeseTypeTest {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"        assertThrows(NullPointerException.class, () -\u003e CheeseType.getCheeseType(null));"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"    public void constructor_emptyString_throwsIllegalArgumentException() {"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e CheeseType.getCheeseType(invalidName));"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    public void constructor_validCheeseName_returnsTrue() {"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        CheeseType brieCheeseType \u003d CheeseType.getCheeseType(VALID_CHEESE_TYPE_BRIE);"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        assertEquals(brieCheeseType.value, VALID_CHEESE_TYPE_BRIE);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public void constructor_verifySameCheeseType_returnsTrue() {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        CheeseType fetaCheeseType \u003d CheeseType.getCheeseType(VALID_CHEESE_TYPE_FETA);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        assertEquals(fetaCheeseType.value, VALID_CHEESE_TYPE_FETA);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        // Creates new string with same value as Feta"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        String newFetaString \u003d new String(VALID_CHEESE_TYPE_FETA);"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        CheeseType newFetaCheeseType \u003d CheeseType.getCheeseType(newFetaString);"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        assertTrue(fetaCheeseType \u003d\u003d newFetaCheeseType);"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"    public void isValidName() {"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"        // Null name"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"        assertThrows(NullPointerException.class, () -\u003e CheeseType.getCheeseType(null));"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"        // Invalid name"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CheeseType.isValidType(\"\")); // empty string"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CheeseType.isValidType(\" \")); // spaces only"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        assertFalse(CheeseType.isValidType(\"      \")); // multiple spaces only"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        // Valid name"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(VALID_CHEESE_TYPE_FETA));"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(VALID_CHEESE_TYPE_CAMEMBERT));"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(VALID_CHEESE_TYPE_BRIE));"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"        // Numbers only"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(\"10241982\"));"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"        // Alphanumeric characters"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(\"Cheese Type 1\"));"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"        // Long names"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(CheeseType.isValidType(\"Aged Cashew \u0026     Blue Green Algae Cheese\"));"},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":33,"daniellau88":33}},{"path":"src/test/java/seedu/address/model/customer/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":35}},{"path":"src/test/java/seedu/address/model/customer/CustomerIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"public class CustomerIdTest {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"        int invalidId \u003d -1;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e CustomerId.getNextId(invalidId));"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_autoincrement_success() {"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        CustomerId customerId \u003d CustomerId.getNextId();"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        CustomerId customerId2 \u003d CustomerId.getNextId();"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        assertEquals(customerId.value + 1, customerId2.value);"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_maxAutoincrement_success() {"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        // Creates an customer id with the given large value"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        final int largeValue \u003d 1000;"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        CustomerId.getNextId(largeValue);"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        CustomerId nextCustomerId \u003d CustomerId.getNextId();"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        assertEquals(largeValue + 1, nextCustomerId.value);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    // Ensures that Customer stub is working as intended"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    public void getNextIdStub_maxNoAutoincrement_success() {"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        // Creates an customer stub with the given large value"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        final int largeValue \u003d CustomerIdStub.getNextIdValue() + 10;"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        CustomerId.getNextId(largeValue);"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        CustomerId nextCustomerStubId \u003d CustomerIdStub.getNextId();"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        assertEquals(largeValue + 1, nextCustomerStubId.value);"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":44}},{"path":"src/test/java/seedu/address/model/customer/CustomerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"public class CustomerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"        Customer customer \u003d new CustomerBuilder().build();"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e customer.getTags().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    public void isSameCustomer() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(ALICE.isSameCustomer(ALICE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(ALICE.isSameCustomer(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(ALICE.isSameCustomer(editedAlice));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(ALICE.isSameCustomer(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        Customer editedBob \u003d new CustomerBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(BOB.isSameCustomer(editedBob));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        editedBob \u003d new CustomerBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(BOB.isSameCustomer(editedBob));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"        Customer aliceCopy \u003d new CustomerBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        // different customer -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        editedAlice \u003d new CustomerBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":"        editedAlice \u003d new CustomerBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"        editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"        editedAlice \u003d new CustomerBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":25,"-":66}},{"path":"src/test/java/seedu/address/model/customer/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // valid email"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":60}},{"path":"src/test/java/seedu/address/model/customer/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        // different customer -\u003e returns false"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").build()));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(predicate.test(new CustomerBuilder().withName(\"Alice\").withPhone(\"12345\")"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":10,"-":65}},{"path":"src/test/java/seedu/address/model/customer/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        // Null name"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        // Invalid name"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        // Valid name"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"daniellau88":3,"-":36}},{"path":"src/test/java/seedu/address/model/customer/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":39}},{"path":"src/test/java/seedu/address/model/customer/UniqueCustomerListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.model.customer;"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.BOB;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.exceptions.CustomerNotFoundException;"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.exceptions.DuplicateCustomerException;"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.CustomerBuilder;"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"public class UniqueCustomerListTest {"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    private final UniqueCustomerList uniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    public void contains_nullCustomer_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.contains(null));"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"    public void contains_customerNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"        assertFalse(uniqueCustomerList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    public void contains_customerInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(uniqueCustomerList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"    public void contains_customerWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"        assertTrue(uniqueCustomerList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"    public void add_nullCustomer_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.add(null));"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"    public void add_duplicateCustomer_throwsDuplicateCustomerException() {"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(DuplicateCustomerException.class, () -\u003e uniqueCustomerList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_nullTargetCustomer_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setCustomer(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_nullEditedCustomer_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setCustomer(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_targetCustomerNotInList_throwsCustomerNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(CustomerNotFoundException.class, () -\u003e uniqueCustomerList.setCustomer(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_editedCustomerIsSameCustomer_success() {"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.setCustomer(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"        expectedUniqueCustomerList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":83,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_editedCustomerHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"        Customer editedAlice \u003d new CustomerBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"laurenlhy"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.setCustomer(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"        expectedUniqueCustomerList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_editedCustomerHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.setCustomer(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":101,"author":{"gitId":"laurenlhy"},"content":"        expectedUniqueCustomerList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":103,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomer_editedCustomerHasNonUniqueIdentity_throwsDuplicateCustomerException() {"},{"lineNumber":107,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(DuplicateCustomerException.class, () -\u003e uniqueCustomerList.setCustomer(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":112,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"laurenlhy"},"content":"    public void remove_nullCustomer_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.remove(null));"},{"lineNumber":115,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":117,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"laurenlhy"},"content":"    public void remove_customerDoesNotExist_throwsCustomerNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(CustomerNotFoundException.class, () -\u003e uniqueCustomerList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":122,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"laurenlhy"},"content":"    public void remove_existingCustomer_removesCustomer() {"},{"lineNumber":124,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":127,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":128,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":130,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers_nullUniqueCustomerList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setCustomers((UniqueCustomerList) null));"},{"lineNumber":133,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":135,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers_uniqueCustomerList_replacesOwnListWithProvidedUniqueCustomerList() {"},{"lineNumber":137,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":139,"author":{"gitId":"laurenlhy"},"content":"        expectedUniqueCustomerList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.setCustomers(expectedUniqueCustomerList);"},{"lineNumber":141,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":142,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":144,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueCustomerList.setCustomers((List\u003cCustomer\u003e) null));"},{"lineNumber":147,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":149,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e customerList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"laurenlhy"},"content":"        uniqueCustomerList.setCustomers(customerList);"},{"lineNumber":154,"author":{"gitId":"laurenlhy"},"content":"        UniqueCustomerList expectedUniqueCustomerList \u003d new UniqueCustomerList();"},{"lineNumber":155,"author":{"gitId":"laurenlhy"},"content":"        expectedUniqueCustomerList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(expectedUniqueCustomerList, uniqueCustomerList);"},{"lineNumber":157,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":159,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"laurenlhy"},"content":"    public void setCustomers_listWithDuplicateCustomers_throwsDuplicateCustomerException() {"},{"lineNumber":161,"author":{"gitId":"laurenlhy"},"content":"        List\u003cCustomer\u003e listWithDuplicateCustomers \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(DuplicateCustomerException.class, () -\u003e uniqueCustomerList"},{"lineNumber":163,"author":{"gitId":"laurenlhy"},"content":"                .setCustomers(listWithDuplicateCustomers));"},{"lineNumber":164,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":166,"author":{"gitId":"laurenlhy"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"laurenlhy"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":168,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":169,"author":{"gitId":"laurenlhy"},"content":"            -\u003e uniqueCustomerList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":170,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"laurenlhy"},"content":"}"}],"authorContributionMap":{"laurenlhy":171}},{"path":"src/test/java/seedu/address/model/order/OrderIdTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"public class OrderIdTest {"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    public void constructor_invalidId_throwsIllegalArgumentException() {"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"        int invalidId \u003d -1;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OrderId(invalidId));"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_autoincrement_success() {"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"        OrderId orderId \u003d OrderId.getNextId();"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        OrderId orderId2 \u003d OrderId.getNextId();"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        assertEquals(orderId.value + 1, orderId2.value);"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    public void getNextId_maxAutoincrement_success() {"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        // Creates an order id with the given large value"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        final int largeValue \u003d 1000;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        new OrderId(largeValue);"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        OrderId orderId2 \u003d OrderId.getNextId();"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        assertEquals(largeValue + 1, orderId2.value);"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":31}},{"path":"src/test/java/seedu/address/model/order/OrderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_BRIE;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_CAMEMBERT;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPLETED_DATE_1;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPLETED_DATE_2;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DATE_1;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DATE_2;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_1;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_5;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalCustomers.BENSON;"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalOrder.ORDER_CAMEMBERT;"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"import seedu.address.testutil.OrderBuilder;"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"public class OrderTest {"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        assertThrows(NullPointerException.class, () -\u003e new OrderBuilder().withOrderDate(null).build());"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public void idAutoIncrement() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        final int orderId \u003d 10;"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        Order order \u003d new OrderBuilder().withOrderId(orderId).build();"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        Order order2 \u003d new OrderBuilder().build();"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        assertTrue(order.getOrderId().compareTo(order2.getOrderId()) \u003c 0);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    public void isSameOrder() {"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"        // Same object -\u003e return true"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"        assertTrue(ORDER_CAMEMBERT.isSameOrder(ORDER_CAMEMBERT));"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"        // Null -\u003e returns false"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.isSameOrder(null));"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        // Same OrderId, Same customerId, all other attributes different -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        Order editedOrder \u003d"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"            new OrderBuilder(ORDER_CAMEMBERT).withCheeseType(VALID_CHEESE_TYPE_BRIE)"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"                .withOrderId(ORDER_CAMEMBERT.getOrderId())"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"                .withQuantity(VALID_QUANTITY_5)"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"                .withOrderDate(VALID_ORDER_DATE_2)"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"                .withCompletedDate(VALID_COMPLETED_DATE_2)"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"                .withCustomerId(ALICE.getId())"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        assertTrue(ORDER_CAMEMBERT.isSameOrder(editedOrder));"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        // Different orderId, Same customerId, all other attributes same -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"        Order newSimilarOrder \u003d"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"            new OrderBuilder().withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT)"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"                .withQuantity(VALID_QUANTITY_1)"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"                .withOrderDate(VALID_ORDER_DATE_1)"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"                .withCompletedDate(VALID_COMPLETED_DATE_1)"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"                .withCustomerId(ALICE.getId())"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.isSameOrder(newSimilarOrder));"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"        // Same Orderid, Different customerId, all other attributes same -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        newSimilarOrder \u003d"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"                new OrderBuilder().withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT)"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"                        .withOrderId(ORDER_CAMEMBERT.getOrderId())"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"                        .withQuantity(VALID_QUANTITY_1)"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"                        .withOrderDate(VALID_ORDER_DATE_1)"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"                        .withCompletedDate(VALID_COMPLETED_DATE_1)"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"                        .withCustomerId(BENSON.getId())"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"                        .build();"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.isSameOrder(newSimilarOrder));"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"    public void equals() {"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"        // Same values -\u003e returns true"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"        Order camembertOrderCopy \u003d new OrderBuilder(ORDER_CAMEMBERT).build();"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        assertTrue(ORDER_CAMEMBERT.equals(camembertOrderCopy));"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":"        // Same object -\u003e returns true"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"        assertTrue(ORDER_CAMEMBERT.equals(ORDER_CAMEMBERT));"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"        // Null -\u003e returns false"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(null));"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"        // Different type -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(5));"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"        // Different OrderId --\u003e returns false"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"        final int orderId \u003d 99;"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"        Order editedCamembertOrder \u003d new OrderBuilder(ORDER_CAMEMBERT)"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"                .withOrderId(orderId)"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(editedCamembertOrder));"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"        // Different customerId --\u003e returns false"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"        editedCamembertOrder \u003d new OrderBuilder(ORDER_CAMEMBERT)"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"                .withCustomerId(BENSON.getId())"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(editedCamembertOrder));"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"        // Different cheese type -\u003e returns false"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"        editedCamembertOrder \u003d new OrderBuilder(ORDER_CAMEMBERT)"},{"lineNumber":108,"author":{"gitId":"daniellau88"},"content":"                .withCheeseType(VALID_CHEESE_TYPE_BRIE)"},{"lineNumber":109,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(editedCamembertOrder));"},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":"        // Different order date -\u003e returns false"},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"        editedCamembertOrder \u003d"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":"            new OrderBuilder(ORDER_CAMEMBERT)"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"                .withOrderDate(VALID_ORDER_DATE_2)"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"                .build();"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(editedCamembertOrder));"},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":"        // Different completed date -\u003e returns false"},{"lineNumber":120,"author":{"gitId":"daniellau88"},"content":"        editedCamembertOrder \u003d"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":"                new OrderBuilder(ORDER_CAMEMBERT)"},{"lineNumber":122,"author":{"gitId":"daniellau88"},"content":"                        .withCompletedDate(VALID_COMPLETED_DATE_2)"},{"lineNumber":123,"author":{"gitId":"daniellau88"},"content":"                        .build();"},{"lineNumber":124,"author":{"gitId":"daniellau88"},"content":"        assertFalse(ORDER_CAMEMBERT.equals(editedCamembertOrder));"},{"lineNumber":125,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":126,"author":{"gitId":"daniellau88"},"content":"        // TODO: Add test for different cheese IDs"},{"lineNumber":127,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":7,"daniellau88":121}},{"path":"src/test/java/seedu/address/model/order/QuantityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.model.order;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"public class QuantityTest {"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"    public void constructor_invalidQuantity_throwsIllegalArgumentException() {"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(-1));"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public void isValidQuantity() {"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"        // Negative Quantity"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"        assertFalse(Quantity.isValidQuantity(-1));"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        // Zero Quantity"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        assertFalse(Quantity.isValidQuantity(0));"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"        // Positive Quantity"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        assertTrue(Quantity.isValidQuantity(138));"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":5,"daniellau88":21}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedCustomerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.storage.JsonAdaptedCustomer.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"public class JsonAdaptedCustomerTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"    private static final Integer VALID_CUSTOMER_ID \u003d BENSON.getId().value;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    public void toModelType_validCustomerDetails_returnsCustomer() throws Exception {"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(BENSON);"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(BENSON, customer.toModelType());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"                new JsonAdaptedCustomer(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"                        VALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"                VALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"                new JsonAdaptedCustomer(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"                        VALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, null, VALID_EMAIL,"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"                VALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"                        VALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"                VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"                        INVALID_ADDRESS, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":99,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"        JsonAdaptedCustomer customer \u003d new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"                null, VALID_CUSTOMER_ID, VALID_TAGS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":107,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, customer::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":114,"author":{"gitId":"laurenlhy"},"content":"        JsonAdaptedCustomer customer \u003d"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"                new JsonAdaptedCustomer(VALID_NAME, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"                        VALID_ADDRESS, VALID_CUSTOMER_ID, invalidTags);"},{"lineNumber":117,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, customer::toModelType);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":27,"daniellau88":16,"-":77}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.HOON;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.IDA;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"    public void readAddressBook_invalidCustomerAddressBook_throwDataConversionException() {"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidCustomerAddressBook.json\"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"    public void readAddressBook_invalidAndValidCustomerAddressBook_throwDataConversionException() {"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidCustomerAddressBook.json\"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"        original.addCustomer(HOON);"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"        original.removeCustomer(ALICE);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"        original.addCustomer(IDA);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":9,"daniellau88":2,"-":99}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.testutil.TypicalCustomers;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    private static final Path TYPICAL_CUSTOMERS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalCustomersAddressBook.json\");"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    private static final Path INVALID_CUSTOMER_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidCustomerAddressBook.json\");"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    private static final Path DUPLICATE_CUSTOMER_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateCustomerAddressBook.json\");"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    public void toModelType_typicalCustomersFile_success() throws Exception {"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CUSTOMERS_FILE,"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"        AddressBook typicalCustomersAddressBook \u003d TypicalCustomers.getTypicalAddressBook();"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"        assertEquals(addressBookFromFile, typicalCustomersAddressBook);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"    public void toModelType_invalidCustomerFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CUSTOMER_FILE,"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"    public void toModelType_duplicateCustomers_throwsIllegalValueException() throws Exception {"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CUSTOMER_FILE,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CUSTOMER,"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":10,"daniellau88":3,"-":34}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":"import static seedu.address.testutil.TypicalCustomers.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class."},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":1,"-":67}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withCustomer(\"John\", \"Doe\").build();}"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"     * Adds a new {@code Customer} to the {@code AddressBook} that we are building."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    public AddressBookBuilder withCustomer(Customer customer) {"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"        addressBook.addCustomer(customer);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":5,"-":29}},{"path":"src/test/java/seedu/address/testutil/CheeseBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.Cheese;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.CheeseId;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.CheeseType;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.ExpiryDate;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.ManufactureDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.MaturityDate;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":" * A utility class to help with building Cheese objects."},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":"public class CheeseBuilder {"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_CHEESE_TYPE \u003d \"Brie\";"},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_MANUFACTURE_DATE \u003d \"2020-08-05 08:00\";"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_MATURITY_DATE \u003d \"2021-08-05 08:00\";"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_EXPIRY_DATE \u003d \"2023-08-05 00:00\";"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    private CheeseType cheeseType;"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"    private ManufactureDate manufactureDate;"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private MaturityDate maturityDate;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    private ExpiryDate expiryDate;"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    private CheeseId cheeseId;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"     * Creates a {@code CheeseBuilder} with the default details."},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder() {"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"        cheeseType \u003d CheeseType.getCheeseType(DEFAULT_CHEESE_TYPE);"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"        manufactureDate \u003d new ManufactureDate(DEFAULT_MANUFACTURE_DATE);"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"        maturityDate \u003d new MaturityDate(DEFAULT_MATURITY_DATE);"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        expiryDate \u003d new ExpiryDate(DEFAULT_EXPIRY_DATE);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        cheeseId \u003d null;"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"     * Initializes the CheeseBuilder with the data of {@code cheeseToCopy}."},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"     * Makes an exact copy (with the same ID) of the {@code cheeseToCopy}."},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder(Cheese cheeseToCopy) {"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        cheeseType \u003d cheeseToCopy.getCheeseType();"},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"        manufactureDate \u003d cheeseToCopy.getManufactureDate();"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"        maturityDate \u003d cheeseToCopy.getMaturityDate();"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"        expiryDate \u003d cheeseToCopy.getExpiryDate();"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        cheeseId \u003d cheeseToCopy.getCheeseId();"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code CheeseType} of the {@code Cheese} that we are building."},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder withCheeseType(String cheeseType) {"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        this.cheeseType \u003d CheeseType.getCheeseType(cheeseType);"},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code ManufactureDate} of the {@code Cheese} that we are building."},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder withManufactureDate(String manufactureDate) {"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":"        this.manufactureDate \u003d new ManufactureDate(manufactureDate);"},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code MaturityDate} of the {@code Cheese} that we are building."},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder withMaturityDate(String maturityDate) {"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":"        this.maturityDate \u003d new MaturityDate(maturityDate);"},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code ExpiryDate} of the {@code Cheese} that we are building."},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder withExpiryDate(String expiryDate) {"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"        this.expiryDate \u003d new ExpiryDate(expiryDate);"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code CheeseId} of the {@code Cheese} that we are building."},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"    public CheeseBuilder withCheeseId(int id) {"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":"        this.cheeseId \u003d new CheeseId(id);"},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"     * Returns the immutable {@code Cheese} object representing the data we have."},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"     * @return an {@code Cheese} representation of data"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":"    public Cheese build() {"},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"        if (cheeseId \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"            return new Cheese(cheeseType, manufactureDate, maturityDate, expiryDate);"},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"            return new Cheese(cheeseType, manufactureDate, maturityDate, expiryDate, cheeseId);"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"AhQuanz":1,"daniellau88":100}},{"path":"src/test/java/seedu/address/testutil/CustomerBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":" * A utility class to help with building Customer objects."},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":" */"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"public class CustomerBuilder {"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    private Name name;"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    private Phone phone;"},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"    private Email email;"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"    private Address address;"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"    private CustomerId customerId;"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"     * Creates a {@code CustomerBuilder} with the default details."},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder() {"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"        customerId \u003d CustomerIdStub.getNextId();"},{"lineNumber":42,"author":{"gitId":"laurenlhy"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"     * Initializes the CustomerBuilder with the data of {@code customerToCopy}."},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder(Customer customerToCopy) {"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        name \u003d customerToCopy.getName();"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        phone \u003d customerToCopy.getPhone();"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"        email \u003d customerToCopy.getEmail();"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"        address \u003d customerToCopy.getAddress();"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":"        customerId \u003d customerToCopy.getId();"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"        tags \u003d new HashSet\u003c\u003e(customerToCopy.getTags());"},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Name} of the {@code Customer} that we are building."},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Customer} that we are building."},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder withTags(String ... tags) {"},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Address} of the {@code Customer} that we are building."},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder withAddress(String address) {"},{"lineNumber":77,"author":{"gitId":"laurenlhy"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":81,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Phone} of the {@code Customer} that we are building."},{"lineNumber":83,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder withPhone(String phone) {"},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":89,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Email} of the {@code Customer} that we are building."},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"    public CustomerBuilder withEmail(String email) {"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code customerId} of the {@code Customer} that we are building."},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"    public CustomerBuilder withId(CustomerId customerId) {"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d customerId;"},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":105,"author":{"gitId":"laurenlhy"},"content":"    public Customer build() {"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"        return new Customer(name, phone, email, address, tags, customerId);"},{"lineNumber":107,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":109,"author":{"gitId":"laurenlhy"},"content":"}"}],"authorContributionMap":{"laurenlhy":95,"daniellau88":14}},{"path":"src/test/java/seedu/address/testutil/CustomerUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":" * A utility class for Customer."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":"public class CustomerUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"     * Returns an add command string for adding the {@code customer}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    public static String getAddCommand(Customer customer) {"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getCustomerDetails(customer);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"     * Returns the part of command string for the given {@code customer}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":"    public static String getCustomerDetails(Customer customer) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"        sb.append(PREFIX_NAME + customer.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"        sb.append(PREFIX_PHONE + customer.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"        sb.append(PREFIX_EMAIL + customer.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        sb.append(PREFIX_ADDRESS + customer.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        customer.getTags().stream().forEach("},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":"     * Returns the part of command string for the given {@code EditCustomerDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"    public static String getEditCustomerDescriptorDetails(EditCommand.EditCustomerDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":16,"-":46}},{"path":"src/test/java/seedu/address/testutil/EditCustomerDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"laurenlhy"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":3,"author":{"gitId":"laurenlhy"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"laurenlhy"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"laurenlhy"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":7,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":8,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.logic.commands.EditCommand.EditCustomerDescriptor;"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Address;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":12,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Email;"},{"lineNumber":13,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Name;"},{"lineNumber":14,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Phone;"},{"lineNumber":15,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":17,"author":{"gitId":"laurenlhy"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"laurenlhy"},"content":" * A utility class to help with building EditCustomerDescriptor objects."},{"lineNumber":19,"author":{"gitId":"laurenlhy"},"content":" */"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"public class EditCustomerDescriptorBuilder {"},{"lineNumber":21,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":22,"author":{"gitId":"laurenlhy"},"content":"    private EditCommand.EditCustomerDescriptor descriptor;"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":24,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCustomerDescriptor();"},{"lineNumber":26,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":28,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder(EditCommand.EditCustomerDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitId":"laurenlhy"},"content":"        this.descriptor \u003d new EditCommand.EditCustomerDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"laurenlhy"},"content":"     * Returns an {@code EditCustomerDescriptor} with fields containing {@code customer}\u0027s details"},{"lineNumber":34,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder(Customer customer) {"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"        descriptor \u003d new EditCommand.EditCustomerDescriptor();"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setName(customer.getName());"},{"lineNumber":38,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setPhone(customer.getPhone());"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setEmail(customer.getEmail());"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setAddress(customer.getAddress());"},{"lineNumber":41,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setTags(customer.getTags());"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"        descriptor.setId(customer.getId());"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":45,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Name} of the {@code EditCustomerDescriptor} that we are building."},{"lineNumber":47,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder withName(String name) {"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":51,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Phone} of the {@code EditCustomerDescriptor} that we are building."},{"lineNumber":55,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder withPhone(String phone) {"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":58,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":59,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Email} of the {@code EditCustomerDescriptor} that we are building."},{"lineNumber":63,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder withEmail(String email) {"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":66,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":67,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":69,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"laurenlhy"},"content":"     * Sets the {@code Address} of the {@code EditCustomerDescriptor} that we are building."},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder withAddress(String address) {"},{"lineNumber":73,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code customerId} of the {@code EditCustomerDescriptor} that we are building."},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"    public EditCustomerDescriptorBuilder withId(int customerId) {"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"        descriptor.setId(CustomerId.getNextId(customerId));"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":85,"author":{"gitId":"laurenlhy"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"laurenlhy"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditCustomerDescriptor}"},{"lineNumber":87,"author":{"gitId":"laurenlhy"},"content":"     * that we are building."},{"lineNumber":88,"author":{"gitId":"laurenlhy"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"laurenlhy"},"content":"    public EditCustomerDescriptorBuilder withTags(String... tags) {"},{"lineNumber":90,"author":{"gitId":"laurenlhy"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":91,"author":{"gitId":"laurenlhy"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":92,"author":{"gitId":"laurenlhy"},"content":"        return this;"},{"lineNumber":93,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"laurenlhy"},"content":""},{"lineNumber":95,"author":{"gitId":"laurenlhy"},"content":"    public EditCommand.EditCustomerDescriptor build() {"},{"lineNumber":96,"author":{"gitId":"laurenlhy"},"content":"        return descriptor;"},{"lineNumber":97,"author":{"gitId":"laurenlhy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"laurenlhy"},"content":"}"}],"authorContributionMap":{"laurenlhy":88,"daniellau88":10}},{"path":"src/test/java/seedu/address/testutil/OrderBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.CheeseType;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.customer.CustomerId;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.CompletedDate;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.OrderDate;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.OrderId;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Quantity;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":" * A utility class to help with building Order objects."},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"public class OrderBuilder {"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_CHEESE_TYPE \u003d \"Feta\";"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"    public static final int DEFAULT_QUANTITY \u003d 1;"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_ORDER_DATE \u003d \"2021-02-03 12:00\";"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"    public static final String DEFAULT_COMPLETED_DATE \u003d \"2021-03-04 15:00\";"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public static final CustomerId DEFAULT_CUSTOMER_ID \u003d CustomerId.getNextId(1);"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    private CheeseType cheeseType;"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"    private Quantity quantity;"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"    private OrderDate orderDate;"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    private CompletedDate completedDate;"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"    private OrderId orderId;"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"    private CustomerId customerId;"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"     * Creates a {@code OrderBuilder} with the default details."},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder() {"},{"lineNumber":33,"author":{"gitId":"daniellau88"},"content":"        this.cheeseType \u003d CheeseType.getCheeseType(DEFAULT_CHEESE_TYPE);"},{"lineNumber":34,"author":{"gitId":"daniellau88"},"content":"        this.quantity \u003d new Quantity(DEFAULT_QUANTITY);"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"        this.orderDate \u003d new OrderDate(DEFAULT_ORDER_DATE);"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"        this.completedDate \u003d new CompletedDate(DEFAULT_COMPLETED_DATE);"},{"lineNumber":37,"author":{"gitId":"daniellau88"},"content":"        this.orderId \u003d null;"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d DEFAULT_CUSTOMER_ID;"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"     * Initializes the OrderBuilder with the data of {@code orderToCopy}."},{"lineNumber":43,"author":{"gitId":"daniellau88"},"content":"     * Makes an exact copy (with the same ID) of the {@code orderToCopy}."},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder(Order orderToCopy) {"},{"lineNumber":46,"author":{"gitId":"daniellau88"},"content":"        this.cheeseType \u003d orderToCopy.getCheeseType();"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"        this.quantity \u003d orderToCopy.getQuantity();"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"        this.orderDate \u003d orderToCopy.getOrderDate();"},{"lineNumber":49,"author":{"gitId":"daniellau88"},"content":"        this.completedDate \u003d orderToCopy.getCompletedDate();"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"        this.orderId \u003d orderToCopy.getOrderId();"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d orderToCopy.getCustomerId();"},{"lineNumber":52,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":54,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code CheeseType} of the {@code Order} that we are building."},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withCheeseType(String cheeseType) {"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"        this.cheeseType \u003d CheeseType.getCheeseType(cheeseType);"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":62,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code Quantity} of the {@code Order} that we are building."},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withQuantity(int quantity) {"},{"lineNumber":66,"author":{"gitId":"daniellau88"},"content":"        this.quantity \u003d new Quantity(quantity);"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":70,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code OrderDate} of the {@code Order} that we are building."},{"lineNumber":72,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withOrderDate(String orderDate) {"},{"lineNumber":74,"author":{"gitId":"daniellau88"},"content":"        this.orderDate \u003d new OrderDate(orderDate);"},{"lineNumber":75,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":78,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code CompletedDate} of the {@code Order} that we are building."},{"lineNumber":80,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withCompletedDate(String completedDate) {"},{"lineNumber":82,"author":{"gitId":"daniellau88"},"content":"        this.completedDate \u003d new CompletedDate(completedDate);"},{"lineNumber":83,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":84,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":86,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code OrderId} of the {@code Order} that we are building."},{"lineNumber":88,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withOrderId(int id) {"},{"lineNumber":90,"author":{"gitId":"daniellau88"},"content":"        this.orderId \u003d new OrderId(id);"},{"lineNumber":91,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":94,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code OrderId} of the {@code Order} that we are building."},{"lineNumber":96,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withOrderId(OrderId id) {"},{"lineNumber":98,"author":{"gitId":"daniellau88"},"content":"        this.orderId \u003d id;"},{"lineNumber":99,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":100,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":102,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"daniellau88"},"content":"     * Sets the {@code OrderId} of the {@code Order} that we are building."},{"lineNumber":104,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"daniellau88"},"content":"    public OrderBuilder withCustomerId(CustomerId customerId) {"},{"lineNumber":106,"author":{"gitId":"daniellau88"},"content":"        this.customerId \u003d customerId;"},{"lineNumber":107,"author":{"gitId":"daniellau88"},"content":"        return this;"},{"lineNumber":108,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":110,"author":{"gitId":"daniellau88"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"daniellau88"},"content":"     * Returns the immutable {@code Order} object representing the data we have."},{"lineNumber":112,"author":{"gitId":"daniellau88"},"content":"     * @return an {@code Order} representation of data"},{"lineNumber":113,"author":{"gitId":"daniellau88"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"daniellau88"},"content":"    public Order build() {"},{"lineNumber":115,"author":{"gitId":"daniellau88"},"content":"        if (orderId \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitId":"daniellau88"},"content":"            return new Order(cheeseType, quantity, orderDate, completedDate, customerId);"},{"lineNumber":117,"author":{"gitId":"daniellau88"},"content":"        } else {"},{"lineNumber":118,"author":{"gitId":"daniellau88"},"content":"            return new Order(cheeseType, quantity, orderDate, completedDate, orderId, customerId);"},{"lineNumber":119,"author":{"gitId":"daniellau88"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"daniellau88"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":122,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":122}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"laurenlhy"},"content":"     * Returns the middle index of the customer in the {@code model}\u0027s customer list."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":39,"author":{"gitId":"laurenlhy"},"content":"        return Index.fromOneBased(model.getFilteredCustomerList().size() / 2);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"     * Returns the last index of the customer in the {@code model}\u0027s customer list."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"        return Index.fromOneBased(model.getFilteredCustomerList().size());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"laurenlhy"},"content":"     * Returns the customer in the {@code model}\u0027s customer list at {@code index}."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"laurenlhy"},"content":"    public static Customer getCustomer(Model model, Index index) {"},{"lineNumber":53,"author":{"gitId":"laurenlhy"},"content":"        return model.getFilteredCustomerList().get(index.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalCheese.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_CAMEMBERT;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_FETA;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_1;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EXPIRY_DATE_2;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MANUFACTURE_DATE_1;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MANUFACTURE_DATE_2;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATURITY_DATE_1;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATURITY_DATE_2;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.cheese.Cheese;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":" * A utility class containing a list of {@code Cheese} objects to be used in tests."},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":"public class TypicalCheese {"},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":"    public static final Cheese CAMEMBERT \u003d new CheeseBuilder().withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT)"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"        .withManufactureDate(VALID_MANUFACTURE_DATE_1).withMaturityDate(VALID_MATURITY_DATE_1)"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"        .withExpiryDate(VALID_EXPIRY_DATE_1)"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        .build();"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"    public static final Cheese FETA \u003d new CheeseBuilder().withCheeseType(VALID_CHEESE_TYPE_FETA)"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        .withManufactureDate(VALID_MANUFACTURE_DATE_2).withMaturityDate(VALID_MATURITY_DATE_2)"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        .withExpiryDate(VALID_EXPIRY_DATE_2)"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"        .build();"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":26}},{"path":"src/test/java/seedu/address/testutil/TypicalCustomers.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.CustomerIdStub;"},{"lineNumber":20,"author":{"gitId":"laurenlhy"},"content":"import seedu.address.model.customer.Customer;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"laurenlhy"},"content":" * A utility class containing a list of {@code Customer} objects to be used in tests."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"laurenlhy"},"content":"public class TypicalCustomers {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer ALICE \u003d new CustomerBuilder().withName(\"Alice Pauline\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"            .withTags(\"friends\")"},{"lineNumber":31,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(1)).build();"},{"lineNumber":32,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer BENSON \u003d new CustomerBuilder().withName(\"Benson Meier\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":35,"author":{"gitId":"daniellau88"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":36,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(2)).build();"},{"lineNumber":37,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer CARL \u003d new CustomerBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":38,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":39,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(3)).build();"},{"lineNumber":40,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer DANIEL \u003d new CustomerBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"},{"lineNumber":42,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(4)).build();"},{"lineNumber":43,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer ELLE \u003d new CustomerBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":45,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(5)).build();"},{"lineNumber":46,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer FIONA \u003d new CustomerBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":47,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":48,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(6)).build();"},{"lineNumber":49,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer GEORGE \u003d new CustomerBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":50,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":51,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(7)).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":54,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer HOON \u003d new CustomerBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":55,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":56,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(8)).build();"},{"lineNumber":57,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer IDA \u003d new CustomerBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":58,"author":{"gitId":"daniellau88"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":59,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(9)).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"laurenlhy"},"content":"    // Manually added - Customer\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":62,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer AMY \u003d new CustomerBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":63,"author":{"gitId":"daniellau88"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":64,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(10)).build();"},{"lineNumber":65,"author":{"gitId":"laurenlhy"},"content":"    public static final Customer BOB \u003d new CustomerBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":67,"author":{"gitId":"daniellau88"},"content":"            .withId(CustomerIdStub.getNextId(11)).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"laurenlhy"},"content":"    private TypicalCustomers() {} // prevents instantiation"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"laurenlhy"},"content":"     * Returns an {@code AddressBook} with all the typical customers."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":78,"author":{"gitId":"laurenlhy"},"content":"        for (Customer customer : getTypicalCustomers()) {"},{"lineNumber":79,"author":{"gitId":"laurenlhy"},"content":"            ab.addCustomer(customer);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"laurenlhy"},"content":"    public static List\u003cCustomer\u003e getTypicalCustomers() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":20,"daniellau88":22,"-":45}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitId":"laurenlhy"},"content":"    public static final Index INDEX_FIRST_CUSTOMER \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitId":"laurenlhy"},"content":"    public static final Index INDEX_SECOND_CUSTOMER \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitId":"laurenlhy"},"content":"    public static final Index INDEX_THIRD_CUSTOMER \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"laurenlhy":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalOrder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"daniellau88"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":3,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_CAMEMBERT;"},{"lineNumber":4,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHEESE_TYPE_FETA;"},{"lineNumber":5,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPLETED_DATE_1;"},{"lineNumber":6,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_COMPLETED_DATE_2;"},{"lineNumber":7,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DATE_1;"},{"lineNumber":8,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ORDER_DATE_2;"},{"lineNumber":9,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_1;"},{"lineNumber":10,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_QUANTITY_5;"},{"lineNumber":11,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalCustomers.ALICE;"},{"lineNumber":12,"author":{"gitId":"daniellau88"},"content":"import static seedu.address.testutil.TypicalCustomers.BENSON;"},{"lineNumber":13,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":14,"author":{"gitId":"daniellau88"},"content":"import seedu.address.model.order.Order;"},{"lineNumber":15,"author":{"gitId":"daniellau88"},"content":""},{"lineNumber":16,"author":{"gitId":"daniellau88"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"daniellau88"},"content":" * A utility class containing a list of {@code Order} objects to be used in tests."},{"lineNumber":18,"author":{"gitId":"daniellau88"},"content":" */"},{"lineNumber":19,"author":{"gitId":"daniellau88"},"content":"public class TypicalOrder {"},{"lineNumber":20,"author":{"gitId":"daniellau88"},"content":"    public static final Order ORDER_CAMEMBERT \u003d new OrderBuilder()"},{"lineNumber":21,"author":{"gitId":"daniellau88"},"content":"        .withCheeseType(VALID_CHEESE_TYPE_CAMEMBERT).withQuantity(VALID_QUANTITY_1)"},{"lineNumber":22,"author":{"gitId":"daniellau88"},"content":"        .withOrderDate(VALID_ORDER_DATE_1).withCompletedDate(VALID_COMPLETED_DATE_1)"},{"lineNumber":23,"author":{"gitId":"daniellau88"},"content":"        .withCustomerId(ALICE.getId())"},{"lineNumber":24,"author":{"gitId":"daniellau88"},"content":"        .build();"},{"lineNumber":25,"author":{"gitId":"daniellau88"},"content":"    public static final Order ORDER_FETA \u003d new OrderBuilder()"},{"lineNumber":26,"author":{"gitId":"daniellau88"},"content":"        .withCheeseType(VALID_CHEESE_TYPE_FETA).withQuantity(VALID_QUANTITY_5)"},{"lineNumber":27,"author":{"gitId":"daniellau88"},"content":"        .withOrderDate(VALID_ORDER_DATE_2).withCompletedDate(VALID_COMPLETED_DATE_2)"},{"lineNumber":28,"author":{"gitId":"daniellau88"},"content":"        .withCustomerId(BENSON.getId())"},{"lineNumber":29,"author":{"gitId":"daniellau88"},"content":"        .build();"},{"lineNumber":30,"author":{"gitId":"daniellau88"},"content":"}"}],"authorContributionMap":{"daniellau88":30}}]
