[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"# CakeCollate"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dHVE6WF4JMI)](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"### **CakeCollate**"},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":"* CakeCollate is a command line based application for home bakers with small businesses."},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":"* You can consolidate all your orders in one application and easily track customer details,"},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"order details and delivery dates in this application! "},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":"\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"### **Useful Links**"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"* [User guide](https://ay2021s2-cs2103t-t11-4.github.io/tp/UserGuide.html)"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":"* [Developer guide](https://ay2021s2-cs2103t-t11-4.github.io/tp/DeveloperGuide.html)"},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"### **Acknowledgements**"},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"* Libraries used"},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"    * [JavaFX](https://openjfx.io/)"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"    * [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    * [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"pavz02":12,"xiinweii98":9,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"### Priscilla"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"\u003cimg src\u003d\"images/ppris.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"[[github](http://github.com/ppris)]"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"[[portfolio](team/ppris.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"* Role: Team Lead, Deliverables and Scheduling "},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"* Responsibilities: Model"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"### Soh Xin Wei"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"\u003cimg src\u003d\"images/xiinweii98.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"[[github](http://github.com/xiinweii98)]"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"[[portfolio](team/xiinweii98.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"* Role: Developer, Testing"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"* Responsibilities: Logic"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"### Lim Rui Xiong"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"\u003cimg src\u003d\"images/ruixiong2211.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":"[[github](http://github.com/RuiXiong2211)] [[portfolio](team/RuiXiong2211)]"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"[[portfolio](team/ruixiong2211.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"* Role: Developer, Documentation"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"* Responsibilities: Commons"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"pavz02"},"content":"### Pavitra"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"pavz02"},"content":"\u003cimg src\u003d\"images/pavz02.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"pavz02"},"content":"[[github](http://github.com/pavz02)]"},{"lineNumber":47,"author":{"gitId":"pavz02"},"content":"[[portfolio](team/pavz02.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"pavz02"},"content":"* Role: Developer, Code quality"},{"lineNumber":50,"author":{"gitId":"pavz02"},"content":"* Responsibilities: Ui and JavaFX"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"### Bhadani Simran"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":"\u003cimg src\u003d\"images/simran-bhadani3.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"simran-bhadani3"},"content":"[[github](http://github.com/simran-bhadani3)]"},{"lineNumber":57,"author":{"gitId":"simran-bhadani3"},"content":"[[portfolio](team/simran-bhadani3.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"simran-bhadani3"},"content":"* Role: Developer, Integration"},{"lineNumber":60,"author":{"gitId":"simran-bhadani3"},"content":"* Responsibilities: Storage"}],"authorContributionMap":{"pPris":6,"RuiXiong2211":2,"pavz02":6,"xiinweii98":10,"-":30,"simran-bhadani3":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"simran-bhadani3"},"content":"* small-time, home-based cake seller"},{"lineNumber":240,"author":{"gitId":"simran-bhadani3"},"content":"* has a lot of orders to keep track of"},{"lineNumber":241,"author":{"gitId":"simran-bhadani3"},"content":"* sells cakes on multiple platforms and wants to collect all orders in one place"},{"lineNumber":242,"author":{"gitId":"simran-bhadani3"},"content":"* prefers desktop apps over other types"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"simran-bhadani3"},"content":"**Value proposition**: keep track of and manage all orders placed on various online selling platforms in one place"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `***`, Medium (nice to have) - `**`, Low (unlikely to have) - `*`"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"pPris"},"content":"| Priority| As a …​                                   | I can …​                                                        | So that …​                                                                                |"},{"lineNumber":255,"author":{"gitId":"pPris"},"content":"|---------|----------------------------------------------|--------------------------------------------------------------------|----------------------------------------------------------------------------------------------|"},{"lineNumber":256,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | view all the possible commands that I can execute                  | I know what functionalities I can make use of when using the program                         |"},{"lineNumber":257,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | add orders for the day                                             | I can add new orders to my database                                                          |"},{"lineNumber":258,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | delete orders for the day                                          | I can remove unnecessary orders from my database                                             |"},{"lineNumber":259,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | list all my orders for the day                                     | I can view what orders I have to fulfil for the day                                          |"},{"lineNumber":260,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | retrieve data stored in the previous sessions                      | -                                                                                            |"},{"lineNumber":261,"author":{"gitId":"pPris"},"content":"| `***`   | User logging in after a long time            | delete all orders, reset the application                           | I can start on a clean slate since the previous orders are now meaningless to me             |"},{"lineNumber":262,"author":{"gitId":"pPris"},"content":"| `**`    | Advanced user                                | set up shortcuts and short forms                                   | I can reduce the time it takes to enter orders                                               |"},{"lineNumber":263,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | receive reminders for the orders due soon                          | I remember and complete them on time                                                         |"},{"lineNumber":264,"author":{"gitId":"pPris"},"content":"| `**`    | User who\u0027s at least slightly experienced     | delete multiple orders at one go                                   | I can reflect mass cancellations in my database if they occur                                |"},{"lineNumber":265,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | sort the orders according to which one needs to be completed first | I can prioritise the orders to work on for that day                                          |"},{"lineNumber":266,"author":{"gitId":"pPris"},"content":"| `**`    | User that works a lot at night               | set the application to dark mode                                   | my eyes remain healthy                                                                       |"},{"lineNumber":267,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | add recipes                                                        | I know what ingredients are required for a particular order                                  |"},{"lineNumber":268,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | edit individual orders                                             | I can update orders if a customer changes it instead of deleting and adding another order    |"},{"lineNumber":269,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | add notes and special requests for orders                          | details on customized orders can be mentioned together with the main order                   |"},{"lineNumber":270,"author":{"gitId":"pPris"},"content":"| `**`    | User who loves statistics                    | view my most ordered products                                      | I know what to products to promote more                                                      |"},{"lineNumber":271,"author":{"gitId":"pPris"},"content":"| `**`    | Regular user                                 | be warned of duplicate orders I might have accidentally entered    | I can avoid making more than necessary, which may waste time and resources                   |"},{"lineNumber":272,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | find the orders made by a certain customer                         | I can retrieve information about the orders that this customer have made before, if needed   |"},{"lineNumber":273,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | input multiple order descriptions at one go                        | I don\u0027t need to input multiple entries for customers who order more than one type of cake    |"},{"lineNumber":274,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | set prices and costs of orders                                     | I can note how much profit I am earning                                                      |"},{"lineNumber":275,"author":{"gitId":"pPris"},"content":"| `*`     | User who does delivery                       | group orders by location                                           | I can deliver more efficiently                                                               |"},{"lineNumber":276,"author":{"gitId":"pPris"},"content":"| `*`     | User who does delivery                       | view a suggested delivery route or delivery plan                   | I don\u0027t need to compute dijkstra\u0027s algorithm by myself                                       |"},{"lineNumber":277,"author":{"gitId":"pPris"},"content":"| `*`     | User                                         | load the app quickly                                               | I can access the data quickly in case I forgot to prepare any                                |"},{"lineNumber":278,"author":{"gitId":"pPris"},"content":"| `*`     | Cautious User                                | sync my data to other services                                     | I won\u0027t lose my data if I forget my password or if I wipe my hard disk                       |"},{"lineNumber":279,"author":{"gitId":"pPris"},"content":"| `*`     | User                                         | save a particular customer\u0027s information                           | I can quickly add another order from this customer next time                                 |"},{"lineNumber":280,"author":{"gitId":"pPris"},"content":"| `*`     | User logging in after a long time            | refresher on the advanced commands                                 | -                                                                                            |"},{"lineNumber":281,"author":{"gitId":"pPris"},"content":"| `*`     | Regular user                                 | keep track of the money paid or owed by the customer               | I can ensure that all my dues have been received                                             |"},{"lineNumber":282,"author":{"gitId":"pPris"},"content":"| `*`     | User who wants to reward loyal customers     | view a list of repeating customers                                 | I can reward loyal customers with discounts                                                  |"},{"lineNumber":283,"author":{"gitId":"pPris"},"content":"| `*`     | User who finds social media platforms tiring | view the platforms that most of my orders come from                | I know which platform I should spend more time promoting on                                  |"},{"lineNumber":284,"author":{"gitId":"pPris"},"content":"| `*`     | Advanced user                                | add promo codes and minimum order discounts                        | I know what discounts to give to those who meet the mentioned criteria only                  |"},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"pPris"},"content":""},{"lineNumber":289,"author":{"gitId":"pPris"},"content":"[comment]: \u003c\u003e (| `**`    | User                                         | keep track of how many times a user has ordered with the company   | I can give discounts if they have ordered more than a certain number of time                 |)"},{"lineNumber":290,"author":{"gitId":"pPris"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"RuiXiong2211"},"content":"(For all use cases below, the **System** is `CakeCollate` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Delete an order**"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":300,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":301,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to delete a specific order in the list"},{"lineNumber":302,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate deletes the order"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"RuiXiong2211"},"content":"    * 3a1. CakeCollate shows an error message."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":317,"author":{"gitId":"-"},"content":"      "},{"lineNumber":318,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Add an order**"},{"lineNumber":319,"author":{"gitId":"-"},"content":""},{"lineNumber":320,"author":{"gitId":"RuiXiong2211"},"content":"**MSS**"},{"lineNumber":321,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":322,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":323,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":324,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to add a specific order in the list"},{"lineNumber":325,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate adds the order"},{"lineNumber":326,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":327,"author":{"gitId":"RuiXiong2211"},"content":"    Use case ends."},{"lineNumber":328,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":329,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Edit an order**"},{"lineNumber":330,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":331,"author":{"gitId":"RuiXiong2211"},"content":"**MSS**"},{"lineNumber":332,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":333,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":334,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":335,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to edit a specific order in the list"},{"lineNumber":336,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate edits the order"},{"lineNumber":337,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":338,"author":{"gitId":"RuiXiong2211"},"content":"    Use case ends."},{"lineNumber":339,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":340,"author":{"gitId":"RuiXiong2211"},"content":"**Extensions**"},{"lineNumber":341,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":342,"author":{"gitId":"RuiXiong2211"},"content":"* 2a. The list is empty."},{"lineNumber":343,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":344,"author":{"gitId":"RuiXiong2211"},"content":"  Use case ends."},{"lineNumber":345,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":346,"author":{"gitId":"RuiXiong2211"},"content":"* 3a. The given index is invalid."},{"lineNumber":347,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":348,"author":{"gitId":"RuiXiong2211"},"content":"    * 3a1. CakeCollate shows an error message."},{"lineNumber":349,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":350,"author":{"gitId":"RuiXiong2211"},"content":"      Use case resumes at step 2."},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"xiinweii98"},"content":"* Constraints:"},{"lineNumber":355,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should be backward compatible with data produced by earlier releases."},{"lineNumber":356,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":357,"author":{"gitId":"xiinweii98"},"content":"* Technical requirements:"},{"lineNumber":358,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should work on any _mainstream OS_ on both 32-bit and 64-bit environments with Java `11` or above installed."},{"lineNumber":359,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":360,"author":{"gitId":"xiinweii98"},"content":"* Performance requirements:"},{"lineNumber":361,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should be able to hold up to 1000 orders without a noticeable sluggishness in performance for typical usage."},{"lineNumber":362,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should response within two seconds for all commands."},{"lineNumber":363,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":364,"author":{"gitId":"xiinweii98"},"content":"* Quality requirements:"},{"lineNumber":365,"author":{"gitId":"xiinweii98"},"content":"    * A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":366,"author":{"gitId":"xiinweii98"},"content":"    * A user who does not have much experience with command line interface tools should still be able to use CakeCollate with the help of the _[User guide](UserGuide.md)_ and the `help` command in CakeCollate."},{"lineNumber":367,"author":{"gitId":"xiinweii98"},"content":"    * A user who is experienced with command line interface tools should find CakeCollate commands easy to use."},{"lineNumber":368,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":369,"author":{"gitId":"xiinweii98"},"content":"* Process requirements:"},{"lineNumber":370,"author":{"gitId":"xiinweii98"},"content":"    * The project is expected to adhere to a schedule that delivers a feature set every two weeks."},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":377,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":378,"author":{"gitId":"pavz02"},"content":"* **MSS**: Main success scenario, lists the steps of a typical usage of the application by the user"},{"lineNumber":379,"author":{"gitId":"pavz02"},"content":"* **Feature set**: A list of specifications and functionalities of the application"},{"lineNumber":380,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":389,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":404,"author":{"gitId":"-"},"content":""},{"lineNumber":405,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":406,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":407,"author":{"gitId":"-"},"content":""},{"lineNumber":408,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":417,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":420,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":421,"author":{"gitId":"-"},"content":""},{"lineNumber":422,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":423,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":424,"author":{"gitId":"-"},"content":""},{"lineNumber":425,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":426,"author":{"gitId":"-"},"content":""},{"lineNumber":427,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":428,"author":{"gitId":"-"},"content":""},{"lineNumber":429,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":430,"author":{"gitId":"-"},"content":""},{"lineNumber":431,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"pPris":34,"RuiXiong2211":39,"pavz02":3,"xiinweii98":17,"-":335,"simran-bhadani3":5}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a **desktop app for managing cake orders, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CakeCollate can get your order management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"1. Download the latest `cakecollate.jar` from [here](https://github.com/AY2021S2-CS2103T-T11-4/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your CakeCollate."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will display the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"   * **`list`** : Lists all orders in the CakeCollate database."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3` : Adds an order with a contact named `John Doe` to CakeCollate."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"   * **`delete`**`3` : Deletes the 3rd order shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"   * **`clear`** : Deletes all order in the CakeCollate database."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"* `d/DELIVERY_DATE` should specify a date at least 3 days after the date the command is executed."},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"pavz02"},"content":"Gives instructions on how to enter orders into the CLI."},{"lineNumber":72,"author":{"gitId":"pavz02"},"content":"Displays a message with a list of all available commands and their format."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"RuiXiong2211"},"content":"### Adding an order: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"RuiXiong2211"},"content":"Adds an order to the CakeCollate database."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"RuiXiong2211"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] d/DELIVERY_DATE o/ORDER_DESCRIPTION`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":87,"author":{"gitId":"RuiXiong2211"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3`"},{"lineNumber":88,"author":{"gitId":"RuiXiong2211"},"content":"* `add n/Betsy Crowe t/daughter e/betsycrowe@example.com a/Newgate Prison p/1234567 t/friend d/13-05-2100 /o chocolate cake 5 durian cake 10 mochi cake 100`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"xiinweii98"},"content":"### List all existing orders : `list`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"xiinweii98"},"content":"Shows a list of all orders in the CakeCollate database."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"RuiXiong2211"},"content":"### Editing an order : `edit`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"RuiXiong2211"},"content":"Edits an existing order in the CakeCollate database."},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"RuiXiong2211"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG] [d/DELIVERY_DATE] [o/ORDER_DESCRIPTION]​`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"RuiXiong2211"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the displayed order list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":106,"author":{"gitId":"RuiXiong2211"},"content":"* You can remove all the order’s tags by typing `t/` without"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":110,"author":{"gitId":"RuiXiong2211"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st order to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":111,"author":{"gitId":"RuiXiong2211"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":120,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":122,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":124,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":128,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"simran-bhadani3"},"content":"### Deleting an order : `delete`"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"simran-bhadani3"},"content":"Deletes the specified order from the CakeCollate database."},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"simran-bhadani3"},"content":"Format: `delete ID...`"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"simran-bhadani3"},"content":"* Deletes the orders with the specified ids."},{"lineNumber":138,"author":{"gitId":"simran-bhadani3"},"content":"* The `ID` refers to the order `ID` number shown in the list of orders."},{"lineNumber":139,"author":{"gitId":"simran-bhadani3"},"content":"* One or more ids can be entered."},{"lineNumber":140,"author":{"gitId":"simran-bhadani3"},"content":"* The `ID` **must be valid**."},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":143,"author":{"gitId":"simran-bhadani3"},"content":"* `list` followed by `delete 2` deletes the order with `ID` 2 from the CakeCollate database."},{"lineNumber":144,"author":{"gitId":"simran-bhadani3"},"content":"* `delete 2 3` deletes the orders with ids 2 and 3 from the CakeCollate database."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"### Clearing all existing orders: `clear`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"Deletes all existing orders in the CakeCollate database."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"Warning: this is an undo-able operation."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate data is saved as a JSON file `[JAR file location]/data/cakecollate.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":169,"author":{"gitId":"simran-bhadani3"},"content":"If your changes to the data file makes its format invalid, CakeCollate will discard all data and start with an empty data file at the next run."},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":177,"author":{"gitId":"-"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":181,"author":{"gitId":"simran-bhadani3"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CakeCollate home folder."},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":188,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":189,"author":{"gitId":"RuiXiong2211"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] d/DELIVERY_DATE o/ORDER_TYPE` \u003cbr\u003e e.g., `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3`"},{"lineNumber":190,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":191,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":192,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":193,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":194,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":196,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":197,"author":{"gitId":"xiinweii98"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":198,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":199,"author":{"gitId":"xiinweii98"},"content":"## Acknowledgements"},{"lineNumber":200,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":201,"author":{"gitId":"xiinweii98"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"pPris":3,"pavz02":2,"RuiXiong2211":13,"xiinweii98":18,"-":152,"simran-bhadani3":13}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: CakeCollate"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dHVE6WF4JMI)](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"**CakeCollate is a desktop application for managing your order details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"* If you are interested in using CakeCollate, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"* If you are interested about developing CakeCollate, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"* Libraries used"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"    * [JavaFX](https://openjfx.io/)"},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"    * [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"    * [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"xiinweii98":11,"-":10}},{"path":"docs/team/pavz02.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"title: Pavitra\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"pavz02":2,"-":44}},{"path":"docs/team/ruixiong2211.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: Lim Rui Xiong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"xiinweii98":48}},{"path":"docs/team/simran-bhadani3.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"simran-bhadani3"},"content":"---"},{"lineNumber":2,"author":{"gitId":"simran-bhadani3"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"simran-bhadani3"},"content":"title: Bhadani Simran\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"simran-bhadani3"},"content":"---"},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":6,"author":{"gitId":"simran-bhadani3"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":8,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":10,"author":{"gitId":"simran-bhadani3"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":12,"author":{"gitId":"simran-bhadani3"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":14,"author":{"gitId":"simran-bhadani3"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"simran-bhadani3"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"simran-bhadani3"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"simran-bhadani3"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"simran-bhadani3"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":20,"author":{"gitId":"simran-bhadani3"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":22,"author":{"gitId":"simran-bhadani3"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":24,"author":{"gitId":"simran-bhadani3"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"simran-bhadani3"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":27,"author":{"gitId":"simran-bhadani3"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"simran-bhadani3"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"simran-bhadani3"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":31,"author":{"gitId":"simran-bhadani3"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"simran-bhadani3"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"simran-bhadani3"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"simran-bhadani3"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"simran-bhadani3"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"simran-bhadani3"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":38,"author":{"gitId":"simran-bhadani3"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"simran-bhadani3"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"simran-bhadani3"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"simran-bhadani3"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"simran-bhadani3"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":44,"author":{"gitId":"simran-bhadani3"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"simran-bhadani3"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"simran-bhadani3"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":48,"author":{"gitId":"simran-bhadani3"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"simran-bhadani3":48}},{"path":"docs/team/xiinweii98.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: Soh Xin Wei\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"xiinweii98":48}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":" * Adds an order to CakeCollate."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to CakeCollate. \""},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_DATE + \"DELIVERY_DATE \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_TAG + \"owesMoney\""},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_DATE + \"01/01/2022\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in CakeCollate\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":8,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":" * Edits the details of an existing order in CakeCollate."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"            + \"by the index number used in the displayed order list. \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\""},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"            + \"[\" + PREFIX_DATE + \"DELIVERY_DATE]\\n\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited order: %1$s\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in CakeCollate.\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"     * @param index of the order in the filtered order list to edit"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"     * @param editPersonDescriptor details to edit the order with"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":103,"author":{"gitId":"xiinweii98"},"content":"        DeliveryDate updatedDeliveryDate \u003d"},{"lineNumber":104,"author":{"gitId":"xiinweii98"},"content":"                editPersonDescriptor.getDeliveryDate().orElse(personToEdit.getDeliveryDate());"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"xiinweii98"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, updatedDeliveryDate);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":"     * Stores the details to edit the order with. Each non-empty field value will replace the"},{"lineNumber":129,"author":{"gitId":"xiinweii98"},"content":"     * corresponding field value of the order."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":137,"author":{"gitId":"xiinweii98"},"content":"        private DeliveryDate deliveryDate;"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":143,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":144,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":151,"author":{"gitId":"xiinweii98"},"content":"            setDeliveryDate(toCopy.deliveryDate);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":158,"author":{"gitId":"xiinweii98"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags, deliveryDate);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":195,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":196,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":203,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":204,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":205,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"xiinweii98"},"content":"        public void setDeliveryDate(DeliveryDate deliveryDate) {"},{"lineNumber":211,"author":{"gitId":"xiinweii98"},"content":"            this.deliveryDate \u003d deliveryDate;"},{"lineNumber":212,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":214,"author":{"gitId":"xiinweii98"},"content":"        public Optional\u003cDeliveryDate\u003e getDeliveryDate() {"},{"lineNumber":215,"author":{"gitId":"xiinweii98"},"content":"            return Optional.ofNullable(deliveryDate);"},{"lineNumber":216,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":235,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":237,"author":{"gitId":"xiinweii98"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":238,"author":{"gitId":"xiinweii98"},"content":"                    \u0026\u0026 getDeliveryDate().equals(e.getDeliveryDate());"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":29,"-":212}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"                        PREFIX_TAG, PREFIX_DATE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_DATE)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"        DeliveryDate deliveryDate \u003d ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList, deliveryDate);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":7,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"                        PREFIX_TAG, PREFIX_DATE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"            editPersonDescriptor.setDeliveryDate(ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DATE).get()));"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":6,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":126,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"xiinweii98"},"content":"     * Parses a {@code String deliveryDate} into an {@code DeliveryDate}."},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":129,"author":{"gitId":"xiinweii98"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"xiinweii98"},"content":"     * @throws ParseException if the given {@code deliveryDate} is invalid."},{"lineNumber":131,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"xiinweii98"},"content":"    public static DeliveryDate parseDeliveryDate(String deliveryDate) throws ParseException {"},{"lineNumber":133,"author":{"gitId":"xiinweii98"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":134,"author":{"gitId":"xiinweii98"},"content":"        String trimmedDeliveryDate \u003d deliveryDate.trim();"},{"lineNumber":135,"author":{"gitId":"xiinweii98"},"content":"        if (!DeliveryDate.isValidDeliveryDate(trimmedDeliveryDate)) {"},{"lineNumber":136,"author":{"gitId":"xiinweii98"},"content":"            throw new ParseException(DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"xiinweii98"},"content":"        return new DeliveryDate(trimmedDeliveryDate);"},{"lineNumber":139,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":16,"-":124}},{"path":"src/main/java/seedu/address/model/person/DeliveryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":" * Represents an Order\u0027s delivery datre in CakeCollate."},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeliveryDate(String)}"},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":" */"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"public class DeliveryDate {"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Deliver date should be of the format dd/mm/yyyy, dd-mm-yyyy, \""},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"            + \"dd.mm.yyyy or dd MMM yyyy and adhere to the following constraints:\\n\""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"            + \"1. The delivery date should have a valid day, month and year.\\n\""},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"            + \"2. The delivery date should be at least 3 days after the order date.\\n\""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"            + \"For example:\\n\""},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"            + \"01/01/2022, 01-01-2022, 01.01.2022, 01 Jan 2022\";"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    private static final DateTimeFormatter ACCEPTABLE_FORMATS \u003d"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"            DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][dd-MM-yyyy][dd.MM.yyyy][dd MMM yyyy]\");"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    private static final long DELIVERY_DATE_BUFFER \u003d 3L;"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"    public final LocalDate value;"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"     * Constructs a {@code DeliveryDate}."},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"     * @param deliveryDate A valid delivery date."},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"    public DeliveryDate(String deliveryDate) {"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"        checkArgument(isValidDeliveryDate(deliveryDate), MESSAGE_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"        value \u003d LocalDate.parse(deliveryDate, ACCEPTABLE_FORMATS);"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"     * Returns true if a given string is a valid date 3 working days after current date."},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    public static boolean isThreeDaysLater(String test) {"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"        LocalDate toTest \u003d LocalDate.parse(test, ACCEPTABLE_FORMATS);"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"        LocalDate dateToday \u003d LocalDate.now();"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"        LocalDate acceptableDate \u003d dateToday.plusDays(DELIVERY_DATE_BUFFER);"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"        return toTest.isAfter(acceptableDate) || toTest.isEqual(acceptableDate);"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"     * Returns true if a given string is a valid delivery date."},{"lineNumber":53,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"    public static boolean isValidDeliveryDate(String test) {"},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"        // Test if date is valid using LocalDate.parse()"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"            LocalDate.parse(test, ACCEPTABLE_FORMATS);"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"        // Test if date is 3 working days after current Date"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        return isThreeDaysLater(test);"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"xiinweii98"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter toDisplay \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":68,"author":{"gitId":"xiinweii98"},"content":"        return toDisplay.format(value);"},{"lineNumber":69,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":71,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"xiinweii98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"xiinweii98"},"content":"        return other \u003d\u003d this"},{"lineNumber":74,"author":{"gitId":"xiinweii98"},"content":"                || (other instanceof DeliveryDate"},{"lineNumber":75,"author":{"gitId":"xiinweii98"},"content":"                \u0026\u0026 value.equals(((DeliveryDate) other).value));"},{"lineNumber":76,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":78,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"xiinweii98"},"content":"    public int hashCode() {"},{"lineNumber":80,"author":{"gitId":"xiinweii98"},"content":"        return value.hashCode();"},{"lineNumber":81,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"xiinweii98"},"content":"}"}],"authorContributionMap":{"xiinweii98":82}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    private final DeliveryDate deliveryDate;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, DeliveryDate deliveryDate) {"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"        requireAllNonNull(name, phone, email, address, tags, deliveryDate);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"    public DeliveryDate getDeliveryDate() {"},{"lineNumber":66,"author":{"gitId":"xiinweii98"},"content":"        return deliveryDate;"},{"lineNumber":67,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":98,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":101,"author":{"gitId":"xiinweii98"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":102,"author":{"gitId":"xiinweii98"},"content":"                \u0026\u0026 otherPerson.getDeliveryDate().equals(getDeliveryDate());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":108,"author":{"gitId":"xiinweii98"},"content":"        return Objects.hash(name, phone, email, address, tags, deliveryDate);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"xiinweii98"},"content":"        builder.append(\"; DeliveryDate: \")"},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":"                .append(getDeliveryDate());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":13,"-":119}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":" * Contains utility methods for populating {@code CakeCollate} with sample data."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"    private static LocalDate dateToday \u003d LocalDate.now();"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    private static DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy]\");"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"friends\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(3L)))),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(dateFormatter.format(dateToday.plusDays(4L)))),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"neighbours\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(5L)))),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"family\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(6L)))),"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"classmates\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(7L)))),"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"                getTagSet(\"colleagues\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(8L))))"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":14,"-":53}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    private final String deliveryDate;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"            @JsonProperty(\"deliveryDate\") String deliveryDate) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d source.getDeliveryDate().toString();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"xiinweii98"},"content":"        if (deliveryDate \u003d\u003d null) {"},{"lineNumber":111,"author":{"gitId":"xiinweii98"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":112,"author":{"gitId":"xiinweii98"},"content":"                    DeliveryDate.class.getSimpleName()));"},{"lineNumber":113,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"xiinweii98"},"content":"        if (!DeliveryDate.isValidDeliveryDate(deliveryDate)) {"},{"lineNumber":115,"author":{"gitId":"xiinweii98"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":116,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"xiinweii98"},"content":"        final DeliveryDate modelDeliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":118,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":120,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":121,"author":{"gitId":"xiinweii98"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelDeliveryDate);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":17,"-":107}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"    private Label deliveryDate;"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate.setText(person.getDeliveryDate().toString());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":3,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"      \u003cLabel fx:id\u003d\"deliveryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliveryDate\" /\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"xiinweii98":1,"-":36}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\": [ \"friends\" ],"},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"02/02/2022\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"    \"address\": \"4th street\","},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"02/02/2022\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":4,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01/01/2022\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01-01-2022\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01.01.2022\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01 Jan 2022\""},{"lineNumber":31,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"31/12/2022\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"28-02-2022\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"06.03.2022\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":14,"-":39}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":84,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_AMY + DELIVERY_DATE_DESC_AMY;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":2,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"    public static final String VALID_DELIVERY_DATE_AMY \u003d \"01/01/2022\";"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    public static final String VALID_DELIVERY_DATE_BOB \u003d \"01/01/2022\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":53,"author":{"gitId":"xiinweii98"},"content":"    public static final String DELIVERY_DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DELIVERY_DATE_AMY;"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"    public static final String DELIVERY_DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DELIVERY_DATE_BOB;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"    public static final String INVALID_DELIVERY_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2021/03/03\"; // invalid format"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":72,"author":{"gitId":"xiinweii98"},"content":"                .withTags(VALID_TAG_FRIEND).withDeliveryDate(VALID_DELIVERY_DATE_AMY).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":75,"author":{"gitId":"xiinweii98"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withDeliveryDate(VALID_DELIVERY_DATE_BOB).build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":113,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":8,"-":126}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":73,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, new AddCommand(expectedPerson));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":79,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":80,"author":{"gitId":"xiinweii98"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":87,"author":{"gitId":"xiinweii98"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":88,"author":{"gitId":"xiinweii98"},"content":"                        + DELIVERY_DATE_DESC_AMY,"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":97,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":98,"author":{"gitId":"xiinweii98"},"content":"                + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":102,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":103,"author":{"gitId":"xiinweii98"},"content":"                + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":107,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":108,"author":{"gitId":"xiinweii98"},"content":"                + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":112,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":113,"author":{"gitId":"xiinweii98"},"content":"                + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":114,"author":{"gitId":"xiinweii98"},"content":"                expectedMessage);"},{"lineNumber":115,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":116,"author":{"gitId":"xiinweii98"},"content":"        // missing delivery date prefix"},{"lineNumber":117,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":118,"author":{"gitId":"xiinweii98"},"content":"                + VALID_DELIVERY_DATE_BOB,"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":130,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":134,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":138,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":142,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":146,"author":{"gitId":"xiinweii98"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND + DELIVERY_DATE_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":148,"author":{"gitId":"xiinweii98"},"content":"        // invalid delivery date"},{"lineNumber":149,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":150,"author":{"gitId":"xiinweii98"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + INVALID_DELIVERY_DATE_DESC, DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":153,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":154,"author":{"gitId":"xiinweii98"},"content":"                + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":159,"author":{"gitId":"xiinweii98"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":160,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":39,"-":123}},{"path":"src/test/java/seedu/address/model/person/DeliveryDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"public class DeliveryDateTest {"},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeliveryDate(null));"},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"    public void constructor_invalidDeliveryDate_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"        String invalidDeliveryDate \u003d \"2021/01\";"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DeliveryDate(invalidDeliveryDate));"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"        LocalDate validDeliveryDate \u003d LocalDate.now().plusDays(5L);"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format1 \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format2 \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format3 \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format4 \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format1.format(validDeliveryDate)),"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format2.format(validDeliveryDate)));"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format2.format(validDeliveryDate)),"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format3.format(validDeliveryDate)));"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format3.format(validDeliveryDate)),"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format4.format(validDeliveryDate)));"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"    public void isValidDeliveryDate() {"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"        // null delivery date"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(NullPointerException.class, () -\u003e DeliveryDate.isValidDeliveryDate(null));"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"        // invalid addresses"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/13/2022\")); // invalid month"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"32/01/2022\")); // invalid day"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/01/202020\")); // invalid year"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01,01,2022\")); // invalid delimiter"},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01:01:2022\")); // invalid delimiter"},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/01-2022\")); // inconsistent delimiter"},{"lineNumber":53,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"2022/12/31\")); // invalid format"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"        // less than 3 working days"},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(LocalDate.now().plusDays(2L).toString()));"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"        // valid addresses"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02/02/2022\"));"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02-02-2022\"));"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02.02.2022\"));"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02 Feb 2022\"));"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy]\");"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"        // 3 working days from current date"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(dateFormat.format(LocalDate.now().plusDays(3L))));"},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"xiinweii98"},"content":"}"}],"authorContributionMap":{"xiinweii98":66}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"    private static final String INVALID_DELIVERY_DATE \u003d \"31/31/2100\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    private static final String VALID_DELIVERY_DATE \u003d BENSON.getDeliveryDate().toString();"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"                        VALID_DELIVERY_DATE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":"                VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"                        VALID_DELIVERY_DATE);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":73,"author":{"gitId":"xiinweii98"},"content":"                VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":82,"author":{"gitId":"xiinweii98"},"content":"                        VALID_DELIVERY_DATE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":90,"author":{"gitId":"xiinweii98"},"content":"                VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":98,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,"},{"lineNumber":99,"author":{"gitId":"xiinweii98"},"content":"                        VALID_DELIVERY_DATE);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":107,"author":{"gitId":"xiinweii98"},"content":"                VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":117,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags,"},{"lineNumber":118,"author":{"gitId":"xiinweii98"},"content":"                        VALID_DELIVERY_DATE);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"xiinweii98"},"content":"    public void toModelType_invalidDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":125,"author":{"gitId":"xiinweii98"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,"},{"lineNumber":126,"author":{"gitId":"xiinweii98"},"content":"                        INVALID_DELIVERY_DATE);"},{"lineNumber":127,"author":{"gitId":"xiinweii98"},"content":"        String expectedMessage \u003d DeliveryDate.MESSAGE_CONSTRAINTS;"},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":129,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":131,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"xiinweii98"},"content":"    public void toModelType_nullDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":134,"author":{"gitId":"xiinweii98"},"content":"                VALID_TAGS, null);"},{"lineNumber":135,"author":{"gitId":"xiinweii98"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeliveryDate.class.getSimpleName());"},{"lineNumber":136,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":137,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":38,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"        descriptor.setDeliveryDate(person.getDeliveryDate());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"xiinweii98"},"content":"     * Sets the {@code DeliveryDate} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":88,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"xiinweii98"},"content":"    public EditPersonDescriptorBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":90,"author":{"gitId":"xiinweii98"},"content":"        descriptor.setDeliveryDate(new DeliveryDate(deliveryDate));"},{"lineNumber":91,"author":{"gitId":"xiinweii98"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":10,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    public static final String DEFAULT_DELIVERY_DATE \u003d \"01/01/2022\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"    private DeliveryDate deliveryDate;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d new DeliveryDate(DEFAULT_DELIVERY_DATE);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d personToCopy.getDeliveryDate();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"xiinweii98"},"content":"     * Sets the {@code DeliveryDate} of the {@code Person} that we are building."},{"lineNumber":99,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"xiinweii98"},"content":"    public PersonBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":101,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":102,"author":{"gitId":"xiinweii98"},"content":"        return this;"},{"lineNumber":103,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":106,"author":{"gitId":"xiinweii98"},"content":"        return new Person(name, phone, email, address, tags, deliveryDate);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":14,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":39,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"        sb.append(PREFIX_DATE + person.getDeliveryDate().toString() + \" \");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"                sb.append(PREFIX_TAG).append(\" \");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        descriptor.getDeliveryDate()"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"                .ifPresent(deliveryDate -\u003e sb.append(PREFIX_DATE).append(deliveryDate.toString()).append(\" \"));"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"        System.out.println(sb.toString());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":6,"-":61}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_AMY;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"            .withTags(\"friends\")"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01-01-2022\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withDeliveryDate(\"01.01.2022\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\")"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01 Jan 2022\").build();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withDeliveryDate(\"31/12/2022\").build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withDeliveryDate(\"28-02-2022\").build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withDeliveryDate(\"06.03.2022\").build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND)"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_AMY).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(VALID_DELIVERY_DATE_BOB).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xiinweii98":17,"-":65}}]
