[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"# CakeCollate"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dHVE6WF4JMI)](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp)"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"### **CakeCollate**"},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":"* CakeCollate is a command line based application for home bakers with small businesses."},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":"* You can consolidate all your orders in one application and easily track customer details,"},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"order details and delivery dates in this application! "},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":"\u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"### **Useful Links**"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"* [User guide](https://ay2021s2-cs2103t-t11-4.github.io/tp/UserGuide.html)"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":"* [Developer guide](https://ay2021s2-cs2103t-t11-4.github.io/tp/DeveloperGuide.html)"},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"\u003cbr\u003e"},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"### **Acknowledgements**"},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"* Libraries used"},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"    * [JavaFX](https://openjfx.io/)"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"    * [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    * [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"pavz02":12,"xiinweii98":9,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"### Priscilla"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"\u003cimg src\u003d\"images/ppris.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"[[github](http://github.com/ppris)]"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"[[portfolio](team/ppris.md)]"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"* Role: Team Lead, Deliverables and Scheduling "},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"* Responsibilities: Model"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"### Soh Xin Wei"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"\u003cimg src\u003d\"images/xiinweii98.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"[[github](http://github.com/xiinweii98)]"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"[[portfolio](team/xiinweii98.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"* Role: Developer, Testing"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"* Responsibilities: Logic"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"### Lim Rui Xiong"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"\u003cimg src\u003d\"images/ruixiong2211.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":"[[github](http://github.com/RuiXiong2211)] [[portfolio](team/RuiXiong2211)]"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"[[portfolio](team/ruixiong2211.md)]"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"* Role: Developer, Documentation"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"* Responsibilities: Commons"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"pavz02"},"content":"### Pavitra"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"pavz02"},"content":"\u003cimg src\u003d\"images/pavz02.png\" width\u003d\"200px\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"pavz02"},"content":"[[github](http://github.com/pavz02)]"},{"lineNumber":47,"author":{"gitId":"pavz02"},"content":"[[portfolio](team/pavz02.md)]"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"pavz02"},"content":"* Role: Developer, Code quality"},{"lineNumber":50,"author":{"gitId":"pavz02"},"content":"* Responsibilities: Ui and JavaFX"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"### Bhadani Simran"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":"\u003cimg src\u003d\"images/simran-bhadani3.png\" width\u003d\"200px\"\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"simran-bhadani3"},"content":"[[github](http://github.com/simran-bhadani3)]"},{"lineNumber":57,"author":{"gitId":"simran-bhadani3"},"content":"[[portfolio](team/simran-bhadani3.md)]"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"simran-bhadani3"},"content":"* Role: Developer, Integration"},{"lineNumber":60,"author":{"gitId":"simran-bhadani3"},"content":"* Responsibilities: Storage"}],"authorContributionMap":{"pPris":6,"RuiXiong2211":2,"pavz02":6,"xiinweii98":10,"-":30,"simran-bhadani3":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"simran-bhadani3"},"content":"* small-time, home-based cake seller"},{"lineNumber":240,"author":{"gitId":"simran-bhadani3"},"content":"* has a lot of orders to keep track of"},{"lineNumber":241,"author":{"gitId":"simran-bhadani3"},"content":"* sells cakes on multiple platforms and wants to collect all orders in one place"},{"lineNumber":242,"author":{"gitId":"simran-bhadani3"},"content":"* prefers desktop apps over other types"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"simran-bhadani3"},"content":"**Value proposition**: keep track of and manage all orders placed on various online selling platforms in one place"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `***`, Medium (nice to have) - `**`, Low (unlikely to have) - `*`"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"pPris"},"content":"| Priority| As a …​                                   | I can …​                                                        | So that …​                                                                                |"},{"lineNumber":255,"author":{"gitId":"pPris"},"content":"|---------|----------------------------------------------|--------------------------------------------------------------------|----------------------------------------------------------------------------------------------|"},{"lineNumber":256,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | view all the possible commands that I can execute                  | I know what functionalities I can make use of when using the program                         |"},{"lineNumber":257,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | add orders for the day                                             | I can add new orders to my database                                                          |"},{"lineNumber":258,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | delete orders for the day                                          | I can remove unnecessary orders from my database                                             |"},{"lineNumber":259,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | list all my orders for the day                                     | I can view what orders I have to fulfil for the day                                          |"},{"lineNumber":260,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | retrieve data stored in the previous sessions                      | -                                                                                            |"},{"lineNumber":261,"author":{"gitId":"pPris"},"content":"| `***`   | User logging in after a long time            | delete all orders, reset the application                           | I can start on a clean slate since the previous orders are now meaningless to me             |"},{"lineNumber":262,"author":{"gitId":"pPris"},"content":"| `***`   | User                                         | load the app quickly                                               | I can access the data quickly                                                                |"},{"lineNumber":263,"author":{"gitId":"pPris"},"content":"| `**`    | Advanced user                                | use shortcuts and short forms                                      | I can reduce the time it takes to enter orders                                               |"},{"lineNumber":264,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | receive reminders for the orders due soon                          | I remember and complete them on time                                                         |"},{"lineNumber":265,"author":{"gitId":"pPris"},"content":"| `**`    | User who is at least slightly experienced    | delete multiple orders at one go                                   | I can reflect mass cancellations in my database if they occur                                |"},{"lineNumber":266,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | sort the orders according to which one needs to be completed first | I can prioritise the orders to work on for that day                                          |"},{"lineNumber":267,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | edit individual orders                                             | I can update orders if a customer changes it instead of deleting and adding another order    |"},{"lineNumber":268,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | add notes and special requests for orders                          | details on customized orders can be mentioned together with the main order                   |"},{"lineNumber":269,"author":{"gitId":"pPris"},"content":"| `**`    | User who loves statistics                    | view my most ordered products                                      | I know what to products to promote more                                                      |"},{"lineNumber":270,"author":{"gitId":"pPris"},"content":"| `**`    | Regular user                                 | be warned of duplicate orders I might have accidentally entered    | I can avoid making more than necessary, which may waste time and resources                   |"},{"lineNumber":271,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | find the orders made by a certain customer                         | I can retrieve information about the orders that this customer have made before, if needed   |"},{"lineNumber":272,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | input multiple order descriptions at one go                        | I don\u0027t need to input multiple entries for customers who order more than one type of cake    |"},{"lineNumber":273,"author":{"gitId":"pPris"},"content":"| `**`    | User                                         | set prices and costs of orders                                     | I can note how much profit I am earning                                                      |"},{"lineNumber":274,"author":{"gitId":"pPris"},"content":"| `*`     | User                                         | save a particular customer\u0027s information                           | I can quickly add another order from this customer next time                                 |"},{"lineNumber":275,"author":{"gitId":"pPris"},"content":"| `*`     | Regular user                                 | keep track of the money paid or owed by the customer               | I can ensure that all my dues have been received                                             |"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"pPris"},"content":"[comment]: \u003c\u003e (# will need to add a few more based on new order model and any new features we decide on)"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"RuiXiong2211"},"content":"(For all use cases below, the **System** is `CakeCollate` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Delete an order**"},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":288,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":289,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to delete a specific order in the list"},{"lineNumber":290,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate deletes the order"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"RuiXiong2211"},"content":"    * 3a1. CakeCollate shows an error message."},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":305,"author":{"gitId":"-"},"content":"      "},{"lineNumber":306,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Add an order**"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"RuiXiong2211"},"content":"**MSS**"},{"lineNumber":309,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":310,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":311,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":312,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to add a specific order in the list"},{"lineNumber":313,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate adds the order"},{"lineNumber":314,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":315,"author":{"gitId":"RuiXiong2211"},"content":"    Use case ends."},{"lineNumber":316,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":317,"author":{"gitId":"RuiXiong2211"},"content":"**Use case: Edit an order**"},{"lineNumber":318,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":319,"author":{"gitId":"RuiXiong2211"},"content":"**MSS**"},{"lineNumber":320,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":321,"author":{"gitId":"RuiXiong2211"},"content":"1.  User requests to list order"},{"lineNumber":322,"author":{"gitId":"RuiXiong2211"},"content":"2.  CakeCollate shows a list of orders"},{"lineNumber":323,"author":{"gitId":"RuiXiong2211"},"content":"3.  User requests to edit a specific order in the list"},{"lineNumber":324,"author":{"gitId":"RuiXiong2211"},"content":"4.  CakeCollate edits the order"},{"lineNumber":325,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":326,"author":{"gitId":"RuiXiong2211"},"content":"    Use case ends."},{"lineNumber":327,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":328,"author":{"gitId":"RuiXiong2211"},"content":"**Extensions**"},{"lineNumber":329,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":330,"author":{"gitId":"RuiXiong2211"},"content":"* 2a. The list is empty."},{"lineNumber":331,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":332,"author":{"gitId":"RuiXiong2211"},"content":"  Use case ends."},{"lineNumber":333,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":334,"author":{"gitId":"RuiXiong2211"},"content":"* 3a. The given index is invalid."},{"lineNumber":335,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":336,"author":{"gitId":"RuiXiong2211"},"content":"    * 3a1. CakeCollate shows an error message."},{"lineNumber":337,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":338,"author":{"gitId":"RuiXiong2211"},"content":"      Use case resumes at step 2."},{"lineNumber":339,"author":{"gitId":"-"},"content":""},{"lineNumber":340,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":341,"author":{"gitId":"-"},"content":""},{"lineNumber":342,"author":{"gitId":"xiinweii98"},"content":"* Constraints:"},{"lineNumber":343,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should be backward compatible with data produced by earlier releases."},{"lineNumber":344,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":345,"author":{"gitId":"xiinweii98"},"content":"* Technical requirements:"},{"lineNumber":346,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should work on any _mainstream OS_ on both 32-bit and 64-bit environments with Java `11` or above installed."},{"lineNumber":347,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":348,"author":{"gitId":"xiinweii98"},"content":"* Performance requirements:"},{"lineNumber":349,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should be able to hold up to 1000 orders without a noticeable sluggishness in performance for typical usage."},{"lineNumber":350,"author":{"gitId":"xiinweii98"},"content":"    * CakeCollate should response within two seconds for all commands."},{"lineNumber":351,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":352,"author":{"gitId":"xiinweii98"},"content":"* Quality requirements:"},{"lineNumber":353,"author":{"gitId":"xiinweii98"},"content":"    * A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":354,"author":{"gitId":"xiinweii98"},"content":"    * A user who does not have much experience with command line interface tools should still be able to use CakeCollate with the help of the _[User guide](UserGuide.md)_ and the `help` command in CakeCollate."},{"lineNumber":355,"author":{"gitId":"xiinweii98"},"content":"    * A user who is experienced with command line interface tools should find CakeCollate commands easy to use."},{"lineNumber":356,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":357,"author":{"gitId":"xiinweii98"},"content":"* Process requirements:"},{"lineNumber":358,"author":{"gitId":"xiinweii98"},"content":"    * The project is expected to adhere to a schedule that delivers a feature set every two weeks."},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":365,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":366,"author":{"gitId":"pavz02"},"content":"* **MSS**: Main success scenario, lists the steps of a typical usage of the application by the user"},{"lineNumber":367,"author":{"gitId":"pavz02"},"content":"* **Feature set**: A list of specifications and functionalities of the application"},{"lineNumber":368,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":""},{"lineNumber":370,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":371,"author":{"gitId":"-"},"content":""},{"lineNumber":372,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":377,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":""},{"lineNumber":381,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":382,"author":{"gitId":"-"},"content":""},{"lineNumber":383,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":384,"author":{"gitId":"-"},"content":""},{"lineNumber":385,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":386,"author":{"gitId":"-"},"content":""},{"lineNumber":387,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":388,"author":{"gitId":"-"},"content":""},{"lineNumber":389,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":390,"author":{"gitId":"-"},"content":""},{"lineNumber":391,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":392,"author":{"gitId":"-"},"content":""},{"lineNumber":393,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":394,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":395,"author":{"gitId":"-"},"content":""},{"lineNumber":396,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":397,"author":{"gitId":"-"},"content":""},{"lineNumber":398,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":399,"author":{"gitId":"-"},"content":""},{"lineNumber":400,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":401,"author":{"gitId":"-"},"content":""},{"lineNumber":402,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":403,"author":{"gitId":"-"},"content":""},{"lineNumber":404,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":405,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":406,"author":{"gitId":"-"},"content":""},{"lineNumber":407,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":408,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":409,"author":{"gitId":"-"},"content":""},{"lineNumber":410,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":411,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":412,"author":{"gitId":"-"},"content":""},{"lineNumber":413,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":414,"author":{"gitId":"-"},"content":""},{"lineNumber":415,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":416,"author":{"gitId":"-"},"content":""},{"lineNumber":417,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":418,"author":{"gitId":"-"},"content":""},{"lineNumber":419,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":420,"author":{"gitId":"-"},"content":""},{"lineNumber":421,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"pPris":23,"RuiXiong2211":39,"pavz02":3,"xiinweii98":17,"-":334,"simran-bhadani3":5}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a **desktop app for managing cake orders, optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, CakeCollate can get your order management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"1. Download the latest `cakecollate.jar` from [here](https://github.com/AY2021S2-CS2103T-T11-4/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your CakeCollate."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will display the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"   * **`list`** : Lists all orders in the CakeCollate database."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3` : Adds an order with a contact named `John Doe` to CakeCollate."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"   * **`delete`**`3` : Deletes the 3rd order shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":"   "},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"   * **`remind`**`2` : Lists all orders that are 2 days within the current local date."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"   * **`clear`** : Deletes all order in the CakeCollate database."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"* `d/DELIVERY_DATE` should specify a date at least 3 days after the date the command is executed."},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"pavz02"},"content":"Gives instructions on how to enter orders into the CLI."},{"lineNumber":74,"author":{"gitId":"pavz02"},"content":"Displays a message with a list of all available commands and their format."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"RuiXiong2211"},"content":"### Adding an order: `add`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"RuiXiong2211"},"content":"Adds an order to the CakeCollate database."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"RuiXiong2211"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] d/DELIVERY_DATE o/ORDER_DESCRIPTION`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":89,"author":{"gitId":"RuiXiong2211"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3`"},{"lineNumber":90,"author":{"gitId":"RuiXiong2211"},"content":"* `add n/Betsy Crowe t/daughter e/betsycrowe@example.com a/Newgate Prison p/1234567 t/friend d/13-05-2100 /o chocolate cake 5 durian cake 10 mochi cake 100`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"xiinweii98"},"content":"### List all existing orders : `list`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"xiinweii98"},"content":"Shows a list of all orders in the CakeCollate database."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"RuiXiong2211"},"content":"### Editing an order : `edit`"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"RuiXiong2211"},"content":"Edits an existing order in the CakeCollate database."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"RuiXiong2211"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG] [d/DELIVERY_DATE] [o/ORDER_DESCRIPTION]​`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"RuiXiong2211"},"content":"* Edits the order at the specified `INDEX`. The index refers to the index number shown in the displayed order list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":108,"author":{"gitId":"RuiXiong2211"},"content":"* You can remove all the order’s tags by typing `t/` without"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":112,"author":{"gitId":"RuiXiong2211"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st order to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":113,"author":{"gitId":"RuiXiong2211"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd order to be `Betsy Crower` and clears all existing tags."},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":126,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"simran-bhadani3"},"content":"### Deleting an order : `delete`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"simran-bhadani3"},"content":"Deletes the specified order from the CakeCollate database."},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"simran-bhadani3"},"content":"Format: `delete ID...`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"simran-bhadani3"},"content":"* Deletes the orders with the specified ids."},{"lineNumber":140,"author":{"gitId":"simran-bhadani3"},"content":"* The `ID` refers to the order `ID` number shown in the list of orders."},{"lineNumber":141,"author":{"gitId":"simran-bhadani3"},"content":"* One or more ids can be entered."},{"lineNumber":142,"author":{"gitId":"simran-bhadani3"},"content":"* The `ID` **must be valid**."},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":145,"author":{"gitId":"simran-bhadani3"},"content":"* `list` followed by `delete 2` deletes the order with `ID` 2 from the CakeCollate database."},{"lineNumber":146,"author":{"gitId":"simran-bhadani3"},"content":"* `delete 2 3` deletes the orders with ids 2 and 3 from the CakeCollate database."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"RuiXiong2211"},"content":"### Receiving reminders for orders : `remind`"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"RuiXiong2211"},"content":"Obtains a list of reminder for orders that are X days within the current date."},{"lineNumber":151,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":152,"author":{"gitId":"RuiXiong2211"},"content":"Format: `remind DAYS...`"},{"lineNumber":153,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":154,"author":{"gitId":"RuiXiong2211"},"content":"* Lists all orders within the specified day, starting from the current date."},{"lineNumber":155,"author":{"gitId":"RuiXiong2211"},"content":"* The `DAYS` refers to the number of days from the current date."},{"lineNumber":156,"author":{"gitId":"RuiXiong2211"},"content":"* The `DAYS` **must be a positive integer starting from 0**."},{"lineNumber":157,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":158,"author":{"gitId":"RuiXiong2211"},"content":"Examples:"},{"lineNumber":159,"author":{"gitId":"RuiXiong2211"},"content":"* `remind 0` lists all orders that have a delivery date for today."},{"lineNumber":160,"author":{"gitId":"RuiXiong2211"},"content":"* `remind 3` lists all orders that have a delivery date within 3 days from today."},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":163,"author":{"gitId":"pPris"},"content":"### Clearing all existing orders: `clear`"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"Deletes all existing orders in the CakeCollate database."},{"lineNumber":166,"author":{"gitId":"pPris"},"content":""},{"lineNumber":167,"author":{"gitId":"pPris"},"content":"Warning: this is an undo-able operation."},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate data is saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate data is saved as a JSON file `[JAR file location]/data/cakecollate.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":186,"author":{"gitId":"simran-bhadani3"},"content":"If your changes to the data file makes its format invalid, CakeCollate will discard all data and start with an empty data file at the next run."},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":198,"author":{"gitId":"simran-bhadani3"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous CakeCollate home folder."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":205,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":206,"author":{"gitId":"RuiXiong2211"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] d/DELIVERY_DATE o/ORDER_TYPE` \u003cbr\u003e e.g., `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 d/13-05-2021 /o strawberry cake 3`"},{"lineNumber":207,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":208,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":209,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":212,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":213,"author":{"gitId":"RuiXiong2211"},"content":"**Remind** | `remind DAYS`\u003cbr\u003e e.g., `remind 3`"},{"lineNumber":214,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":215,"author":{"gitId":"xiinweii98"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":216,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":217,"author":{"gitId":"xiinweii98"},"content":"## Acknowledgements"},{"lineNumber":218,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":219,"author":{"gitId":"xiinweii98"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"pPris":4,"RuiXiong2211":28,"pavz02":2,"xiinweii98":18,"-":154,"simran-bhadani3":13}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: CakeCollate"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2021S2-CS2103T-T11-4/tp/actions/workflows/gradle.yml)"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp/branch/master/graph/badge.svg?token\u003dHVE6WF4JMI)](https://codecov.io/gh/AY2021S2-CS2103T-T11-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"**CakeCollate is a desktop application for managing your order details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"* If you are interested in using CakeCollate, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"* If you are interested about developing CakeCollate, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"* Libraries used"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"    * [JavaFX](https://openjfx.io/)"},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"    * [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"    * [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"xiinweii98":11,"-":10}},{"path":"docs/team/pavz02.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"title: Pavitra\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"pavz02":2,"-":44}},{"path":"docs/team/ruixiong2211.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: Lim Rui Xiong\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"xiinweii98":48}},{"path":"docs/team/simran-bhadani3.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"simran-bhadani3"},"content":"---"},{"lineNumber":2,"author":{"gitId":"simran-bhadani3"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"simran-bhadani3"},"content":"title: Bhadani Simran\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"simran-bhadani3"},"content":"---"},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":6,"author":{"gitId":"simran-bhadani3"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":8,"author":{"gitId":"simran-bhadani3"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":10,"author":{"gitId":"simran-bhadani3"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":12,"author":{"gitId":"simran-bhadani3"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":14,"author":{"gitId":"simran-bhadani3"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"simran-bhadani3"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"simran-bhadani3"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"simran-bhadani3"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"simran-bhadani3"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":20,"author":{"gitId":"simran-bhadani3"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":22,"author":{"gitId":"simran-bhadani3"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":24,"author":{"gitId":"simran-bhadani3"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"simran-bhadani3"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":27,"author":{"gitId":"simran-bhadani3"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"simran-bhadani3"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"simran-bhadani3"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":31,"author":{"gitId":"simran-bhadani3"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"simran-bhadani3"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"simran-bhadani3"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"simran-bhadani3"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"simran-bhadani3"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"simran-bhadani3"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":38,"author":{"gitId":"simran-bhadani3"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"simran-bhadani3"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"simran-bhadani3"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"simran-bhadani3"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"simran-bhadani3"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":44,"author":{"gitId":"simran-bhadani3"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"simran-bhadani3"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"simran-bhadani3"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":48,"author":{"gitId":"simran-bhadani3"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"simran-bhadani3":48}},{"path":"docs/team/xiinweii98.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"title: Soh Xin Wei\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"---"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"## Project: CakeCollate"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"CakeCollate is a desktop order book application used for tracking cake orders. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"### to edit closer to end of project"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"Given below are my contributions to the project."},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"* **Project management**:"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"* **Enhancements to existing features**:"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"* **Documentation**:"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"  * User Guide:"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"  * Developer Guide:"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"* **Community**:"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"* **Tools**:"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"xiinweii98":48}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":"    public static final String MESSAGE_PERSONS_REMINDER_OVERVIEW \u003d \"REMINDER! \\n\""},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":"            + \"Date Today is \""},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"            + LocalDate.now()"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"            + \".\\n\""},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"            + \"%1$d orders with an upcoming delivery date!\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":""}],"authorContributionMap":{"RuiXiong2211":8,"-":12}},{"path":"src/main/java/seedu/address/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index."},{"lineNumber":5,"author":{"gitId":"-"},"content":" *"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"simran-bhadani3"},"content":"public class Index implements Comparable\u003cIndex\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":55,"author":{"gitId":"simran-bhadani3"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"simran-bhadani3"},"content":"    public int compareTo(Index index) {"},{"lineNumber":57,"author":{"gitId":"simran-bhadani3"},"content":"        return this.zeroBasedIndex - index.zeroBasedIndex;"},{"lineNumber":58,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":53,"simran-bhadani3":6}},{"path":"src/main/java/seedu/address/commons/core/index/IndexList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"simran-bhadani3"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":3,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":6,"author":{"gitId":"simran-bhadani3"},"content":"public class IndexList {"},{"lineNumber":7,"author":{"gitId":"simran-bhadani3"},"content":"    private List\u003cIndex\u003e indexList;"},{"lineNumber":8,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":9,"author":{"gitId":"simran-bhadani3"},"content":"    public IndexList(List\u003cIndex\u003e indexList) {"},{"lineNumber":10,"author":{"gitId":"simran-bhadani3"},"content":"        this.indexList \u003d indexList;"},{"lineNumber":11,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":13,"author":{"gitId":"simran-bhadani3"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"simran-bhadani3"},"content":"     * Sorts {@code IndexList} in descending order."},{"lineNumber":15,"author":{"gitId":"simran-bhadani3"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"simran-bhadani3"},"content":"    public void sortList() {"},{"lineNumber":17,"author":{"gitId":"simran-bhadani3"},"content":"        Collections.sort(this.indexList);"},{"lineNumber":18,"author":{"gitId":"simran-bhadani3"},"content":"        Collections.reverse(this.indexList);"},{"lineNumber":19,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":21,"author":{"gitId":"simran-bhadani3"},"content":"    public void add(Index index) {"},{"lineNumber":22,"author":{"gitId":"simran-bhadani3"},"content":"        this.indexList.add(index);"},{"lineNumber":23,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":25,"author":{"gitId":"simran-bhadani3"},"content":"    public List\u003cIndex\u003e getIndexList() {"},{"lineNumber":26,"author":{"gitId":"simran-bhadani3"},"content":"        return this.indexList;"},{"lineNumber":27,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":29,"author":{"gitId":"simran-bhadani3"},"content":"    /** Checks whether two @code IndexList}s are equal."},{"lineNumber":30,"author":{"gitId":"simran-bhadani3"},"content":"     * @param other {@code IndexList} to compare this list to."},{"lineNumber":31,"author":{"gitId":"simran-bhadani3"},"content":"     * @return true if the two {@code IndexList}s are equal and false otherwise."},{"lineNumber":32,"author":{"gitId":"simran-bhadani3"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"simran-bhadani3"},"content":"    public boolean checkIfEqual(IndexList other) {"},{"lineNumber":34,"author":{"gitId":"simran-bhadani3"},"content":"        boolean equal \u003d true;"},{"lineNumber":35,"author":{"gitId":"simran-bhadani3"},"content":"        if (this.indexList.size() !\u003d other.getIndexList().size()) {"},{"lineNumber":36,"author":{"gitId":"simran-bhadani3"},"content":"            return false;"},{"lineNumber":37,"author":{"gitId":"simran-bhadani3"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"simran-bhadani3"},"content":"            for (int i \u003d 0; i \u003c other.getIndexList().size(); i++) {"},{"lineNumber":39,"author":{"gitId":"simran-bhadani3"},"content":"                if (!this.indexList.get(i).equals(other.indexList.get(i))) {"},{"lineNumber":40,"author":{"gitId":"simran-bhadani3"},"content":"                    equal \u003d false;"},{"lineNumber":41,"author":{"gitId":"simran-bhadani3"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"simran-bhadani3"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"simran-bhadani3"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"simran-bhadani3"},"content":"        return equal;"},{"lineNumber":45,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":47,"author":{"gitId":"simran-bhadani3"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"simran-bhadani3"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"simran-bhadani3"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"simran-bhadani3"},"content":"                || (other instanceof IndexList // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"simran-bhadani3"},"content":"                \u0026\u0026 checkIfEqual((IndexList) other)); // state check"},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":"}"}],"authorContributionMap":{"simran-bhadani3":54}},{"path":"src/main/java/seedu/address/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     *   Ignores case, but a full word match is required."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *   \u003cbr\u003eexamples:\u003cpre\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(word);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(t);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(s);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":69,"author":{"gitId":"RuiXiong2211"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"RuiXiong2211"},"content":"     * Returns true if {@code s} represents a unsigned integer (zero included)"},{"lineNumber":71,"author":{"gitId":"RuiXiong2211"},"content":"     * e.g. 0, 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"},{"lineNumber":72,"author":{"gitId":"RuiXiong2211"},"content":"     * Will return false for any other non-null string input"},{"lineNumber":73,"author":{"gitId":"RuiXiong2211"},"content":"     * e.g. empty string, \"-1\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"},{"lineNumber":74,"author":{"gitId":"RuiXiong2211"},"content":"     * @throws NullPointerException if {@code s} is null."},{"lineNumber":75,"author":{"gitId":"RuiXiong2211"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"RuiXiong2211"},"content":"    public static boolean isUnsignedInteger(String s) {"},{"lineNumber":77,"author":{"gitId":"RuiXiong2211"},"content":"        requireNonNull(s);"},{"lineNumber":78,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":79,"author":{"gitId":"RuiXiong2211"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"RuiXiong2211"},"content":"            int value \u003d Integer.parseInt(s);"},{"lineNumber":81,"author":{"gitId":"RuiXiong2211"},"content":"            return value \u003e\u003d 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"},{"lineNumber":82,"author":{"gitId":"RuiXiong2211"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":83,"author":{"gitId":"RuiXiong2211"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"RuiXiong2211"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":18,"-":68}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":" * Adds an order to CakeCollate."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an order to CakeCollate. \\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"            + PREFIX_ORDER_DESCRIPTION + \"ORDER DESCRIPTION... \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_DATE + \"DELIVERY_DATE \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"            + PREFIX_ORDER_DESCRIPTION + \"2 x Chocolate Cakes \""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"            + PREFIX_ORDER_DESCRIPTION + \"2 x Strawberry Cakes \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_TAG + \"owesMoney\""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"            + PREFIX_DATE + \"01/01/2022\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New order added: %1$s\";"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in CakeCollate\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":4,"pavz02":1,"xiinweii98":7,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"CakeCollate has been cleared!\";"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all entries from CakeCollate.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"pavz02"},"content":"            + \": Deletes the order identified by the index number used in the displayed order list.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"simran-bhadani3"},"content":"    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"simran-bhadani3"},"content":"    public static final String MESSAGE_DELETE_ORDERS_SUCCESS \u003d \"Deleted Orders: %1$s\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"simran-bhadani3"},"content":"    private final IndexList targetIndexList;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"simran-bhadani3"},"content":"    public DeleteCommand(IndexList targetIndexList) {"},{"lineNumber":34,"author":{"gitId":"simran-bhadani3"},"content":"        this.targetIndexList \u003d targetIndexList;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"simran-bhadani3"},"content":"    public static String getResultString(List\u003cPerson\u003e ordersToDelete) {"},{"lineNumber":38,"author":{"gitId":"simran-bhadani3"},"content":"        if (ordersToDelete.size() \u003d\u003d 1) {"},{"lineNumber":39,"author":{"gitId":"simran-bhadani3"},"content":"            return String.format(MESSAGE_DELETE_ORDER_SUCCESS, ordersToDelete.get(0));"},{"lineNumber":40,"author":{"gitId":"simran-bhadani3"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"simran-bhadani3"},"content":"        String convertedToString \u003d \"\";"},{"lineNumber":42,"author":{"gitId":"simran-bhadani3"},"content":"        for (Person person: ordersToDelete) {"},{"lineNumber":43,"author":{"gitId":"simran-bhadani3"},"content":"            convertedToString \u003d convertedToString + String.format(\"\\n%1$s\", person);"},{"lineNumber":44,"author":{"gitId":"simran-bhadani3"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"simran-bhadani3"},"content":"        return String.format(MESSAGE_DELETE_ORDERS_SUCCESS, convertedToString);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"        List\u003cPerson\u003e ordersToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"simran-bhadani3"},"content":"        for (Index targetIndex:this.targetIndexList.getIndexList()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"simran-bhadani3"},"content":"            Person orderToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"simran-bhadani3"},"content":"            ordersToDelete.add(orderToDelete);"},{"lineNumber":60,"author":{"gitId":"simran-bhadani3"},"content":"            model.deletePerson(orderToDelete);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"simran-bhadani3"},"content":"        return new CommandResult(getResultString(ordersToDelete));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"simran-bhadani3"},"content":"                \u0026\u0026 targetIndexList.equals(((DeleteCommand) other).targetIndexList)); // state check"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":1,"-":48,"simran-bhadani3":23}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":" * Edits the details of an existing order in CakeCollate."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the order identified \""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"            + \"by the index number used in the displayed order list. \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"            + \"[\" + PREFIX_ORDER_DESCRIPTION + \"ORDER DESCRIPTION]... \""},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\""},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"            + \"[\" + PREFIX_DATE + \"DELIVERY_DATE]\\n\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited order: %1$s\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This order already exists in CakeCollate.\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"     * @param index of the order in the filtered order list to edit"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"     * @param editPersonDescriptor details to edit the order with"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e updatedOrderDescriptions \u003d"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"                editPersonDescriptor.getOrderDescription().orElse(personToEdit.getOrderDescriptions());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":108,"author":{"gitId":"xiinweii98"},"content":"        DeliveryDate updatedDeliveryDate \u003d"},{"lineNumber":109,"author":{"gitId":"xiinweii98"},"content":"                editPersonDescriptor.getDeliveryDate().orElse(personToEdit.getDeliveryDate());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedOrderDescriptions,"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"                updatedTags, updatedDeliveryDate);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"xiinweii98"},"content":"     * Stores the details to edit the order with. Each non-empty field value will replace the"},{"lineNumber":135,"author":{"gitId":"xiinweii98"},"content":"     * corresponding field value of the order."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"        private Set\u003cOrderDescription\u003e orderDescriptions;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":144,"author":{"gitId":"xiinweii98"},"content":"        private DeliveryDate deliveryDate;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"         * A defensive copy of {@code orderDescriptions} and {@code tags} is used internally."},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":157,"author":{"gitId":"pPris"},"content":"            setOrderDescriptions(toCopy.orderDescriptions);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":159,"author":{"gitId":"xiinweii98"},"content":"            setDeliveryDate(toCopy.deliveryDate);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":164,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, orderDescriptions, tags, deliveryDate);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"pPris"},"content":"        public void setOrderDescriptions(Set\u003cOrderDescription\u003e orderDescriptions) {"},{"lineNumber":202,"author":{"gitId":"pPris"},"content":"            this.orderDescriptions \u003d (orderDescriptions !\u003d null) ? new HashSet\u003c\u003e(orderDescriptions) : null;"},{"lineNumber":203,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"pPris"},"content":""},{"lineNumber":205,"author":{"gitId":"pPris"},"content":"        public Optional\u003cSet\u003cOrderDescription\u003e\u003e getOrderDescription() {"},{"lineNumber":206,"author":{"gitId":"pPris"},"content":"            return (orderDescriptions !\u003d null)"},{"lineNumber":207,"author":{"gitId":"pPris"},"content":"                    ? Optional.of(Collections.unmodifiableSet(orderDescriptions))"},{"lineNumber":208,"author":{"gitId":"pPris"},"content":"                    : Optional.empty();"},{"lineNumber":209,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"pPris"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":212,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":213,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":214,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":220,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":221,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":222,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":223,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"xiinweii98"},"content":"        public void setDeliveryDate(DeliveryDate deliveryDate) {"},{"lineNumber":229,"author":{"gitId":"xiinweii98"},"content":"            this.deliveryDate \u003d deliveryDate;"},{"lineNumber":230,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":232,"author":{"gitId":"xiinweii98"},"content":"        public Optional\u003cDeliveryDate\u003e getDeliveryDate() {"},{"lineNumber":233,"author":{"gitId":"xiinweii98"},"content":"            return Optional.ofNullable(deliveryDate);"},{"lineNumber":234,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":236,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":240,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":242,"author":{"gitId":"-"},"content":""},{"lineNumber":243,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":245,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":255,"author":{"gitId":"pPris"},"content":"                    \u0026\u0026 getOrderDescription().equals(e.getOrderDescription())"},{"lineNumber":256,"author":{"gitId":"xiinweii98"},"content":"                    \u0026\u0026 getTags().equals(e.getTags())"},{"lineNumber":257,"author":{"gitId":"xiinweii98"},"content":"                    \u0026\u0026 getDeliveryDate().equals(e.getDeliveryDate());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":22,"xiinweii98":27,"-":211}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting CakeCollate as requested ...\";"},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Exits the program.\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":2,"-":17}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all orders which contain any of \""},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":1,"-":41}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"pavz02"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display."},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Switched to help window.\";"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":"    public static final String SHOWING_RETURN_MESSAGE \u003d \"Switched to order window.\";"},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":"    private static boolean areCommandsAdded \u003d false;"},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":"    private static final ObservableList\u003cString\u003e listOfCommands \u003d FXCollections.observableArrayList();"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"pavz02"},"content":"     * Adds all the MESSAGE_USAGE strings in all of the commands into one observable list."},{"lineNumber":24,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pavz02"},"content":"    public static void addAllCommands() {"},{"lineNumber":26,"author":{"gitId":"pavz02"},"content":"        listOfCommands.addAll(HelpCommand.MESSAGE_USAGE, AddCommand.MESSAGE_USAGE, ListCommand.MESSAGE_USAGE,"},{"lineNumber":27,"author":{"gitId":"pavz02"},"content":"                EditCommand.MESSAGE_USAGE, FindCommand.MESSAGE_USAGE, DeleteCommand.MESSAGE_USAGE,"},{"lineNumber":28,"author":{"gitId":"pavz02"},"content":"                ClearCommand.MESSAGE_USAGE, ExitCommand.MESSAGE_USAGE);"},{"lineNumber":29,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"pavz02"},"content":"    public static ObservableList\u003cString\u003e getListOfCommands() {"},{"lineNumber":32,"author":{"gitId":"pavz02"},"content":"        if (!areCommandsAdded) {"},{"lineNumber":33,"author":{"gitId":"pavz02"},"content":"            addAllCommands();"},{"lineNumber":34,"author":{"gitId":"pavz02"},"content":"            areCommandsAdded \u003d true;"},{"lineNumber":35,"author":{"gitId":"pavz02"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pavz02"},"content":"        return listOfCommands;"},{"lineNumber":37,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":41,"author":{"gitId":"pavz02"},"content":"        if (!areCommandsAdded) {"},{"lineNumber":42,"author":{"gitId":"pavz02"},"content":"            addAllCommands();"},{"lineNumber":43,"author":{"gitId":"pavz02"},"content":"            areCommandsAdded \u003d true;"},{"lineNumber":44,"author":{"gitId":"pavz02"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":27,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all orders\";"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a list of all orders from CakeCollate.\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":2,"-":22}},{"path":"src/main/java/seedu/address/logic/commands/RemindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.person.ReminderDatePredicate;"},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":" * Finds and lists all orders in CakeCollate database whose delivery date is within 3 days of the current date."},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":" *"},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":" */"},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":"public class RemindCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"    public static final String COMMAND_WORD \u003d \"remind\";"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all orders whose delivery dates \""},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":"            + \"are within X days from the current date, as a list with index numbers.\\n\""},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":"            + \"Parameters: DAYS (0 or more!) \\n\""},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":"            + \"Example: \" + COMMAND_WORD + \" 3\";"},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"    private final ReminderDatePredicate predicate;"},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":"    public RemindCommand(ReminderDatePredicate predicate) {"},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":29,"author":{"gitId":"RuiXiong2211"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"RuiXiong2211"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":31,"author":{"gitId":"RuiXiong2211"},"content":"        requireNonNull(model);"},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"        return new CommandResult("},{"lineNumber":34,"author":{"gitId":"RuiXiong2211"},"content":"                String.format(Messages.MESSAGE_PERSONS_REMINDER_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":35,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":37,"author":{"gitId":"RuiXiong2211"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"RuiXiong2211"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"RuiXiong2211"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"RuiXiong2211"},"content":"                || (other instanceof RemindCommand // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"RuiXiong2211"},"content":"                \u0026\u0026 predicate.equals(((RemindCommand) other).predicate)); // state check"},{"lineNumber":42,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"RuiXiong2211"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":43}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize("},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"                args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"                PREFIX_ORDER_DESCRIPTION, PREFIX_TAG, PREFIX_DATE);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"                PREFIX_ORDER_DESCRIPTION, PREFIX_DATE)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e orderDescriptionSet \u003d"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"                ParserUtil.parseOrderDescriptions(argMultimap.getAllValues(PREFIX_ORDER_DESCRIPTION));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"        DeliveryDate deliveryDate \u003d ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        Person person \u003d new Person(name, phone, email, address, orderDescriptionSet, tagList, deliveryDate);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":10,"xiinweii98":3,"-":56}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.logic.commands.RemindCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"RuiXiong2211"},"content":"        case RemindCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"RuiXiong2211"},"content":"            return new RemindCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public static final Prefix PREFIX_ORDER_DESCRIPTION \u003d new Prefix(\"o/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":1,"xiinweii98":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"simran-bhadani3"},"content":"            IndexList indexList \u003d ParserUtil.parseIndexList(args);"},{"lineNumber":22,"author":{"gitId":"simran-bhadani3"},"content":"            return new DeleteCommand(indexList);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":26,"simran-bhadani3":3}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"                        PREFIX_ORDER_DESCRIPTION, PREFIX_TAG, PREFIX_DATE);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        parseOrderDescriptionsForEdit("},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"                argMultimap.getAllValues(PREFIX_ORDER_DESCRIPTION))"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"                .ifPresent(editPersonDescriptor::setOrderDescriptions);"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"xiinweii98"},"content":"        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"},{"lineNumber":71,"author":{"gitId":"xiinweii98"},"content":"            editPersonDescriptor.setDeliveryDate(ParserUtil.parseDeliveryDate(argMultimap.getValue(PREFIX_DATE).get()));"},{"lineNumber":72,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"     * Parses {@code Collection\u003cString\u003e orderDescriptions} into a {@code Set\u003cOrderDescription\u003e} if {@code"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"     * orderDescriptions} is non-empty."},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"     * If {@code orderDescriptions} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"     * {@code Set\u003cOrderDescription\u003e} containing zero orderDescriptions."},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"    private Optional\u003cSet\u003cOrderDescription\u003e\u003e parseOrderDescriptionsForEdit(Collection\u003cString\u003e orderDescriptions)"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"            throws ParseException {"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"        assert orderDescriptions !\u003d null;"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":""},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"        if (orderDescriptions.isEmpty()) {"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"            return Optional.empty();"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":""},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"        return Optional.of(ParserUtil.parseOrderDescriptions(orderDescriptions));"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":""},{"lineNumber":113,"author":{"gitId":"pPris"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":27,"xiinweii98":5,"-":82}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":43,"author":{"gitId":"simran-bhadani3"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"simran-bhadani3"},"content":"     * Parses {@code oneBasedIndexList} from String into an {@code IndexList} and returns it."},{"lineNumber":45,"author":{"gitId":"simran-bhadani3"},"content":"     * @param oneBasedIndexList one based indices input by the user."},{"lineNumber":46,"author":{"gitId":"simran-bhadani3"},"content":"     * @return list of indices sorted in descending order."},{"lineNumber":47,"author":{"gitId":"simran-bhadani3"},"content":"     * @throws ParseException if one of the specified indices is invalid."},{"lineNumber":48,"author":{"gitId":"simran-bhadani3"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"simran-bhadani3"},"content":"    public static IndexList parseIndexList(String oneBasedIndexList) throws ParseException {"},{"lineNumber":50,"author":{"gitId":"simran-bhadani3"},"content":"        String[] indexListSplit \u003d oneBasedIndexList.trim().split(\" \");"},{"lineNumber":51,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(new ArrayList\u003cIndex\u003e());"},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"        for (String index: indexListSplit) {"},{"lineNumber":53,"author":{"gitId":"simran-bhadani3"},"content":"            Index parsedIndex \u003d parseIndex(index);"},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":"            indexList.add(parsedIndex);"},{"lineNumber":55,"author":{"gitId":"simran-bhadani3"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"simran-bhadani3"},"content":"        indexList.sortList();"},{"lineNumber":57,"author":{"gitId":"simran-bhadani3"},"content":"        return indexList;"},{"lineNumber":58,"author":{"gitId":"simran-bhadani3"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":60,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"     * Parses a {@code String orderDescription} into a {@code OrderDescription}."},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"     * @throws ParseException if the given {@code orderDescription} is invalid."},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"    public static OrderDescription parseOrderDescription(String orderDescription) throws ParseException {"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"        requireNonNull(orderDescription);"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"        String trimmedOrderDescription \u003d orderDescription.trim();"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":""},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"        if (!OrderDescription.isValidOrderDescription(trimmedOrderDescription)) {"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"            throw new ParseException(OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":""},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"        return new OrderDescription(trimmedOrderDescription);"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":""},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"     * Parses {@code Collection\u003cString\u003e orderDescriptions} into a {@code Set\u003cOrderDescription\u003e}."},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"    public static Set\u003cOrderDescription\u003e parseOrderDescriptions(Collection\u003cString\u003e orderDescriptions)"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"            throws ParseException {"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"        requireNonNull(orderDescriptions);"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":"        final Set\u003cOrderDescription\u003e orderDescriptionSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitId":"pPris"},"content":"        for (String o : orderDescriptions) {"},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"            orderDescriptionSet.add(parseOrderDescription(o));"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"        return orderDescriptionSet;"},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"pPris"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":156,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":178,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"xiinweii98"},"content":"     * Parses a {@code String deliveryDate} into an {@code DeliveryDate}."},{"lineNumber":180,"author":{"gitId":"xiinweii98"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":181,"author":{"gitId":"xiinweii98"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"xiinweii98"},"content":"     * @throws ParseException if the given {@code deliveryDate} is invalid."},{"lineNumber":183,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"xiinweii98"},"content":"    public static DeliveryDate parseDeliveryDate(String deliveryDate) throws ParseException {"},{"lineNumber":185,"author":{"gitId":"xiinweii98"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":186,"author":{"gitId":"xiinweii98"},"content":"        String trimmedDeliveryDate \u003d deliveryDate.trim();"},{"lineNumber":187,"author":{"gitId":"xiinweii98"},"content":"        if (!DeliveryDate.isValidDeliveryDate(trimmedDeliveryDate)) {"},{"lineNumber":188,"author":{"gitId":"xiinweii98"},"content":"            throw new ParseException(DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":189,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"xiinweii98"},"content":"        return new DeliveryDate(trimmedDeliveryDate);"},{"lineNumber":191,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":31,"xiinweii98":16,"-":124,"simran-bhadani3":21}},{"path":"src/main/java/seedu/address/logic/parser/RemindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.logic.commands.RemindCommand;"},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.person.ReminderDatePredicate;"},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":" * Parses input argument and creates a new RemindCommand object"},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":" */"},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":"public class RemindCommandParser implements Parser\u003cRemindCommand\u003e {"},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"     * Parses the given {@code String} of arguments in the context of the RemindCommand"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"     * and returns a RemindCommand object for execution."},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":"    public RemindCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":"        String trimmedArg \u003d args.trim();"},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"        if (trimmedArg.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"        if (!StringUtil.isUnsignedInteger(trimmedArg)) {"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitId":"RuiXiong2211"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitId":"RuiXiong2211"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"RuiXiong2211"},"content":"        return new RemindCommand(new ReminderDatePredicate(Integer.parseInt(trimmedArg)));"},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":33}},{"path":"src/main/java/seedu/address/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"     * Returns true if a given string is a valid address."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":1,"-":56}},{"path":"src/main/java/seedu/address/model/person/DeliveryDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":" * Represents an Order\u0027s delivery datre in CakeCollate."},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDeliveryDate(String)}"},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":" */"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"public class DeliveryDate {"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Deliver date should be of the format dd/mm/yyyy, dd-mm-yyyy, \""},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":"            + \"dd.mm.yyyy or dd MMM yyyy and adhere to the following constraints:\\n\""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"            + \"1. The delivery date should have a valid day, month and year.\\n\""},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"            + \"2. The delivery date should be at least 3 days after the order date.\\n\""},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"            + \"For example:\\n\""},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"            + \"01/01/2022, 01-01-2022, 01.01.2022, 01 Jan 2022\";"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    private static final DateTimeFormatter ACCEPTABLE_FORMATS \u003d"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"            DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][dd-MM-yyyy][dd.MM.yyyy][dd MMM yyyy]\");"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    private static final long DELIVERY_DATE_BUFFER \u003d 3L;"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"    public final LocalDate value;"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"     * Constructs a {@code DeliveryDate}."},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"     * @param deliveryDate A valid delivery date."},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"    public DeliveryDate(String deliveryDate) {"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"        requireNonNull(deliveryDate);"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"        checkArgument(isValidDeliveryDate(deliveryDate), MESSAGE_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"        value \u003d LocalDate.parse(deliveryDate, ACCEPTABLE_FORMATS);"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"     * Returns true if a given string is a valid date 3 working days after current date."},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    public static boolean isThreeDaysLater(String test) {"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"        LocalDate toTest \u003d LocalDate.parse(test, ACCEPTABLE_FORMATS);"},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"        LocalDate dateToday \u003d LocalDate.now();"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"        LocalDate acceptableDate \u003d dateToday.plusDays(DELIVERY_DATE_BUFFER);"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"        return toTest.isAfter(acceptableDate) || toTest.isEqual(acceptableDate);"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"     * Returns true if a given string is a valid delivery date."},{"lineNumber":53,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"    public static boolean isValidDeliveryDate(String test) {"},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"        // Test if date is valid using LocalDate.parse()"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"            LocalDate.parse(test, ACCEPTABLE_FORMATS);"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"        // Test if date is 3 working days after current Date"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        return isThreeDaysLater(test);"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":65,"author":{"gitId":"RuiXiong2211"},"content":"    public LocalDate getValue() {"},{"lineNumber":66,"author":{"gitId":"RuiXiong2211"},"content":"        return this.value;"},{"lineNumber":67,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":69,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"xiinweii98"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter toDisplay \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":72,"author":{"gitId":"xiinweii98"},"content":"        return toDisplay.format(value);"},{"lineNumber":73,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":75,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"xiinweii98"},"content":"    public boolean equals(Object other) {"},{"lineNumber":77,"author":{"gitId":"xiinweii98"},"content":"        return other \u003d\u003d this"},{"lineNumber":78,"author":{"gitId":"xiinweii98"},"content":"                || (other instanceof DeliveryDate"},{"lineNumber":79,"author":{"gitId":"xiinweii98"},"content":"                \u0026\u0026 value.equals(((DeliveryDate) other).value));"},{"lineNumber":80,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":82,"author":{"gitId":"xiinweii98"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"xiinweii98"},"content":"    public int hashCode() {"},{"lineNumber":84,"author":{"gitId":"xiinweii98"},"content":"        return value.hashCode();"},{"lineNumber":85,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"xiinweii98"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":4,"xiinweii98":82}},{"path":"src/main/java/seedu/address/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book."},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":1,"-":58}},{"path":"src/main/java/seedu/address/model/person/OrderDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class OrderDescription {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Order description should not be left blank.\";"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    /*"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"     * The first character of the order description must not be a whitespace,"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    // todo need help, why is this able to catch o/1 x Amy errors (errors using prefix when there shouldnt be)"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"     * Constructs an {@code Order Description}."},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"     * @param orderDescription A valid order description"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public OrderDescription(String orderDescription) {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        requireNonNull(orderDescription);"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        checkArgument(isValidOrderDescription(orderDescription), MESSAGE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        this.value \u003d orderDescription;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"     * Returns true if a given string is a order desecription."},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    public static boolean isValidOrderDescription(String test) {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public boolean equals(Object other) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"                || (other instanceof seedu.address.model.person.OrderDescription // instanceof handles nulls"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"                \u0026\u0026 value.equals(((OrderDescription) other).value)); // state check"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":""},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    public int hashCode() {"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"        return value.hashCode();"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":""},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"     * Format state as text for viewing."},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        return value;"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":55}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    private final Set\u003cOrderDescription\u003e orderDescriptions \u003d new HashSet\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"    private final DeliveryDate deliveryDate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cOrderDescription\u003e orderDescriptions,"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"                  Set\u003cTag\u003e tags, DeliveryDate deliveryDate) {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        requireAllNonNull(name, phone, email, address, orderDescriptions, tags, deliveryDate);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        this.orderDescriptions.addAll(orderDescriptions);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"     * Returns an immutable order description set, which throws {@code UnsupportedOperationException}"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"     * if modification is attempted."},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"    public Set\u003cOrderDescription\u003e getOrderDescriptions() {"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        return Collections.unmodifiableSet(orderDescriptions);"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"pPris"},"content":""},{"lineNumber":78,"author":{"gitId":"xiinweii98"},"content":"    public DeliveryDate getDeliveryDate() {"},{"lineNumber":79,"author":{"gitId":"xiinweii98"},"content":"        return deliveryDate;"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"                \u0026\u0026 otherPerson.getOrderDescriptions().equals(getOrderDescriptions())"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())"},{"lineNumber":116,"author":{"gitId":"xiinweii98"},"content":"                \u0026\u0026 otherPerson.getDeliveryDate().equals(getDeliveryDate());"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":122,"author":{"gitId":"xiinweii98"},"content":"        return Objects.hash(name, phone, email, address, tags, deliveryDate);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e orderDescriptions \u003d getOrderDescriptions();"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"        if (!orderDescriptions.isEmpty()) {"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"            builder.append(\"; Order Descriptions: \");"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"            orderDescriptions.forEach(builder::append);"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":""},{"lineNumber":142,"author":{"gitId":"pPris"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":""},{"lineNumber":149,"author":{"gitId":"xiinweii98"},"content":"        builder.append(\"; DeliveryDate: \")"},{"lineNumber":150,"author":{"gitId":"xiinweii98"},"content":"                .append(getDeliveryDate());"},{"lineNumber":151,"author":{"gitId":"pPris"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":27,"xiinweii98":9,"-":119}},{"path":"src/main/java/seedu/address/model/person/ReminderDatePredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":" * Tests that a {@code Orders}\u0027s {@code DeliveryDate} is within 3 days of the current date."},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":" */"},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":"public class ReminderDatePredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":"    private long days;"},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":"    public ReminderDatePredicate(long days) {"},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":"        this.days \u003d days;"},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"    public boolean test(Person person) {"},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":"        return isWithinXDays(person);"},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"     * Returns true if the order\u0027s delivery date is within X days of the current date."},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":"    public boolean isWithinXDays(Person person) {"},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate toTest \u003d person.getDeliveryDate().getValue();"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate dateToday \u003d LocalDate.now();"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate acceptableDate \u003d dateToday.plusDays(days + 1);"},{"lineNumber":29,"author":{"gitId":"RuiXiong2211"},"content":"        return toTest.isAfter(dateToday.minusDays(1L)) \u0026\u0026 toTest.isBefore(acceptableDate);"},{"lineNumber":30,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"RuiXiong2211"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"RuiXiong2211"},"content":"                || (other instanceof ReminderDatePredicate // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":"                \u0026\u0026 days \u003d\u003d (((ReminderDatePredicate) other).days)); // state check"},{"lineNumber":37,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":39,"author":{"gitId":"RuiXiong2211"},"content":"}"},{"lineNumber":40,"author":{"gitId":"RuiXiong2211"},"content":""}],"authorContributionMap":{"RuiXiong2211":40}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":" * Contains utility methods for populating {@code CakeCollate} with sample data."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    private static LocalDate dateToday \u003d LocalDate.now();"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"    private static DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy]\");"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"2 x Chocolate Cake\"), getTagSet(\"friends\"),"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"                    new DeliveryDate(dateFormatter.format(dateToday.plusDays(3L)))"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"2 x Vanilla Cake\"), getTagSet(\"colleagues\", \"friends\"),"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"                    new DeliveryDate(dateFormatter.format(dateToday.plusDays(4L)))"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"2 x Chocolate Cake\", \"3 x Kiwi Cake\"),"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"                    getTagSet(\"neighbours\"),"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"                    new DeliveryDate(dateFormatter.format(dateToday.plusDays(5L)))"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"2 x Chocolate Cake\"), getTagSet(\"family\"),"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"                    new DeliveryDate(dateFormatter.format(dateToday.plusDays(6L)))"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"1 x Strawberry Cake\", \"1 x Chocolate Vanilla Cake\", \"1 x Berries Cake\"),"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"                    getTagSet(\"classmates\"), new DeliveryDate(dateFormatter.format(dateToday.plusDays(7L)))"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"                    getOrderDescriptionSet(\"1 x Black Forest Cake\"), getTagSet(\"colleagues\"),"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"                    new DeliveryDate(dateFormatter.format(dateToday.plusDays(8L)))"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"            ),"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"     * Returns a set of order descriptions containing the list of strings given."},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    public static Set\u003cOrderDescription\u003e getOrderDescriptionSet(String... strings) {"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"        return Arrays.stream(strings)"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"                .map(OrderDescription::new)"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":29,"xiinweii98":7,"-":53}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedOrderDescription.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"public class JsonAdaptedOrderDescription {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private final String orderDescription;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"     * Constructs a {@code JsonAdaptedOrderDescription} with the given {@code orderDescription}."},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    @JsonCreator"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    public JsonAdaptedOrderDescription(String orderDescription) {"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        this.orderDescription \u003d orderDescription;"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"     * Converts a given {@code orderDescription} into this class for Jackson use."},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public JsonAdaptedOrderDescription(OrderDescription source) {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        orderDescription \u003d source.value;"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    @JsonValue"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    public String getOrderDescription() {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        return orderDescription;"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"     * Converts this Jackson-friendly adapted OrderDescription object into the model\u0027s {@code OrderDescription} object."},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    public OrderDescription toModelType() throws IllegalValueException {"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        if (!OrderDescription.isValidOrderDescription(orderDescription)) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"            throw new IllegalValueException(OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        return new OrderDescription(orderDescription);"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":43}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":24,"author":{"gitId":"-"},"content":" */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    private final List\u003cJsonAdaptedOrderDescription\u003e orderDescriptions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"    private final String deliveryDate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"            @JsonProperty(\"orderDescriptions\") List\u003cJsonAdaptedOrderDescription\u003e orderDescriptions,"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"            @JsonProperty(\"deliveryDate\") String deliveryDate) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        if (orderDescriptions !\u003d null) { // handle null below"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"            this.orderDescriptions.addAll(orderDescriptions);"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d deliveryDate;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        orderDescriptions.addAll("},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"                source.getOrderDescriptions().stream()"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"                .map(JsonAdaptedOrderDescription::new)"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":74,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d source.getDeliveryDate().toString();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"xiinweii98"},"content":"        if (deliveryDate \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitId":"xiinweii98"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":122,"author":{"gitId":"xiinweii98"},"content":"                    DeliveryDate.class.getSimpleName()));"},{"lineNumber":123,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"xiinweii98"},"content":"        if (!DeliveryDate.isValidDeliveryDate(deliveryDate)) {"},{"lineNumber":125,"author":{"gitId":"xiinweii98"},"content":"            throw new IllegalValueException(DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"xiinweii98"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"xiinweii98"},"content":"        final DeliveryDate modelDeliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":""},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"        if (orderDescriptions.isEmpty() || orderDescriptions \u003d\u003d null) {"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"                    OrderDescription.class.getSimpleName()));"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":""},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        final List\u003cOrderDescription\u003e personOrderDescriptions \u003d new ArrayList\u003c\u003e();"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"        for (JsonAdaptedOrderDescription o : orderDescriptions) {"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"            personOrderDescriptions.add(o.toModelType());"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"        final Set\u003cOrderDescription\u003e modelOrderDescriptions \u003d new HashSet\u003c\u003e(personOrderDescriptions);"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":""},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelOrderDescriptions, modelTags,"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"                modelDeliveryDate);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":24,"xiinweii98":15,"-":107}},{"path":"src/main/java/seedu/address/ui/HelpCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pavz02"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"pavz02"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"pavz02"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":" * An UI component that displays information of a {@code String command description}."},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"public class HelpCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":"    private static final String FXML \u003d \"HelpListCard.fxml\";"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":21,"author":{"gitId":"pavz02"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"pavz02"},"content":"    private HBox helpPane;"},{"lineNumber":23,"author":{"gitId":"pavz02"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"pavz02"},"content":"    private Label commandDescription;"},{"lineNumber":25,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":26,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pavz02"},"content":"     * Creates a {@code HelpCard} with the given {@code String} to display."},{"lineNumber":28,"author":{"gitId":"pavz02"},"content":"     * @param command String description of the commands available in CakeCollate."},{"lineNumber":29,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pavz02"},"content":"    public HelpCard(String command) {"},{"lineNumber":31,"author":{"gitId":"pavz02"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitId":"pavz02"},"content":"        commandDescription.setText(command);"},{"lineNumber":33,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":35,"author":{"gitId":"pavz02"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"pavz02"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"pavz02"},"content":"        // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"pavz02"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitId":"pavz02"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"pavz02"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":42,"author":{"gitId":"pavz02"},"content":"        // instanceof handles nulls"},{"lineNumber":43,"author":{"gitId":"pavz02"},"content":"        if (!(other instanceof HelpCard)) {"},{"lineNumber":44,"author":{"gitId":"pavz02"},"content":"            return false;"},{"lineNumber":45,"author":{"gitId":"pavz02"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":47,"author":{"gitId":"pavz02"},"content":"        // state check"},{"lineNumber":48,"author":{"gitId":"pavz02"},"content":"        HelpCard card \u003d (HelpCard) other;"},{"lineNumber":49,"author":{"gitId":"pavz02"},"content":"        return commandDescription.getText().equals(card.commandDescription.getText());"},{"lineNumber":50,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"pavz02"},"content":"}"}],"authorContributionMap":{"pavz02":51}},{"path":"src/main/java/seedu/address/ui/HelpListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pavz02"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":5,"author":{"gitId":"pavz02"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":" * Panel containing the list of orders."},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":"public class HelpListPanel extends Panel {"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(HelpListPanel.class);"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":"    private ListView\u003cString\u003e listView;"},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":21,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pavz02"},"content":"     * Creates a {@code HelpCommandPanel} with the given {@code ObservableList}."},{"lineNumber":23,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"pavz02"},"content":"    public HelpListPanel(ObservableList\u003cString\u003e commandDescriptionList) {"},{"lineNumber":25,"author":{"gitId":"pavz02"},"content":"        super();"},{"lineNumber":26,"author":{"gitId":"pavz02"},"content":"        listView.setItems(commandDescriptionList);"},{"lineNumber":27,"author":{"gitId":"pavz02"},"content":"        listView.setCellFactory(listView -\u003e new ListViewCell());"},{"lineNumber":28,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":30,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pavz02"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code String command} using a {@code HelpCard}."},{"lineNumber":32,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pavz02"},"content":"    class ListViewCell extends ListCell\u003cString\u003e {"},{"lineNumber":34,"author":{"gitId":"pavz02"},"content":"        @Override"},{"lineNumber":35,"author":{"gitId":"pavz02"},"content":"        protected void updateItem(String command, boolean empty) {"},{"lineNumber":36,"author":{"gitId":"pavz02"},"content":"            super.updateItem(command, empty);"},{"lineNumber":37,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":38,"author":{"gitId":"pavz02"},"content":"            if (empty || command \u003d\u003d null) {"},{"lineNumber":39,"author":{"gitId":"pavz02"},"content":"                setGraphic(null);"},{"lineNumber":40,"author":{"gitId":"pavz02"},"content":"                setText(null);"},{"lineNumber":41,"author":{"gitId":"pavz02"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"pavz02"},"content":"                setGraphic(new HelpCard(command).getRoot());"},{"lineNumber":43,"author":{"gitId":"pavz02"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"pavz02"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":47,"author":{"gitId":"pavz02"},"content":"}"}],"authorContributionMap":{"pavz02":47}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":35,"author":{"gitId":"pavz02"},"content":"    private boolean inHelp \u003d false;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":39,"author":{"gitId":"pavz02"},"content":"    private Panel personPanel;"},{"lineNumber":40,"author":{"gitId":"pavz02"},"content":"    private Panel helpPanel;"},{"lineNumber":41,"author":{"gitId":"pavz02"},"content":"    private Button helpPanelToMain;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"pavz02"},"content":"    private StackPane listPanelPlaceholder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"pavz02"},"content":"        initialiseHelpPanelAndButton();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":95,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":105,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"pavz02"},"content":"    void fillPersonListPanel() {"},{"lineNumber":129,"author":{"gitId":"pavz02"},"content":"        personPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitId":"pavz02"},"content":"        listPanelPlaceholder.getChildren().add(personPanel.getRoot());"},{"lineNumber":131,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":133,"author":{"gitId":"pavz02"},"content":"    void initialiseHelpPanelAndButton() {"},{"lineNumber":134,"author":{"gitId":"pavz02"},"content":"        helpPanel \u003d new HelpListPanel(HelpCommand.getListOfCommands());"},{"lineNumber":135,"author":{"gitId":"pavz02"},"content":"        helpPanelToMain \u003d new Button(\"Return to the order list\");"},{"lineNumber":136,"author":{"gitId":"pavz02"},"content":"        helpPanelToMain.setOnAction(event -\u003e {"},{"lineNumber":137,"author":{"gitId":"pavz02"},"content":"            resetMainWindow();"},{"lineNumber":138,"author":{"gitId":"pavz02"},"content":"        });"},{"lineNumber":139,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":141,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"pavz02"},"content":"     * Transitions from the help window to the the main order list."},{"lineNumber":143,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"pavz02"},"content":"    public void resetMainWindow() {"},{"lineNumber":145,"author":{"gitId":"pavz02"},"content":"        listPanelPlaceholder.getChildren().remove(0);"},{"lineNumber":146,"author":{"gitId":"pavz02"},"content":"        fillPersonListPanel();"},{"lineNumber":147,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":148,"author":{"gitId":"pavz02"},"content":"        resultDisplayPlaceholder.getChildren().remove(1);"},{"lineNumber":149,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":150,"author":{"gitId":"pavz02"},"content":"        logger.info(\"Result: \" + HelpCommand.SHOWING_RETURN_MESSAGE);"},{"lineNumber":151,"author":{"gitId":"pavz02"},"content":"        resultDisplay.setFeedbackToUser(HelpCommand.SHOWING_RETURN_MESSAGE);"},{"lineNumber":152,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":153,"author":{"gitId":"pavz02"},"content":"        inHelp \u003d false;"},{"lineNumber":154,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":173,"author":{"gitId":"pavz02"},"content":"        if (!inHelp) {"},{"lineNumber":174,"author":{"gitId":"pavz02"},"content":"            inHelp \u003d true;"},{"lineNumber":175,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":176,"author":{"gitId":"pavz02"},"content":"            listPanelPlaceholder.getChildren().remove(0);"},{"lineNumber":177,"author":{"gitId":"pavz02"},"content":"            listPanelPlaceholder.getChildren().add(helpPanel.getRoot());"},{"lineNumber":178,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":179,"author":{"gitId":"pavz02"},"content":"            helpPanelToMain.setPrefWidth(resultDisplayPlaceholder.getWidth());"},{"lineNumber":180,"author":{"gitId":"pavz02"},"content":"            resultDisplayPlaceholder.getChildren().add(helpPanelToMain);"},{"lineNumber":181,"author":{"gitId":"pavz02"},"content":"            StackPane.setAlignment(helpPanelToMain, Pos.BOTTOM_CENTER);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":202,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":204,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":46,"-":180}},{"path":"src/main/java/seedu/address/ui/Panel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pavz02"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":4,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":5,"author":{"gitId":"pavz02"},"content":"abstract class Panel extends UiPart\u003cRegion\u003e {"},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"    private static final String FXML \u003d \"ListPanel.fxml\";"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":"     * Creates a {@code OrderListPanel} with the given {@code ObservableList}."},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"    public Panel() {"},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":"        super(FXML);"},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":"}"}],"authorContributionMap":{"pavz02":14}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    private FlowPane orderDescriptions;"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    private Label deliveryDate;"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        person.getOrderDescriptions().stream()"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"                .sorted(Comparator.comparing(orderDescription -\u003e orderDescription.value))"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"                .forEach(orderDescription -\u003e orderDescriptions.getChildren().add(new Label(orderDescription.value)));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        deliveryDate.setText(person.getDeliveryDate().toString());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":7,"xiinweii98":1,"-":77}},{"path":"src/main/java/seedu/address/ui/PersonListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Panel containing the list of persons."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"public class PersonListPanel extends Panel {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"    private ListView\u003cPerson\u003e listView;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"},{"lineNumber":25,"author":{"gitId":"pavz02"},"content":"        super();"},{"lineNumber":26,"author":{"gitId":"pavz02"},"content":"        listView.setItems(personList);"},{"lineNumber":27,"author":{"gitId":"pavz02"},"content":"        listView.setCellFactory(listView -\u003e new PersonListViewCell());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    class PersonListViewCell extends ListCell\u003cPerson\u003e {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        protected void updateItem(Person person, boolean empty) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            super.updateItem(person, empty);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            if (empty || person \u003d\u003d null) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                setGraphic(null);"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                setText(null);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":5,"-":42}},{"path":"src/main/java/seedu/address/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        //Set the application icon."},{"lineNumber":41,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":46,"author":{"gitId":"pavz02"},"content":"            mainWindow.fillPersonListPanel();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                                               String contentText) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        alert.showAndWait();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Platform.exit();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        System.exit(1);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":1,"-":89}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"pavz02"},"content":".cell_help_label {"},{"lineNumber":136,"author":{"gitId":"pavz02"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":137,"author":{"gitId":"pavz02"},"content":"    -fx-font-size: 16px;"},{"lineNumber":138,"author":{"gitId":"pavz02"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":139,"author":{"gitId":"pavz02"},"content":"}"},{"lineNumber":140,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"}"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"}"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":210,"author":{"gitId":"-"},"content":"}"},{"lineNumber":211,"author":{"gitId":"-"},"content":""},{"lineNumber":212,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":217,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":219,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":220,"author":{"gitId":"-"},"content":" */"},{"lineNumber":221,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":226,"author":{"gitId":"pavz02"},"content":"    -fx-background-color: #2a2a2a;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":231,"author":{"gitId":"-"},"content":"}"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"}"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}"},{"lineNumber":249,"author":{"gitId":"-"},"content":""},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":254,"author":{"gitId":"-"},"content":"}"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"}"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":263,"author":{"gitId":"-"},"content":"}"},{"lineNumber":264,"author":{"gitId":"-"},"content":""},{"lineNumber":265,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"}"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":281,"author":{"gitId":"-"},"content":"}"},{"lineNumber":282,"author":{"gitId":"-"},"content":""},{"lineNumber":283,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":288,"author":{"gitId":"-"},"content":"}"},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}"},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":300,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":302,"author":{"gitId":"-"},"content":"}"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":305,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":306,"author":{"gitId":"-"},"content":"}"},{"lineNumber":307,"author":{"gitId":"-"},"content":""},{"lineNumber":308,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":309,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":310,"author":{"gitId":"-"},"content":"}"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":319,"author":{"gitId":"-"},"content":"}"},{"lineNumber":320,"author":{"gitId":"-"},"content":""},{"lineNumber":321,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"}"},{"lineNumber":325,"author":{"gitId":"-"},"content":""},{"lineNumber":326,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":335,"author":{"gitId":"-"},"content":"}"},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"}"},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":349,"author":{"gitId":"-"},"content":"}"},{"lineNumber":350,"author":{"gitId":"-"},"content":""},{"lineNumber":351,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":358,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pavz02":7,"-":351}},{"path":"src/main/resources/view/HelpListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pavz02"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":3,"author":{"gitId":"pavz02"},"content":"\u003c?import java.lang.*?\u003e"},{"lineNumber":4,"author":{"gitId":"pavz02"},"content":"\u003c?import java.util.*?\u003e"},{"lineNumber":5,"author":{"gitId":"pavz02"},"content":"\u003c?import javafx.scene.*?\u003e"},{"lineNumber":6,"author":{"gitId":"pavz02"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":8,"author":{"gitId":"pavz02"},"content":""},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":10,"author":{"gitId":"pavz02"},"content":"\u003cHBox id\u003d\"helpPane\" fx:id\u003d\"helpPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"pavz02"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":12,"author":{"gitId":"pavz02"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":13,"author":{"gitId":"pavz02"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":14,"author":{"gitId":"pavz02"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"pavz02"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":16,"author":{"gitId":"pavz02"},"content":"            \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"pavz02"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":18,"author":{"gitId":"pavz02"},"content":"            \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"pavz02"},"content":"            \u003cLabel fx:id\u003d\"commandDescription\" styleClass\u003d\"cell_help_label\" text\u003d\"\\$description\" /\u003e"},{"lineNumber":20,"author":{"gitId":"pavz02"},"content":"        \u003c/VBox\u003e"},{"lineNumber":21,"author":{"gitId":"pavz02"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":22,"author":{"gitId":"pavz02"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"pavz02":22}},{"path":"src/main/resources/view/ListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"pavz02"},"content":"  \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e"},{"lineNumber":9,"author":{"gitId":"pavz02"},"content":""}],"authorContributionMap":{"pavz02":2,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":14,"author":{"gitId":"-"},"content":"         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"pavz02"},"content":"        \u003cVBox fx:id\u003d\"list\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":52,"author":{"gitId":"pavz02"},"content":"          \u003cStackPane fx:id\u003d\"listPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"pavz02":2,"-":57}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"      \u003cFlowPane fx:id\u003d\"orderDescriptions\" /\u003e"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"      \u003cLabel fx:id\u003d\"deliveryDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deliveryDate\" /\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"pPris":1,"xiinweii98":1,"-":36}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    \"address\": \"4th street\","},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Strawberry Cakes\" ],"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    \"tagged\": [ \"friends\" ],"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    \"deliveryDate\": \"02/02/2022\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":15,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":4,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Strawberry Cakes\" ],"},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\": [ \"friends\" ],"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"02/02/2022\""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    \"address\": \"4th street\","},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Berry Cakes\" ],"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"02/02/2022\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":3,"xiinweii98":3,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Strawberry Cakes\" ],"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01/01/2022\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Chocolate Cakes\" ],"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"owesMoney\", \"friends\" ],"},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01-01-2022\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"1 Vanilla Cake\" ],"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01.01.2022\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"1 Chocolate Chip Muffin\" ],"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ \"friends\" ],"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"01 Jan 2022\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"1 Raisins Cake Thing\", \"1 x Vanilla Cake\", \"1 x Blackforest cake\" ],"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"31/12/2022\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 x Vanilla cakes\" ],"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"28-02-2022\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    \"orderDescriptions\": [ \"2 lava cakes\" ],"},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"    \"tagged\" : [ ],"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"    \"deliveryDate\": \"06.03.2022\""},{"lineNumber":59,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":7,"xiinweii98":14,"-":39}},{"path":"src/test/java/seedu/address/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"RuiXiong2211"},"content":"    //---------------- Tests for isUnsignedInteger --------------------------------------"},{"lineNumber":49,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"RuiXiong2211"},"content":"    public void isUnsignedInteger() {"},{"lineNumber":51,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":52,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: empty strings"},{"lineNumber":53,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"\")); // Boundary value"},{"lineNumber":54,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"  \"));"},{"lineNumber":55,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":56,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: not a number"},{"lineNumber":57,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"a\"));"},{"lineNumber":58,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"aaa\"));"},{"lineNumber":59,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":60,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: zero"},{"lineNumber":61,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(StringUtil.isUnsignedInteger(\"0\"));"},{"lineNumber":62,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":63,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: zero as prefix"},{"lineNumber":64,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(StringUtil.isUnsignedInteger(\"01\"));"},{"lineNumber":65,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":66,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: signed numbers"},{"lineNumber":67,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"-1\"));"},{"lineNumber":68,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"+1\"));"},{"lineNumber":69,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":70,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: numbers with white space"},{"lineNumber":71,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\" 10 \")); // Leading/trailing spaces"},{"lineNumber":72,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(\"1 0\")); // Spaces in the middle"},{"lineNumber":73,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":74,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: number larger than Integer.MAX_VALUE"},{"lineNumber":75,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(StringUtil.isUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":76,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":77,"author":{"gitId":"RuiXiong2211"},"content":"        // EP: valid numbers, should return true"},{"lineNumber":78,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(StringUtil.isUnsignedInteger(\"1\"));"},{"lineNumber":79,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(StringUtil.isUnsignedInteger(\"10\"));"},{"lineNumber":80,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     *   - any word"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     *   - empty string"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     *   - one word"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     *   - multiple words"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     *   - last word in sentence"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     *   - middle word in sentence"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     *   - matches multiple words"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // Empty sentence"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // Matches a partial word only"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"},{"lineNumber":169,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":34,"-":143}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_AMY + ORDER_AMY + DELIVERY_DATE_DESC_AMY;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":2,"xiinweii98":1,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    public static final String VALID_CHOCOLATE_ORDER \u003d \"1 x Amy\u0027s Chocolate Cakes\";"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    public static final String VALID_BERRY_ORDER \u003d \"1 x Bob\u0027s Berry Cakes\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"    public static final String VALID_DELIVERY_DATE_AMY \u003d \"01/01/2022\";"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"    public static final String VALID_DELIVERY_DATE_BOB \u003d \"01/01/2022\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    // these set of fields prefix the variables above with the right prefixes"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"    public static final String ORDER_AMY \u003d \" \" + PREFIX_ORDER_DESCRIPTION + VALID_CHOCOLATE_ORDER;"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    public static final String ORDER_BOB \u003d \" \" + PREFIX_ORDER_DESCRIPTION + VALID_BERRY_ORDER;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"    public static final String DELIVERY_DATE_DESC_AMY \u003d \" \" + PREFIX_DATE + VALID_DELIVERY_DATE_AMY;"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"    public static final String DELIVERY_DATE_DESC_BOB \u003d \" \" + PREFIX_DATE + VALID_DELIVERY_DATE_BOB;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"    // these are some user input fields with prefixes, invalid according to validation specified in model classes"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    public static final String INVALID_ORDER_DESC \u003d \" \" + PREFIX_ORDER_DESCRIPTION; // empty string not allowed"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":69,"author":{"gitId":"xiinweii98"},"content":"    public static final String INVALID_DELIVERY_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2021/03/03\"; // invalid format"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"                .withOrderDescriptions(VALID_CHOCOLATE_ORDER).withTags(VALID_TAG_FRIEND)"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_AMY).build();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"                .withOrderDescriptions(VALID_BERRY_ORDER).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"                .withDeliveryDate(VALID_DELIVERY_DATE_BOB).build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":12,"xiinweii98":6,"-":126}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":35,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arrayFirstPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":36,"author":{"gitId":"simran-bhadani3"},"content":"        arrayFirstPerson.add(INDEX_FIRST_PERSON);"},{"lineNumber":37,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(arrayFirstPerson);"},{"lineNumber":38,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(indexList);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"simran-bhadani3"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, personToDelete);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":51,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e array \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":52,"author":{"gitId":"simran-bhadani3"},"content":"        array.add(outOfBoundIndex);"},{"lineNumber":53,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList outOfBoundIndexList \u003d new IndexList(array);"},{"lineNumber":54,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndexList);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":64,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arrayFirstPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":65,"author":{"gitId":"simran-bhadani3"},"content":"        arrayFirstPerson.add(INDEX_FIRST_PERSON);"},{"lineNumber":66,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(arrayFirstPerson);"},{"lineNumber":67,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(indexList);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"simran-bhadani3"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_ORDER_SUCCESS, personToDelete);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":83,"author":{"gitId":"simran-bhadani3"},"content":"        // ensures that outOfBoundIndex is still in bounds of CakeCollate list"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":85,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e array \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":86,"author":{"gitId":"simran-bhadani3"},"content":"        array.add(outOfBoundIndex);"},{"lineNumber":87,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList outOfBoundIndexList \u003d new IndexList(array);"},{"lineNumber":88,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndexList);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":95,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arrayFirstPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":96,"author":{"gitId":"simran-bhadani3"},"content":"        arrayFirstPerson.add(INDEX_FIRST_PERSON);"},{"lineNumber":97,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexListFirstPerson \u003d new IndexList(arrayFirstPerson);"},{"lineNumber":98,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":99,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arraySecondPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":100,"author":{"gitId":"simran-bhadani3"},"content":"        arraySecondPerson.add(INDEX_SECOND_PERSON);"},{"lineNumber":101,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexListSecondPerson \u003d new IndexList(arraySecondPerson);"},{"lineNumber":102,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(indexListFirstPerson);"},{"lineNumber":103,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(indexListSecondPerson);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":109,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e array \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":110,"author":{"gitId":"simran-bhadani3"},"content":"        array.add(INDEX_FIRST_PERSON);"},{"lineNumber":111,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(array);"},{"lineNumber":112,"author":{"gitId":"simran-bhadani3"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(indexList);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":123,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":98,"simran-bhadani3":36}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BERRY_ORDER;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        // different order descriptions -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY)"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"                .withOrderDescriptions(VALID_BERRY_ORDER)"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"                .build();"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":7,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/RemindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_REMINDER_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.person.ReminderDatePredicate;"},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":" * Contains integration tests (interaction with the Model) for {@code RemindCommand}."},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":" */"},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":"public class RemindCommandTest {"},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"    public void equals() {"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate firstPredicate \u003d new ReminderDatePredicate(1);"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate secondPredicate \u003d new ReminderDatePredicate(2);"},{"lineNumber":29,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":30,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand remindFirstCommand \u003d new RemindCommand(firstPredicate);"},{"lineNumber":31,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand remindSecondCommand \u003d new RemindCommand(secondPredicate);"},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"        // same object return true"},{"lineNumber":34,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(remindFirstCommand.equals(remindFirstCommand));"},{"lineNumber":35,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":"        // same values return true"},{"lineNumber":37,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand copy \u003d new RemindCommand(firstPredicate);"},{"lineNumber":38,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(remindFirstCommand.equals(copy));"},{"lineNumber":39,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":40,"author":{"gitId":"RuiXiong2211"},"content":"        // different types return false"},{"lineNumber":41,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(remindFirstCommand.equals(\"1\"));"},{"lineNumber":42,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":43,"author":{"gitId":"RuiXiong2211"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(remindFirstCommand.equals(null));"},{"lineNumber":45,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":46,"author":{"gitId":"RuiXiong2211"},"content":"        // different predicate returns false"},{"lineNumber":47,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(remindFirstCommand.equals(remindSecondCommand));"},{"lineNumber":48,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":50,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"RuiXiong2211"},"content":"    public void execute_invalidRange_noOrderFound() {"},{"lineNumber":52,"author":{"gitId":"RuiXiong2211"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_REMINDER_OVERVIEW, 0);"},{"lineNumber":53,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate predicate \u003d new ReminderDatePredicate(-1);"},{"lineNumber":54,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand command \u003d new RemindCommand(predicate);"},{"lineNumber":55,"author":{"gitId":"RuiXiong2211"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":56,"author":{"gitId":"RuiXiong2211"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":57,"author":{"gitId":"RuiXiong2211"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":58,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":60,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"RuiXiong2211"},"content":"    public void execute_smallRange_noOrderFound() {"},{"lineNumber":62,"author":{"gitId":"RuiXiong2211"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_REMINDER_OVERVIEW, 0);"},{"lineNumber":63,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate predicate \u003d new ReminderDatePredicate(10);"},{"lineNumber":64,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand command \u003d new RemindCommand(predicate);"},{"lineNumber":65,"author":{"gitId":"RuiXiong2211"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":66,"author":{"gitId":"RuiXiong2211"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":67,"author":{"gitId":"RuiXiong2211"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":68,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"RuiXiong2211"},"content":"}"},{"lineNumber":70,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":71,"author":{"gitId":"RuiXiong2211"},"content":""}],"authorContributionMap":{"RuiXiong2211":71}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DELIVERY_DATE_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DELIVERY_DATE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ORDER_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_AMY;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BERRY_ORDER;"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHOCOLATE_ORDER;"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":""},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"        //  multiple order descriptions - all accepted"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"        Person expectedPersonMultipleOrderDescriptions \u003d new PersonBuilder(BOB)"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"                .withOrderDescriptions(VALID_CHOCOLATE_ORDER, VALID_BERRY_ORDER)"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"                .withTags(VALID_TAG_FRIEND)"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"                .build();"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"                + ORDER_AMY + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPersonMultipleOrderDescriptions));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":100,"author":{"gitId":"xiinweii98"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":""},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"        //  multiple delivery dates - last accepted"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"                        + ORDER_BOB + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_AMY + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":111,"author":{"gitId":"xiinweii98"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"                + ORDER_AMY + DELIVERY_DATE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":120,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"                        + ORDER_BOB + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":124,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"                        + ORDER_BOB + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":128,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"                        + ORDER_BOB + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":132,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"                        + ORDER_BOB + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"                        + VALID_BERRY_ORDER + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"        // missing order description prefix"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"                + VALID_BERRY_ORDER + DELIVERY_DATE_DESC_BOB, expectedMessage);"},{"lineNumber":142,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":143,"author":{"gitId":"xiinweii98"},"content":"        // missing delivery date prefix"},{"lineNumber":144,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":145,"author":{"gitId":"pPris"},"content":"                + VALID_DELIVERY_DATE_BOB, expectedMessage);"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"                        + VALID_ADDRESS_BOB + VALID_BERRY_ORDER, expectedMessage);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":164,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":169,"author":{"gitId":"pPris"},"content":""},{"lineNumber":170,"author":{"gitId":"pPris"},"content":"        // invalid order description"},{"lineNumber":171,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":172,"author":{"gitId":"pPris"},"content":"                + INVALID_ORDER_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":173,"author":{"gitId":"pPris"},"content":"                OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":177,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND + DELIVERY_DATE_DESC_BOB, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":178,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":179,"author":{"gitId":"xiinweii98"},"content":"        // invalid delivery date"},{"lineNumber":180,"author":{"gitId":"xiinweii98"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + INVALID_DELIVERY_DATE_DESC,"},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"                DeliveryDate.MESSAGE_CONSTRAINTS);"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":186,"author":{"gitId":"pPris"},"content":"                + ORDER_BOB + DELIVERY_DATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":190,"author":{"gitId":"pPris"},"content":"                + ADDRESS_DESC_BOB + ORDER_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DELIVERY_DATE_DESC_BOB,"},{"lineNumber":191,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":59,"xiinweii98":17,"-":117}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.logic.commands.RemindCommand;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.person.ReminderDatePredicate;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":57,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":58,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arrayFirstPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":59,"author":{"gitId":"simran-bhadani3"},"content":"        arrayFirstPerson.add(INDEX_FIRST_PERSON);"},{"lineNumber":60,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(arrayFirstPerson);"},{"lineNumber":61,"author":{"gitId":"simran-bhadani3"},"content":"        assertEquals(new DeleteCommand(indexList), command);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":69,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"RuiXiong2211"},"content":"    public void parseCommand_remind() throws Exception {"},{"lineNumber":101,"author":{"gitId":"RuiXiong2211"},"content":"        RemindCommand command \u003d (RemindCommand) parser.parseCommand("},{"lineNumber":102,"author":{"gitId":"RuiXiong2211"},"content":"                RemindCommand.COMMAND_WORD + \" \" + 1);"},{"lineNumber":103,"author":{"gitId":"RuiXiong2211"},"content":"        assertEquals(new RemindCommand(new ReminderDatePredicate(1)), command);"},{"lineNumber":104,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":9,"-":100,"simran-bhadani3":7}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"simran-bhadani3"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"simran-bhadani3"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":13,"author":{"gitId":"simran-bhadani3"},"content":"import seedu.address.commons.core.index.IndexList;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":20,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":29,"author":{"gitId":"simran-bhadani3"},"content":"        ArrayList\u003cIndex\u003e arrayFirstPerson \u003d new ArrayList\u003cIndex\u003e();"},{"lineNumber":30,"author":{"gitId":"simran-bhadani3"},"content":"        arrayFirstPerson.add(INDEX_FIRST_PERSON);"},{"lineNumber":31,"author":{"gitId":"simran-bhadani3"},"content":"        IndexList indexList \u003d new IndexList(arrayFirstPerson);"},{"lineNumber":32,"author":{"gitId":"simran-bhadani3"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(indexList));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":31,"simran-bhadani3":8}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_AMY;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ORDER_BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BERRY_ORDER;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHOCOLATE_ORDER;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"    private static final String ORDER_DESC_EMPTY \u003d \" \" + PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"        // order description"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, \"1\" + ORDER_AMY + ORDER_BOB + ORDER_DESC_EMPTY,"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"                OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, \"1\" + ORDER_AMY + ORDER_DESC_EMPTY + ORDER_BOB,"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"                OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, \"1\" + ORDER_DESC_EMPTY + ORDER_AMY + ORDER_BOB,"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"                OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"        assertParseFailure(parser, \"1\" + ORDER_DESC_EMPTY, OrderDescription.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"                + ORDER_AMY + ORDER_BOB"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"                + TAG_DESC_FRIEND;"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"                .withOrderDescriptions(VALID_CHOCOLATE_ORDER, VALID_BERRY_ORDER)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"        // order description"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":"        userInput \u003d targetIndex.getOneBased() + ORDER_AMY;"},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withOrderDescriptions(VALID_CHOCOLATE_ORDER).build();"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitId":"pPris"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"},{"lineNumber":202,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":221,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":26,"-":210}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    private static final String INVALID_ORDER_DESC \u003d \" \";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    private static final String VALID_ORDER_DESC_1 \u003d \"chocolate mousse\";"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    private static final String VALID_ORDER_DESC_2 \u003d \"1 x strawberry thing\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_null_throwsNullPointerException() {"},{"lineNumber":157,"author":{"gitId":"pPris"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOrderDescription(null));"},{"lineNumber":158,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"pPris"},"content":""},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_invalidValue_throwsParseException() {"},{"lineNumber":162,"author":{"gitId":"pPris"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOrderDescription(INVALID_ORDER_DESC));"},{"lineNumber":163,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"pPris"},"content":""},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_validValue_returnsOrderDescription() throws ParseException {"},{"lineNumber":167,"author":{"gitId":"pPris"},"content":"        OrderDescription expectedOrderDescription \u003d new OrderDescription(VALID_ORDER_DESC_1);"},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"        assertEquals(expectedOrderDescription, ParserUtil.parseOrderDescription(VALID_ORDER_DESC_1));"},{"lineNumber":169,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"pPris"},"content":""},{"lineNumber":171,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":172,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_validValueWithWhitespace_returnsTrimmedOrderDescription() throws ParseException {"},{"lineNumber":173,"author":{"gitId":"pPris"},"content":"        String untrimmed \u003d WHITESPACE + VALID_ORDER_DESC_1 + WHITESPACE;"},{"lineNumber":174,"author":{"gitId":"pPris"},"content":"        OrderDescription expectedOrderDescription \u003d new OrderDescription(VALID_ORDER_DESC_1);"},{"lineNumber":175,"author":{"gitId":"pPris"},"content":"        assertEquals(expectedOrderDescription, ParserUtil.parseOrderDescription(untrimmed));"},{"lineNumber":176,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"pPris"},"content":""},{"lineNumber":178,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":179,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_collectionWithInvalidOrderDescription_throwsParseException() {"},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOrderDescriptions(Arrays.asList(VALID_ORDER_DESC_1,"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":"                INVALID_ORDER_DESC)));"},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":""},{"lineNumber":184,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":"    public void parseOrderDescription_collectionWithValidOrderDescription_returnsSet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e actualOrderDescriptionSet \u003d"},{"lineNumber":187,"author":{"gitId":"pPris"},"content":"                ParserUtil.parseOrderDescriptions(Arrays.asList(VALID_ORDER_DESC_1, VALID_ORDER_DESC_2));"},{"lineNumber":188,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e expectedOrderDescriptionSet \u003d"},{"lineNumber":189,"author":{"gitId":"pPris"},"content":"                new HashSet\u003c\u003e(Arrays.asList(new OrderDescription(VALID_ORDER_DESC_1),"},{"lineNumber":190,"author":{"gitId":"pPris"},"content":"                        new OrderDescription(VALID_ORDER_DESC_2)));"},{"lineNumber":191,"author":{"gitId":"pPris"},"content":""},{"lineNumber":192,"author":{"gitId":"pPris"},"content":"        assertEquals(expectedOrderDescriptionSet, actualOrderDescriptionSet);"},{"lineNumber":193,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"pPris"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":44,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/RemindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.logic.commands.RemindCommand;"},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.model.person.ReminderDatePredicate;"},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":"public class RemindCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":"    private RemindCommandParser parser \u003d new RemindCommandParser();"},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":"        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemindCommand.MESSAGE_USAGE));"},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"    public void parse_validArgs_returnsRemindCommand() {"},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":"        assertParseSuccess(parser, \"1\", new RemindCommand(new ReminderDatePredicate(1)));"},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":"        assertParseSuccess(parser, \"0\", new RemindCommand(new ReminderDatePredicate(0)));"},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":27}},{"path":"src/test/java/seedu/address/model/person/DeliveryDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"xiinweii98"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":3,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"xiinweii98"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":11,"author":{"gitId":"xiinweii98"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":13,"author":{"gitId":"xiinweii98"},"content":"public class DeliveryDateTest {"},{"lineNumber":14,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":15,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":17,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DeliveryDate(null));"},{"lineNumber":18,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":20,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"xiinweii98"},"content":"    public void constructor_invalidDeliveryDate_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitId":"xiinweii98"},"content":"        String invalidDeliveryDate \u003d \"2021/01\";"},{"lineNumber":23,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DeliveryDate(invalidDeliveryDate));"},{"lineNumber":24,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"xiinweii98"},"content":"    public void equals() {"},{"lineNumber":28,"author":{"gitId":"xiinweii98"},"content":"        LocalDate validDeliveryDate \u003d LocalDate.now().plusDays(5L);"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format1 \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":30,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format2 \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":31,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format3 \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");"},{"lineNumber":32,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter format4 \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":33,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format1.format(validDeliveryDate)),"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format2.format(validDeliveryDate)));"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format2.format(validDeliveryDate)),"},{"lineNumber":36,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format3.format(validDeliveryDate)));"},{"lineNumber":37,"author":{"gitId":"xiinweii98"},"content":"        assertEquals(new DeliveryDate(format3.format(validDeliveryDate)),"},{"lineNumber":38,"author":{"gitId":"xiinweii98"},"content":"                new DeliveryDate(format4.format(validDeliveryDate)));"},{"lineNumber":39,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"xiinweii98"},"content":"    public void isValidDeliveryDate() {"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"        // null delivery date"},{"lineNumber":44,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(NullPointerException.class, () -\u003e DeliveryDate.isValidDeliveryDate(null));"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":46,"author":{"gitId":"xiinweii98"},"content":"        // invalid addresses"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/13/2022\")); // invalid month"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"32/01/2022\")); // invalid day"},{"lineNumber":49,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/01/202020\")); // invalid year"},{"lineNumber":50,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01,01,2022\")); // invalid delimiter"},{"lineNumber":51,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01:01:2022\")); // invalid delimiter"},{"lineNumber":52,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"01/01-2022\")); // inconsistent delimiter"},{"lineNumber":53,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(\"2022/12/31\")); // invalid format"},{"lineNumber":54,"author":{"gitId":"xiinweii98"},"content":"        // less than 3 working days"},{"lineNumber":55,"author":{"gitId":"xiinweii98"},"content":"        assertFalse(DeliveryDate.isValidDeliveryDate(LocalDate.now().plusDays(2L).toString()));"},{"lineNumber":56,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":57,"author":{"gitId":"xiinweii98"},"content":"        // valid addresses"},{"lineNumber":58,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02/02/2022\"));"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02-02-2022\"));"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02.02.2022\"));"},{"lineNumber":61,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(\"02 Feb 2022\"));"},{"lineNumber":62,"author":{"gitId":"xiinweii98"},"content":"        DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy]\");"},{"lineNumber":63,"author":{"gitId":"xiinweii98"},"content":"        // 3 working days from current date"},{"lineNumber":64,"author":{"gitId":"xiinweii98"},"content":"        assertTrue(DeliveryDate.isValidDeliveryDate(dateFormat.format(LocalDate.now().plusDays(3L))));"},{"lineNumber":65,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"xiinweii98"},"content":"}"}],"authorContributionMap":{"xiinweii98":66}},{"path":"src/test/java/seedu/address/model/person/OrderDescriptionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class OrderDescriptionTest {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        assertThrows(NullPointerException.class, () -\u003e new OrderDescription(null));"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    public void constructor_invalidOrderDescription_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OrderDescription(\" \"));"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new OrderDescription(\"\"));"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    public void isValidOrderDescription() {"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        // null order descriptions"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        assertThrows(NullPointerException.class, () -\u003e OrderDescription.isValidOrderDescription(null));"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":""},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        // invalid order descriptions"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        assertFalse(OrderDescription.isValidOrderDescription(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        assertFalse(OrderDescription.isValidOrderDescription(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        // valid order descriptions"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        assertTrue(OrderDescription.isValidOrderDescription(\"chocolate cake\")); // alphabets only"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        assertTrue(OrderDescription.isValidOrderDescription(\"12345\")); // numbers only"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        assertTrue(OrderDescription.isValidOrderDescription(\"2 x chocolate cake\")); // alphanumeric characters"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        assertTrue(OrderDescription.isValidOrderDescription(\"Chocolate Cake!\")); // with capital letters and !"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":37}},{"path":"src/test/java/seedu/address/model/person/ReminderDatePredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RuiXiong2211"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":3,"author":{"gitId":"RuiXiong2211"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"RuiXiong2211"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":6,"author":{"gitId":"RuiXiong2211"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"RuiXiong2211"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":9,"author":{"gitId":"RuiXiong2211"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":11,"author":{"gitId":"RuiXiong2211"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":12,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":13,"author":{"gitId":"RuiXiong2211"},"content":"public class ReminderDatePredicateTest {"},{"lineNumber":14,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":15,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"RuiXiong2211"},"content":"    public void equals() {"},{"lineNumber":17,"author":{"gitId":"RuiXiong2211"},"content":"        long zeroDays \u003d 0L;"},{"lineNumber":18,"author":{"gitId":"RuiXiong2211"},"content":"        long fiveDays \u003d 5L;"},{"lineNumber":19,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":20,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate firstPredicate \u003d new ReminderDatePredicate(zeroDays);"},{"lineNumber":21,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate secondPredicate \u003d new ReminderDatePredicate(fiveDays);"},{"lineNumber":22,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":23,"author":{"gitId":"RuiXiong2211"},"content":"        //same object -\u003e returns true"},{"lineNumber":24,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":25,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":26,"author":{"gitId":"RuiXiong2211"},"content":"        // same values -\u003e return true"},{"lineNumber":27,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate firstPredicateCopy \u003d new ReminderDatePredicate(zeroDays);"},{"lineNumber":28,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":29,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":30,"author":{"gitId":"RuiXiong2211"},"content":"        //different types -\u003e return false"},{"lineNumber":31,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":32,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":33,"author":{"gitId":"RuiXiong2211"},"content":"        //null-\u003e returns false"},{"lineNumber":34,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":35,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":36,"author":{"gitId":"RuiXiong2211"},"content":"        //different condition"},{"lineNumber":37,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":38,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":40,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"RuiXiong2211"},"content":"    public void test_nameDateWithin_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":43,"author":{"gitId":"RuiXiong2211"},"content":"        DateTimeFormatter format1 \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":44,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate testDate1 \u003d LocalDate.now().plusDays(4L);"},{"lineNumber":45,"author":{"gitId":"RuiXiong2211"},"content":"        // within 5 day from now, return true"},{"lineNumber":46,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate fiveDays \u003d new ReminderDatePredicate(5L);"},{"lineNumber":47,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(fiveDays.test(new PersonBuilder()"},{"lineNumber":48,"author":{"gitId":"RuiXiong2211"},"content":"                .withDeliveryDate(testDate1.format(format1)).build()));"},{"lineNumber":49,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":50,"author":{"gitId":"RuiXiong2211"},"content":"        // within 4 days from now, return true"},{"lineNumber":51,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate zeroDays \u003d new ReminderDatePredicate(4L);"},{"lineNumber":52,"author":{"gitId":"RuiXiong2211"},"content":"        assertTrue(zeroDays.test(new PersonBuilder()"},{"lineNumber":53,"author":{"gitId":"RuiXiong2211"},"content":"                .withDeliveryDate(testDate1.format(format1)).build()));"},{"lineNumber":54,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":56,"author":{"gitId":"RuiXiong2211"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"RuiXiong2211"},"content":"    public void test_nameDateNotWithin_returnsFalse() {"},{"lineNumber":58,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":59,"author":{"gitId":"RuiXiong2211"},"content":"        DateTimeFormatter format1 \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");"},{"lineNumber":60,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate testDate1 \u003d LocalDate.now().plusDays(6L);"},{"lineNumber":61,"author":{"gitId":"RuiXiong2211"},"content":"        LocalDate testDate2 \u003d LocalDate.now().plusDays(5L);"},{"lineNumber":62,"author":{"gitId":"RuiXiong2211"},"content":"        // within 5 days from now, return false"},{"lineNumber":63,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate fiveDays \u003d new ReminderDatePredicate(5L);"},{"lineNumber":64,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(fiveDays.test(new PersonBuilder()"},{"lineNumber":65,"author":{"gitId":"RuiXiong2211"},"content":"                .withDeliveryDate(testDate1.format(format1)).build()));"},{"lineNumber":66,"author":{"gitId":"RuiXiong2211"},"content":""},{"lineNumber":67,"author":{"gitId":"RuiXiong2211"},"content":"        // within 0 days from now, return true"},{"lineNumber":68,"author":{"gitId":"RuiXiong2211"},"content":"        ReminderDatePredicate zeroDays \u003d new ReminderDatePredicate(0L);"},{"lineNumber":69,"author":{"gitId":"RuiXiong2211"},"content":"        assertFalse(zeroDays.test(new PersonBuilder()"},{"lineNumber":70,"author":{"gitId":"RuiXiong2211"},"content":"                .withDeliveryDate(testDate2.format(format1)).build()));"},{"lineNumber":71,"author":{"gitId":"RuiXiong2211"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"RuiXiong2211"},"content":"}"}],"authorContributionMap":{"RuiXiong2211":72}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    private static final String INVALID_ORDER_DESCRIPTION \u003d \" \";"},{"lineNumber":29,"author":{"gitId":"xiinweii98"},"content":"    private static final String INVALID_DELIVERY_DATE \u003d \"31/31/2100\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    private static final List\u003cJsonAdaptedOrderDescription\u003e VALID_ORDER_DESC \u003d BENSON.getOrderDescriptions().stream()"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"            .map(JsonAdaptedOrderDescription::new)"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"            .collect(Collectors.toList());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"    private static final String VALID_DELIVERY_DATE \u003d BENSON.getDeliveryDate().toString();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ORDER_DESC,"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"                        VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":76,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":92,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS,"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ORDER_DESC,"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"                        invalidTags, VALID_DELIVERY_DATE);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"    public void toModelType_nullOrderDescription_throwsIllegalValueException() {"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"                null, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OrderDescription.class.getSimpleName());"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":""},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"    public void toModelType_invalidOrderDescription_throwsIllegalValueException() {"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        List\u003cJsonAdaptedOrderDescription\u003e invalidOrderDescs \u003d new ArrayList\u003c\u003e(VALID_ORDER_DESC);"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"        invalidOrderDescs.add(new JsonAdaptedOrderDescription(INVALID_ORDER_DESCRIPTION));"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"                invalidOrderDescs, VALID_TAGS, VALID_DELIVERY_DATE);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"xiinweii98"},"content":"    public void toModelType_invalidDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":145,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_ORDER_DESC, VALID_TAGS,"},{"lineNumber":147,"author":{"gitId":"xiinweii98"},"content":"                        INVALID_DELIVERY_DATE);"},{"lineNumber":148,"author":{"gitId":"xiinweii98"},"content":"        String expectedMessage \u003d DeliveryDate.MESSAGE_CONSTRAINTS;"},{"lineNumber":149,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":150,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":152,"author":{"gitId":"xiinweii98"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"xiinweii98"},"content":"    public void toModelType_nullDeliveryDate_throwsIllegalValueException() {"},{"lineNumber":154,"author":{"gitId":"xiinweii98"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":155,"author":{"gitId":"pPris"},"content":"                VALID_ORDER_DESC, VALID_TAGS, null);"},{"lineNumber":156,"author":{"gitId":"xiinweii98"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DeliveryDate.class.getSimpleName());"},{"lineNumber":157,"author":{"gitId":"xiinweii98"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":158,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":37,"xiinweii98":22,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        descriptor.setOrderDescriptions(person.getOrderDescriptions());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":43,"author":{"gitId":"xiinweii98"},"content":"        descriptor.setDeliveryDate(person.getDeliveryDate());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"     * Sets the {@code OrderDescription} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"    public EditPersonDescriptorBuilder withOrderDescriptions(String... orderDescriptions) {"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"        Set\u003cOrderDescription\u003e orderDescriptionSet \u003d Stream.of(orderDescriptions)"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"                .map(OrderDescription::new).collect(Collectors.toSet());"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"        descriptor.setOrderDescriptions(orderDescriptionSet);"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"xiinweii98"},"content":"     * Sets the {@code DeliveryDate} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":100,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"xiinweii98"},"content":"    public EditPersonDescriptorBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":102,"author":{"gitId":"xiinweii98"},"content":"        descriptor.setDeliveryDate(new DeliveryDate(deliveryDate));"},{"lineNumber":103,"author":{"gitId":"xiinweii98"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"xiinweii98"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":12,"xiinweii98":10,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import seedu.address.model.person.DeliveryDate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    public static final String DEFAULT_ORDER_DESCRIPTION \u003d \"1 x Chocolate Cake\";"},{"lineNumber":26,"author":{"gitId":"xiinweii98"},"content":"    public static final String DEFAULT_DELIVERY_DATE \u003d \"01/01/2022\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    private Set\u003cOrderDescription\u003e orderDescriptions;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":34,"author":{"gitId":"xiinweii98"},"content":"    private DeliveryDate deliveryDate;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        orderDescriptions \u003d new HashSet\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        orderDescriptions.add(new OrderDescription(DEFAULT_ORDER_DESCRIPTION));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d new DeliveryDate(DEFAULT_DELIVERY_DATE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        orderDescriptions \u003d new HashSet\u003c\u003e(personToCopy.getOrderDescriptions());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":60,"author":{"gitId":"xiinweii98"},"content":"        deliveryDate \u003d personToCopy.getDeliveryDate();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"     * Sets the {@code OrderDescription} of the {@code OrderDescription} that we are building."},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"    public PersonBuilder withOrderDescriptions(String ... orderDescriptions) {"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"        this.orderDescriptions \u003d SampleDataUtil.getOrderDescriptionSet(orderDescriptions);"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"        return this;"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":""},{"lineNumber":110,"author":{"gitId":"xiinweii98"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"xiinweii98"},"content":"     * Sets the {@code DeliveryDate} of the {@code Person} that we are building."},{"lineNumber":112,"author":{"gitId":"xiinweii98"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"xiinweii98"},"content":"    public PersonBuilder withDeliveryDate(String deliveryDate) {"},{"lineNumber":114,"author":{"gitId":"xiinweii98"},"content":"        this.deliveryDate \u003d new DeliveryDate(deliveryDate);"},{"lineNumber":115,"author":{"gitId":"xiinweii98"},"content":"        return this;"},{"lineNumber":116,"author":{"gitId":"xiinweii98"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"        return new Person(name, phone, email, address, orderDescriptions, tags, deliveryDate);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":15,"xiinweii98":12,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ORDER_DESCRIPTION;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"import seedu.address.model.person.OrderDescription;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        person.getOrderDescriptions().stream().forEach("},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"            s -\u003e sb.append(PREFIX_ORDER_DESCRIPTION + s.value + \" \"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":43,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"xiinweii98"},"content":"        sb.append(PREFIX_DATE + person.getDeliveryDate().toString() + \" \");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        if (descriptor.getOrderDescription().isPresent()) {"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"            Set\u003cOrderDescription\u003e orderDescriptionSet \u003d descriptor.getOrderDescription().get();"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"            if (orderDescriptionSet.isEmpty()) {"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"                sb.append(PREFIX_ORDER_DESCRIPTION);"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"            } else {"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"                orderDescriptionSet.forEach("},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"                    orderDescription -\u003e sb.append(PREFIX_ORDER_DESCRIPTION)"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"                            .append(orderDescription.value).append(\" \"));"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":73,"author":{"gitId":"xiinweii98"},"content":"                sb.append(PREFIX_TAG).append(\" \");"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"xiinweii98"},"content":"        descriptor.getDeliveryDate()"},{"lineNumber":79,"author":{"gitId":"xiinweii98"},"content":"                .ifPresent(deliveryDate -\u003e sb.append(PREFIX_DATE).append(deliveryDate.toString()).append(\" \"));"},{"lineNumber":80,"author":{"gitId":"xiinweii98"},"content":"        System.out.println(sb.toString());"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":16,"xiinweii98":6,"-":61}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BERRY_ORDER;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_CHOCOLATE_ORDER;"},{"lineNumber":7,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_AMY;"},{"lineNumber":8,"author":{"gitId":"xiinweii98"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DELIVERY_DATE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    // needs to correspond to typicalPersonsAddressBook"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"            .withPhone(\"94351253\").withOrderDescriptions(\"2 x Strawberry Cakes\").withTags(\"friends\")"},{"lineNumber":35,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"2 x Chocolate Cakes\")"},{"lineNumber":40,"author":{"gitId":"xiinweii98"},"content":"            .withTags(\"owesMoney\", \"friends\")"},{"lineNumber":41,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01-01-2022\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withOrderDescriptions(\"1 Vanilla Cake\")"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"            .withDeliveryDate(\"01.01.2022\").build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"1 Chocolate Chip Muffin\").withTags(\"friends\")"},{"lineNumber":48,"author":{"gitId":"xiinweii98"},"content":"            .withDeliveryDate(\"01 Jan 2022\").build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"1 Raisins Cake Thing\", \"1 x Blackforest cake\", \"1 x Vanilla Cake\")"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"            .withDeliveryDate(\"31/12/2022\").build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"2 x Vanilla cakes\").withDeliveryDate(\"28-02-2022\").build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"2 lava cakes\").withDeliveryDate(\"06.03.2022\").build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withOrderDescriptions(\"2 jelly hearts\")"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"1 mango cake\").withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withOrderDescriptions(\"a mango cake\")"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"            .withOrderDescriptions(\"vanilla with lemon zest\").withDeliveryDate(\"01/01/2022\").build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withOrderDescriptions(VALID_CHOCOLATE_ORDER)"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"            .withTags(VALID_TAG_FRIEND).withDeliveryDate(VALID_DELIVERY_DATE_AMY).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withOrderDescriptions(VALID_BERRY_ORDER)"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withDeliveryDate(VALID_DELIVERY_DATE_BOB)"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":25,"xiinweii98":6,"-":65}}]
