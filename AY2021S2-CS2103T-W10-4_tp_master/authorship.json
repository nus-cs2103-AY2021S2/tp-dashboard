[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"* Vax@NUS is an app for **staff at the NUS University Health Centre (UHC)**"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"  to keep track of the COVID-19 vaccination status of students. \u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"* It is targeted at staff who are **proficient and comfortable with the"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"  Command Line Interface (CLI)**, as the app will have very limited UI interaction features."},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"### Example usages:"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"* Create, read, update and delete (CRUD) of student profiles which details critical information such as:"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    * Contact information"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"        * If not vaccinated, their preference for vaccination (yes/no)"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history, existing medical conditions and allergies"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"* Creating and managing vaccination appointments for students"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"### Problems addressed:"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"* Eliminates the need for the university to use the Ministry of Health\u0027s database."},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"* This in turn simplifies the process of contacting, monitoring and administering vaccines for students."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"* Consolidates and streamlines only data relevant to vaccinations into one app."},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"* **Goal:** To create a COVID-free NUS campus where student and academic life can flourish without restrictions."},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"### Planned Features:"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.2"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"1. On top of the fields already available in AB3, the user will be able to input the following:"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    * Student\u0027s matriculation number"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status/preference"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    * Faculty"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    * Residence on campus (if applicable)"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"1. A filter function that will allow the user to display a specific group of students"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"1. The user will be able to view all the detailed information of a student at a glance. Currently, only"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"   the summarised information on the UI can be viewed."},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"1. Create vaccination appointments and display them on the UI."},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.3"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"1. Detect duplicate entries."},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"1. Sort vaccination appointments and display only upcoming ones."},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"1. Provide statistical insights regarding the vaccination of the student population, by faculty, residence or other"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"   relevant parameters."},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"1. Undo feature to quickly correct accidental mistakes."},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"\u003eFor the detailed documentation of this project, see the"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"**[Vax@NUS Website](https://ay2021s2-cs2103t-w10-4.github.io/tp/)**."},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"This project is based on the AddressBook-Level3 project created by"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"fairyinabottle4":54,"picasdan9":1,"-":3}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"    implementation group: \u0027org.kordamp.ikonli\u0027, name: \u0027ikonli-javafx\u0027, version: \u002712.2.0\u0027"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    implementation group: \u0027org.kordamp.ikonli\u0027, name: \u0027ikonli-fontawesome5-pack\u0027, version: \u002712.2.0\u0027"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"picasdan9":3,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"We are a team of Year 2 Computer Science students based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"Our team members are:"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"* [Dan Tran](#dan-tran)"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"* [Lim Si Ting](#lim-si-ting)"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"* [Keith Low Jun](#keith-low-jun)"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"* [Yoong Yi En](#yoong-yi-en)"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"You can reach us at the email `e0406245@u.nus.edu`"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"### Dan Tran"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"\u003cimg src\u003d\"images/picasdan9.png\" width\u003d\"200px\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"[[github](https://github.com/picasdan9)]"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"[[portfolio](team/picasdan9.md)]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"* Role: Developer"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"* Responsibilities: In charge of appointments and UI"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"### Lim Si Ting"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"\u003cimg src\u003d\"images/sitingst.png\" width\u003d\"200px\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"[[github](https://github.com/SiTingST)]"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"[[portfolio](team/sitingst.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"* Responsibilities: In charge of storage and user guide  "},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"### Keith Low Jun"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"\u003cimg src\u003d\"images/fairyinabottle4.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"[[github](http://github.com/fairyinabottle4)] [[portfolio](team/fairyinabottle4.md)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"* Responsibilities: In charge of students and model "},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"### Yoong Yi En"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"\u003cimg src\u003d\"images/yienyoong.png\" width\u003d\"200px\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"[[github](http://github.com/yienyoong)]"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"[[portfolio](team/yienyoong.md)]"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":"* Responsibilities: In charge of logic and developer guide "},{"lineNumber":57,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"fairyinabottle4":2,"yienyoong":12,"SiTingST":7,"picasdan9":6,"-":30}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `AppointmentListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"yienyoong"},"content":"* UHC staff who has a need to manage a significant number of appointments"},{"lineNumber":240,"author":{"gitId":"yienyoong"},"content":"* UHC staff who has to keep track of NUS students\u0027 COVID-19 vaccinations regarding:"},{"lineNumber":241,"author":{"gitId":"yienyoong"},"content":"  * Who has been vaccinated"},{"lineNumber":242,"author":{"gitId":"yienyoong"},"content":"  * Who does not want to be vaccinated"},{"lineNumber":243,"author":{"gitId":"yienyoong"},"content":"  * Who wants to be vaccinated"},{"lineNumber":244,"author":{"gitId":"yienyoong"},"content":"    * Priority for the vaccine"},{"lineNumber":245,"author":{"gitId":"yienyoong"},"content":"    * Medical histories, existing medical conditions and allergies"},{"lineNumber":246,"author":{"gitId":"yienyoong"},"content":"* Prefers desktop apps over other types"},{"lineNumber":247,"author":{"gitId":"yienyoong"},"content":"* Can type fast"},{"lineNumber":248,"author":{"gitId":"yienyoong"},"content":"* Prefers typing to mouse interactions"},{"lineNumber":249,"author":{"gitId":"yienyoong"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"SiTingST"},"content":"**Value proposition**: a one stop management app to efficiently track and schedule COVID-19 vaccinations for NUS students"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":261,"author":{"gitId":"fairyinabottle4"},"content":"| `* * *`  | user                                       | add a new student               | keep track of that student\u0027s vaccination status                                                                       |"},{"lineNumber":262,"author":{"gitId":"yienyoong"},"content":"| `* * *`  | user                                       | delete a student                | remove entries that I no longer need or accidentally added                                |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":264,"author":{"gitId":"SiTingST"},"content":"| `* * *`  | user                                       | find a person by matriculation number          | locate details of students without having to go through the entire list |"},{"lineNumber":265,"author":{"gitId":"yienyoong"},"content":"| `* * *`  | user                                       | list all students              | view all student records at one go                                     |"},{"lineNumber":266,"author":{"gitId":"picasdan9"},"content":"| `* * *`  | user                                       | list all upcoming appointments | view all appointments at one go"},{"lineNumber":267,"author":{"gitId":"yienyoong"},"content":"| `*`      | user with many students in the address book | sort students by name           | locate a student easily                                                 |"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"yienyoong"},"content":"(For all use cases below, the **System** is the `Vax@NUS` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"SiTingST"},"content":"**Use case: Add a student entry**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"SiTingST"},"content":"1.  User requests to add a specific student entry."},{"lineNumber":280,"author":{"gitId":"SiTingST"},"content":"2.  System prompts for student\u0027s details."},{"lineNumber":281,"author":{"gitId":"SiTingST"},"content":"3.  User inputs the respective details."},{"lineNumber":282,"author":{"gitId":"SiTingST"},"content":"4.  System adds the student entry."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"SiTingST"},"content":"* 1a. The specified student entry exists in the system."},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"SiTingST"},"content":"    * 1a1. System shows an error message."},{"lineNumber":291,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":292,"author":{"gitId":"SiTingST"},"content":"        Use case ends."},{"lineNumber":293,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":294,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":295,"author":{"gitId":"SiTingST"},"content":"* 3a. User does not give sufficient inputs to add a student entry."},{"lineNumber":296,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":297,"author":{"gitId":"SiTingST"},"content":"    * 3a1. System shows an error message."},{"lineNumber":298,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":299,"author":{"gitId":"SiTingST"},"content":"        Use case ends.  "},{"lineNumber":300,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":301,"author":{"gitId":"SiTingST"},"content":"**Use case: Add a vaccination appointment**"},{"lineNumber":302,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":303,"author":{"gitId":"SiTingST"},"content":"**MSS**"},{"lineNumber":304,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":305,"author":{"gitId":"SiTingST"},"content":"1.  User requests to add a vaccination appointment."},{"lineNumber":306,"author":{"gitId":"SiTingST"},"content":"2.  System prompts for details about the vaccination appointment."},{"lineNumber":307,"author":{"gitId":"SiTingST"},"content":"3.  User inputs the respective details."},{"lineNumber":308,"author":{"gitId":"SiTingST"},"content":"4.  System adds the vaccination appointment."},{"lineNumber":309,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":310,"author":{"gitId":"SiTingST"},"content":"    Use case ends."},{"lineNumber":311,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":312,"author":{"gitId":"SiTingST"},"content":"**Extensions**"},{"lineNumber":313,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":314,"author":{"gitId":"SiTingST"},"content":"* 3a. 3a. User does not give sufficient inputs to add a vaccination appointment."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"SiTingST"},"content":"    * 3a1. System shows an error message."},{"lineNumber":317,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":318,"author":{"gitId":"SiTingST"},"content":"        Use case ends."},{"lineNumber":319,"author":{"gitId":"SiTingST"},"content":"        "},{"lineNumber":320,"author":{"gitId":"SiTingST"},"content":"* 4a. The given appointment date and time clashes with an existing vaccination appointment for another student."},{"lineNumber":321,"author":{"gitId":"SiTingST"},"content":"    "},{"lineNumber":322,"author":{"gitId":"SiTingST"},"content":"   * 4a1. System shows an error message."},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"SiTingST"},"content":"      Use case ends.  "},{"lineNumber":325,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":326,"author":{"gitId":"yienyoong"},"content":"**Use case: Delete a student**"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"yienyoong"},"content":"1.  User requests to delete a specific student."},{"lineNumber":331,"author":{"gitId":"yienyoong"},"content":"2.  System prompts for confirmation of deletion."},{"lineNumber":332,"author":{"gitId":"yienyoong"},"content":"3.  User confirms."},{"lineNumber":333,"author":{"gitId":"yienyoong"},"content":"4.  System deletes the student. "},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"yienyoong"},"content":"* 1a. Specified student does not exist."},{"lineNumber":340,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":341,"author":{"gitId":"yienyoong"},"content":"    * 1a1. System shows an error message."},{"lineNumber":342,"author":{"gitId":"-"},"content":"  "},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Use case ends."},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"yienyoong"},"content":"* 3a. User does not confirm."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"yienyoong"},"content":"  Use case ends."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":355,"author":{"gitId":"picasdan9"},"content":"1.  Should be able to hold up to 35000 students (NUS undergraduate cohort size) and 35000 appointments without a noticeable sluggishness in performance for typical usage."},{"lineNumber":356,"author":{"gitId":"picasdan9"},"content":"1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":357,"author":{"gitId":"picasdan9"},"content":"1.  The product is not required to export statistics reports to PDF files."},{"lineNumber":358,"author":{"gitId":"picasdan9"},"content":"1.  There should be a mechanism to migrate data so that the application can be used with existing data on different machines."},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":365,"author":{"gitId":"yienyoong"},"content":"* **Vaccine**: Singapore has two approved COVID-19 vaccines, one developed by Pfizer-BioNTech, "},{"lineNumber":366,"author":{"gitId":"fairyinabottle4"},"content":"  the other by Moderna. Both require two doses, 21 days apart for Pfizer-BioNTech, 28 days apart for Moderna."},{"lineNumber":367,"author":{"gitId":"fairyinabottle4"},"content":"  Two appointments must therefore be created per student. "},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":376,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":393,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":404,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":407,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":410,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"fairyinabottle4":3,"yienyoong":26,"SiTingST":42,"picasdan9":6,"-":343}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"Vax@NUS is a **one stop management app to efficiently track and and schedule COVID-19 vaccinations for NUS students.** It is a desktop app **optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Vax@NUS can get your appointment management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"1. Download the latest `VaxAtNUS.jar` from [here](https://github.com/AY2021S2-CS2103T-W10-4/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your Vax@NUS application."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"   * **`list students`** : Lists all students."},{"lineNumber":28,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"**Notes about the command format:**\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"  e.g `n/NAME [r/SCHOOL RESIDENCE]` can be used as `n/John Doe r/RC4` or as `n/John Doe`."},{"lineNumber":45,"author":{"gitId":"-"},"content":"  "},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":54,"author":{"gitId":"-"},"content":"  "},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"**NOTE: The following parameter formats must be followed:**"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"\u003e The `MATRICULATION_NUMBER` of a student is a unique 9-character alphanumeric sequence that begins with A, followed by "},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e 7 numbers and ends with an alphabet. "},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"\u003e The `FACULTY` of a student must be one of the following:"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * FASS (for Faculty of Arts and Social Sciences)"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * BIZ (for NUS Business School) "},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * COM (for School of Computing)"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SCALE (for School of Continuing and Lifelong Education)"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * DEN (for Faculty of Dentistry)"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SDE (for School of Design and Environment)"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * DNUS (for Duke-NUS Medical School)"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * ENG (for Faculty of Engineering)"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * ISEP (for Integrative Sciences and Engineering)"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * LAW (for Faculty of Law)"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * MED (for Yong Loo Lin School of Medicine)"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * MUSIC (for Yong Siew Toh Conservatory of Music)"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SPH (for Saw Swee Hock School of Public Health)"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SPP (for Lee Kuan Yew School of Public Policy)"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SCI (for Faculty of Science)"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * USP (for University Scholars Programme)"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * YNC (for Yale-NUS College)"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"  "},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"\u003e The `VACCINATION_STATUS` of a student must only be `vaccinated` or `not vaccinated`"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"\u003e The `[SCHOOL_RESIDENCE]` of a student must be one of the following:"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * PGPH (for Prince George\u0027s Park House)"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * PGPR (for Prince George\u0027s Park Residences)"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * KE7H (for King Edward VII Hall)"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * SH (for Sheares Hall)"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * KRH (for Kent Ridge Hall)"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * TH (for Temasek Hall)"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * EH (for Eusoff Hall)"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * RH (for Raffles Hall)"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * RVRC (for Ridge View Residential College)"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * YNC (for Yale-NUS College)"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * TC (for Tembusu College)"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * CAPT (for College of Alice and Peter Tan)"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * RC4 (for Residential College 4)"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * USP (for University Scholars Programme)"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"  \u003e * UTR (for Utown Residences)"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"yienyoong"},"content":"### Adding a student entry: `add`"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"yienyoong"},"content":"Adds a student to the records."},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"Format: `add n/NAME i/MATRICULATION_NUMBER f/FACULTY p/PHONE_NUMBER e/EMAIL a/ADDRESS s/VACCINATION_STATUS m/MEDICAL_DETAILS r/SCHOOL_RESIDENCE[optional]`"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"* `add n/John Doe i/A1234567X f/COM p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/vaccinated m/peanut allergy r/RVRC`"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"* `add n/Betsy Crowe f/ENG i/A7654321J p/91119222 e/betsycrowe@example.com a/212 Orchard Road, #18-08 s/not vaccinated m/nose lift surgery in 2012`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"### Editing a student entry: `edit`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"Edits a student in the records."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"Format: `edit INDEX [n/NAME] [i/MATRICULATION_NUMBER] [f/FACULTY] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/VACCINATION_STATUS] [m/MEDICAL_DETAILS] [r/SCHOOL_RESIDENCE]`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"yienyoong"},"content":"* Edits the student at the specified INDEX. The index refers to the index number shown in the displayed student list. The index must be a positive integer 1, 2, 3, …​"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"* Existing values will be updated to the input values."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":"Examples:"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"yienyoong"},"content":"* `edit 1 p/91234567 f/MED` Edits the phone number and faculty of the first student to be 91234567 and MED respectively."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"yienyoong"},"content":"* `edit 2 r/KRH`  Edits the school residence of the second student to be KRH."},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"### Listing all students in the records : `list`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"Shows a list of all students in the records."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"Format: `list students`"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"SiTingST"},"content":"### Finding a student by matriculation number: `find`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"yienyoong"},"content":"Shows only the details of the student that matches the specified matriculation number."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"SiTingST"},"content":"Format: `find MATRICULATION_NUMBER`"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":150,"author":{"gitId":"SiTingST"},"content":"* `Find A1234567X` returns `John Doe` from the record."},{"lineNumber":151,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":152,"author":{"gitId":"SiTingST"},"content":"### Filtering the student entries by vaccination status, faculty or school residence : `filter`"},{"lineNumber":153,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":154,"author":{"gitId":"yienyoong"},"content":"Shows only the details of the student entries that matches the specified filter condition."},{"lineNumber":155,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":156,"author":{"gitId":"SiTingST"},"content":"Format: \u003cbr\u003e"},{"lineNumber":157,"author":{"gitId":"SiTingST"},"content":"`filter VACCINATION_STATUS`"},{"lineNumber":158,"author":{"gitId":"SiTingST"},"content":"`filter FACULTY`"},{"lineNumber":159,"author":{"gitId":"SiTingST"},"content":"`filter SCHOOL_RESIDENCE`"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":162,"author":{"gitId":"SiTingST"},"content":"* `filter VACCINATED` "},{"lineNumber":163,"author":{"gitId":"SiTingST"},"content":"* `filter COM` "},{"lineNumber":164,"author":{"gitId":"SiTingST"},"content":"* `filter RVRC` "},{"lineNumber":165,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"yienyoong"},"content":"### Deleting a student by their matriculation number: `deleteStud`"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"yienyoong"},"content":"Deletes the specified student from Vax@NUS\u0027 records."},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"SiTingST"},"content":"Format: `deleteStud MATRICULATION NUMBER`"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"yienyoong"},"content":"* If the matriculation number does not exist in the records, an error message will be displayed to inform users that "},{"lineNumber":174,"author":{"gitId":"yienyoong"},"content":"  the matriculation number is not found."},{"lineNumber":175,"author":{"gitId":"fairyinabottle4"},"content":"  "},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":178,"author":{"gitId":"SiTingST"},"content":"* `deleteStud A7654321J` deletes Betsy Crowe from the records."},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"picasdan9"},"content":"### Adding an appointment: `addAppt`"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"yienyoong"},"content":"Adds an appointment to Vax@NUS\u0027 records. "},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"picasdan9"},"content":"Format: `addAppt i/MATRICULATION_NUMBER d/DATE_YYYY-MM-DD ts/START_TIME_HH:MM te/END_TIME_HH:MM`"},{"lineNumber":186,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":187,"author":{"gitId":"yienyoong"},"content":"* The student that the appointment is for must exist in the records before the appointment can be created."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":191,"author":{"gitId":"picasdan9"},"content":"* `addAppt i/A1234567X d/2021-12-13 ts/13:00 te/14:00`"},{"lineNumber":192,"author":{"gitId":"picasdan9"},"content":"* `addAppt i/A7654321J d/2021-12-13 ts/14:00 te/14:30`"},{"lineNumber":193,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"yienyoong"},"content":"### Viewing statistics: `stats`"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"yienyoong"},"content":"Displays the statistics of the requested Faculty/School Residence, the whole of NUS or statistics of all Faculties"},{"lineNumber":198,"author":{"gitId":"yienyoong"},"content":"and School Residences. "},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"yienyoong"},"content":"Format: \u003cbr\u003e"},{"lineNumber":201,"author":{"gitId":"SiTingST"},"content":"`stats FACULTY`"},{"lineNumber":202,"author":{"gitId":"SiTingST"},"content":"`stats SCHOOL_RESIDENCE`"},{"lineNumber":203,"author":{"gitId":"yienyoong"},"content":"`stats NUS`"},{"lineNumber":204,"author":{"gitId":"yienyoong"},"content":"`stats all`"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"SiTingST"},"content":"* If there is no available data for the requested Faculty or School Residence, a message will be displayed to inform"},{"lineNumber":207,"author":{"gitId":"yienyoong"},"content":"  users that the requested Faculty or School Residence has no available data."},{"lineNumber":208,"author":{"gitId":"yienyoong"},"content":"  "},{"lineNumber":209,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":210,"author":{"gitId":"yienyoong"},"content":"Examples:"},{"lineNumber":211,"author":{"gitId":"SiTingST"},"content":"* `stats COM` displays the percentage of vaccinated students in School of Computing."},{"lineNumber":212,"author":{"gitId":"SiTingST"},"content":"* `stats RC4` displays the percentage of vaccinated students in RC4."},{"lineNumber":213,"author":{"gitId":"yienyoong"},"content":"* `stats DOES_NOT_LIVE_ON_CAMPUS` displays the percentage of vaccinated students not living on campus."},{"lineNumber":214,"author":{"gitId":"yienyoong"},"content":"* `stats NUS` displays the percentage of vaccinated students in NUS."},{"lineNumber":215,"author":{"gitId":"yienyoong"},"content":"* `stats all` displays the list of percentages of vaccinated students in every Faculty and School Residence."},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"fairyinabottle4"},"content":"Vax@NUS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"fairyinabottle4"},"content":"### Adding vaccination appointments for students `[coming in v1.3]`"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"SiTingST"},"content":"**Q**: What do I do if I accidentally deleted a student? "},{"lineNumber":236,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":237,"author":{"gitId":"SiTingST"},"content":"**A**: We regret to inform you that deletion is permanent. You will have to manually re-add the student."},{"lineNumber":238,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":239,"author":{"gitId":"SiTingST"},"content":"**Q**: What can be included in medical details?"},{"lineNumber":240,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":241,"author":{"gitId":"SiTingST"},"content":"**A**: Allergies and past medical history. "},{"lineNumber":242,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":243,"author":{"gitId":"SiTingST"},"content":"**Q**: Will I be able to amend a student’s details?"},{"lineNumber":244,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":245,"author":{"gitId":"SiTingST"},"content":"**A**: Unfortunately, this feature is not available at the moment, but plans are in the works to make this a reality."},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"SiTingST"},"content":"**Q** : Will I be able to add other types of appointments besides vaccination appointments?"},{"lineNumber":248,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":249,"author":{"gitId":"SiTingST"},"content":"**A** : No, the current version only allows you to add vaccination appointments and not any other type of appointments. "},{"lineNumber":250,"author":{"gitId":"SiTingST"},"content":" "},{"lineNumber":251,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"SiTingST"},"content":"## Command Summary"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":256,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":257,"author":{"gitId":"fairyinabottle4"},"content":"**Add** | `add n/NAME i/MATRICULATION_NUMBER f/FACULTY p/PHONE_NUMBER e/EMAIL a/ADDRESS s/VACCINATION_STATUS r/SCHOOL_RESIDENCE[optional] m/MEDICAL_DETAILS` \u003cbr\u003e e.g., `add n/John Doe i/A1234567X f/COM p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/vaccinated r/RVRC m/peanut allergy`"},{"lineNumber":258,"author":{"gitId":"yienyoong"},"content":"**Edit** | `edit INDEX [n/NAME] [i/MATRICULATION_NUMBER] [f/FACULTY] [p/PHONE] [e/EMAIL] [a/ADDRESS] [s/VACCINATION_STATUS] [m/MEDICAL_DETAILS] [r/SCHOOL_RESIDENCE]` \u003cbr\u003e e.g., `edit 1 p/91234567 f/MED`"},{"lineNumber":259,"author":{"gitId":"yienyoong"},"content":"**List Students** | `list students`"},{"lineNumber":260,"author":{"gitId":"yienyoong"},"content":"**Find** | `find MATRICULATION_NUMBER` e.g., `find A1234567X`"},{"lineNumber":261,"author":{"gitId":"SiTingST"},"content":"**Filter** | `filter VACCINATION_STATUS`  e.g., `filter VACCINATED` \u003cbr\u003e `filter FACULTY ` e.g., `filter COM` \u003cbr\u003e `filter SCHOOL_RESIDENCE` e.g., `filter RVRC` "},{"lineNumber":262,"author":{"gitId":"yienyoong"},"content":"**Delete Student** | `deleteStud MATRICULATION_NUMBER` e.g., `deleteStud A1234567X`"},{"lineNumber":263,"author":{"gitId":"SiTingST"},"content":"**View Statistics** | `stats FACULTY` e.g., `stats COM` \u003cbr\u003e `stats SCHOOL_RESIDENCE` e.g., `stats RC4` \u003cbr\u003e `stats NUS` \u003cbr\u003e `stats all` "}],"authorContributionMap":{"fairyinabottle4":60,"yienyoong":34,"SiTingST":40,"picasdan9":7,"-":122}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Interface Ui \u003c\u003cInterface\u003e\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay"},{"lineNumber":14,"author":{"gitId":"-"},"content":"Class PersonListPanel"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"Class AppointmentListPanel"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Class PersonCard"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"Class AppointmentCard"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e MainWindow"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow --\u003e HelpWindow"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e CommandBox"},{"lineNumber":37,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e ResultDisplay"},{"lineNumber":38,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e PersonListPanel"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"MainWindow *-down-\u003e AppointmentListPanel"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e StatusBarFooter"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"PersonListPanel -down-\u003e PersonCard"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"AppointmentListPanel -down-\u003e AppointmentCard"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart"},{"lineNumber":49,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart"},{"lineNumber":50,"author":{"gitId":"-"},"content":"PersonListPanel --|\u003e UiPart"},{"lineNumber":51,"author":{"gitId":"-"},"content":"PersonCard --|\u003e UiPart"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"AppointmentListPanel --|\u003e UiPart"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"AppointmentCard --|\u003e UiPart"},{"lineNumber":54,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart"},{"lineNumber":55,"author":{"gitId":"-"},"content":"HelpWindow -down-|\u003e UiPart"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"PersonCard ..\u003e Model"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"AppointmentCard ..\u003e Model"},{"lineNumber":59,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic"},{"lineNumber":60,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"PersonListPanel -[hidden]left- HelpWindow"},{"lineNumber":63,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox"},{"lineNumber":64,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay"},{"lineNumber":65,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@enduml"}],"authorContributionMap":{"picasdan9":8,"-":60}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"title: Vax@NUS"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-4/tp/actions)"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W10-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W10-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"* Vax@NUS is an app for **staff at the NUS University Health Centre (UHC)**"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"  to keep track of the COVID-19 vaccination status of students. \u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"* It is targeted at staff who are **proficient and comfortable with the"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"  Command Line Interface (CLI)**, as the app will have very limited UI interaction features."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"### Example usages:"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"* Create, read, update and delete (CRUD) of student profiles which details critical information such as:"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    * Contact information"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"        * If not vaccinated, their preference for vaccination (yes/no)"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history, existing medical conditions and allergies"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"* Creating and managing vaccination appointments for students"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"### Problems addressed:"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"* Eliminates the need for the university to use the Ministry of Health\u0027s database."},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"* This in turn simplifies the process of contacting, monitoring and administering vaccines for students."},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"* Consolidates and streamlines only data relevant to vaccinations into one app."},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"* **Goal:** To create a COVID-free NUS campus where student and academic life can flourish without restrictions."},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"### Planned Features:"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.2"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"1. On top of the fields already available in AB3, the user will be able to input the following:"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    * Student\u0027s matriculation number"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status/preference"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    * Faculty"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    * Residence on campus (if applicable)"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"1. A filter function that will allow the user to display a specific group of students"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"1. The user will be able to view all the detailed information of a student at a glance. Currently, only"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"   the summarised information on the UI can be viewed."},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"1. Create vaccination appointments and display them on the UI."},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.3"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"1. Detect duplicate entries."},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"1. Sort vaccination appointments and display only upcoming ones."},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"1. Provide statistical insights regarding the vaccination of the student population, by faculty, residence or other"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"   relevant parameters."},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"1. Undo feature to quickly correct accidental mistakes."},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"\u003eFor the detailed documentation of this project, see the"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"**[Vax@NUS Website](https://ay2021s2-cs2103t-w10-4.github.io/tp/)**."},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"This project is based on the AddressBook-Level3 project created by"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"fairyinabottle4":50,"picasdan9":3,"-":11}},{"path":"docs/team/fairyinabottle4.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"---"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"---"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"fairyinabottle4":46}},{"path":"docs/team/picasdan9.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"---"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"---"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"picasdan9":46}},{"path":"docs/team/sitingst.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"---"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":"---"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"SiTingST":46}},{"path":"docs/team/yienyoong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"---"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"---"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"yienyoong":46}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_NONEXISTENT_MATRIC_NUM \u003d \"The matriculation number provided does not exist!\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_OUT_OF_INDEX \u003d \"The index requested does not exist!\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":1,"yienyoong":1,"-":11}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the AddressBook."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered list of persons */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":3,"-":50}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        return model.getFilteredAppointmentList();"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":6,"-":81}},{"path":"src/main/java/seedu/address/logic/commands/AddAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" * Adds a person to the address book."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class AddAppointmentCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    public static final String COMMAND_WORD \u003d \"addAppt\";"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an appointment to Vax@NUS. \""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"            + \"Parameters: \""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION NUMBER \""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_DATE + \"DATE \""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_START_TIME + \"START TIME \""},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_END_TIME + \"END_TIME \\n\""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"A1234567X \""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_DATE + \"2021-03-14 \""},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_START_TIME + \"10:00 \""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"            + PREFIX_END_TIME + \"10:30 \\n\";"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment added: %1$s\";"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"The appointment already exists in the records\";"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    public static final String MESSAGE_OVERLAPPING_APPOINTMENT \u003d \"The appointment overlaps with existing records\";"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    private final Appointment toAdd;"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"    public AddAppointmentCommand(Appointment appointment) {"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(appointment);"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        toAdd \u003d appointment;"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        if (model.hasAppointment(toAdd)) {"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        } else if (model.hasOverlappingAppointment(toAdd)) {"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"            throw new CommandException(MESSAGE_OVERLAPPING_APPOINTMENT);"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        model.addAppointment(toAdd);"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"                || (other instanceof AddAppointmentCommand // instanceof handles nulls"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"                \u0026\u0026 toAdd.equals(((AddAppointmentCommand) other).toAdd));"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":66}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION NUMBER \""},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_FACULTY + \"FACULTY \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_VACCINATION_STATUS + \"VACCINATION STATUS \""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MEDICAL_DETAILS + \"MEDICAL DETAILS \""},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_SCHOOL_RESIDENCE + \"SCHOOL RESIDENCE \\n\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"A01234567X \""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_FACULTY + \"SCI \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_VACCINATION_STATUS + \"Vaccinated \""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MEDICAL_DETAILS + \"peanut allergy \""},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_SCHOOL_RESIDENCE + \"PGPH \\n\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the records\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":16,"-":61}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    public static final String COMMAND_WORD \u003d \"deleteStud\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"            + \": Deletes the person identified by their unique matriculation number assigned by NUS.\\n\""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"            + \"Parameters: Matriculation Number \\n\""},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            + \"Example: \" + COMMAND_WORD + \" A1234567X\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\"; // add name + matric number"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    private final MatriculationNumber matriculationNumber;"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    private final MatriculationNumberContainsKeywordsPredicate predicate;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * Creates a DeleteCommand object responsible for deleting a student by matriculation number."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * @param matriculationNumber Matriculation number of the student you want to delete."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public DeleteCommand(MatriculationNumber matriculationNumber) {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        predicate \u003d new MatriculationNumberContainsKeywordsPredicate(matriculationNumber.toString());"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"     * @param personList List of all students in Vax@NUS system."},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"     * @param matricNum Matriculation Number of the student you want to delete."},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"     * @return Person you want to delete, null if the matriculation number does not exist in System."},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    public static Person getPerson(List\u003cPerson\u003e personList, MatriculationNumber matricNum) {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        for (Person p : personList) {"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            if (p.getMatriculationNumber().equals(matricNum)) {"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                return p;"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"        return null;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e studentList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"        Person personToDelete \u003d getPerson(studentList, matriculationNumber);"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"        if (personToDelete \u003d\u003d null) {"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(Messages.MESSAGE_NONEXISTENT_MATRIC_NUM);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":"                \u0026\u0026 matriculationNumber.equals(((DeleteCommand) other).matriculationNumber)); // state check"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":38,"-":38}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":36,"author":{"gitId":"-"},"content":" */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION NUMBER]\""},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_FACULTY + \"FACULTY] \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_VACCINATION_STATUS + \"VACCINATION STATUS] \""},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_MEDICAL_DETAILS + \"MEDICAL DETAILS] \""},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_SCHOOL_RESIDENCE + \"SCHOOL RESIDENCE] \\n\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This student already exists in the records.\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"            throw new CommandException(Messages.MESSAGE_OUT_OF_INDEX);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"        MatriculationNumber updatedMatriculationNumber \u003d editPersonDescriptor.getMatriculationNumber()"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getMatriculationNumber());"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"        Faculty updatedFaculty \u003d editPersonDescriptor.getFaculty().orElse(personToEdit.getFaculty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"        VaccinationStatus updatedVaccinationStatus \u003d editPersonDescriptor.getVaccinationStatus()"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getVaccinationStatus());"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":"        MedicalDetails updatedMedicalDetails \u003d editPersonDescriptor.getMedicalDetails()"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getMedicalDetails());"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"        SchoolResidence updatedSchoolResidence \u003d editPersonDescriptor.getSchoolResidence()"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getSchoolResidence());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(updatedName, updatedMatriculationNumber, updatedFaculty, updatedPhone, updatedEmail,"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"                updatedAddress, updatedVaccinationStatus, updatedMedicalDetails, updatedSchoolResidence);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        private MatriculationNumber matriculationNumber;"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"        private Faculty faculty;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"        private VaccinationStatus vaccinationStatus;"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"        private MedicalDetails medicalDetails;"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"        private SchoolResidence schoolResidence;"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":159,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":160,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":161,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"            setMatriculationNumber(toCopy.matriculationNumber);"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"            setFaculty(toCopy.faculty);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":169,"author":{"gitId":"fairyinabottle4"},"content":"            setMedicalDetails(toCopy.medicalDetails);"},{"lineNumber":170,"author":{"gitId":"fairyinabottle4"},"content":"            setVaccinationStatus(toCopy.vaccinationStatus);"},{"lineNumber":171,"author":{"gitId":"fairyinabottle4"},"content":"            setSchoolResidence(toCopy.schoolResidence);"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":175,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":176,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":178,"author":{"gitId":"fairyinabottle4"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, matriculationNumber, vaccinationStatus,"},{"lineNumber":179,"author":{"gitId":"fairyinabottle4"},"content":"                    medicalDetails, schoolResidence, faculty);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"fairyinabottle4"},"content":"        public void setMatriculationNumber(MatriculationNumber matriculationNumber) {"},{"lineNumber":191,"author":{"gitId":"fairyinabottle4"},"content":"            this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":194,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cMatriculationNumber\u003e getMatriculationNumber() {"},{"lineNumber":195,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(matriculationNumber);"},{"lineNumber":196,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":198,"author":{"gitId":"fairyinabottle4"},"content":"        public void setFaculty(Faculty faculty) {"},{"lineNumber":199,"author":{"gitId":"fairyinabottle4"},"content":"            this.faculty \u003d faculty;"},{"lineNumber":200,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":202,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cFaculty\u003e getFaculty() {"},{"lineNumber":203,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(faculty);"},{"lineNumber":204,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":206,"author":{"gitId":"fairyinabottle4"},"content":"        public void setVaccinationStatus(VaccinationStatus vaccinationStatus) {"},{"lineNumber":207,"author":{"gitId":"fairyinabottle4"},"content":"            this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":208,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":210,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cVaccinationStatus\u003e getVaccinationStatus() {"},{"lineNumber":211,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(vaccinationStatus);"},{"lineNumber":212,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"-"},"content":""},{"lineNumber":238,"author":{"gitId":"fairyinabottle4"},"content":"        public void setMedicalDetails(MedicalDetails medicalDetails) {"},{"lineNumber":239,"author":{"gitId":"fairyinabottle4"},"content":"            this.medicalDetails \u003d medicalDetails;"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cMedicalDetails\u003e getMedicalDetails() {"},{"lineNumber":243,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(medicalDetails);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"fairyinabottle4"},"content":"        public void setSchoolResidence(SchoolResidence schoolResidence) {"},{"lineNumber":247,"author":{"gitId":"fairyinabottle4"},"content":"            this.schoolResidence \u003d schoolResidence;"},{"lineNumber":248,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":250,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cSchoolResidence\u003e getSchoolResidence() {"},{"lineNumber":251,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(schoolResidence);"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":257,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":259,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":260,"author":{"gitId":"-"},"content":""},{"lineNumber":261,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":263,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":270,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":271,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":272,"author":{"gitId":"fairyinabottle4"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress());"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":75,"-":200}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program."},{"lineNumber":7,"author":{"gitId":"-"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Vax@NUS as requested ...\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":" * Finds and lists all persons in address book whose student entries field matches the argument keyword."},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":" * Keyword matching is case sensitive."},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"public class FilterCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds student entry with \""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"            + \"fields that matches the specified keyword (case-sensitive) and displays the student.\\n\""},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"            + \"Parameters: KEYWORD...\\n\""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"            + \"Example: \" + COMMAND_WORD + \" vaccinated\";"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"    private final Predicate\u003cPerson\u003e predicate;"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"    public FilterCommand(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"        return new CommandResult("},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"                \u0026\u0026 predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":44}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":" * Keyword matching is case sensitive."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds student whose \""},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"            + \"matriculation number matches the specified keywords (case-sensitive) and displays the student.\\n\""},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"            + \"Parameters: KEYWORD \\n\""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"            + \"Example: \" + COMMAND_WORD + \" a01234567r\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"    private final MatriculationNumberContainsKeywordsPredicate predicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"    public FindCommand(MatriculationNumberContainsKeywordsPredicate predicate) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":33,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"SiTingST":8,"-":34}},{"path":"src/main/java/seedu/address/logic/commands/statscommands/StatsCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"public abstract class StatsCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    public static final String COMMAND_WORD \u003d \"stats\";"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_STATS_SUCCESS \u003d \"Percentage %s vaccinated: %.2f%%\";"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_STATS_FAILURE \u003d \"No available data on given faculty/residence.\";"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private static String stringResidences \u003d SchoolResidence.getStringResidences();"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private static String stringFaculties \u003d Faculty.getStringFaculties();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"            + \": Lists statistics of category given. Please enter only one parameter. \\n\""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"            + \"Parameters: \\n\""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"            + stringResidences + \"\\n\""},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            + stringFaculties + \"\\n\""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"            + \"Example: \" + COMMAND_WORD + \" COM\";"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":29}},{"path":"src/main/java/seedu/address/logic/commands/statscommands/StatsCommandAll.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandAll extends StatsCommand {"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_STATS_SUCCESS \u003d \"%s: %.2f%%\";"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private static final String PADDING \u003d \"   \";"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    private List\u003cString\u003e listResidences \u003d SchoolResidence.getResidenceAbbreviation();"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    private List\u003cString\u003e listFaculties \u003d Faculty.getFacultyAbbreviation();"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    private StringBuilder sb \u003d new StringBuilder(\"Percentage Vaccinated:\" + \"\\n\");"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        requireNonNull(model);"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e studentList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        for (String residence : listResidences) {"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"            SchoolResidence currResidence \u003d new SchoolResidence(residence);"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"                float stats \u003d StatsCommandResidence.calculateRatioVaccinated(studentList, currResidence);"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"                if (Float.isNaN(stats)) {"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"                    sb.append(PADDING + currResidence + \": No available data\" + \"\\n\");"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"                    continue;"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"                sb.append(PADDING + String.format(MESSAGE_STATS_SUCCESS, currResidence.toString(), stats * 100) + \"\\n\");"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"            } catch (Exception e) {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"                throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        for (String fac : listFaculties) {"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            Faculty currFaculty \u003d new Faculty(fac);"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"                float stats \u003d StatsCommandFaculty.calculateRatioVaccinated(studentList, currFaculty);"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"                if (Float.isNaN(stats)) {"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"                    sb.append(PADDING + currFaculty + \": No available data\" + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"                    continue;"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                sb.append(PADDING + String.format(MESSAGE_STATS_SUCCESS, currFaculty, stats * 100) + \"\\n\");"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            } catch (Exception e) {"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"        return new CommandResult(sb.toString());"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"                || (other instanceof StatsCommandAll); // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":63}},{"path":"src/main/java/seedu/address/logic/commands/statscommands/StatsCommandFaculty.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandFaculty extends StatsCommand {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private Faculty faculty;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    public StatsCommandFaculty(Faculty faculty) {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"        this.faculty \u003d faculty;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e studentList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"            float stats \u003d calculateRatioVaccinated(studentList, faculty);"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"            if (Float.isNaN(stats) || stats \u003e 1) {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"                throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            return new CommandResult(String.format(MESSAGE_STATS_SUCCESS, faculty, stats * 100));"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     * @param studentList List of all students in Vax@NUS system."},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @param faculty Faculty to calculate ratio vaccinated."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     * @return A float representing the ratio of number vaccinated to total students in the faculty."},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"     * @throws CommandException if the data is corrupted."},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"    public static float calculateRatioVaccinated(List\u003cPerson\u003e studentList, Faculty faculty) throws CommandException {"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        int totalStudents \u003d 0;"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        int counter \u003d 0;"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"            for (Person p : studentList) {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"                if (p.getFaculty().equals(faculty)) {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                    totalStudents++;"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"                    if (p.isVaccinated()) {"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                        counter++;"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"                    }"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"            float stats \u003d (float) counter / totalStudents;"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            return stats;"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"                || (other instanceof StatsCommandFaculty) // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"                \u0026\u0026 faculty.equals(((StatsCommandFaculty) other).faculty); // state check"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":69}},{"path":"src/main/java/seedu/address/logic/commands/statscommands/StatsCommandNus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandNus extends StatsCommand {"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_STATS_SUCCESS \u003d \"Percentage NUS vaccinated: %.2f%%\";"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    public static final String MESSAGE_STATS_FAILURE \u003d \"No available data in Vax@NUS\";"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    public CommandResult execute(Model model) throws CommandException { // NUS"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        requireNonNull(model);"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e studentList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"        int totalStudents \u003d studentList.size();"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        int counter \u003d 0;"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            for (Person p : studentList) {"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"                if (p.isVaccinated()) {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"                    counter++;"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"            float stats \u003d (float) counter / totalStudents;"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            if (Float.isNaN(stats) || stats \u003e 1) {"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"                throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"            return new CommandResult(String.format(MESSAGE_STATS_SUCCESS, stats * 100));"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        } catch (Exception e) {"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"                || (other instanceof StatsCommandNus); // instanceof handles nulls"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":44}},{"path":"src/main/java/seedu/address/logic/commands/statscommands/StatsCommandResidence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandResidence extends StatsCommand {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private SchoolResidence residence;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    public StatsCommandResidence(SchoolResidence residence) {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"        this.residence \u003d residence;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e studentList \u003d model.getAddressBook().getPersonList();"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"            float stats \u003d calculateRatioVaccinated(studentList, residence);"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"            if (Float.isNaN(stats) || stats \u003e 1) {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"                throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            return new CommandResult(String.format(MESSAGE_STATS_SUCCESS, residence.toString(), stats * 100));"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     * @param studentList List of all students in Vax@NUS system."},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @param residence School residence to calculate ratio vaccinated."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     * @return A float representing the ratio of number vaccinated to total students in the residence."},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"     * @throws CommandException if the data is corrupted."},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"    public static float calculateRatioVaccinated(List\u003cPerson\u003e studentList, SchoolResidence residence)"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"            throws CommandException {"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        int totalStudents \u003d 0;"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        int counter \u003d 0;"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"            for (Person p : studentList) {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"                if (p.getSchoolResidence().equals(residence)) {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                    totalStudents++;"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"                    if (p.isVaccinated()) {"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                        counter++;"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"                    }"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"            float stats \u003d (float) counter / totalStudents;"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            return stats;"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        } catch (Exception e) {"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"            throw new CommandException(MESSAGE_STATS_FAILURE);"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    public boolean equals(Object other) {"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"                || (other instanceof StatsCommandResidence) // instanceof handles nulls"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"                \u0026\u0026 residence.equals(((StatsCommandResidence) other).residence); // state check"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":68}},{"path":"src/main/java/seedu/address/logic/parser/AddAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalTime;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"public class AddAppointmentCommandParser implements Parser\u003cAddAppointmentCommand\u003e {"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    public AddAppointmentCommand parse(String args) throws ParseException {"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_MATRICULATION_NUMBER, PREFIX_DATE, PREFIX_START_TIME,"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"                        PREFIX_END_TIME);"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_MATRICULATION_NUMBER, PREFIX_DATE, PREFIX_START_TIME,"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"                PREFIX_END_TIME)"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"                    AddAppointmentCommand.MESSAGE_USAGE));"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        MatriculationNumber matriculationNumber \u003d ParserUtil.parseMatric(argMultimap"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"                .getValue(PREFIX_MATRICULATION_NUMBER).get());"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"        LocalDate date \u003d LocalDate.parse(argMultimap.getValue(PREFIX_DATE).get());"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        LocalTime startTime \u003d LocalTime.parse(argMultimap.getValue(PREFIX_START_TIME).get());"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        LocalTime endTime \u003d LocalTime.parse(argMultimap.getValue(PREFIX_END_TIME).get());"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        Appointment appointment \u003d new Appointment(matriculationNumber, date, startTime, endTime);"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"        return new AddAppointmentCommand(appointment);"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":59}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_FACULTY,"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_VACCINATION_STATUS, PREFIX_MEDICAL_DETAILS,"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_SCHOOL_RESIDENCE);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_FACULTY, PREFIX_ADDRESS,"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"                PREFIX_PHONE, PREFIX_VACCINATION_STATUS, PREFIX_EMAIL, PREFIX_MEDICAL_DETAILS)"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"        MatriculationNumber matriculationNumber \u003d ParserUtil.parseMatric(argMultimap"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"                .getValue(PREFIX_MATRICULATION_NUMBER).get());"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"        Faculty faculty \u003d ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get());"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"        VaccinationStatus vaccinationStatus \u003d ParserUtil.parseVacStatus(argMultimap"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"                .getValue(PREFIX_VACCINATION_STATUS).get());"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        MedicalDetails medicalDetails \u003d ParserUtil.parseMedicalDetails(argMultimap.getValue(PREFIX_MEDICAL_DETAILS)"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"                .get());"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"        SchoolResidence schoolResidence \u003d ParserUtil.parseSchoolRes(argMultimap.getValue(PREFIX_SCHOOL_RESIDENCE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        Person person \u003d new Person(name, matriculationNumber, faculty, phone, email, address, vaccinationStatus,"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"                medicalDetails, schoolResidence);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":25,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"SiTingST"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"SiTingST"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"        case StatsCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"            return new StatsCommandParser().parse(arguments);"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"        case AddAppointmentCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"            return new AddAppointmentCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":4,"SiTingST":3,"picasdan9":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_MATRICULATION_NUMBER \u003d new Prefix(\"i/\");"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_FACULTY \u003d new Prefix(\"f/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_VACCINATION_STATUS \u003d new Prefix(\"s/\");"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_MEDICAL_DETAILS \u003d new Prefix(\"m/\");"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_SCHOOL_RESIDENCE \u003d new Prefix(\"r/\");"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"ts/\");"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"te/\");"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":5,"picasdan9":3,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution."},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"            MatriculationNumber matriculationNumber \u003d ParserUtil.parseMatric(args);"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"            return new DeleteCommand(matriculationNumber);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":4,"-":25}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_FACULTY, PREFIX_PHONE,"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_VACCINATION_STATUS, PREFIX_MEDICAL_DETAILS,"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_SCHOOL_RESIDENCE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setMatriculationNumber(ParserUtil.parseMatric(argMultimap"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_MATRICULATION_NUMBER).get()));"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_FACULTY).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setFaculty(ParserUtil.parseFaculty(argMultimap.getValue(PREFIX_FACULTY).get()));"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_VACCINATION_STATUS).isPresent()) {"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setVaccinationStatus(ParserUtil.parseVacStatus(argMultimap"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_VACCINATION_STATUS).get()));"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_MEDICAL_DETAILS).isPresent()) {"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setMedicalDetails(ParserUtil.parseMedicalDetails(argMultimap"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_MEDICAL_DETAILS).get()));"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_SCHOOL_RESIDENCE).isPresent()) {"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setSchoolResidence(ParserUtil.parseSchoolRes(argMultimap"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_SCHOOL_RESIDENCE)));"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":27,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.FacultyContainsKeywords;"},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.SchoolResidenceContainsKeywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.VaccinationStatusContainsKeywords;"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":" * Parses input arguments and creates a new FilterCommand object"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"    private static final List\u003cString\u003e VACCINATED_STATUS \u003d VaccinationStatus.getVaccinationStatusAbbreviation();"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"    private static final List\u003cString\u003e FACULTY \u003d Faculty.getFacultyAbbreviation();"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    private static final List\u003cString\u003e SCHOOL_RESIDENCE \u003d SchoolResidence.getResidenceAbbreviation();"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand"},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":"     * and returns a FilterCommand object for execution."},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":"        String condition \u003d args.trim();"},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"        if (VACCINATED_STATUS.contains(condition)) {"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"            return new FilterCommand(new VaccinationStatusContainsKeywords(condition));"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"        } else if (FACULTY.contains(condition)) {"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"            return new FilterCommand(new FacultyContainsKeywords(condition));"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":"        } else if (SCHOOL_RESIDENCE.contains(condition)) {"},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"            return new FilterCommand(new SchoolResidenceContainsKeywords(condition));"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"            throw new ParseException("},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":48}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"        ParserUtil parserUtil \u003d new ParserUtil();"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumber matriculationNumber \u003d parserUtil.parseMatric(args.trim());"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"        return new FindCommand(new MatriculationNumberContainsKeywordsPredicate(matriculationNumber.toString()));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"SiTingST":5,"-":20}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String matriculationNumber} into a {@code MatriculationNumber}."},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code matriculationNumber} is invalid."},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    public static MatriculationNumber parseMatric(String matriculationNumber) throws ParseException {"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(matriculationNumber);"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedMatric \u003d matriculationNumber.trim();"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MatriculationNumber.isValidMatric(trimmedMatric)) {"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"        return new MatriculationNumber(trimmedMatric);"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String faculty} into a {@code faculty}."},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code faculty} is invalid."},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    public static Faculty parseFaculty(String faculty) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(faculty);"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedFaculty \u003d faculty.trim();"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"        if (!Faculty.isValidFaculty(trimmedFaculty)) {"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(Faculty.MESSAGE_CONSTRAINTS);"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"        return new Faculty(trimmedFaculty);"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":85,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"yienyoong"},"content":"     * Parses a {@code String residence} into a {@code SchoolResidence}."},{"lineNumber":87,"author":{"gitId":"yienyoong"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":88,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"yienyoong"},"content":"     * @throws ParseException if the given {@code residence} is invalid."},{"lineNumber":90,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"yienyoong"},"content":"    public static SchoolResidence parseResidence(String residence) throws ParseException {"},{"lineNumber":92,"author":{"gitId":"yienyoong"},"content":"        requireNonNull(residence);"},{"lineNumber":93,"author":{"gitId":"yienyoong"},"content":"        String trimmedResidence \u003d residence.trim();"},{"lineNumber":94,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"yienyoong"},"content":"            return new SchoolResidence(trimmedResidence);"},{"lineNumber":96,"author":{"gitId":"yienyoong"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":97,"author":{"gitId":"yienyoong"},"content":"            throw new ParseException(SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String vaccinationStatus} into a {@code vaccinationStatus}."},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code vaccinationStatus} is invalid."},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"    public static VaccinationStatus parseVacStatus(String vaccinationStatus) throws ParseException {"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(vaccinationStatus);"},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedVacStatus \u003d vaccinationStatus.trim();"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"        if (!VaccinationStatus.isValidStatus(trimmedVacStatus)) {"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"        return new VaccinationStatus(trimmedVacStatus);"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String medicalDetails} into a {@code medicalDetails}."},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":150,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code medicalDetails} is invalid."},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"    public static MedicalDetails parseMedicalDetails(String medicalDetails) throws ParseException {"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(medicalDetails);"},{"lineNumber":155,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedMedDetails \u003d medicalDetails.trim();"},{"lineNumber":156,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MedicalDetails.isValidMedicalDetails(trimmedMedDetails)) {"},{"lineNumber":157,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":158,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"fairyinabottle4"},"content":"        return new MedicalDetails(trimmedMedDetails);"},{"lineNumber":160,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":165,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String schoolResidence} into an {@code schoolResidence}."},{"lineNumber":179,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":180,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":181,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code schoolResidence} is invalid."},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"fairyinabottle4"},"content":"    public static SchoolResidence parseSchoolRes(Optional\u003cString\u003e schoolResidence) throws ParseException {"},{"lineNumber":184,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(schoolResidence);"},{"lineNumber":185,"author":{"gitId":"fairyinabottle4"},"content":"        if (schoolResidence.isEmpty()) {"},{"lineNumber":186,"author":{"gitId":"yienyoong"},"content":"            return new SchoolResidence(\"DOES_NOT_LIVE_ON_CAMPUS\");"},{"lineNumber":187,"author":{"gitId":"fairyinabottle4"},"content":"        } else {"},{"lineNumber":188,"author":{"gitId":"fairyinabottle4"},"content":"            String trimmedSchoolRes \u003d schoolResidence.get().trim();"},{"lineNumber":189,"author":{"gitId":"fairyinabottle4"},"content":"            if (!SchoolResidence.isValidResidence(trimmedSchoolRes)) {"},{"lineNumber":190,"author":{"gitId":"fairyinabottle4"},"content":"                throw new ParseException(SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitId":"fairyinabottle4"},"content":"            }"},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"            return new SchoolResidence(trimmedSchoolRes);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":78,"yienyoong":17,"-":100}},{"path":"src/main/java/seedu/address/logic/parser/StatsCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommand;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandAll;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandFaculty;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandNus;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandResidence;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private List\u003cString\u003e listResidences \u003d SchoolResidence.getResidenceAbbreviation(); // \"DOES_NOT_LIVE_ON_CAMPUS\""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private List\u003cString\u003e listFaculties \u003d Faculty.getFacultyAbbreviation();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public StatsCommand parse(String userInput) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        String trimmedUserInput \u003d userInput.trim();"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        if (listResidences.contains(trimmedUserInput)) { // user input a residence"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            SchoolResidence schoolResidence \u003d ParserUtil.parseResidence(trimmedUserInput);"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"            return new StatsCommandResidence(schoolResidence);"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        if (listFaculties.contains(trimmedUserInput)) { // user input a faculty"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"            Faculty faculty \u003d ParserUtil.parseFaculty(trimmedUserInput);"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"            return new StatsCommandFaculty(faculty);"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        if (trimmedUserInput.equals(\"NUS\")) {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            return new StatsCommandNus();"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        if (trimmedUserInput.equals(\"all\")) {"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"            return new StatsCommandAll();"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        // invalid input"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":40}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.UniqueAppointmentList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    private final UniqueAppointmentList appointments;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        appointments \u003d new UniqueAppointmentList();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    //// person-level operations"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return persons.contains(person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Adds a person to the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        persons.add(p);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}."},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book."},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        persons.remove(key);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"    //// appointment-level operations"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"     * Returns true if an appointment with the same identity as {@code appointment} exists in the address book."},{"lineNumber":106,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"picasdan9"},"content":"    public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":108,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(appointment);"},{"lineNumber":109,"author":{"gitId":"picasdan9"},"content":"        return appointments.contains(appointment);"},{"lineNumber":110,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":112,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"picasdan9"},"content":"     * Returns true if an appointment with overlapping time with {@code appointment} exists in the address book."},{"lineNumber":114,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"picasdan9"},"content":"    public boolean hasOverlappingAppointment(Appointment appointment) {"},{"lineNumber":116,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(appointment);"},{"lineNumber":117,"author":{"gitId":"picasdan9"},"content":"        return appointments.hasOverlappingAppointment(appointment);"},{"lineNumber":118,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":120,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"picasdan9"},"content":"     * Adds an appointment to the address book."},{"lineNumber":122,"author":{"gitId":"picasdan9"},"content":"     * The appointment must not already exist in the address book."},{"lineNumber":123,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"picasdan9"},"content":"    public void addAppointment(Appointment a) {"},{"lineNumber":125,"author":{"gitId":"picasdan9"},"content":"        appointments.add(a);"},{"lineNumber":126,"author":{"gitId":"picasdan9"},"content":"        System.out.println(getAppointmentList());"},{"lineNumber":127,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":129,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"picasdan9"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}."},{"lineNumber":131,"author":{"gitId":"picasdan9"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":132,"author":{"gitId":"picasdan9"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as another existing"},{"lineNumber":133,"author":{"gitId":"picasdan9"},"content":"     * appointment in the address book."},{"lineNumber":134,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"picasdan9"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":136,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(editedAppointment);"},{"lineNumber":137,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":138,"author":{"gitId":"picasdan9"},"content":"        appointments.setAppointment(target, editedAppointment);"},{"lineNumber":139,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    //// util methods"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // TODO: refine later"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":155,"author":{"gitId":"picasdan9"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":156,"author":{"gitId":"picasdan9"},"content":"        return appointments.asUnmodifiableObservableList();"},{"lineNumber":157,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":162,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        return persons.hashCode();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":50,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component."},{"lineNumber":13,"author":{"gitId":"-"},"content":" */"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}."},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Deletes the given person."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * The person must exist in the address book."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Adds the given person."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    void addPerson(Person person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"    boolean hasAppointment(Appointment appointment);"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"    boolean hasOverlappingAppointment(Appointment appointment);"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"    void addAppointment(Appointment appointment);"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":"    ObservableList\u003cAppointment\u003e getFilteredAppointmentList();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":9,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    private final FilteredList\u003cAppointment\u003e filteredAppointments;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        super();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        filteredAppointments \u003d new FilteredList\u003c\u003e(this.addressBook.getAppointmentList());"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":119,"author":{"gitId":"picasdan9"},"content":"    public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":120,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(appointment);"},{"lineNumber":121,"author":{"gitId":"picasdan9"},"content":"        return addressBook.hasAppointment(appointment);"},{"lineNumber":122,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":124,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":125,"author":{"gitId":"picasdan9"},"content":"    public boolean hasOverlappingAppointment(Appointment appointment) {"},{"lineNumber":126,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(appointment);"},{"lineNumber":127,"author":{"gitId":"picasdan9"},"content":"        return addressBook.hasOverlappingAppointment(appointment);"},{"lineNumber":128,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":130,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"picasdan9"},"content":"    public void addAppointment(Appointment appointment) {"},{"lineNumber":132,"author":{"gitId":"picasdan9"},"content":"        addressBook.addAppointment(appointment);"},{"lineNumber":133,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return filteredPersons;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"picasdan9"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Appointment List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":153,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":154,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"picasdan9"},"content":"     * Returns an unmodifiable view of the list of {@code Appointment} backed by the internal list of"},{"lineNumber":156,"author":{"gitId":"picasdan9"},"content":"     * {@code versionedAddressBook}"},{"lineNumber":157,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":159,"author":{"gitId":"picasdan9"},"content":"    public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":160,"author":{"gitId":"picasdan9"},"content":"        return filteredAppointments;"},{"lineNumber":161,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":31,"-":151}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list."},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons."},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":2,"-":17}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class Appointment {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    private final MatriculationNumber matriculationNumber;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    // Data fields"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    private final LocalDate date;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    private final LocalTime startTime;"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    private final LocalTime endTime;"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    public Appointment(MatriculationNumber matriculationNumber, LocalDate date, LocalTime startTime,"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"                       LocalTime endTime) {"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        requireAllNonNull(matriculationNumber, date, startTime, endTime);"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        this.date \u003d date;"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    public LocalDate getDate() {"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        return date;"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    public LocalTime getStartTime() {"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        return startTime;"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"    public LocalTime getEndTime() {"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"        return endTime;"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    public MatriculationNumber getMatriculationNumber() {"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        return matriculationNumber;"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"     * Returns true if both appointments have the matriculation number."},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"     * This defines a weaker notion of equality between two appointments."},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        if (otherAppointment \u003d\u003d this) {"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"            return true;"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"        return otherAppointment !\u003d null \u0026\u0026 otherAppointment.matriculationNumber.equals(matriculationNumber);"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"     * Returns true if appointments overlap."},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"    public boolean doesTimeOverlap(Appointment otherAppointment) {"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        if (otherAppointment \u003d\u003d this) {"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"            return true;"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"        if (!otherAppointment.date.isEqual(date)) {"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"            return false;"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"        return otherAppointment.startTime.isBefore(endTime) \u0026\u0026 otherAppointment.endTime.isAfter(startTime);"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"     * Returns true if both appointments have the same identity and data fields."},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"            return true;"},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"        if (!(other instanceof Appointment)) {"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"        Appointment otherAppointment \u003d (Appointment) other;"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"        return otherAppointment.date.isEqual(date) \u0026\u0026 otherAppointment.matriculationNumber.equals(matriculationNumber)"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":"                \u0026\u0026 otherAppointment.startTime.equals(startTime) \u0026\u0026 otherAppointment.endTime.equals(endTime);"},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"picasdan9"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitId":"picasdan9"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":"        return Objects.hash(matriculationNumber, date, startTime, endTime);"},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"picasdan9"},"content":"        final StringBuilder builder \u003d new StringBuilder(\"Appointment: \");"},{"lineNumber":107,"author":{"gitId":"picasdan9"},"content":"        builder.append(getDate().toString())"},{"lineNumber":108,"author":{"gitId":"picasdan9"},"content":"                .append(\"; Matriculation Number: \")"},{"lineNumber":109,"author":{"gitId":"picasdan9"},"content":"                .append(matriculationNumber)"},{"lineNumber":110,"author":{"gitId":"picasdan9"},"content":"                .append(\"; Start Time: \")"},{"lineNumber":111,"author":{"gitId":"picasdan9"},"content":"                .append(getStartTime().toString())"},{"lineNumber":112,"author":{"gitId":"picasdan9"},"content":"                .append(\"; End Time: \")"},{"lineNumber":113,"author":{"gitId":"picasdan9"},"content":"                .append(getEndTime().toString());"},{"lineNumber":114,"author":{"gitId":"picasdan9"},"content":"        return builder.toString();"},{"lineNumber":115,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":117,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":117}},{"path":"src/main/java/seedu/address/model/appointment/UniqueAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.exceptions.OverlappingAppointmentException;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":" * An appointment is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}."},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":" * As such, adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":" * ensure that the appointment being added or updated is unique in terms of identity in the UniqueAppointmentList."},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":" * However, the removal of an appointment uses Appointment#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":" * as to ensure that the appointment with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":" *"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":" *"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":" * @see Appointment#isSameAppointment(Appointment)"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"public class UniqueAppointmentList implements Iterable\u003cAppointment\u003e {"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"     * Returns true if the list contains an equivalent appointment as the given argument."},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    public boolean contains(Appointment toCheck) {"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        return internalList.stream().anyMatch(toCheck::isSameAppointment);"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"     * Returns true if the list contains an appointment that overlaps with the given argument."},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    public boolean hasOverlappingAppointment(Appointment toCheck) {"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(toCheck);"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        return internalList.stream().anyMatch(toCheck::doesTimeOverlap);"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"     * Adds a person to the list."},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"     * The person must not already exist in the list."},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"    public void add(Appointment toAdd) {"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        requireNonNull(toAdd);"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"        if (contains(toAdd)) {"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"            throw new DuplicateAppointmentException();"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        } else if (hasOverlappingAppointment(toAdd)) {"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"            throw new OverlappingAppointmentException();"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        internalList.add(toAdd);"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}."},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"     * {@code target} must exist in the list."},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"        // to do"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"     * Removes the equivalent person from the list."},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"     * The person must exist in the list."},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"    public void remove(Appointment toRemove) {"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"        // to do"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"    public void setPersons(UniqueAppointmentList replacement) {"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"        // to do"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"     * Replaces the contents of this list with {@code persons}."},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"     * {@code persons} must not contain duplicate persons."},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"    public void setPersons(List\u003cAppointment\u003e appointments) {"},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"        // to do"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"        return internalUnmodifiableList;"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"    public Iterator\u003cAppointment\u003e iterator() {"},{"lineNumber":99,"author":{"gitId":"picasdan9"},"content":"        return internalList.iterator();"},{"lineNumber":100,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"                || (other instanceof UniqueAppointmentList // instanceof handles nulls"},{"lineNumber":106,"author":{"gitId":"picasdan9"},"content":"                \u0026\u0026 internalList.equals(((UniqueAppointmentList) other).internalList));"},{"lineNumber":107,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":109,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":110,"author":{"gitId":"picasdan9"},"content":"    public int hashCode() {"},{"lineNumber":111,"author":{"gitId":"picasdan9"},"content":"        return internalList.hashCode();"},{"lineNumber":112,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":114,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"picasdan9"},"content":"     * Returns true if {@code persons} contains only unique persons."},{"lineNumber":116,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"picasdan9"},"content":"    private boolean personsAreUnique(List\u003cAppointment\u003e appointments) {"},{"lineNumber":118,"author":{"gitId":"picasdan9"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {"},{"lineNumber":119,"author":{"gitId":"picasdan9"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {"},{"lineNumber":120,"author":{"gitId":"picasdan9"},"content":"                if (appointments.get(i).isSameAppointment(appointments.get(j))) {"},{"lineNumber":121,"author":{"gitId":"picasdan9"},"content":"                    return false;"},{"lineNumber":122,"author":{"gitId":"picasdan9"},"content":"                }"},{"lineNumber":123,"author":{"gitId":"picasdan9"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"picasdan9"},"content":"        return true;"},{"lineNumber":126,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":127}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered duplicates if they"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":" * have the same identity)."},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"public class DuplicateAppointmentException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"    public DuplicateAppointmentException() {"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"        super(\"Operation would result in duplicate appointments\");"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":11}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/OverlappingAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.model.appointment.exceptions;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":" * Signals that the operation will result in overlapping Appointments."},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"public class OverlappingAppointmentException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    public OverlappingAppointmentException() {"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"        super(\"Operation would result in overlapping appointments\");"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":10}},{"path":"src/main/java/seedu/address/model/person/Faculty.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"public class Faculty {"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    public enum FacultyAbbreviation {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        FASS, BIZ, COM, SCALE, DEN, SDE, DNUS, ENG, ISEP, LAW, MED, MUSIC, SPH, SPP, SCI, USP, YNC"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The faculty entered should be one of the following: \\n\""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"            + getFacultyAbbreviation().toString();"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code Faculty}."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     * @param faculty A valid faculty."},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    public Faculty(String faculty) {"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(faculty);"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidFaculty(faculty), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d faculty;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    public static String getStringFaculties() {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        return String.join(\",\", getFacultyAbbreviation());"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if the given string is a valid faculty."},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"     * @param test the string whose format is to be checked."},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"     * @return true if test is a valid faculty, false otherwise."},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidFaculty(String test) {"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"            if (test \u003d\u003d null) {"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"                throw new NullPointerException();"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"            return getFacultyAbbreviation().contains(test);"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"            return false;"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"    public static List\u003cString\u003e getFacultyAbbreviation() {"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        String[] facultyArray \u003d Stream.of(FacultyAbbreviation.values()).map(FacultyAbbreviation::name)"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"                .toArray(String[]::new);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        return Arrays.asList(facultyArray);"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof Faculty // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((Faculty) other).value)); // state check"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":62,"yienyoong":16}},{"path":"src/main/java/seedu/address/model/person/FacultyContainsKeywords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":" * Tests that a {@code Person}\u0027s {@code Faculty} matches the keyword given."},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"public class FacultyContainsKeywords implements Predicate\u003cPerson\u003e {"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"    public FacultyContainsKeywords(String keywords) {"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"        this.keyword \u003d keywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"    public boolean test(Person person) {"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"        return keyword.equals((person.getFaculty().toString()));"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"                || (other instanceof FacultyContainsKeywords // instanceof handles nulls"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"                \u0026\u0026 keyword.equals(((FacultyContainsKeywords) other).keyword)); // state check"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":27}},{"path":"src/main/java/seedu/address/model/person/MatriculationNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"public class MatriculationNumber {"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Matriculation numbers should be of the format A + \""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"            + \"7 digit numeric sequence + alphabet.\";"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String FIRST_CHARACTER \u003d \"A\";"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String NUMERIC_SEQUENCE \u003d \"\\\\d{7}\";"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String LAST_CHARACTER \u003d \"[A-Z]\";"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALIDATION_REGEX \u003d FIRST_CHARACTER + NUMERIC_SEQUENCE + LAST_CHARACTER;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructor for a MatriculationNumber object."},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"     * @param matriculationNumber The string of the matriculation number."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    public MatriculationNumber(String matriculationNumber) {"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(matriculationNumber);"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidMatric(matriculationNumber), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d matriculationNumber;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns if a given string is a valid matriculation number."},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidMatric(String test) {"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MatriculationNumber // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MatriculationNumber) other).value)); // state check"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":55}},{"path":"src/main/java/seedu/address/model/person/MatriculationNumberContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":" * Tests that a {@code Person}\u0027s {@code Matriculation Number} matches any of the keywords given."},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"public class MatriculationNumberContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"    public MatriculationNumberContainsKeywordsPredicate(String keywords) {"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"        this.keyword \u003d keywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"    public boolean test(Person person) {"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"        return keyword.equals((person.getMatriculationNumber().toString()));"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"                || (other instanceof MatriculationNumberContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"                \u0026\u0026 keyword.equals(((MatriculationNumberContainsKeywordsPredicate) other).keyword)); // state check"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":27}},{"path":"src/main/java/seedu/address/model/person/MedicalDetails.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":" * Represents a Person\u0027s medical details in the address book."},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMedicalDetails(String)}"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":" */"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"public class MedicalDetails {"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"MedicalDetails can take any values, and it should not be blank.\""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"            + \"If there is nothing worthy of reporting, enter \u0027none\u0027.\";"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code MedicalDetails}."},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"     * @param medicalDetails valid medical details."},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    public MedicalDetails(String medicalDetails) {"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(medicalDetails);"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidMedicalDetails(medicalDetails), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d medicalDetails;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidMedicalDetails(String test) {"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MedicalDetails // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MedicalDetails) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":58}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    private final MatriculationNumber matriculationNumber;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    private final Faculty faculty;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    private final VaccinationStatus vaccinationStatus;"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    private final MedicalDetails medicalDetails;"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    private final SchoolResidence schoolResidence;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    public Person(Name name, MatriculationNumber matriculationNumber, Faculty faculty, Phone phone, Email email,"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"                  Address address, VaccinationStatus vaccinationStatus, MedicalDetails medicalDetails,"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"                  SchoolResidence schoolResidence) {"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        requireAllNonNull(name, phone, email, address);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        this.faculty \u003d faculty;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d medicalDetails;"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        this.schoolResidence \u003d schoolResidence;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    public MatriculationNumber getMatriculationNumber() {"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        return this.matriculationNumber;"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    public Faculty getFaculty() {"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        return this.faculty;"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"    public VaccinationStatus getVaccinationStatus() {"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        return vaccinationStatus;"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"    public MedicalDetails getMedicalDetails() {"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"        return medicalDetails;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    public SchoolResidence getSchoolResidence() {"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"        return schoolResidence;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if both persons have the same matriculation number."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getMatriculationNumber().equals(getMatriculationNumber());"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"yienyoong"},"content":"    public boolean isVaccinated() {"},{"lineNumber":94,"author":{"gitId":"SiTingST"},"content":"        return this.vaccinationStatus.status \u003d\u003d VaccinationStatus.VaccinationStatusAbbreviation.VACCINATED;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getMatriculationNumber().equals(getMatriculationNumber())"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getFaculty().equals(getFaculty())"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getMedicalDetails().equals(getMedicalDetails())"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getVaccinationStatus().equals(getVaccinationStatus())"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getSchoolResidence().equals(getSchoolResidence());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"        return Objects.hash(name, phone, email, address);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getAddress())"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; Matriculation Number: \")"},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getMatriculationNumber())"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; Faculty: \")"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getFaculty())"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; Vaccination Status: \")"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getVaccinationStatus())"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; Medical Details: \")"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getMedicalDetails())"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; Vaccination Status: \")"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"                .append(getVaccinationStatus())"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"                .append(\"; School Residence: \")"},{"lineNumber":150,"author":{"gitId":"yienyoong"},"content":"                .append(getSchoolResidence().toString()); // DOES NOT LIVE ON CAMPUS -\u003e For UI"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":48,"yienyoong":4,"SiTingST":1,"-":101}},{"path":"src/main/java/seedu/address/model/person/SchoolResidence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"public class SchoolResidence {"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    public enum ResidenceAbbreviation {"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"        PGPH, PGPR, KE7H, SH, KRH, TH, EH, RH, RVRC, YNC, TC, CAPT, RC4, USP, UTR, DOES_NOT_LIVE_ON_CAMPUS;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"        @Override"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"        public String toString() {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"            return this \u003d\u003d DOES_NOT_LIVE_ON_CAMPUS ? \"DOES NOT LIVE ON CAMPUS\" : super.toString();"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    public static final List\u003cResidenceAbbreviation\u003e LIST_RESIDENCES \u003d Arrays.asList("},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"            ResidenceAbbreviation.PGPH, ResidenceAbbreviation.PGPR, ResidenceAbbreviation.KE7H,"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"            ResidenceAbbreviation.SH, ResidenceAbbreviation.KRH, ResidenceAbbreviation.TH, ResidenceAbbreviation.EH,"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"            ResidenceAbbreviation.RH, ResidenceAbbreviation.RVRC, ResidenceAbbreviation.YNC, ResidenceAbbreviation.TC,"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"            ResidenceAbbreviation.CAPT, ResidenceAbbreviation.RC4, ResidenceAbbreviation.USP, ResidenceAbbreviation.UTR,"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"            ResidenceAbbreviation.DOES_NOT_LIVE_ON_CAMPUS"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    );"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The residence entered should be one of the following: \\n\""},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            + getResidenceAbbreviation().toString();"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    public final ResidenceAbbreviation residenceAbbreviation;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code SchoolResidence}."},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"     * @param schoolResidence A valid SchoolResidence."},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    public SchoolResidence(String schoolResidence) {"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(schoolResidence);"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidResidence(schoolResidence), MESSAGE_CONSTRAINTS);"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        // only takes in DOES_NOT_LIVE_ON_CAMPUS"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        residenceAbbreviation \u003d ResidenceAbbreviation.valueOf(schoolResidence);"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if the given string is a valid residence."},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"     * @param test the string whose format is to be checked."},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"     * @return true if test is a valid residence, false otherwise."},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidResidence(String test) {"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"            if (test \u003d\u003d null) {"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"                throw new NullPointerException();"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"            return getResidenceAbbreviation().contains(test);"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    public static String getStringResidences() {"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"        return String.join(\",\", getResidenceAbbreviation());"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"    public static List\u003cString\u003e getResidenceAbbreviation() { // DOES_NOT_LIVE_ON_CAMPUS"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"        String[] residenceArray \u003d Stream.of(SchoolResidence.ResidenceAbbreviation.values())"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"                .map(SchoolResidence.ResidenceAbbreviation::name).toArray(String[]::new);"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"        return Arrays.asList(residenceArray);"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"        return this.residenceAbbreviation.toString(); // \"DOES NOT LIVE ON CAMPUS\""},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"    public String toSavingString() {"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"        return this.residenceAbbreviation.name();"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof SchoolResidence // instanceof handles nulls"},{"lineNumber":86,"author":{"gitId":"yienyoong"},"content":"                \u0026\u0026 residenceAbbreviation \u003d\u003d ((SchoolResidence) other).residenceAbbreviation); // state check"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":91,"author":{"gitId":"yienyoong"},"content":"        return residenceAbbreviation.hashCode();"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":62,"yienyoong":31}},{"path":"src/main/java/seedu/address/model/person/SchoolResidenceContainsKeywords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":" * Tests that a {@code Person}\u0027s {@code Residence} matches the keyword given."},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"public class SchoolResidenceContainsKeywords implements Predicate\u003cPerson\u003e {"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"    public SchoolResidenceContainsKeywords(String keywords) {"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"        this.keyword \u003d keywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"    public boolean test(Person person) {"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"        return keyword.equals((person.getSchoolResidence().toString()));"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"                || (other instanceof SchoolResidenceContainsKeywords // instanceof handles nulls"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"                \u0026\u0026 keyword.equals(((SchoolResidenceContainsKeywords) other).keyword)); // state check"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":27}},{"path":"src/main/java/seedu/address/model/person/VaccinationStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"import java.util.stream.Stream;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"public class VaccinationStatus {"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"    public enum VaccinationStatusAbbreviation {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        VACCINATED, NOT_VACCINATED"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Vaccination status should only be of the format \u0027vaccinated\u0027 \""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"            + \"or \u0027not vaccinated\u0027 \";"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"    public final VaccinationStatusAbbreviation status; // enum for Vaccination status"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    public final String textUI; // string to display on the GUI"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code VaccinationStatus}."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     * @param vaccinationStatus A valid VaccinationStatus."},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    public VaccinationStatus(String vaccinationStatus) {"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(vaccinationStatus);"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidStatus(vaccinationStatus), MESSAGE_CONSTRAINTS);"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        if (vaccinationStatus.equals(\"vaccinated\")) {"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"            status \u003d VaccinationStatusAbbreviation.VACCINATED;"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            textUI \u003d vaccinationStatus;"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"            status \u003d VaccinationStatusAbbreviation.NOT_VACCINATED;"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"            textUI \u003d vaccinationStatus;"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if the given string is a valid status."},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"     * @param test the string whose format is to be checked."},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"     * @return true if test is a valid statis, false otherwise."},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"        test \u003d test.replaceAll(\" \", \"_\").toUpperCase();"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":"            boolean result \u003d VaccinationStatusAbbreviation.valueOf(test) \u003d\u003d VaccinationStatusAbbreviation.NOT_VACCINATED"},{"lineNumber":49,"author":{"gitId":"SiTingST"},"content":"                    || VaccinationStatusAbbreviation.valueOf(test) \u003d\u003d VaccinationStatusAbbreviation.VACCINATED;"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"            return result;"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"            return false;"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":"    public static List\u003cString\u003e getVaccinationStatusAbbreviation() {"},{"lineNumber":57,"author":{"gitId":"SiTingST"},"content":"        String[] statusArray \u003d Stream.of(VaccinationStatus.VaccinationStatusAbbreviation.values())"},{"lineNumber":58,"author":{"gitId":"SiTingST"},"content":"                .map(VaccinationStatus.VaccinationStatusAbbreviation::name).toArray(String[]::new);"},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":"        return Arrays.asList(statusArray);"},{"lineNumber":60,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"        return status.toString();"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof VaccinationStatus // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"                \u0026\u0026 status \u003d\u003d ((VaccinationStatus) other).status); // state check"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"        return status.hashCode();"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":53,"yienyoong":9,"SiTingST":16}},{"path":"src/main/java/seedu/address/model/person/VaccinationStatusContainsKeywords.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import java.util.function.Predicate;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":" * Tests that a {@code Person}\u0027s {@code Vaccination Status} matches the keyword given."},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"public class VaccinationStatusContainsKeywords implements Predicate\u003cPerson\u003e {"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"    private final String keyword;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"    public VaccinationStatusContainsKeywords(String keywords) {"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"        this.keyword \u003d keywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"    public boolean test(Person person) {"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"        return keyword.equals((person.getVaccinationStatus().toString()));"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"    public boolean equals(Object other) {"},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"                || (other instanceof VaccinationStatusContainsKeywords // instanceof handles nulls"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"                \u0026\u0026 keyword.equals(((VaccinationStatusContainsKeywords) other).keyword)); // state check"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":27}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Alex Yeoh\"), new MatriculationNumber(\"A0182345T\"), new Faculty(\"COM\"),"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 30 Geylang Street 29, #06-40\"), new VaccinationStatus(\"vaccinated\"),"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"                    new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Bernice Yu\"), new MatriculationNumber(\"A0175678U\"), new Faculty(\"COM\"),"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"not vaccinated\"), new MedicalDetails(\"shellfish allergy\"),"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"                    new SchoolResidence(\"PGPH\")),"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new MatriculationNumber(\"A0164567V\"), new Faculty(\"COM\"),"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new VaccinationStatus(\"vaccinated\"),"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"                    new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"David Li\"), new MatriculationNumber(\"A0209875D\"), new Faculty(\"COM\"),"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new VaccinationStatus(\"not vaccinated\"),"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"                    new MedicalDetails(\"history of anaphylaxis\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new MatriculationNumber(\"A0214432E\"), new Faculty(\"COM\"),"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 47 Tampines Street 20, #17-35\"), new VaccinationStatus(\"vaccinated\"),"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"                    new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new MatriculationNumber(\"A0221234N\"), new Faculty(\"COM\"),"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"                    new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new VaccinationStatus(\"not vaccinated\"),"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"                    new MedicalDetails(\"penicillin allergy\"), new SchoolResidence(\"PGPH\"))"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":30,"-":27}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    private final String matriculationNumber;"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    private final String faculty;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    private final String vaccinationStatus;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    private final String medicalDetails;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    private final String schoolResidence;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"matriculationNumber\") String matriculationNumber,"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"faculty\") String faculty,"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"phone\") String phone,"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"vaccinationStatus\") String vaccinationStatus,"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"medicalDetails\") String medicalDetails,"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"schoolResidence\") String schoolResidence) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        this.faculty \u003d faculty;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d medicalDetails;"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        this.schoolResidence \u003d schoolResidence;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d source.getMatriculationNumber().value;"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        faculty \u003d source.getFaculty().value;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"        vaccinationStatus \u003d source.getVaccinationStatus().textUI;"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d source.getMedicalDetails().value;"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"        schoolResidence \u003d source.getSchoolResidence().residenceAbbreviation.name();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"        if (matriculationNumber \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"                    MatriculationNumber.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MatriculationNumber.isValidMatric(matriculationNumber)) {"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"        final MatriculationNumber modelMatric \u003d new MatriculationNumber(matriculationNumber);"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":97,"author":{"gitId":"fairyinabottle4"},"content":"        if (faculty \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"                    Faculty.class.getSimpleName()));"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"        if (!Faculty.isValidFaculty(faculty)) {"},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(Faculty.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"        final Faculty modelFaculty \u003d new Faculty(faculty);"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"        if (vaccinationStatus \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"                    VaccinationStatus.class.getSimpleName()));"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"        if (!VaccinationStatus.isValidStatus(vaccinationStatus)) {"},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"        final VaccinationStatus modelVacStatus \u003d new VaccinationStatus(vaccinationStatus);"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"        if (medicalDetails \u003d\u003d null) {"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"                    MedicalDetails.class.getSimpleName()));"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MedicalDetails.isValidMedicalDetails(medicalDetails)) {"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"fairyinabottle4"},"content":"        final MedicalDetails modelMedDetails \u003d new MedicalDetails(medicalDetails);"},{"lineNumber":151,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"        if (!SchoolResidence.isValidResidence(schoolResidence)) {"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":156,"author":{"gitId":"fairyinabottle4"},"content":"        final SchoolResidence modelSchoolRes \u003d new SchoolResidence(schoolResidence);"},{"lineNumber":157,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":158,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(modelName, modelMatric, modelFaculty, modelPhone, modelEmail, modelAddress, modelVacStatus,"},{"lineNumber":159,"author":{"gitId":"fairyinabottle4"},"content":"                modelMedDetails, modelSchoolRes);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":74,"yienyoong":2,"-":86}},{"path":"src/main/java/seedu/address/ui/AppointmentCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"public class AppointmentCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    private static final String FXML \u003d \"AppointmentListCard.fxml\";"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    public final Appointment appointment;"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    private HBox cardPane;"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"    private Label id;"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    private Label date;"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    private Label matriculationNumber;"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    private Label time;"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"    public AppointmentCard(Appointment appointment, int displayedIndex) {"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        super(FXML);"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"        this.appointment \u003d appointment;"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        date.setText(appointment.getDate().toString());"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        matriculationNumber.setText(appointment.getMatriculationNumber().value);"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        time.setText(String.format(\"%s - %s\", appointment.getStartTime(), appointment.getEndTime()));"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        // instanceof handles nulls"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"            return false;"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        // state check"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"        AppointmentCard card \u003d (AppointmentCard) other;"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"                \u0026\u0026 appointment.equals(card.appointment);"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":66}},{"path":"src/main/java/seedu/address/ui/AppointmentListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":" * Panel containing the list of persons."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class AppointmentListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    private static final String FXML \u003d \"AppointmentListPanel.fxml\";"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(AppointmentListPanel.class);"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    private ListView\u003cAppointment\u003e appointmentListView;"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    public AppointmentListPanel(ObservableList\u003cAppointment\u003e appointmentList) {"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        appointmentListView.setItems(appointmentList);"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        appointmentListView.setCellFactory(listView -\u003e new AppointmentListViewCell());"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    class AppointmentListViewCell extends ListCell\u003cAppointment\u003e {"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"        protected void updateItem(Appointment appointment, boolean empty) {"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"            super.updateItem(appointment, empty);"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"            if (empty || appointment \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"                setGraphic(null);"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"                setText(null);"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"                setGraphic(new AppointmentCard(appointment, getIndex() + 1).getRoot());"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":49}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w10-4.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":1,"-":101}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.GridPane;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    private AppointmentListPanel appointmentListPanel;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"    private StackPane appointmentListPanelPlaceholder;"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    private VBox container;"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"    private GridPane dataDisplayContainer;"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"        dataDisplayContainer.prefHeightProperty().bind(container.heightProperty());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":104,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":110,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":114,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"picasdan9"},"content":"        appointmentListPanel \u003d new AppointmentListPanel(logic.getFilteredAppointmentList());"},{"lineNumber":131,"author":{"gitId":"picasdan9"},"content":"        appointmentListPanelPlaceholder.getChildren().add(appointmentListPanel.getRoot());"},{"lineNumber":132,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":190,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":17,"-":196}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import javafx.geometry.Insets;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    private static final Background vaccinatedBg \u003d new Background(new BackgroundFill(Color.web(\"#0277BD\"),"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"            new CornerRadii(5.0), new Insets(-5.0)));"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    private static final Background notVaccinatedBg \u003d new Background(new BackgroundFill(Color.web(\"#DD2C00\"),"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"            new CornerRadii(5.0), new Insets(-5.0)));"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"    private Label vaccinationStatus;"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    private Label matriculationNumber;"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"    private Label faculty;"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"    private Label residence;"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"    private Label medicalDetails;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"        vaccinationStatus.setText(person.getVaccinationStatus().textUI);"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"        vaccinationStatus.setBackground("},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"                person.isVaccinated()"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"                        ? vaccinatedBg"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"                        : notVaccinatedBg);"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"        matriculationNumber.setText(person.getMatriculationNumber().value);"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"        faculty.setText(person.getFaculty().value);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"        residence.setText(person.getSchoolResidence().toString());"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"        medicalDetails.setText(person.getMedicalDetails().value);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"yienyoong":5,"picasdan9":20,"-":70}},{"path":"src/main/resources/view/AppointmentListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"\u003c?import org.kordamp.ikonli.javafx.FontIcon?\u003e"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"2\"\u003e"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"            \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"            \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"                \u003c/Label\u003e"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"                \u003cLabel fx:id\u003d\"date\" style\u003d\"-fx-label-padding: 0 5 0 0;\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"            \u003c/HBox\u003e"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"            \u003cLabel fx:id\u003d\"matriculationNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matriculationNumber\" /\u003e"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"            \u003cGridPane\u003e"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"                \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"                    \u003cFontIcon iconLiteral\u003d\"fas-clock:12:WHITE\" /\u003e"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"                \u003c/HBox\u003e"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"                \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$time\""},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"                       GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" /\u003e"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"            \u003c/GridPane\u003e"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        \u003c/VBox\u003e"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        \u003crowConstraints\u003e"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"            \u003cRowConstraints /\u003e"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        \u003c/rowConstraints\u003e"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"picasdan9":48}},{"path":"src/main/resources/view/AppointmentListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"    \u003cListView fx:id\u003d\"appointmentListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"picasdan9":8}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"picasdan9"},"content":".label_with_icon {"},{"lineNumber":136,"author":{"gitId":"picasdan9"},"content":"    -fx-padding: 0 0 0 5;"},{"lineNumber":137,"author":{"gitId":"picasdan9"},"content":"}"},{"lineNumber":138,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}"},{"lineNumber":209,"author":{"gitId":"-"},"content":""},{"lineNumber":210,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":215,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":216,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":217,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":218,"author":{"gitId":"-"},"content":" */"},{"lineNumber":219,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":233,"author":{"gitId":"-"},"content":"}"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  -fx-background-color: white;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":244,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":246,"author":{"gitId":"-"},"content":"}"},{"lineNumber":247,"author":{"gitId":"-"},"content":""},{"lineNumber":248,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":249,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":250,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":252,"author":{"gitId":"-"},"content":"}"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}"},{"lineNumber":266,"author":{"gitId":"-"},"content":""},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":269,"author":{"gitId":"-"},"content":"}"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":279,"author":{"gitId":"-"},"content":"}"},{"lineNumber":280,"author":{"gitId":"-"},"content":""},{"lineNumber":281,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":290,"author":{"gitId":"-"},"content":"}"},{"lineNumber":291,"author":{"gitId":"-"},"content":""},{"lineNumber":292,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":295,"author":{"gitId":"-"},"content":"}"},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":298,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}"},{"lineNumber":309,"author":{"gitId":"-"},"content":""},{"lineNumber":310,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}"},{"lineNumber":313,"author":{"gitId":"-"},"content":""},{"lineNumber":314,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}"},{"lineNumber":318,"author":{"gitId":"-"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"}"},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":329,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":331,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}"},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"#filterField, #personListPanel, #personWebpage {"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":337,"author":{"gitId":"-"},"content":"}"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":340,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":342,"author":{"gitId":"-"},"content":"}"},{"lineNumber":343,"author":{"gitId":"-"},"content":""},{"lineNumber":344,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"}"},{"lineNumber":348,"author":{"gitId":"-"},"content":""},{"lineNumber":349,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":352,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":353,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":354,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":356,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":4,"-":352}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"         title\u003d\"Vax@NUS\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003cicons\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"      \u003cVBox fx:id\u003d\"container\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        \u003cGridPane fx:id\u003d\"dataDisplayContainer\" minWidth\u003d\"340\" prefWidth\u003d\"340\"\u003e"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"          \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" GridPane.vgrow\u003d\"ALWAYS\""},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"                GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"          \u003c/VBox\u003e"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"          \u003cVBox fx:id\u003d\"appointmentList\" styleClass\u003d\"pane-with-border\" GridPane.vgrow\u003d\"ALWAYS\""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"                GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\"\u003e"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"            \u003cpadding\u003e"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"            \u003c/padding\u003e"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"            \u003cStackPane fx:id\u003d\"appointmentListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"          \u003c/VBox\u003e"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"          \u003ccolumnConstraints\u003e"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"50\" /\u003e"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"            \u003cColumnConstraints hgrow\u003d\"ALWAYS\" percentWidth\u003d\"50\" /\u003e"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"          \u003c/columnConstraints\u003e"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"        \u003c/GridPane\u003e"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":72,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"fairyinabottle4":1,"picasdan9":18,"-":56}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"\u003c?import org.kordamp.ikonli.javafx.FontIcon?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\" spacing\u003d\"2\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"name\" style\u003d\"-fx-label-padding: 0 5 0 0;\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"vaccinationStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$vaccinationStatus\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"      \u003cLabel fx:id\u003d\"matriculationNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$matriculationNumber\" /\u003e"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"      \u003cGridPane\u003e"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"0\"\u003e"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-school:12:WHITE\" /\u003e"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"faculty\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$faculty\""},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"0\" /\u003e"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"1\"\u003e"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-phone-alt:13:WHITE\" /\u003e"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$phone\""},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\" /\u003e"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"2\"\u003e"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-home:15:WHITE\" /\u003e"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$address\""},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"3\"\u003e"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-envelope:14:WHITE\" /\u003e"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$email\""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"3\" /\u003e"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"4\"\u003e"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-building:15:WHITE\" /\u003e"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"residence\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$residence\""},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"4\" /\u003e"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"        \u003cHBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\" GridPane.rowIndex\u003d\"5\"\u003e"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"          \u003cFontIcon iconLiteral\u003d\"fas-file-medical:15:WHITE\" /\u003e"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"        \u003c/HBox\u003e"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        \u003cLabel fx:id\u003d\"medicalDetails\" styleClass\u003d\"cell_small_label, label_with_icon\" text\u003d\"\\$medicalDetails\""},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"               GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"5\" /\u003e"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"      \u003c/GridPane\u003e"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"      \u003crowConstraints\u003e"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"         \u003cRowConstraints /\u003e"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"      \u003c/rowConstraints\u003e"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"picasdan9":51,"-":28}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"COM\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"COM\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    \"address\": \"4th street\","},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":11,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"COM\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"shellfish allergy\","},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A4567890E\","},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"DNUS\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":23,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A5678901F\","},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"USP\","},{"lineNumber":27,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"USP\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A6789012G\","},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"SCALE\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"pollen allergy\","},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A7890123H\","},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"BIZ\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":48,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A8901234I\","},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"ENG\","},{"lineNumber":57,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"bee sting allergy\","},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A9012345J\","},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    \"faculty\" : \"MED\","},{"lineNumber":67,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":68,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":69,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":73,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":35,"-":39}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_NONEXISTENT_MATRIC_NUM;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESIDENCE_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"        String deleteCommand \u003d \"deleteStud A1231234A\";"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"        assertCommandException(deleteCommand, MESSAGE_NONEXISTENT_MATRIC_NUM);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRIC_DESC_AMY + FACULTY_DESC_AMY"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + STATUS_DESC_AMY + DETAILS_DESC_AMY"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"                + RESIDENCE_DESC_AMY;"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":8,"yienyoong":3,"SiTingST":1,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/AddAppointmentCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import java.util.function.Predicate;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"public class AddAppointmentCommandTest {"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    public void constructor_nullAppointment_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddAppointmentCommand(null));"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    public void execute_appointmentAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        ModelStubAcceptingAppointmentAdded modelStub \u003d new ModelStubAcceptingAppointmentAdded(validPerson);"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder()"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"                .withMatric(validPerson.getMatriculationNumber().toString()).build();"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        CommandResult commandResult \u003d new AddAppointmentCommand(validAppointment).execute(modelStub);"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        assertEquals(String.format(AddAppointmentCommand.MESSAGE_SUCCESS, validAppointment),"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"                commandResult.getFeedbackToUser());"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"        assertEquals(Arrays.asList(validAppointment), modelStub.appointmentsAdded);"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"    public void execute_duplicateAppointment_throwsCommandException() {"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"        Appointment validAppointment \u003d new AppointmentBuilder()"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"                .withMatric(validPerson.getMatriculationNumber().toString()).build();"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        AddAppointmentCommand addAppointmentCommand \u003d new AddAppointmentCommand(validAppointment);"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        ModelStub modelStub \u003d new ModelStubWithPersonAndAppointment(validPerson, validAppointment);"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"        assertThrows(CommandException.class,"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"                AddAppointmentCommand.MESSAGE_DUPLICATE_APPOINTMENT, () -\u003e addAppointmentCommand.execute(modelStub));"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"    public void equals() {"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        Appointment appt1 \u003d new AppointmentBuilder().withMatric(\"A1234567X\").build();"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"        Appointment appt2 \u003d new AppointmentBuilder().withMatric(\"A7654321Y\").build();"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"        AddAppointmentCommand addAppt1Command \u003d new AddAppointmentCommand(appt1);"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"        AddAppointmentCommand addAppt2Command \u003d new AddAppointmentCommand(appt2);"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        // same object -\u003e returns true"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"        assertTrue(addAppt1Command.equals(addAppt1Command));"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"        AddAppointmentCommand addAppt1CommandCopy \u003d new AddAppointmentCommand(appt1);"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"        assertTrue(addAppt1Command.equals(addAppt1CommandCopy));"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"        // different types -\u003e returns false"},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"        assertFalse(addAppt1Command.equals(1));"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"        assertFalse(addAppt1Command.equals(null));"},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"        // different person -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"        assertFalse(addAppt1Command.equals(addAppt2Command));"},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"    private class ModelStub implements Model {"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":96,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"picasdan9"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":98,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":99,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":106,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":107,"author":{"gitId":"picasdan9"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":108,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":109,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":111,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":112,"author":{"gitId":"picasdan9"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":113,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":114,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":116,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":117,"author":{"gitId":"picasdan9"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":118,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":119,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":121,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":122,"author":{"gitId":"picasdan9"},"content":"        public void addPerson(Person person) {"},{"lineNumber":123,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":124,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":126,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":127,"author":{"gitId":"picasdan9"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":128,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":129,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":131,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":132,"author":{"gitId":"picasdan9"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":133,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":134,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":136,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":137,"author":{"gitId":"picasdan9"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":138,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":139,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":141,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":142,"author":{"gitId":"picasdan9"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":143,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":144,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":146,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":147,"author":{"gitId":"picasdan9"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":148,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":149,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":151,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":152,"author":{"gitId":"picasdan9"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":153,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":154,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":156,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":157,"author":{"gitId":"picasdan9"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":158,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":159,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":161,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":162,"author":{"gitId":"picasdan9"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":163,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":164,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":166,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":167,"author":{"gitId":"picasdan9"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {"},{"lineNumber":168,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":169,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":171,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":172,"author":{"gitId":"picasdan9"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":173,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":174,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":176,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":177,"author":{"gitId":"picasdan9"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":178,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":179,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":182,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"picasdan9"},"content":"     * A Model stub that contains a single appointment."},{"lineNumber":184,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"picasdan9"},"content":"    private class ModelStubWithPersonAndAppointment extends ModelStub {"},{"lineNumber":186,"author":{"gitId":"picasdan9"},"content":"        private final Person person;"},{"lineNumber":187,"author":{"gitId":"picasdan9"},"content":"        private final Appointment appointment;"},{"lineNumber":188,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":189,"author":{"gitId":"picasdan9"},"content":"        ModelStubWithPersonAndAppointment(Person person, Appointment appointment) {"},{"lineNumber":190,"author":{"gitId":"picasdan9"},"content":"            requireAllNonNull(person, appointment);"},{"lineNumber":191,"author":{"gitId":"picasdan9"},"content":"            this.person \u003d person;"},{"lineNumber":192,"author":{"gitId":"picasdan9"},"content":"            this.appointment \u003d appointment;"},{"lineNumber":193,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":195,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":196,"author":{"gitId":"picasdan9"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":197,"author":{"gitId":"picasdan9"},"content":"            requireNonNull(person);"},{"lineNumber":198,"author":{"gitId":"picasdan9"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":199,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":201,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":202,"author":{"gitId":"picasdan9"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":203,"author":{"gitId":"picasdan9"},"content":"            requireNonNull(appointment);"},{"lineNumber":204,"author":{"gitId":"picasdan9"},"content":"            return this.appointment.isSameAppointment(appointment);"},{"lineNumber":205,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":208,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"picasdan9"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":210,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"picasdan9"},"content":"    private class ModelStubAcceptingAppointmentAdded extends ModelStub {"},{"lineNumber":212,"author":{"gitId":"picasdan9"},"content":"        final ArrayList\u003cPerson\u003e persons \u003d new ArrayList\u003c\u003e();"},{"lineNumber":213,"author":{"gitId":"picasdan9"},"content":"        final ArrayList\u003cAppointment\u003e appointmentsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":214,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":215,"author":{"gitId":"picasdan9"},"content":"        public ModelStubAcceptingAppointmentAdded(Person person) {"},{"lineNumber":216,"author":{"gitId":"picasdan9"},"content":"            persons.add(person);"},{"lineNumber":217,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":219,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":220,"author":{"gitId":"picasdan9"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":221,"author":{"gitId":"picasdan9"},"content":"            requireNonNull(appointment);"},{"lineNumber":222,"author":{"gitId":"picasdan9"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::isSameAppointment);"},{"lineNumber":223,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":225,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":226,"author":{"gitId":"picasdan9"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {"},{"lineNumber":227,"author":{"gitId":"picasdan9"},"content":"            requireNonNull(appointment);"},{"lineNumber":228,"author":{"gitId":"picasdan9"},"content":"            return appointmentsAdded.stream().anyMatch(appointment::doesTimeOverlap);"},{"lineNumber":229,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":231,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":232,"author":{"gitId":"picasdan9"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":233,"author":{"gitId":"picasdan9"},"content":"            requireNonNull(appointment);"},{"lineNumber":234,"author":{"gitId":"picasdan9"},"content":"            appointmentsAdded.add(appointment);"},{"lineNumber":235,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":237,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":238,"author":{"gitId":"picasdan9"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":239,"author":{"gitId":"picasdan9"},"content":"            return new AddressBook();"},{"lineNumber":240,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":243,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":243}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":152,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":153,"author":{"gitId":"picasdan9"},"content":"        public boolean hasAppointment(Appointment appointment) {"},{"lineNumber":154,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":155,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":157,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"picasdan9"},"content":"        public boolean hasOverlappingAppointment(Appointment appointment) {"},{"lineNumber":159,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":160,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":162,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":163,"author":{"gitId":"picasdan9"},"content":"        public void addAppointment(Appointment appointment) {"},{"lineNumber":164,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":165,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":167,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":168,"author":{"gitId":"picasdan9"},"content":"        public ObservableList\u003cAppointment\u003e getFilteredAppointmentList() {"},{"lineNumber":169,"author":{"gitId":"picasdan9"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":170,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":175,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":193,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"picasdan9":21,"-":194}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_MATRIC_AMY \u003d \"A0199264N\";"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_MATRIC_BOB \u003d \"A0245431K\";"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_FACULTY_AMY \u003d \"MUSIC\";"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_FACULTY_BOB \u003d \"FASS\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_STATUS_AMY \u003d \"vaccinated\";"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_STATUS_BOB \u003d \"not vaccinated\";"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_DETAILS_AMY \u003d \"none\";"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_DETAILS_BOB \u003d \"peanut allergy\";"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_RESIDENCE_AMY \u003d \"RC4\";"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_RESIDENCE_BOB \u003d \"CAPT\";"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_DATE_AMY_APPOINTMENT \u003d \"2021-01-01\";"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_DATE_BOB_APPOINTMENT \u003d \"2021-01-02\";"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_START_TIME_AMY_APPOINTMENT \u003d \"16:00\";"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_START_TIME_BOB_APPOINTMENT \u003d \"17:00\";"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_END_TIME_AMY_APPOINTMENT \u003d \"16:30\";"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    public static final String VALID_END_TIME_BOB_APPOINTMENT \u003d \"17:30\";"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MATRIC_DESC_AMY \u003d \" \" + PREFIX_MATRICULATION_NUMBER + VALID_MATRIC_AMY;"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MATRIC_DESC_BOB \u003d \" \" + PREFIX_MATRICULATION_NUMBER + VALID_MATRIC_BOB;"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String FACULTY_DESC_AMY \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_AMY;"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String FACULTY_DESC_BOB \u003d \" \" + PREFIX_FACULTY + VALID_FACULTY_BOB;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_VACCINATION_STATUS + VALID_STATUS_AMY;"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_VACCINATION_STATUS + VALID_STATUS_BOB;"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DETAILS_DESC_AMY \u003d \" \" + PREFIX_MEDICAL_DETAILS + VALID_DETAILS_AMY;"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DETAILS_DESC_BOB \u003d \" \" + PREFIX_MEDICAL_DETAILS + VALID_DETAILS_BOB;"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String RESIDENCE_DESC_AMY \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + VALID_RESIDENCE_AMY;"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String RESIDENCE_DESC_BOB \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + VALID_RESIDENCE_BOB;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"    public static final String DATE_DESC_AMY_APPOINTMENT \u003d \" \" + PREFIX_DATE + VALID_DATE_AMY_APPOINTMENT;"},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"    public static final String DATE_DESC_BOB_APPOINTMENT \u003d \" \" + PREFIX_DATE + VALID_DATE_BOB_APPOINTMENT;"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"    public static final String START_TIME_DESC_AMY_APPOINTMENT \u003d \" \" + PREFIX_START_TIME"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"            + VALID_START_TIME_AMY_APPOINTMENT;"},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"    public static final String START_TIME_DESC_BOB_APPOINTMENT \u003d \" \" + PREFIX_START_TIME"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":"            + VALID_START_TIME_BOB_APPOINTMENT;"},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"    public static final String END_TIME_DESC_AMY_APPOINTMENT \u003d \" \" + PREFIX_END_TIME"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"            + VALID_END_TIME_AMY_APPOINTMENT;"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"    public static final String END_TIME_DESC_BOB_APPOINTMENT \u003d \" \" + PREFIX_END_TIME"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"            + VALID_END_TIME_BOB_APPOINTMENT;"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_MATRIC_DESC \u003d \" \" + PREFIX_MATRICULATION_NUMBER"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"            + \"A01Z34567F\"; // \u0027Z\u0027 not allowed in matriculation number"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_FACULTY_DESC \u003d \" \" + PREFIX_FACULTY + \"SOC\";"},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_VACCINATION_STATUS + \"v@ccin@ted\";"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_DETAILS_DESC \u003d \" \" + PREFIX_MEDICAL_DETAILS;"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_RESIDENCE_DESC \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + \"rc5\";"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":"    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"next week\";"},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"twelve o\u0027clock\";"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"30min later\";"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withMatric(VALID_MATRIC_AMY)"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"                .withFaculty(VALID_FACULTY_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_AMY).withMedDetails(VALID_DETAILS_AMY)"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"                .withSchoolRes(VALID_RESIDENCE_AMY).build();"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withMatric(VALID_MATRIC_BOB)"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"                .withFaculty(VALID_FACULTY_BOB)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_BOB).withMedDetails(VALID_DETAILS_BOB)"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"                .withSchoolRes(VALID_RESIDENCE_BOB).build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":161,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":171,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":176,"author":{"gitId":"SiTingST"},"content":"        final String matriculationNumber \u003d person.getMatriculationNumber().toString();"},{"lineNumber":177,"author":{"gitId":"SiTingST"},"content":"        model.updateFilteredPersonList(new MatriculationNumberContainsKeywordsPredicate(matriculationNumber));"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"yienyoong"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person with the given {@code matriculationNumber} in the"},{"lineNumber":184,"author":{"gitId":"yienyoong"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":185,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"yienyoong"},"content":"    public static void showPersonWithMatricNum(Model model, MatriculationNumber matriculationNumber) {"},{"lineNumber":187,"author":{"gitId":"yienyoong"},"content":"        assertTrue(MatriculationNumber.isValidMatric(matriculationNumber.toString()));"},{"lineNumber":188,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":189,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e personListTest \u003d model.getFilteredPersonList();"},{"lineNumber":190,"author":{"gitId":"yienyoong"},"content":"        Person person \u003d null;"},{"lineNumber":191,"author":{"gitId":"yienyoong"},"content":"        for (Person p : personListTest) {"},{"lineNumber":192,"author":{"gitId":"yienyoong"},"content":"            if (p.getMatriculationNumber().equals(matriculationNumber)) {"},{"lineNumber":193,"author":{"gitId":"yienyoong"},"content":"                person \u003d p;"},{"lineNumber":194,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":197,"author":{"gitId":"yienyoong"},"content":"        assertTrue(person !\u003d null);"},{"lineNumber":198,"author":{"gitId":"yienyoong"},"content":"        final String[] splitName \u003d person.getMatriculationNumber().toString().split(\"\\\\s+\");"},{"lineNumber":199,"author":{"gitId":"yienyoong"},"content":"        model.updateFilteredPersonList(new MatriculationNumberContainsKeywordsPredicate((splitName[0])));"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":40,"yienyoong":19,"SiTingST":3,"picasdan9":22,"-":120}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonWithMatricNum;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FOURTH_PERSON;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_SECOND_PERSON;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    public void execute_validMatricNumUnfilteredList_success() {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e personListTest \u003d model.getFilteredPersonList();"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        MatriculationNumber matricNumberToDelete \u003d new MatriculationNumber(MATRIC_NUMBER_FOURTH_PERSON);"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        Person personToDelete \u003d DeleteCommand.getPerson(personListTest, matricNumberToDelete);"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(matricNumberToDelete);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    public void execute_invalidMatricNumUnfilteredList_throwsCommandException() {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_NONEXISTENT_MATRIC_NUM);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"    public void execute_validMatricNumFilteredList_success() {"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"        MatriculationNumber matricNumberToDelete \u003d new MatriculationNumber(MATRIC_NUMBER_FOURTH_PERSON);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        showPersonWithMatricNum(model, matricNumberToDelete);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        List\u003cPerson\u003e personListTest \u003d model.getFilteredPersonList();"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        Person personToDelete \u003d DeleteCommand.getPerson(personListTest, matricNumberToDelete);"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(matricNumberToDelete);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"    //    @Test"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"    //    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"    //        MatriculationNumber matricNumberToDelete \u003d new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON);"},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"    //        // showPersonWithMatricNum(model, matricNumberToDelete);"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"    //"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"    //        DeleteCommand deleteCommand \u003d new DeleteCommand(matricNumberToDelete);"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"    //"},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_NONEXISTENT_MATRIC_NUM);"},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":"    //    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":87,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON));"},{"lineNumber":88,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_SECOND_PERSON));"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":94,"author":{"gitId":"yienyoong"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON));"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":34,"-":81}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"                .build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"                .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_OUT_OF_INDEX);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_OUT_OF_INDEX);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":4,"-":168}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.FacultyContainsKeywords;"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.SchoolResidenceContainsKeywords;"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.VaccinationStatusContainsKeywords;"},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":" * Contains integration tests (interaction with the Model) for {@code FilterCommand}."},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":" */"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"public class FilterCommandTest {"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"    public void equals() {"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"        VaccinationStatusContainsKeywords vaccinationPredicate \u003d"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"                new VaccinationStatusContainsKeywords(\"vaccinated\");"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"        FacultyContainsKeywords facultyPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"                new FacultyContainsKeywords(\"COM\");"},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":"        SchoolResidenceContainsKeywords schoolResidencePredicate \u003d"},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"                new SchoolResidenceContainsKeywords(\"RVRC\");"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findByVaccinationStatus \u003d new FilterCommand(vaccinationPredicate);"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findByFaculty \u003d new FilterCommand(facultyPredicate);"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findBySchoolResidence \u003d new FilterCommand(schoolResidencePredicate);"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findByVaccinationStatus.equals(findByVaccinationStatus));"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findByVaccinationStatusCopy \u003d new FilterCommand(vaccinationPredicate);"},{"lineNumber":47,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findByVaccinationStatus.equals(findByVaccinationStatusCopy));"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":49,"author":{"gitId":"SiTingST"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByVaccinationStatus.equals(1));"},{"lineNumber":51,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":52,"author":{"gitId":"SiTingST"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByVaccinationStatus.equals(null));"},{"lineNumber":54,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":55,"author":{"gitId":"SiTingST"},"content":"        // different person -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByVaccinationStatus.equals(findByFaculty));"},{"lineNumber":57,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":58,"author":{"gitId":"SiTingST"},"content":"        // same object -\u003e returns true"},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findByFaculty.equals(findByFaculty));"},{"lineNumber":60,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":61,"author":{"gitId":"SiTingST"},"content":"        // same values -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findByFacultyCopy \u003d new FilterCommand(facultyPredicate);"},{"lineNumber":63,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findByFaculty.equals(findByFacultyCopy));"},{"lineNumber":64,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":65,"author":{"gitId":"SiTingST"},"content":"        // different types -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByFaculty.equals(1));"},{"lineNumber":67,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":68,"author":{"gitId":"SiTingST"},"content":"        // null -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByFaculty.equals(null));"},{"lineNumber":70,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":71,"author":{"gitId":"SiTingST"},"content":"        // different person -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findByFaculty.equals(findBySchoolResidence));"},{"lineNumber":73,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":74,"author":{"gitId":"SiTingST"},"content":"        // same object -\u003e returns true"},{"lineNumber":75,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findBySchoolResidence.equals(findBySchoolResidence));"},{"lineNumber":76,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":77,"author":{"gitId":"SiTingST"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitId":"SiTingST"},"content":"        FilterCommand findBySchoolResidenceCopy \u003d new FilterCommand(schoolResidencePredicate);"},{"lineNumber":79,"author":{"gitId":"SiTingST"},"content":"        assertTrue(findBySchoolResidence.equals(findBySchoolResidenceCopy));"},{"lineNumber":80,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":81,"author":{"gitId":"SiTingST"},"content":"        // different types -\u003e returns false"},{"lineNumber":82,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findBySchoolResidence.equals(1));"},{"lineNumber":83,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":84,"author":{"gitId":"SiTingST"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findBySchoolResidence.equals(null));"},{"lineNumber":86,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":87,"author":{"gitId":"SiTingST"},"content":"        // different person -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"SiTingST"},"content":"        assertFalse(findBySchoolResidence.equals(findByFaculty));"},{"lineNumber":89,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":90,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":92,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"SiTingST"},"content":"    public void execute_zeroKeywords_noPersonFoundFilterByVaccinationStatus() {"},{"lineNumber":94,"author":{"gitId":"SiTingST"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":95,"author":{"gitId":"SiTingST"},"content":"        VaccinationStatusContainsKeywords vaccinationPredicate \u003d new VaccinationStatusContainsKeywords(\"\");"},{"lineNumber":96,"author":{"gitId":"SiTingST"},"content":"        FilterCommand command \u003d new FilterCommand(vaccinationPredicate);"},{"lineNumber":97,"author":{"gitId":"SiTingST"},"content":"        expectedModel.updateFilteredPersonList(vaccinationPredicate);"},{"lineNumber":98,"author":{"gitId":"SiTingST"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"SiTingST"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":100,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":102,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":103,"author":{"gitId":"SiTingST"},"content":"    public void execute_zeroKeywords_noPersonFoundFilterByFaculty() {"},{"lineNumber":104,"author":{"gitId":"SiTingST"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":105,"author":{"gitId":"SiTingST"},"content":"        FacultyContainsKeywords facultyPredicate \u003d new FacultyContainsKeywords(\"\");"},{"lineNumber":106,"author":{"gitId":"SiTingST"},"content":"        FilterCommand command \u003d new FilterCommand(facultyPredicate);"},{"lineNumber":107,"author":{"gitId":"SiTingST"},"content":"        expectedModel.updateFilteredPersonList(facultyPredicate);"},{"lineNumber":108,"author":{"gitId":"SiTingST"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":109,"author":{"gitId":"SiTingST"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":112,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"SiTingST"},"content":"    public void execute_zeroKeywords_noPersonFoundFilterBySchoolResidence() {"},{"lineNumber":114,"author":{"gitId":"SiTingST"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":115,"author":{"gitId":"SiTingST"},"content":"        SchoolResidenceContainsKeywords schoolResidencePredicate \u003d new SchoolResidenceContainsKeywords(\"\");"},{"lineNumber":116,"author":{"gitId":"SiTingST"},"content":"        FilterCommand command \u003d new FilterCommand(schoolResidencePredicate);"},{"lineNumber":117,"author":{"gitId":"SiTingST"},"content":"        expectedModel.updateFilteredPersonList(schoolResidencePredicate);"},{"lineNumber":118,"author":{"gitId":"SiTingST"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":119,"author":{"gitId":"SiTingST"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":120,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":121}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FIFTH_PERSON;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FOURTH_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class FindCommandTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"                new MatriculationNumberContainsKeywordsPredicate(MATRIC_NUMBER_FOURTH_PERSON);"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"                new MatriculationNumberContainsKeywordsPredicate(MATRIC_NUMBER_FIFTH_PERSON);"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"SiTingST"},"content":"     * Parses {@code userInput} into a {@code MatriculationNumberContainsKeywordsPredicate}."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"SiTingST"},"content":"    private MatriculationNumberContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":70,"author":{"gitId":"SiTingST"},"content":"        return new MatriculationNumberContainsKeywordsPredicate(userInput);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":5,"SiTingST":7,"-":60}},{"path":"src/test/java/seedu/address/logic/commands/statscommands/StatsCommandAllTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandAllTest {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        StatsCommandAll firstCommand \u003d new StatsCommandAll();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        StatsCommandAll secondCommand \u003d new StatsCommandAll();"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"        assertTrue(firstCommand.equals(secondCommand));"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_successful() {"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        String expectedOutput \u003d \"Percentage Vaccinated:\\n\""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"                + \"   PGPH: No available data\\n\""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"                + \"   PGPR: No available data\\n\""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"                + \"   KE7H: No available data\\n\""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"                + \"   SH: No available data\\n\""},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"                + \"   KRH: No available data\\n\""},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"                + \"   TH: No available data\\n\""},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"                + \"   EH: No available data\\n\""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"                + \"   RH: No available data\\n\""},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"                + \"   RVRC: 33.33%\\n\""},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"                + \"   YNC: No available data\\n\""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"                + \"   TC: No available data\\n\""},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"                + \"   CAPT: No available data\\n\""},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"                + \"   RC4: No available data\\n\""},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"                + \"   USP: 100.00%\\n\""},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"                + \"   UTR: No available data\\n\""},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"                + \"   DOES NOT LIVE ON CAMPUS: No available data\\n\""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"                + \"   FASS: No available data\\n\""},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"                + \"   BIZ: 0.00%\\n\""},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"                + \"   COM: 0.00%\\n\""},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"                + \"   SCALE: 100.00%\\n\""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"                + \"   DEN: No available data\\n\""},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"                + \"   SDE: No available data\\n\""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"                + \"   DNUS: 0.00%\\n\""},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                + \"   ENG: 100.00%\\n\""},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"                + \"   ISEP: No available data\\n\""},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                + \"   LAW: No available data\\n\""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"                + \"   MED: 0.00%\\n\""},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"                + \"   MUSIC: No available data\\n\""},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"                + \"   SPH: No available data\\n\""},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"                + \"   SPP: No available data\\n\""},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"                + \"   SCI: No available data\\n\""},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"                + \"   USP: 100.00%\\n\""},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"                + \"   YNC: No available data\\n\";"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        StatsCommandAll statsCommandAll \u003d new StatsCommandAll();"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        assertCommandSuccess(statsCommandAll, expectedModel, expectedOutput, expectedModel);"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":63}},{"path":"src/test/java/seedu/address/logic/commands/statscommands/StatsCommandFacultyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.statscommands.StatsCommandFaculty.MESSAGE_STATS_FAILURE;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandFacultyTest {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty firstCommand \u003d new StatsCommandFaculty(new Faculty(\"SCI\"));"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty secondCommand \u003d new StatsCommandFaculty(new Faculty(\"SCI\"));"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        assertTrue(firstCommand.equals(secondCommand));"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty thirdCommand \u003d new StatsCommandFaculty(new Faculty(\"COM\"));"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty fourthCommand \u003d new StatsCommandFaculty(new Faculty(\"USP\"));"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        assertFalse(thirdCommand.equals(fourthCommand));"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    // test no avaliable data"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_noAvailableData() {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty statsCommandFaculty \u003d new StatsCommandFaculty(new Faculty(\"YNC\"));"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        assertCommandFailure(statsCommandFaculty, expectedModel, MESSAGE_STATS_FAILURE);"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"    // test success"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_success() {"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        String expectedOutput \u003d \"Percentage USP vaccinated: 100.00%\";"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty statsCommandFaculty \u003d new StatsCommandFaculty(new Faculty(\"USP\"));"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        assertCommandSuccess(statsCommandFaculty, expectedModel, expectedOutput, expectedModel);"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":45}},{"path":"src/test/java/seedu/address/logic/commands/statscommands/StatsCommandNusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.statscommands.StatsCommandNus.MESSAGE_STATS_FAILURE;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandNusTest {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    public void equals() {"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        StatsCommandNus firstCommand \u003d new StatsCommandNus();"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        StatsCommandNus secondCommand \u003d new StatsCommandNus();"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        assertTrue(firstCommand.equals(secondCommand));"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_successful() {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        String expectedOutput \u003d \"Percentage NUS vaccinated: 42.86%\";"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        StatsCommandNus statsCommandNus \u003d new StatsCommandNus();"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        assertCommandSuccess(statsCommandNus, expectedModel, expectedOutput, expectedModel);"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_noAvailableData() {"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        StatsCommandNus statsCommandNus \u003d new StatsCommandNus();"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        Model emptyModel \u003d new ModelManager(new AddressBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        assertCommandFailure(statsCommandNus, emptyModel, MESSAGE_STATS_FAILURE);"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":40}},{"path":"src/test/java/seedu/address/logic/commands/statscommands/StatsCommandResidenceTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.commands.statscommands;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.commands.statscommands.StatsCommandResidence.MESSAGE_STATS_FAILURE;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandResidenceTest {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    private static final String VALID_VACCINATED_STATUS_BOB \u003d \"vaccinated\";"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    private static final Person DOES_NOT_LIVE_ON_CAMPUS_BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"            .withFaculty(VALID_FACULTY_BOB).withVacStatus(VALID_VACCINATED_STATUS_BOB)"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            .withMedDetails(VALID_DETAILS_BOB).withMatric(VALID_MATRIC_BOB)"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"            .withSchoolRes(\"DOES_NOT_LIVE_ON_CAMPUS\").build();"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence firstCommand \u003d new StatsCommandResidence(new SchoolResidence(\"RVRC\"));"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence secondCommand \u003d new StatsCommandResidence(new SchoolResidence(\"RVRC\"));"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        assertTrue(firstCommand.equals(secondCommand));"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence thirdCommand \u003d new StatsCommandResidence(new SchoolResidence(\"CAPT\"));"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence fourthCommand \u003d new StatsCommandResidence(new SchoolResidence(\"KRH\"));"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        assertFalse(thirdCommand.equals(fourthCommand));"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    // test no avaliable data"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_noAvailableData() {"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence statsCommandResidence \u003d new StatsCommandResidence(new SchoolResidence(\"UTR\"));"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        assertCommandFailure(statsCommandResidence, expectedModel, MESSAGE_STATS_FAILURE);"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"    // test success"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersons_success() {"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        String expectedOutput \u003d \"Percentage RVRC vaccinated: 33.33%\";"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence statsCommandResidence \u003d new StatsCommandResidence(new SchoolResidence(\"RVRC\"));"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        assertCommandSuccess(statsCommandResidence, expectedModel, expectedOutput, expectedModel);"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"    // test not on campus no data"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersonsNotOnCampus_noAvailableData() {"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"        SchoolResidence notOnCampus \u003d new SchoolResidence(\"DOES_NOT_LIVE_ON_CAMPUS\");"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence statsCommandResidence \u003d new StatsCommandResidence(notOnCampus);"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"        assertCommandFailure(statsCommandResidence, expectedModel, MESSAGE_STATS_FAILURE);"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"    // test not on campus success"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"    public void execute_typicalPersonsNotOnCampus_success() {"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":"        AddressBook ab \u003d getTypicalAddressBook();"},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"        ab.addPerson(DOES_NOT_LIVE_ON_CAMPUS_BOB);"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"        Model newModel \u003d new ModelManager(ab, new UserPrefs());"},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"        String expectedOutput \u003d \"Percentage DOES NOT LIVE ON CAMPUS vaccinated: 100.00%\";"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"        SchoolResidence notOnCampus \u003d new SchoolResidence(\"DOES_NOT_LIVE_ON_CAMPUS\");"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence statsCommandResidence \u003d new StatsCommandResidence(notOnCampus);"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"        assertCommandSuccess(statsCommandResidence, newModel, expectedOutput, newModel);"},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":84,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":85,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":85}},{"path":"src/test/java/seedu/address/logic/parser/AddAppointmentCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_AMY_APPOINTMENT;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_BOB_APPOINTMENT;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_AMY_APPOINTMENT;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_BOB_APPOINTMENT;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_AMY_APPOINTMENT;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_BOB_APPOINTMENT;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB_APPOINTMENT;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BOB_APPOINTMENT;"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BOB_APPOINTMENT;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APPOINTMENT;"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"import seedu.address.logic.commands.AddAppointmentCommand;"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"public class AddAppointmentCommandParserTest {"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    private AddAppointmentCommandParser parser \u003d new AddAppointmentCommandParser();"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        Appointment expectedAppointment \u003d new AppointmentBuilder(BOB_APPOINTMENT).build();"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"        // whitespace only preamble"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"                        + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"                new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        // multiple matriculation numbers - last matric number accepted"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        assertParseSuccess(parser, MATRIC_DESC_AMY + MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"                        + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"            new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"        // multiple dates - last date accepted"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        assertParseSuccess(parser, MATRIC_DESC_BOB + DATE_DESC_AMY_APPOINTMENT + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"                        + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"                new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        // multiple start times  - last start ime accepted"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"        assertParseSuccess(parser, MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"                        + START_TIME_DESC_AMY_APPOINTMENT + START_TIME_DESC_BOB_APPOINTMENT"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"                        + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"                new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        // multiple end times  - last end time accepted"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        assertParseSuccess(parser, MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"                    + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_AMY_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"            new AddAppointmentCommand(expectedAppointment));"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAppointmentCommand.MESSAGE_USAGE);"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"        // missing matriculation number prefix"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, VALID_MATRIC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"                + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT, expectedMessage);"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"        // missing date prefix"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, MATRIC_DESC_BOB + VALID_DATE_BOB_APPOINTMENT"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"                + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT, expectedMessage);"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"        // missing start time prefix"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"                + VALID_START_TIME_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT, expectedMessage);"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"        // missing end time prefix"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, MATRIC_DESC_BOB + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"                + START_TIME_DESC_BOB_APPOINTMENT + VALID_END_TIME_BOB_APPOINTMENT, expectedMessage);"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"        // all prefixes missing"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, VALID_MATRIC_BOB + VALID_DATE_BOB_APPOINTMENT"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":"                + VALID_START_TIME_BOB_APPOINTMENT + VALID_END_TIME_BOB_APPOINTMENT, expectedMessage);"},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":87,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"picasdan9"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":89,"author":{"gitId":"picasdan9"},"content":"        // invalid matriculation number"},{"lineNumber":90,"author":{"gitId":"picasdan9"},"content":"        assertParseFailure(parser, INVALID_MATRIC_DESC + DATE_DESC_BOB_APPOINTMENT"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"                        + START_TIME_DESC_BOB_APPOINTMENT + END_TIME_DESC_BOB_APPOINTMENT,"},{"lineNumber":92,"author":{"gitId":"picasdan9"},"content":"                MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":94}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.FACULTY_DESC_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAILS_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESIDENCE_DESC;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESIDENCE_DESC_AMY;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESIDENCE_DESC_BOB;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple matriculation numbers - last matric number accepted"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + FACULTY_DESC_BOB + MATRIC_DESC_AMY + MATRIC_DESC_BOB"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple faculties - last faculty accepted"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_AMY + FACULTY_DESC_BOB"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_AMY"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple vaccination statuses - last vaccination status accepted"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_AMY + STATUS_DESC_BOB"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"                        + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple medical details  - last medical details accepted"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_AMY"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"                        + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple school residences  - last school residences accepted"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_AMY + RESIDENCE_DESC_BOB,"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":130,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();"},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + MATRIC_DESC_AMY + FACULTY_DESC_AMY + PHONE_DESC_AMY"},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + STATUS_DESC_AMY + DETAILS_DESC_AMY + RESIDENCE_DESC_AMY,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"        // missing matriculation number prefix"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"        // missing faculty prefix"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + VALID_FACULTY_BOB + PHONE_DESC_BOB"},{"lineNumber":150,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + VALID_PHONE_BOB"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":157,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":158,"author":{"gitId":"fairyinabottle4"},"content":"                + VALID_EMAIL_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":161,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":162,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + VALID_ADDRESS_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":163,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"        // missing vaccination status prefix"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + FACULTY_DESC_BOB"},{"lineNumber":166,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + VALID_STATUS_BOB + DETAILS_DESC_BOB,"},{"lineNumber":167,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"fairyinabottle4"},"content":"        // missing medical details prefix"},{"lineNumber":170,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + FACULTY_DESC_BOB"},{"lineNumber":171,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + VALID_DETAILS_BOB,"},{"lineNumber":172,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":175,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRIC_BOB + FACULTY_DESC_BOB + VALID_PHONE_BOB"},{"lineNumber":176,"author":{"gitId":"fairyinabottle4"},"content":"                + VALID_EMAIL_BOB + VALID_ADDRESS_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":182,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":183,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":184,"author":{"gitId":"fairyinabottle4"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":185,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":186,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid matriculation number"},{"lineNumber":187,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRIC_DESC + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":188,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":189,"author":{"gitId":"fairyinabottle4"},"content":"                MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid faculty"},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + INVALID_FACULTY_DESC + PHONE_DESC_BOB"},{"lineNumber":193,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":194,"author":{"gitId":"fairyinabottle4"},"content":"                Faculty.MESSAGE_CONSTRAINTS);"},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":197,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + INVALID_PHONE_DESC"},{"lineNumber":198,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":199,"author":{"gitId":"fairyinabottle4"},"content":"                Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":202,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":203,"author":{"gitId":"fairyinabottle4"},"content":"                        + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":204,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":207,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":208,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":209,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":210,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":211,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid vaccination status"},{"lineNumber":212,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":213,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + INVALID_STATUS_DESC + DETAILS_DESC_BOB"},{"lineNumber":214,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB, VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid medical details"},{"lineNumber":217,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":218,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + INVALID_DETAILS_DESC"},{"lineNumber":219,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":220,"author":{"gitId":"fairyinabottle4"},"content":"                MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid school residence"},{"lineNumber":223,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":224,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":225,"author":{"gitId":"fairyinabottle4"},"content":"                        + INVALID_RESIDENCE_DESC, SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":229,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_DESC_BOB + FACULTY_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":230,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC + STATUS_DESC_BOB + DETAILS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":233,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRIC_DESC_BOB + FACULTY_DESC_BOB"},{"lineNumber":234,"author":{"gitId":"fairyinabottle4"},"content":"                        + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB"},{"lineNumber":235,"author":{"gitId":"fairyinabottle4"},"content":"                        + DETAILS_DESC_BOB, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":143,"-":94}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FIRST_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.VaccinationStatusContainsKeywords;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + MATRIC_NUMBER_FIRST_PERSON);"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        assertEquals(new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON)), command);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""},{"lineNumber":61,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"SiTingST"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":73,"author":{"gitId":"SiTingST"},"content":"        String keywords \u003d \"NOT_VACCINATED\";"},{"lineNumber":74,"author":{"gitId":"SiTingST"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.COMMAND_WORD + \" \" + keywords);"},{"lineNumber":76,"author":{"gitId":"SiTingST"},"content":"        assertEquals(new FilterCommand(new VaccinationStatusContainsKeywords(keywords)), command);"},{"lineNumber":77,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":81,"author":{"gitId":"SiTingST"},"content":"        String keywords \u003d \"A0287543E\";"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":83,"author":{"gitId":"SiTingST"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords);"},{"lineNumber":84,"author":{"gitId":"SiTingST"},"content":"        assertEquals(new FindCommand(new MatriculationNumberContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":4,"SiTingST":15,"-":91}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.testutil.TypicalMatricNumbers.MATRIC_NUMBER_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, MATRIC_NUMBER_FIRST_PERSON,"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"                new DeleteCommand(new MatriculationNumber(MATRIC_NUMBER_FIRST_PERSON)));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yienyoong":4,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAILS_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_FACULTY_DESC;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESIDENCE_DESC;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESIDENCE_AMY;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MATRIC_DESC,"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"                MatriculationNumber.MESSAGE_CONSTRAINTS); // invalid matric number"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_FACULTY_DESC, Faculty.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":97,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \" 1\" + INVALID_DETAILS_DESC, MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RESIDENCE_DESC, SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"                        + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"                .withMatric(VALID_MATRIC_AMY).withFaculty(VALID_FACULTY_AMY)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_AMY).withSchoolRes(VALID_RESIDENCE_AMY)"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"                .withMedDetails(VALID_DETAILS_BOB).build();"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":173,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":174,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":177,"author":{"gitId":"fairyinabottle4"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":32,"-":169}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.FacultyContainsKeywords;"},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.SchoolResidenceContainsKeywords;"},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.VaccinationStatusContainsKeywords;"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"public class FilterCommandParserTest {"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"    private final FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"    public void parse_validArgs_returnsFilterCommandByVaccinationStatus() {"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"        FilterCommand expectedFilterCommandByVaccinationStatus \u003d"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":"                new FilterCommand(new VaccinationStatusContainsKeywords(\"NOT_VACCINATED\"));"},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \"NOT_VACCINATED\", expectedFilterCommandByVaccinationStatus);"},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \" \\n NOT_VACCINATED \\n \\t\", expectedFilterCommandByVaccinationStatus);"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"    public void parse_validArgs_returnsFilterCommandByFaculty() {"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"        FilterCommand expectedFilterCommandByFaculty \u003d"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"                new FilterCommand(new FacultyContainsKeywords(\"MED\"));"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \"MED\", expectedFilterCommandByFaculty);"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \" \\n MED \\n \\t\", expectedFilterCommandByFaculty);"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"SiTingST"},"content":"    public void parse_validArgs_returnsFilterCommandBySchoolResidence() {"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":49,"author":{"gitId":"SiTingST"},"content":"        FilterCommand expectedFilterCommandBySchoolResidence \u003d"},{"lineNumber":50,"author":{"gitId":"SiTingST"},"content":"                new FilterCommand(new SchoolResidenceContainsKeywords(\"CAPT\"));"},{"lineNumber":51,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \"CAPT\", expectedFilterCommandBySchoolResidence);"},{"lineNumber":52,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":53,"author":{"gitId":"SiTingST"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":54,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \" \\n CAPT \\n \\t\", expectedFilterCommandBySchoolResidence);"},{"lineNumber":55,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":57,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"SiTingST"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":60,"author":{"gitId":"SiTingST"},"content":"        // Filter by vaccination status"},{"lineNumber":61,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"not vaccinated\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":62,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":63,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":64,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"vaccinate\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":65,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":66,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":67,"author":{"gitId":"SiTingST"},"content":"        // Filter by faculty"},{"lineNumber":68,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"Science\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":69,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":71,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"Computing\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":72,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":73,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":74,"author":{"gitId":"SiTingST"},"content":"        // Filter by school residence"},{"lineNumber":75,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"RVRT\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":76,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":78,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"College of Alice \u0026 Peter Tan\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":79,"author":{"gitId":"SiTingST"},"content":"                FilterCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":81,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":82}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"    private final FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"     \", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"                new FindCommand(new MatriculationNumberContainsKeywordsPredicate(\"A0202893R\"));"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \"A0202893R\", expectedFindCommand);"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"        assertParseSuccess(parser, \" \\n A0202893R \\n \\t\", expectedFindCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":"    public void parse_invalidArgs_failure() {"},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with all numbers"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"0234567891\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number not starting with alphabet A"},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"E0491242F\" , String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with only starting alphabet of A"},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A\" , String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":47,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":49,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with starting alphabet as A but no ending alphabet"},{"lineNumber":50,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A02942125\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":51,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":52,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":53,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with starting alphabet as A, an ending alphabet but"},{"lineNumber":54,"author":{"gitId":"SiTingST"},"content":"        // more than 9 alphanumeric characters"},{"lineNumber":55,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A023490931T\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":57,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":58,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with starting alphabet as A, an ending alphabet but"},{"lineNumber":60,"author":{"gitId":"SiTingST"},"content":"        // less than 9 alphanumeric characters"},{"lineNumber":61,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":62,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A0234T\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":63,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":64,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":65,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with starting alphabet as A, an ending alphabet"},{"lineNumber":66,"author":{"gitId":"SiTingST"},"content":"        // and 9 alphanumeric characters but the second to eight-th position are alphanumeric characters"},{"lineNumber":67,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":68,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A027E34D\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":69,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":70,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":71,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with starting alphabet as A, no ending alphabet"},{"lineNumber":72,"author":{"gitId":"SiTingST"},"content":"        // and 9 alphanumeric characters but the second to eight-th position are alphanumeric characters"},{"lineNumber":73,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":74,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"A027E341\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":75,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":76,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":77,"author":{"gitId":"SiTingST"},"content":"        // invalid matriculation number with no starting alphabet as A, an ending alphabet"},{"lineNumber":78,"author":{"gitId":"SiTingST"},"content":"        // and 9 alphanumeric characters but the second to eight-th position are alphanumeric characters"},{"lineNumber":79,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":80,"author":{"gitId":"SiTingST"},"content":"        assertParseFailure(parser, \"Q0123683R\", String.format(MatriculationNumber.MESSAGE_CONSTRAINTS,"},{"lineNumber":81,"author":{"gitId":"SiTingST"},"content":"                FindCommand.MESSAGE_USAGE));"},{"lineNumber":82,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"SiTingST":58,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/StatsCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommand;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandAll;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandFaculty;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandNus;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import seedu.address.logic.commands.statscommands.StatsCommandResidence;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"public class StatsCommandParserTest {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private final StatsCommandParser parser \u003d new StatsCommandParser();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    public void parse_validArgs_returnsStatsCommandAll() {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        StatsCommandAll expectedStatsCommandAll \u003d"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"                new StatsCommandAll();"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \"all\", expectedStatsCommandAll);"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \" \\n all   \\n \\t\", expectedStatsCommandAll);"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public void parse_validArgs_returnsStatsCommandNus() {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        StatsCommandNus expectedStatsCommandNus \u003d"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"                new StatsCommandNus();"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \"NUS\", expectedStatsCommandNus);"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \" \\n NUS   \\n \\t\", expectedStatsCommandNus);"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    public void parse_validArgs_returnsStatsCommandFaculty() {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"        StatsCommandFaculty expectedStatsCommandFaculty \u003d"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                new StatsCommandFaculty(new Faculty(\"COM\"));"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \"COM\", expectedStatsCommandFaculty);"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \" \\n COM   \\n \\t\", expectedStatsCommandFaculty);"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"    public void parse_validArgs_returnsStatsCommandResidence() {"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        StatsCommandResidence expectedStatsCommandResidence \u003d"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"                new StatsCommandResidence(new SchoolResidence(\"CAPT\"));"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \"CAPT\", expectedStatsCommandResidence);"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"        assertParseSuccess(parser, \" \\n CAPT   \\n \\t\", expectedStatsCommandResidence);"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"    //"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"    public void parse_invalidArgs_returnsStatsCommandAll() {"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"AlL\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"All\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"ALL\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \" \\n AlL   \\n \\t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"abcd\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":84,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \" \\n 123   \\n \\t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":85,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":86,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":88,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"yienyoong"},"content":"    public void parse_invalidArgs_returnsStatsCommandNus() {"},{"lineNumber":90,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"nus\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":91,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":92,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":93,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"NuS\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":94,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":95,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":96,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"NUs\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":97,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":98,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":99,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"\\n nUs   \\n \\t\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":100,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":101,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":103,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"yienyoong"},"content":"    public void parse_invalidArgs_returnsStatsCommandFaculty() {"},{"lineNumber":105,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"CoM\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":106,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":107,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":109,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"yienyoong"},"content":"    public void parse_invalidArgs_returnsStatsCommandResidence() {"},{"lineNumber":111,"author":{"gitId":"yienyoong"},"content":"        assertParseFailure(parser, \"CapT\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":112,"author":{"gitId":"yienyoong"},"content":"                StatsCommand.MESSAGE_USAGE));"},{"lineNumber":113,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":114}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"picasdan9"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":102,"author":{"gitId":"picasdan9"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"picasdan9"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {"},{"lineNumber":104,"author":{"gitId":"picasdan9"},"content":"            return appointments;"},{"lineNumber":105,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"picasdan9":7,"-":99}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"import seedu.address.model.person.MatriculationNumberContainsKeywordsPredicate;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":119,"author":{"gitId":"SiTingST"},"content":"        String keywords \u003d ALICE.getName().fullName;"},{"lineNumber":120,"author":{"gitId":"SiTingST"},"content":"        modelManager.updateFilteredPersonList("},{"lineNumber":121,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(keywords));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"SiTingST":4,"-":128}},{"path":"src/test/java/seedu/address/model/appointment/AppointmentTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.model.appointment;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB_APPOINTMENT;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BOB_APPOINTMENT;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BOB_APPOINTMENT;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.testutil.TypicalAppointments.ALICE_APPOINTMENT;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.testutil.TypicalAppointments.BOB_APPOINTMENT;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import seedu.address.testutil.AppointmentBuilder;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"public class AppointmentTest {"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    public void isSameAppointment() {"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"        assertTrue(ALICE_APPOINTMENT.isSameAppointment(ALICE_APPOINTMENT));"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.isSameAppointment(null));"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"        // same matriculation number, all other attributes different -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"        Appointment editedAliceAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"                .withDate(VALID_DATE_BOB_APPOINTMENT).withStartTime(VALID_START_TIME_BOB_APPOINTMENT)"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"                .withEndTime(VALID_END_TIME_BOB_APPOINTMENT).build();"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        assertTrue(ALICE_APPOINTMENT.isSameAppointment(editedAliceAppointment));"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        // different matriculation number, all other attributes same -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"        editedAliceAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT).withMatric(VALID_MATRIC_BOB).build();"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.isSameAppointment(editedAliceAppointment));"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        // same values -\u003e returns true"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        Appointment aliceAppointmentCopy \u003d new AppointmentBuilder(ALICE_APPOINTMENT).build();"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        assertTrue(ALICE_APPOINTMENT.equals(aliceAppointmentCopy));"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"        assertTrue(ALICE_APPOINTMENT.equals(ALICE_APPOINTMENT));"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"        // null -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(null));"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        // different type -\u003e returns false"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(5));"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        // different appointments -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(BOB_APPOINTMENT));"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        // different date -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        Appointment editedAliceAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"                .withDate(VALID_DATE_BOB_APPOINTMENT).build();"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(editedAliceAppointment));"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"        // different start time -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"        editedAliceAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"                .withStartTime(VALID_START_TIME_BOB_APPOINTMENT).build();"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(editedAliceAppointment));"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        // different end time -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"        editedAliceAppointment \u003d new AppointmentBuilder(ALICE_APPOINTMENT)"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":"                .withEndTime(VALID_END_TIME_BOB_APPOINTMENT).build();"},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"        assertFalse(ALICE_APPOINTMENT.equals(editedAliceAppointment));"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":70}},{"path":"src/test/java/seedu/address/model/person/FacultyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class FacultyTest {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Faculty(null));"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_invalidFaculty_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"        String invalidFaculty \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Faculty(invalidFaculty));"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public void isValidFaculty() {"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"        // null faculty"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e Faculty.isValidFaculty(null));"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid faculty"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\"C0M\")); // numbers"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\"SOC\"));"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\"scale\"));"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(Faculty.isValidFaculty(\"sCaLE\"));"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"        // valid faculty"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(Faculty.isValidFaculty(\"YNC\"));"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(Faculty.isValidFaculty(\"COM\"));"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(Faculty.isValidFaculty(\"SCALE\"));"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":40}},{"path":"src/test/java/seedu/address/model/person/MatriculationNumberContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"public class MatriculationNumberContainsKeywordsPredicateTest {"},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"    public void equals() {"},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"        String firstPredicateKeywordList \u003d \"A7890123H\";"},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"        String secondPredicateKeywordList \u003d \"A8901234I\";"},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"        // same object -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"        // same values -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"        // different types -\u003e returns false"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"        // null -\u003e returns false"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"        // different person -\u003e returns false"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":"    public void test_matriculationNumberContainsKeywords_returnsTrue() {"},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"        // Matching keyword"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate predicate \u003d"},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(\"A9012345J\");"},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"George Best\").withMatric(\"A9012345J\").build()));"},{"lineNumber":47,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":49,"author":{"gitId":"SiTingST"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"SiTingST"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":51,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":52,"author":{"gitId":"SiTingST"},"content":"        // Zero keywords"},{"lineNumber":53,"author":{"gitId":"SiTingST"},"content":"        MatriculationNumberContainsKeywordsPredicate predicate \u003d"},{"lineNumber":54,"author":{"gitId":"SiTingST"},"content":"                new MatriculationNumberContainsKeywordsPredicate(\"\");"},{"lineNumber":55,"author":{"gitId":"SiTingST"},"content":"        assertFalse(predicate.test(new PersonBuilder().withMatric(\"A0984245T\").build()));"},{"lineNumber":56,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":57,"author":{"gitId":"SiTingST"},"content":"        // Non-matching keyword"},{"lineNumber":58,"author":{"gitId":"SiTingST"},"content":"        predicate \u003d new MatriculationNumberContainsKeywordsPredicate(\"A0234673E\");"},{"lineNumber":59,"author":{"gitId":"SiTingST"},"content":"        assertFalse(predicate.test(new PersonBuilder().withMatric(\"A0394852T\").build()));"},{"lineNumber":60,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":61,"author":{"gitId":"SiTingST"},"content":"        // Keywords match phone, email and address, but does not match matriculation number"},{"lineNumber":62,"author":{"gitId":"SiTingST"},"content":"        predicate \u003d new MatriculationNumberContainsKeywordsPredicate(\"A3458911D  12345 alice@email.com Main Street)\");"},{"lineNumber":63,"author":{"gitId":"SiTingST"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withMatric(\"A3456789D\").withPhone(\"12345\")"},{"lineNumber":64,"author":{"gitId":"SiTingST"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"},{"lineNumber":65,"author":{"gitId":"SiTingST"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"SiTingST"},"content":"}"}],"authorContributionMap":{"SiTingST":66}},{"path":"src/test/java/seedu/address/model/person/MatriculationNumberTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class MatriculationNumberTest {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e new MatriculationNumber(null));"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_invalidMatric_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"        String invalidMatric \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MatriculationNumber(invalidMatric));"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public void isValidMatric() {"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"        // null matriculation number"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e MatriculationNumber.isValidMatric(null));"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid matriculation number"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"E0406245\")); //NUSNET ID"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"E0406245Z\"));"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"A0199S644\")); //Alphabet in the numbers part"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"A0%%$991F\")); //Special char in the numbers part"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"A1234H\")); //Not long enough"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"A123456L\"));"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MatriculationNumber.isValidMatric(\"A019%264N\"));"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        // valid matriculation number"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MatriculationNumber.isValidMatric(\"A0123456L\"));"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MatriculationNumber.isValidMatric(\"A0199264N\"));"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MatriculationNumber.isValidMatric(\"A0607891T\"));"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":43}},{"path":"src/test/java/seedu/address/model/person/MedicalDetailsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class MedicalDetailsTest {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e new MedicalDetails(null));"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_invalidMedicalDetails_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"        String invalidMedicalDetails \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new MedicalDetails(invalidMedicalDetails));"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public void isValidMedicalDetails() {"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"        // null medical details"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e MedicalDetails.isValidMedicalDetails(null));"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid medical details"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MedicalDetails.isValidMedicalDetails(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(MedicalDetails.isValidMedicalDetails(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        // valid medical details"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MedicalDetails.isValidMedicalDetails(\"history of anaphylaxis\"));"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MedicalDetails.isValidMedicalDetails(\"this is rubbish\")); // gibberish"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(MedicalDetails.isValidMedicalDetails(\"Received heart bypass surgery in 2018\")); // long history"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":36}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESIDENCE_BOB;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        // same matriculation number, all other attributes different -\u003e returns true"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).withFaculty(VALID_FACULTY_BOB)"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_BOB).withMedDetails(VALID_DETAILS_BOB).withSchoolRes(VALID_RESIDENCE_BOB)"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"                .build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        // different matriculation number, all other attributes same -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withMatric(VALID_MATRIC_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":12,"-":65}},{"path":"src/test/java/seedu/address/model/person/SchoolResidenceTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class SchoolResidenceTest {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e new SchoolResidence(null));"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_invalidSchoolResidence_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new SchoolResidence(invalidAddress));"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public void isValidResidence() {"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"        // null school residence"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e SchoolResidence.isValidResidence(null));"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid school residences"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"ke7\"));"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"sheares\"));"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"capt\"));"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"sH\"));"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(SchoolResidence.isValidResidence(\"PgpH\"));"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        // valid school residences"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(SchoolResidence.isValidResidence(\"CAPT\"));"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(SchoolResidence.isValidResidence(\"SH\"));"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(SchoolResidence.isValidResidence(\"PGPH\"));"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":41}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"-":167}},{"path":"src/test/java/seedu/address/model/person/VaccinationStatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class VaccinationStatusTest {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e new VaccinationStatus(null));"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public void constructor_invalidStatus_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"        String invalidStatus \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new VaccinationStatus(invalidStatus));"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public void isValidStatus() {"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"        // null vaccination status"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(NullPointerException.class, () -\u003e VaccinationStatus.isValidStatus(null));"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid vaccination statuses"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\"unvaccinated\"));"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\"v@ccinated\")); // spaces only"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\"vaxxed\")); // spaces only"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        assertFalse(VaccinationStatus.isValidStatus(\"vax\")); // spaces only"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        // valid vaccination statuses"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"Not Vaccinated\"));"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"NOT VACCINATED\"));"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"vaccinated\"));"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"NOT VACCINATED\"));"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"nOT vACCINATED\"));"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"        assertTrue(VaccinationStatus.isValidStatus(\"NOT vaccinated\"));"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":44}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_MATRICULATION_NUMBER \u003d \"A12345X\";"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_FACULTY \u003d \"FOS\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_VACCINATION_STATUS \u003d \"vaccinate\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_MEDICAL_DETAILS \u003d \" \";"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_SCHOOL_RESIDENCE \u003d \"tembu\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_MATRICULATION_NUMBER \u003d BENSON.getMatriculationNumber().toString();"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_FACULTY \u003d BENSON.getFaculty().value;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_VACCINATION_STATUS \u003d BENSON.getVaccinationStatus().toString();"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_MEDICAL_DETAILS \u003d BENSON.getMedicalDetails().value;"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    private static final String VALID_SCHOOL_RESIDENCE \u003d BENSON.getSchoolResidence().toSavingString();"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY , VALID_PHONE,"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_SCHOOL_RESIDENCE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidMatriculationNumber_throwsIllegalValueException() {"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d MatriculationNumber.MESSAGE_CONSTRAINTS;"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullMatriculationNumber_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_FACULTY,"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatriculationNumber.class.getSimpleName());"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidFaculty_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, INVALID_FACULTY,"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d Faculty.MESSAGE_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullFaculty_throwsIllegalValueException() {"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, null,"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":97,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Faculty.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY, INVALID_PHONE,"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_SCHOOL_RESIDENCE);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                null, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY, VALID_PHONE,"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"                        INVALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_SCHOOL_RESIDENCE);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, null, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"                        INVALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, null, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidVaccinationStatus_throwsIllegalValueException() {"},{"lineNumber":161,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":162,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":163,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d VaccinationStatus.MESSAGE_CONSTRAINTS;"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":166,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":168,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":169,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullVaccinationStatus_throwsIllegalValueException() {"},{"lineNumber":170,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":171,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_MEDICAL_DETAILS,"},{"lineNumber":172,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":173,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, VaccinationStatus.class.getSimpleName());"},{"lineNumber":174,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":175,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidMedicalDetails_throwsIllegalValueException() {"},{"lineNumber":179,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":180,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, INVALID_MEDICAL_DETAILS,"},{"lineNumber":181,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":182,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d MedicalDetails.MESSAGE_CONSTRAINTS;"},{"lineNumber":183,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":187,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullMedicalDetails_throwsIllegalValueException() {"},{"lineNumber":188,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":189,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, null,"},{"lineNumber":190,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_SCHOOL_RESIDENCE);"},{"lineNumber":191,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MedicalDetails.class.getSimpleName());"},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":196,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidSchoolResidence_throwsIllegalValueException() {"},{"lineNumber":197,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_FACULTY,"},{"lineNumber":198,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS,"},{"lineNumber":199,"author":{"gitId":"fairyinabottle4"},"content":"                INVALID_SCHOOL_RESIDENCE);"},{"lineNumber":200,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d SchoolResidence.MESSAGE_CONSTRAINTS;"},{"lineNumber":201,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":202,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":112,"yienyoong":1,"-":90}},{"path":"src/test/java/seedu/address/testutil/AppointmentBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":" * A utility class to help with building Person objects."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"public class AppointmentBuilder {"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    public static final String DEFAULT_MATRIC \u003d \"A0192376F\";"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    public static final String DEFAULT_DATE \u003d \"2021-01-01\";"},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    public static final String DEFAULT_START_TIME \u003d \"10:00\";"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"    public static final String DEFAULT_END_TIME \u003d \"10:30\";"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"    private MatriculationNumber matriculationNumber;"},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"    private LocalDate date;"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"    private LocalTime startTime;"},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"    private LocalTime endTime;"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder() {"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"        matriculationNumber \u003d new MatriculationNumber(DEFAULT_MATRIC);"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"        date \u003d LocalDate.parse(DEFAULT_DATE);"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"        startTime \u003d LocalTime.parse(DEFAULT_START_TIME);"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        endTime \u003d LocalTime.parse(DEFAULT_END_TIME);"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder(Appointment appointmentToCopy) {"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"        matriculationNumber \u003d appointmentToCopy.getMatriculationNumber();"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"        date \u003d appointmentToCopy.getDate();"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"        startTime \u003d appointmentToCopy.getStartTime();"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"        endTime \u003d appointmentToCopy.getEndTime();"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"     *Sets the {@code MatriculationNumber} of the {@code Appointment} that we are building"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder withMatric(String matric) {"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"        this.matriculationNumber \u003d new MatriculationNumber(matric);"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"     *Sets the {@code date} of the {@code Appointment} that we are building"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder withDate(String date) {"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"     *Sets the {@code startTime} of the {@code Appointment} that we are building"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder withStartTime(String startTime) {"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"        this.startTime \u003d LocalTime.parse(startTime);"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":68,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"picasdan9"},"content":"     *Sets the {@code endTime} of the {@code Appointment} that we are building"},{"lineNumber":70,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"picasdan9"},"content":"    public AppointmentBuilder withEndTime(String endTime) {"},{"lineNumber":72,"author":{"gitId":"picasdan9"},"content":"        this.endTime \u003d LocalTime.parse(endTime);"},{"lineNumber":73,"author":{"gitId":"picasdan9"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":76,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"picasdan9"},"content":"     * Builds a new Person object."},{"lineNumber":78,"author":{"gitId":"picasdan9"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"picasdan9"},"content":"     * @return a person object."},{"lineNumber":80,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"picasdan9"},"content":"    public Appointment build() {"},{"lineNumber":82,"author":{"gitId":"picasdan9"},"content":"        return new Appointment(matriculationNumber, date, startTime, endTime);"},{"lineNumber":83,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":85,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":85}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMatriculationNumber(person.getMatriculationNumber());"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setFaculty(person.getFaculty());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setVaccinationStatus(person.getVaccinationStatus());"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMedicalDetails(person.getMedicalDetails());"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setSchoolResidence(person.getSchoolResidence());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code MatricuationNumber} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withMatric(String matric) {"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMatriculationNumber(new MatriculationNumber(matric));"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code Faculty} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withFaculty(String faculty) {"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setFaculty(new Faculty(faculty));"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code vaccinationStatus} of the {@code vaccinationStatus} that we are building."},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withVacStatus(String vaccinationStatus) {"},{"lineNumber":97,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setVaccinationStatus(new VaccinationStatus(vaccinationStatus));"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code medicalDetails} of the {@code medicalDetails} that we are building."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withMedDetails(String medicalDetails) {"},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMedicalDetails(new MedicalDetails(medicalDetails));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code schoolResidence} of the {@code schoolResidence} that we are building."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withSchoolRes(String schoolResidence) {"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setSchoolResidence(new SchoolResidence(schoolResidence));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":39,"-":81}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.Faculty;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_MATRIC \u003d \"A0192376F\";"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_FACULTY \u003d \"COM\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_VAC_STATUS \u003d \"not vaccinated\";"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_MED_DETAILS \u003d \"none\";"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_SCHOOL_RESIDENCE \u003d \"RVRC\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    private MatriculationNumber matriculationNumber;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    private Faculty faculty;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    private VaccinationStatus vaccinationStatus;"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    private MedicalDetails medicalDetails;"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    private SchoolResidence schoolResidence;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d new MatriculationNumber(DEFAULT_MATRIC);"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"        faculty \u003d new Faculty(DEFAULT_FACULTY);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        vaccinationStatus \u003d new VaccinationStatus(DEFAULT_VAC_STATUS);"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d new MedicalDetails(DEFAULT_MED_DETAILS);"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"        schoolResidence \u003d new SchoolResidence(DEFAULT_SCHOOL_RESIDENCE);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d personToCopy.getMatriculationNumber();"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        faculty \u003d personToCopy.getFaculty();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        vaccinationStatus \u003d personToCopy.getVaccinationStatus();"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d personToCopy.getMedicalDetails();"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        schoolResidence \u003d personToCopy.getSchoolResidence();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code MatriculationNumber} of the {@code Person} that we are building"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withMatric(String matric) {"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d new MatriculationNumber(matric);"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code Faculty} of the {@code Person} that we are building"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withFaculty(String faculty) {"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        this.faculty \u003d new Faculty(faculty);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code VaccinationStatus} of the {@code Person} that we are building"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withVacStatus(String vaccinationStatus) {"},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d new VaccinationStatus(vaccinationStatus);"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code MedicalDetails} of the {@code Person} that we are building"},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withMedDetails(String medicalDetails) {"},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d new MedicalDetails(medicalDetails);"},{"lineNumber":130,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code schoolResidence} of the {@code Person} that we are building"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withSchoolRes(String schoolResidence) {"},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"        this.schoolResidence \u003d new SchoolResidence(schoolResidence);"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"     * Builds a new Person object."},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"     * @return a person object."},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(name, matriculationNumber, faculty, phone, email, address, vaccinationStatus, medicalDetails,"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"                schoolResidence);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":67,"-":84}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_FACULTY;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_MATRICULATION_NUMBER + person.getMatriculationNumber().value + \" \");"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_FACULTY + person.getFaculty().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        sb.append(PREFIX_VACCINATION_STATUS + person.getVaccinationStatus().textUI + \" \");"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_MEDICAL_DETAILS + person.getMedicalDetails().value + \" \");"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        sb.append(PREFIX_SCHOOL_RESIDENCE + person.getSchoolResidence().toSavingString() + \" \");"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getMatriculationNumber().ifPresent(matriculationNumber -\u003e sb.append(PREFIX_MATRICULATION_NUMBER)"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"                .append(matriculationNumber.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getFaculty().ifPresent(faculty -\u003e sb.append(PREFIX_FACULTY).append(faculty.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getVaccinationStatus().ifPresent(vaccinationStatus -\u003e sb.append(PREFIX_VACCINATION_STATUS)"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"                .append(vaccinationStatus.textUI).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getMedicalDetails().ifPresent(medicalDetails -\u003e sb.append(PREFIX_MEDICAL_DETAILS)"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"                .append(medicalDetails.value).append(\" \"));"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getSchoolResidence().ifPresent(schoolResidence -\u003e sb.append(PREFIX_SCHOOL_RESIDENCE)"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"                .append(schoolResidence.toSavingString()).append(\" \"));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":15,"yienyoong":4,"-":46}},{"path":"src/test/java/seedu/address/testutil/TypicalAppointments.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_AMY_APPOINTMENT;"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_BOB_APPOINTMENT;"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_AMY_APPOINTMENT;"},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_BOB_APPOINTMENT;"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_AMY_APPOINTMENT;"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_BOB_APPOINTMENT;"},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.appointment.Appointment;"},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":" */"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"public class TypicalAppointments {"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"    public static final Appointment ALICE_APPOINTMENT \u003d new AppointmentBuilder()"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"            .withMatric(TypicalPersons.ALICE.getMatriculationNumber().toString())"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"            .withStartTime(\"10:00\").withEndTime(\"10:30\").build();"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":"    public static final Appointment BENSON_APPOINTMENT \u003d new AppointmentBuilder()"},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"            .withMatric(TypicalPersons.BENSON.getMatriculationNumber().toString())"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"            .withStartTime(\"10:30\").withEndTime(\"11:00\").build();"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"    public static final Appointment CARL_APPOINTMENT \u003d new AppointmentBuilder()"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"            .withMatric(TypicalPersons.BENSON.getMatriculationNumber().toString())"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"            .withStartTime(\"11:00\").withEndTime(\"11:30\").build();"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"    public static final Appointment AMY_APPOINTMENT \u003d new AppointmentBuilder().withMatric(VALID_MATRIC_AMY)"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"            .withDate(VALID_DATE_AMY_APPOINTMENT).withStartTime(VALID_START_TIME_AMY_APPOINTMENT)"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"            .withEndTime(VALID_END_TIME_AMY_APPOINTMENT).build();"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    public static final Appointment BOB_APPOINTMENT \u003d new AppointmentBuilder().withMatric(VALID_MATRIC_BOB)"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"            .withDate(VALID_DATE_BOB_APPOINTMENT).withStartTime(VALID_START_TIME_BOB_APPOINTMENT)"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":"            .withEndTime(VALID_END_TIME_BOB_APPOINTMENT).build();"},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    private TypicalAppointments() {} // prevents instantiation"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"     * Returns an {@code AddressBook} with all the typical appointments."},{"lineNumber":47,"author":{"gitId":"picasdan9"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"picasdan9"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":49,"author":{"gitId":"picasdan9"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":50,"author":{"gitId":"picasdan9"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":51,"author":{"gitId":"picasdan9"},"content":"            ab.addPerson(person);"},{"lineNumber":52,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"picasdan9"},"content":"        for (Appointment appointment : getTypicalAppointments()) {"},{"lineNumber":54,"author":{"gitId":"picasdan9"},"content":"            ab.addAppointment(appointment);"},{"lineNumber":55,"author":{"gitId":"picasdan9"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"picasdan9"},"content":"        return ab;"},{"lineNumber":57,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":59,"author":{"gitId":"picasdan9"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":60,"author":{"gitId":"picasdan9"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(TypicalPersons.ALICE, TypicalPersons.BENSON, TypicalPersons.CARL));"},{"lineNumber":61,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":63,"author":{"gitId":"picasdan9"},"content":"    public static List\u003cAppointment\u003e getTypicalAppointments() {"},{"lineNumber":64,"author":{"gitId":"picasdan9"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE_APPOINTMENT, BENSON_APPOINTMENT, CARL_APPOINTMENT));"},{"lineNumber":65,"author":{"gitId":"picasdan9"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"picasdan9"},"content":"}"}],"authorContributionMap":{"picasdan9":66}},{"path":"src/test/java/seedu/address/testutil/TypicalMatricNumbers.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"public class TypicalMatricNumbers {"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"    public static final String MATRIC_NUMBER_FIRST_PERSON \u003d \"A1234567X\"; // Not in TypicalAddressBook"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"    public static final String MATRIC_NUMBER_SECOND_PERSON \u003d \"A7654321J\"; // Not in TypicalAddressBook"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"    public static final String MATRIC_NUMBER_THIRD_PERSON \u003d \"A1231231F\"; // Not in TypicalAddressBook"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"    public static final String MATRIC_NUMBER_FOURTH_PERSON \u003d \"A3456789D\";"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    public static final String MATRIC_NUMBER_FIFTH_PERSON \u003d \"A4567890E\";"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":10}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_AMY;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_AMY;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_FACULTY_BOB;"},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESIDENCE_AMY;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESIDENCE_BOB;"},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withMatric(\"A3456789D\")"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"            .withFaculty(\"COM\").withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"            .withPhone(\"94351253\").withVacStatus(\"not vaccinated\").withMedDetails(\"shellfish allergy\")"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").build();"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withMatric(\"A4567890E\")"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"            .withFaculty(\"DNUS\").withSchoolRes(\"RVRC\").withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withVacStatus(\"not vaccinated\").withMedDetails(\"none\")"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"            .build();"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withMatric(\"A5678901F\")"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"            .withFaculty(\"USP\").withPhone(\"95352563\").withSchoolRes(\"USP\").withEmail(\"heinz@example.com\")"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(\"vaccinated\").withMedDetails(\"none\").withAddress(\"wall street\").build();"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withFaculty(\"SCALE\")"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"            .withPhone(\"87652533\").withSchoolRes(\"RVRC\").withMatric(\"A6789012G\").withEmail(\"cornelia@example.com\")"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"            .withAddress(\"10th street\").withMedDetails(\"pollen allergy\").withVacStatus(\"vaccinated\").build();"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withFaculty(\"BIZ\").withPhone(\"9482224\")"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A7890123H\").withEmail(\"werner@example.com\")"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(\"not vaccinated\").withMedDetails(\"none\").withAddress(\"michegan ave\").build();"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withFaculty(\"ENG\")"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"            .withPhone(\"9482427\").withSchoolRes(\"RVRC\").withMatric(\"A8901234I\").withEmail(\"lydia@example.com\")"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(\"vaccinated\").withMedDetails(\"bee sting allergy\").withAddress(\"little tokyo\").build();"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withFaculty(\"MED\")"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"            .withPhone(\"9482442\").withSchoolRes(\"RVRC\").withMatric(\"A9012345J\").withEmail(\"anna@example.com\")"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(\"not vaccinated\").withMedDetails(\"none\").withAddress(\"4th street\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"            .withMatric(\"A0126563B\").withMedDetails(\"none\").withSchoolRes(\"USP\").withEmail(\"stefan@example.com\")"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"            .withFaculty(\"SDE\").withVacStatus(\"vaccinated\").withAddress(\"little india\").build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withMatric(\"A6754321K\").withMedDetails(\"none\")"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"USP\").withFaculty(\"SDE\").withVacStatus(\"vaccinated\").build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":"            .withFaculty(VALID_FACULTY_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"            .withMedDetails(VALID_DETAILS_AMY).withMatric(VALID_MATRIC_AMY).withVacStatus(VALID_STATUS_AMY)"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(VALID_RESIDENCE_AMY).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withFaculty(VALID_FACULTY_BOB)"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(VALID_STATUS_BOB).withMedDetails(VALID_DETAILS_BOB).withMatric(VALID_MATRIC_BOB)"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(VALID_RESIDENCE_BOB).build();"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":39,"SiTingST":4,"-":51}}]
