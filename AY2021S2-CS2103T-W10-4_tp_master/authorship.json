[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-4/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"* Vax@NUS is an app for **staff at the NUS University Health Centre (UHC)**"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"  to keep track of the COVID-19 vaccination status of students. \u003cbr\u003e"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"* It is targeted at staff who are **proficient and comfortable with the"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"  Command Line Interface (CLI)**, as the app will have very limited UI interaction features."},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"### Example usages:"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"* Create, read, update and delete (CRUD) of student profiles which details critical information such as:"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    * Contact information"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"        * If not vaccinated, their preference for vaccination (yes/no)"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history, existing medical conditions and allergies"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"* Creating and managing vaccination appointments for students"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"### Problems addressed:"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"* Eliminates the need for the university to use the Ministry of Health\u0027s database."},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"* This in turn simplifies the process of contacting, monitoring and administering vaccines for students."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"* Consolidates and streamlines only data relevant to vaccinations into one app."},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"* **Goal:** To create a COVID-free NUS campus where student and academic life can flourish without restrictions."},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"### Planned Features:"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.2"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"1. On top of the fields already available in AB3, the user will be able to input the following:"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    * Student\u0027s matriculation number"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status/preference"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    * Faculty"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    * Residence on campus (if applicable)"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"1. A filter function that will allow the user to display a specific group of students"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"1. The user will be able to view all the detailed information of a student at a glance. Currently, only"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"   the summarised information on the UI can be viewed."},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"1. Create vaccination appointments and display them on the UI."},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.3"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"1. Detect duplicate entries."},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"1. Sort vaccination appointments and display only upcoming ones."},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"1. Provide statistical insights regarding the vaccination of the student population, by faculty, residence or other"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"   relevant parameters."},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"1. Undo feature to quickly correct accidental mistakes."},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"\u003eFor the detailed documentation of this project, see the"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"**[Vax@NUS Website](https://ay2021s2-cs2103t-w10-4.github.io/tp/)**."},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"This project is based on the AddressBook-Level3 project created by"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"fairyinabottle4":54,"picasdan9":1,"-":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"We are a team of Year 2 Computer Science students based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"Our team members are:"},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"* [Dan Tran](#dan-tran)"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"* [Lim Si Ting](#lim-si-ting)"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"* [Keith Low Jun](#keith-low-jun)"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"* [Yoong Yi En](#yoong-yi-en)"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"You can reach us at the email `e0406245@u.nus.edu`"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":"### Dan Tran"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":"\u003cimg src\u003d\"images/picasdan9.png\" width\u003d\"200px\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"[[github](https://github.com/picasdan9)]"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":"[[portfolio](team/picasdan9.md)]"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"* Role: Developer"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"* Responsibilities: DevOps"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"### Lim Si Ting"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"\u003cimg src\u003d\"images/sitingst.png\" width\u003d\"200px\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"[[github](https://github.com/SiTingST)]"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"[[portfolio](team/sitingst.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"* Responsibilities: Data  "},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"### Keith Low Jun"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"\u003cimg src\u003d\"images/fairyinabottle4.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"[[github](http://github.com/fairyinabottle4)] [[portfolio](team/fairyinabottle4.md)]"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Responsibilities: Data"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"### Yoong Yi En"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"\u003cimg src\u003d\"images/yienyoong.png\" width\u003d\"200px\"\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"[[github](http://github.com/yienyoong)]"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"[[portfolio](team/yienyoong.md)]"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Responsibilities: Dev Ops + Threading"},{"lineNumber":57,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"fairyinabottle4":2,"yienyoong":14,"SiTingST":5,"picasdan9":7,"-":29}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"yienyoong"},"content":"* UHC staff who has a need to manage a significant number of appointments"},{"lineNumber":240,"author":{"gitId":"yienyoong"},"content":"* UHC staff who has to keep track of NUS students\u0027 COVID-19 vaccinations regarding:"},{"lineNumber":241,"author":{"gitId":"yienyoong"},"content":"  * Who has been vaccinated"},{"lineNumber":242,"author":{"gitId":"yienyoong"},"content":"  * Who does not want to be vaccinated"},{"lineNumber":243,"author":{"gitId":"yienyoong"},"content":"  * Who wants to be vaccinated"},{"lineNumber":244,"author":{"gitId":"yienyoong"},"content":"    * Priority for the vaccine"},{"lineNumber":245,"author":{"gitId":"yienyoong"},"content":"    * Medical histories, existing medical conditions and allergies"},{"lineNumber":246,"author":{"gitId":"yienyoong"},"content":"* Prefers desktop apps over other types"},{"lineNumber":247,"author":{"gitId":"yienyoong"},"content":"* Can type fast"},{"lineNumber":248,"author":{"gitId":"yienyoong"},"content":"* Prefers typing to mouse interactions"},{"lineNumber":249,"author":{"gitId":"yienyoong"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"SiTingST"},"content":"**Value proposition**: a one stop management app to efficiently track and schedule COVID-19 vaccinations for NUS students"},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":257,"author":{"gitId":"-"},"content":""},{"lineNumber":258,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                | So that I can…​                                                     |"},{"lineNumber":259,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":261,"author":{"gitId":"fairyinabottle4"},"content":"| `* * *`  | user                                       | add a new student               | keep track of that student\u0027s vaccination status                                                                       |"},{"lineNumber":262,"author":{"gitId":"yienyoong"},"content":"| `* * *`  | user                                       | delete a student                | remove entries that I no longer need or accidentally added                                |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":264,"author":{"gitId":"SiTingST"},"content":"| `* * *`  | user                                       | find a person by matriculation number          | locate details of students without having to go through the entire list |"},{"lineNumber":265,"author":{"gitId":"yienyoong"},"content":"| `* * *`  | user                                       | list all students              | view all student records at one go                                     |"},{"lineNumber":266,"author":{"gitId":"picasdan9"},"content":"| `* * *`  | user                                       | list all upcoming appointments | view all appointments at one go"},{"lineNumber":267,"author":{"gitId":"yienyoong"},"content":"| `*`      | user with many students in the address book | sort students by name           | locate a student easily                                                 |"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"yienyoong"},"content":"(For all use cases below, the **System** is the `Vax@NUS` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"SiTingST"},"content":"**Use case: Add a student entry**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"SiTingST"},"content":"1.  User requests to add a specific student entry."},{"lineNumber":280,"author":{"gitId":"SiTingST"},"content":"2.  System prompts for student\u0027s details."},{"lineNumber":281,"author":{"gitId":"SiTingST"},"content":"3.  User inputs the respective details."},{"lineNumber":282,"author":{"gitId":"SiTingST"},"content":"4.  System adds the student entry."},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":285,"author":{"gitId":"-"},"content":""},{"lineNumber":286,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":287,"author":{"gitId":"-"},"content":""},{"lineNumber":288,"author":{"gitId":"SiTingST"},"content":"* 1a. The specified student entry exists in the system."},{"lineNumber":289,"author":{"gitId":"-"},"content":""},{"lineNumber":290,"author":{"gitId":"SiTingST"},"content":"    * 1a1. System shows an error message."},{"lineNumber":291,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":292,"author":{"gitId":"SiTingST"},"content":"        Use case ends."},{"lineNumber":293,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":294,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":295,"author":{"gitId":"SiTingST"},"content":"* 3a. User does not give sufficient inputs to add a student entry."},{"lineNumber":296,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":297,"author":{"gitId":"SiTingST"},"content":"    * 3a1. System shows an error message."},{"lineNumber":298,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":299,"author":{"gitId":"SiTingST"},"content":"        Use case ends.  "},{"lineNumber":300,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":301,"author":{"gitId":"SiTingST"},"content":"**Use case: Add a vaccination appointment**"},{"lineNumber":302,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":303,"author":{"gitId":"SiTingST"},"content":"**MSS**"},{"lineNumber":304,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":305,"author":{"gitId":"SiTingST"},"content":"1.  User requests to add a vaccination appointment."},{"lineNumber":306,"author":{"gitId":"SiTingST"},"content":"2.  System prompts for details about the vaccination appointment."},{"lineNumber":307,"author":{"gitId":"SiTingST"},"content":"3.  User inputs the respective details."},{"lineNumber":308,"author":{"gitId":"SiTingST"},"content":"4.  System adds the vaccination appointment."},{"lineNumber":309,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":310,"author":{"gitId":"SiTingST"},"content":"    Use case ends."},{"lineNumber":311,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":312,"author":{"gitId":"SiTingST"},"content":"**Extensions**"},{"lineNumber":313,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":314,"author":{"gitId":"SiTingST"},"content":"* 3a. 3a. User does not give sufficient inputs to add a vaccination appointment."},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"SiTingST"},"content":"    * 3a1. System shows an error message."},{"lineNumber":317,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":318,"author":{"gitId":"SiTingST"},"content":"        Use case ends."},{"lineNumber":319,"author":{"gitId":"SiTingST"},"content":"        "},{"lineNumber":320,"author":{"gitId":"SiTingST"},"content":"* 4a. The given appointment date and time clashes with an existing vaccination appointment for another student."},{"lineNumber":321,"author":{"gitId":"SiTingST"},"content":"    "},{"lineNumber":322,"author":{"gitId":"SiTingST"},"content":"   * 4a1. System shows an error message."},{"lineNumber":323,"author":{"gitId":"-"},"content":""},{"lineNumber":324,"author":{"gitId":"SiTingST"},"content":"      Use case ends.  "},{"lineNumber":325,"author":{"gitId":"SiTingST"},"content":"  "},{"lineNumber":326,"author":{"gitId":"yienyoong"},"content":"**Use case: Delete a student**"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":329,"author":{"gitId":"-"},"content":""},{"lineNumber":330,"author":{"gitId":"yienyoong"},"content":"1.  User requests to delete a specific student."},{"lineNumber":331,"author":{"gitId":"yienyoong"},"content":"2.  System prompts for confirmation of deletion."},{"lineNumber":332,"author":{"gitId":"yienyoong"},"content":"3.  User confirms."},{"lineNumber":333,"author":{"gitId":"yienyoong"},"content":"4.  System deletes the student. "},{"lineNumber":334,"author":{"gitId":"-"},"content":""},{"lineNumber":335,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":336,"author":{"gitId":"-"},"content":""},{"lineNumber":337,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"yienyoong"},"content":"* 1a. Specified student does not exist."},{"lineNumber":340,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":341,"author":{"gitId":"yienyoong"},"content":"    * 1a1. System shows an error message."},{"lineNumber":342,"author":{"gitId":"-"},"content":"  "},{"lineNumber":343,"author":{"gitId":"-"},"content":"        Use case ends."},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":""},{"lineNumber":346,"author":{"gitId":"yienyoong"},"content":"* 3a. User does not confirm."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"yienyoong"},"content":"  Use case ends."},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":355,"author":{"gitId":"picasdan9"},"content":"1.  Should be able to hold up to 35000 students (NUS undergraduate cohort size) and 35000 appointments without a noticeable sluggishness in performance for typical usage."},{"lineNumber":356,"author":{"gitId":"picasdan9"},"content":"1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":357,"author":{"gitId":"picasdan9"},"content":"1.  The product is not required to export statistics reports to PDF files."},{"lineNumber":358,"author":{"gitId":"picasdan9"},"content":"1.  There should be a mechanism to migrate data so that the application can be used with existing data on different machines."},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":365,"author":{"gitId":"yienyoong"},"content":"* **Vaccine**: Singapore has two approved COVID-19 vaccines, one developed by Pfizer-BioNTech, "},{"lineNumber":366,"author":{"gitId":"fairyinabottle4"},"content":"  the other by Moderna. Both require two doses, 21 days apart for Pfizer-BioNTech, 28 days apart for Moderna."},{"lineNumber":367,"author":{"gitId":"fairyinabottle4"},"content":"  Two appointments must therefore be created per student. "},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":374,"author":{"gitId":"-"},"content":""},{"lineNumber":375,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":376,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":391,"author":{"gitId":"-"},"content":""},{"lineNumber":392,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":393,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":396,"author":{"gitId":"-"},"content":""},{"lineNumber":397,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":398,"author":{"gitId":"-"},"content":""},{"lineNumber":399,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":400,"author":{"gitId":"-"},"content":""},{"lineNumber":401,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":402,"author":{"gitId":"-"},"content":""},{"lineNumber":403,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":404,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":405,"author":{"gitId":"-"},"content":""},{"lineNumber":406,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":407,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":408,"author":{"gitId":"-"},"content":""},{"lineNumber":409,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":410,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":411,"author":{"gitId":"-"},"content":""},{"lineNumber":412,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":413,"author":{"gitId":"-"},"content":""},{"lineNumber":414,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":415,"author":{"gitId":"-"},"content":""},{"lineNumber":416,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":417,"author":{"gitId":"-"},"content":""},{"lineNumber":418,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":419,"author":{"gitId":"-"},"content":""},{"lineNumber":420,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"fairyinabottle4":3,"yienyoong":26,"SiTingST":42,"picasdan9":5,"-":344}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"Vax@NUS is a **one stop management app to efficiently track and and schedule COVID-19 vaccinations for NUS students.** It is a desktop app **optimized for use via a Command Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Vax@NUS can get your appointment management tasks done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":"1. Download the latest `VaxAtNUS.jar` from [here](https://github.com/AY2021S2-CS2103T-W10-4/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"   * **`list students`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":47,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"Adds a person to the records."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"Format: `add n/NAME i/MATRICULATION_NUMBER p/PHONE_NUMBER e/EMAIL a/ADDRESS s/VACCINATION_STATUS "},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"r/SCHOOL_RESIDENCE[optional] m/MEDICAL_DETAILS`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"\u003e**NOTE:** The matriculation number of a student is a unique 9-character alphanumeric sequence that begins with A."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"* `add n/John Doe i/A1234567X p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/vaccinated "},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"  r/RVRC m/peanut allergy`"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"* `add n/Betsy Crowe i/A7654321J p/91119222 e/betsycrowe@example.com a/212 Orchard Road, #18-08 s/not vaccinated "},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"  m/nose lift surgery in 2012`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"### Listing all students in the records : `list`"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"Shows a list of all students in the records."},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"Format: `list students`"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"### Searching for a student by matriculation number: `search`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"Shows all the details in the records of the student with the matching matriculation number."},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"Format: `search /MATRICULATION_NUMBER`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"\u003e**NOTE:** The matriculation number of a student is a unique 9-character alphanumeric sequence that begins with A."},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"* `search A1234567X` returns `John Doe`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":"### Deleting a student by their matriculation number: `delete`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"Format: `delete /MATRICULATION NUMBER`"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"* If the matriculation number does not exist in the records, a popup message will be displayed to inform users that "},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"  the matriculation number is not found"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":"\u003e**NOTE:** The matriculation number of a student is a unique 9-character alphanumeric sequence that begins with A."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"* `delete /A7654321J` deletes Betsy Crowe from the records."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"### Clearing all student entries : `clear`"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"Clears all entries from the records."},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"Vax@NUS data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"### Adding vaccination appointments for students `[coming in v1.3]`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"SiTingST"},"content":"**Q**: What do I do if I accidentally deleted a student? "},{"lineNumber":142,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"SiTingST"},"content":"**A**: We regret to inform you that deletion is permanent. You will have to manually re-add the student."},{"lineNumber":144,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":145,"author":{"gitId":"SiTingST"},"content":"**Q**: What can be included in medical details?"},{"lineNumber":146,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":147,"author":{"gitId":"SiTingST"},"content":"**A**: Allergies and past medical history. "},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"SiTingST"},"content":"**Q**: Will I be able to amend a student’s details?"},{"lineNumber":150,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":151,"author":{"gitId":"SiTingST"},"content":"**A**: Unfortunately, this feature is not available at the moment, but plans are in the works to make this a reality."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"SiTingST"},"content":"**Q** : Will I be able to add other types of appointments besides vaccination appointments?"},{"lineNumber":154,"author":{"gitId":"SiTingST"},"content":"\u003cbr\u003e"},{"lineNumber":155,"author":{"gitId":"SiTingST"},"content":"**A** : No, the current version only allows you to add vaccination appointments and not any other type of appointments. "},{"lineNumber":156,"author":{"gitId":"SiTingST"},"content":" "},{"lineNumber":157,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"SiTingST"},"content":"## Command Summary"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"SiTingST"},"content":"**Action**  | **Format, Examples**"},{"lineNumber":162,"author":{"gitId":"SiTingST"},"content":"--------|-----------------"},{"lineNumber":163,"author":{"gitId":"SiTingST"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS s/VACCINATION_STATUS r/SCHOOL_RESIDENCE[optional] m/MEDICAL_DETAILS ` \u003cbr\u003e e.g., `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 s/vaccinated r/RVRC m/peanut allergy`"},{"lineNumber":164,"author":{"gitId":"yienyoong"},"content":"**List Students** | `list students`"},{"lineNumber":165,"author":{"gitId":"yienyoong"},"content":"**Search** | `search /MATRICULATION_NUMBER ` \u003cbr\u003e e.g., `search A1234567X`"},{"lineNumber":166,"author":{"gitId":"yienyoong"},"content":"**Delete** | `delete /MATRICULATION_NUMBER` \u003cbr\u003e e.g., `delete A1234567X`"}],"authorContributionMap":{"fairyinabottle4":28,"yienyoong":4,"SiTingST":18,"picasdan9":2,"-":114}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"title: Vax@NUS"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W10-4/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W10-4/tp/actions)"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W10-4/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S2-CS2103T-W10-4/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"* Vax@NUS is an app for **staff at the NUS University Health Centre (UHC)**"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"  to keep track of the COVID-19 vaccination status of students. \u003cbr\u003e"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"* It is targeted at staff who are **proficient and comfortable with the"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"  Command Line Interface (CLI)**, as the app will have very limited UI interaction features."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"### Example usages:"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"* Create, read, update and delete (CRUD) of student profiles which details critical information such as:"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    * Contact information"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"        * If not vaccinated, their preference for vaccination (yes/no)"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history, existing medical conditions and allergies"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"* Creating and managing vaccination appointments for students"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"### Problems addressed:"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"* Eliminates the need for the university to use the Ministry of Health\u0027s database."},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"* This in turn simplifies the process of contacting, monitoring and administering vaccines for students."},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"* Consolidates and streamlines only data relevant to vaccinations into one app."},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"* **Goal:** To create a COVID-free NUS campus where student and academic life can flourish without restrictions."},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"### Planned Features:"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.2"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"1. On top of the fields already available in AB3, the user will be able to input the following:"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    * Student\u0027s matriculation number"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    * Vaccination status/preference"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    * Faculty"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    * Residence on campus (if applicable)"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    * Medical history"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"1. A filter function that will allow the user to display a specific group of students"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"1. The user will be able to view all the detailed information of a student at a glance. Currently, only"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"   the summarised information on the UI can be viewed."},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"1. Create vaccination appointments and display them on the UI."},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"#### v1.3"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"1. Detect duplicate entries."},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"1. Sort vaccination appointments and display only upcoming ones."},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"1. Provide statistical insights regarding the vaccination of the student population, by faculty, residence or other"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"   relevant parameters."},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"1. Undo feature to quickly correct accidental mistakes."},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"\u003eFor the detailed documentation of this project, see the"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"**[Vax@NUS Website](https://ay2021s2-cs2103t-w10-4.github.io/tp/)**."},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"This project is based on the AddressBook-Level3 project created by"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"the [SE-EDU initiative](https://se-education.org)."}],"authorContributionMap":{"fairyinabottle4":50,"picasdan9":3,"-":11}},{"path":"docs/team/fairyinabottle4.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"---"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"---"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"fairyinabottle4":46}},{"path":"docs/team/picasdan9.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"picasdan9"},"content":"---"},{"lineNumber":2,"author":{"gitId":"picasdan9"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"picasdan9"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"picasdan9"},"content":"---"},{"lineNumber":5,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":6,"author":{"gitId":"picasdan9"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":8,"author":{"gitId":"picasdan9"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":10,"author":{"gitId":"picasdan9"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":12,"author":{"gitId":"picasdan9"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"picasdan9"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"picasdan9"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"picasdan9"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"picasdan9"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":18,"author":{"gitId":"picasdan9"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":20,"author":{"gitId":"picasdan9"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":22,"author":{"gitId":"picasdan9"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"picasdan9"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":25,"author":{"gitId":"picasdan9"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"picasdan9"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"picasdan9"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":29,"author":{"gitId":"picasdan9"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"picasdan9"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"picasdan9"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"picasdan9"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"picasdan9"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"picasdan9"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":36,"author":{"gitId":"picasdan9"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"picasdan9"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"picasdan9"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"picasdan9"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"picasdan9"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":42,"author":{"gitId":"picasdan9"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"picasdan9"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"picasdan9"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"picasdan9"},"content":""},{"lineNumber":46,"author":{"gitId":"picasdan9"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"picasdan9":46}},{"path":"docs/team/sitingst.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"SiTingST"},"content":"---"},{"lineNumber":2,"author":{"gitId":"SiTingST"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"SiTingST"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"SiTingST"},"content":"---"},{"lineNumber":5,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":6,"author":{"gitId":"SiTingST"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":8,"author":{"gitId":"SiTingST"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":10,"author":{"gitId":"SiTingST"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":12,"author":{"gitId":"SiTingST"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"SiTingST"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"SiTingST"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"SiTingST"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"SiTingST"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":18,"author":{"gitId":"SiTingST"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":20,"author":{"gitId":"SiTingST"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":22,"author":{"gitId":"SiTingST"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"SiTingST"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":25,"author":{"gitId":"SiTingST"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"SiTingST"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"SiTingST"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":29,"author":{"gitId":"SiTingST"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"SiTingST"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"SiTingST"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"SiTingST"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"SiTingST"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"SiTingST"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":36,"author":{"gitId":"SiTingST"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"SiTingST"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"SiTingST"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"SiTingST"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"SiTingST"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":42,"author":{"gitId":"SiTingST"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"SiTingST"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"SiTingST"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"SiTingST"},"content":""},{"lineNumber":46,"author":{"gitId":"SiTingST"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"SiTingST":46}},{"path":"docs/team/yienyoong.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"---"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"title: John Doe\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"---"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"yienyoong":46}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION NUMBER \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_VACCINATION_STATUS + \"VACCINATION STATUS \""},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MEDICAL_DETAILS + \"MEDICAL DETAILS \""},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_SCHOOL_RESIDENCE + \"SCHOOL RESIDENCE \\n\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MATRICULATION_NUMBER + \"A01234567X \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":38,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_VACCINATION_STATUS + \"Vaccinated \""},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_MEDICAL_DETAILS + \"peanut allergy \""},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"            + PREFIX_SCHOOL_RESIDENCE + \"PGPH \\n\";"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":12,"-":62}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_MATRICULATION_NUMBER + \"MATRICULATION NUMBER]\""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_VACCINATION_STATUS + \"VACCINATION STATUS] \""},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_MEDICAL_DETAILS + \"MEDICAL DETAILS] \""},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"            + \"[\" + PREFIX_SCHOOL_RESIDENCE + \"SCHOOL RESIDENCE] \\n\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":103,"author":{"gitId":"fairyinabottle4"},"content":"        MatriculationNumber updatedMatriculationNumber \u003d editPersonDescriptor.getMatriculationNumber()"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getMatriculationNumber());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"        VaccinationStatus updatedVaccinationStatus \u003d editPersonDescriptor.getVaccinationStatus()"},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getVaccinationStatus());"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"        MedicalDetails updatedMedicalDetails \u003d editPersonDescriptor.getMedicalDetails()"},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getMedicalDetails());"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"        SchoolResidence updatedSchoolResidence \u003d editPersonDescriptor.getSchoolResidence()"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"                .orElse(personToEdit.getSchoolResidence());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(updatedName, updatedMatriculationNumber, updatedPhone, updatedEmail,"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                updatedAddress, updatedVaccinationStatus, updatedMedicalDetails, updatedSchoolResidence);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"        private MatriculationNumber matriculationNumber;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        private VaccinationStatus vaccinationStatus;"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"        private MedicalDetails medicalDetails;"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"        private SchoolResidence schoolResidence;"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":155,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":156,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":159,"author":{"gitId":"fairyinabottle4"},"content":"            setMatriculationNumber(toCopy.matriculationNumber);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":163,"author":{"gitId":"fairyinabottle4"},"content":"            setMedicalDetails(toCopy.medicalDetails);"},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"            setVaccinationStatus(toCopy.vaccinationStatus);"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"            setSchoolResidence(toCopy.schoolResidence);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":169,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":170,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":172,"author":{"gitId":"fairyinabottle4"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address);"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"fairyinabottle4"},"content":"        public void setMatriculationNumber(MatriculationNumber matriculationNumber) {"},{"lineNumber":184,"author":{"gitId":"fairyinabottle4"},"content":"            this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":185,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":187,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cMatriculationNumber\u003e getMatriculationNumber() {"},{"lineNumber":188,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(matriculationNumber);"},{"lineNumber":189,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":191,"author":{"gitId":"fairyinabottle4"},"content":"        public void setVaccinationStatus(VaccinationStatus vaccinationStatus) {"},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"            this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":193,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":195,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cVaccinationStatus\u003e getVaccinationStatus() {"},{"lineNumber":196,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(vaccinationStatus);"},{"lineNumber":197,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"-"},"content":""},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"fairyinabottle4"},"content":"        public void setMedicalDetails(MedicalDetails medicalDetails) {"},{"lineNumber":224,"author":{"gitId":"fairyinabottle4"},"content":"            this.medicalDetails \u003d medicalDetails;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cMedicalDetails\u003e getMedicalDetails() {"},{"lineNumber":228,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(medicalDetails);"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"fairyinabottle4"},"content":"        public void setSchoolResidence(SchoolResidence schoolResidence) {"},{"lineNumber":232,"author":{"gitId":"fairyinabottle4"},"content":"            this.schoolResidence \u003d schoolResidence;"},{"lineNumber":233,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":235,"author":{"gitId":"fairyinabottle4"},"content":"        public Optional\u003cSchoolResidence\u003e getSchoolResidence() {"},{"lineNumber":236,"author":{"gitId":"fairyinabottle4"},"content":"            return Optional.ofNullable(schoolResidence);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":248,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":257,"author":{"gitId":"fairyinabottle4"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress());"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":58,"-":202}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_ADDRESS, PREFIX_VACCINATION_STATUS, PREFIX_MEDICAL_DETAILS, PREFIX_SCHOOL_RESIDENCE);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_ADDRESS, PREFIX_PHONE,"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"                PREFIX_VACCINATION_STATUS, PREFIX_EMAIL, PREFIX_MEDICAL_DETAILS)"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        MatriculationNumber matriculationNumber \u003d ParserUtil.parseMatric(argMultimap"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                .getValue(PREFIX_MATRICULATION_NUMBER).get());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"        VaccinationStatus vaccinationStatus \u003d ParserUtil.parseVacStatus(argMultimap"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"                .getValue(PREFIX_VACCINATION_STATUS).get());"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"        MedicalDetails medicalDetails \u003d ParserUtil.parseMedicalDetails(argMultimap.getValue(PREFIX_MEDICAL_DETAILS)"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"                .get());"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"        SchoolResidence schoolResidence \u003d ParserUtil.parseSchoolRes(argMultimap.getValue(PREFIX_SCHOOL_RESIDENCE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        Person person \u003d new Person(name, matriculationNumber, phone, email, address, vaccinationStatus, medicalDetails,"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"                schoolResidence);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":21,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_MATRICULATION_NUMBER \u003d new Prefix(\"i/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_VACCINATION_STATUS \u003d new Prefix(\"s/\");"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_MEDICAL_DETAILS \u003d new Prefix(\"m/\");"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Prefix PREFIX_SCHOOL_RESIDENCE \u003d new Prefix(\"r/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":4,"-":13}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_MATRICULATION_NUMBER, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"                        PREFIX_ADDRESS, PREFIX_VACCINATION_STATUS, PREFIX_MEDICAL_DETAILS, PREFIX_SCHOOL_RESIDENCE);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_MATRICULATION_NUMBER).isPresent()) {"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setMatriculationNumber(ParserUtil.parseMatric(argMultimap"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_MATRICULATION_NUMBER).get()));"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_VACCINATION_STATUS).isPresent()) {"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setVaccinationStatus(ParserUtil.parseVacStatus(argMultimap"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_VACCINATION_STATUS).get()));"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_MEDICAL_DETAILS).isPresent()) {"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setMedicalDetails(ParserUtil.parseMedicalDetails(argMultimap"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_MEDICAL_DETAILS).get()));"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        if (argMultimap.getValue(PREFIX_SCHOOL_RESIDENCE).isPresent()) {"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"            editPersonDescriptor.setSchoolResidence(ParserUtil.parseSchoolRes(argMultimap"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"                    .getValue(PREFIX_SCHOOL_RESIDENCE)));"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":22,"-":58}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String matriculationNumber} into a {@code MatriculationNumber}."},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code matriculationNumber} is invalid."},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"    public static MatriculationNumber parseMatric(String matriculationNumber) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(matriculationNumber);"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedMatric \u003d matriculationNumber.trim();"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MatriculationNumber.isValidMatric(trimmedMatric)) {"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        return new MatriculationNumber(trimmedMatric);"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String vaccinationStatus} into a {@code vaccinationStatus}."},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":103,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code vaccinationStatus} is invalid."},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"    public static VaccinationStatus parseVacStatus(String vaccinationStatus) throws ParseException {"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(vaccinationStatus);"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedVacStatus \u003d vaccinationStatus.trim();"},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"        if (!VaccinationStatus.isValidStatus(trimmedVacStatus)) {"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"        return new VaccinationStatus(trimmedVacStatus);"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String medicalDetails} into a {@code medicalDetails}."},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code medicalDetails} is invalid."},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"    public static MedicalDetails parseMedicalDetails(String medicalDetails) throws ParseException {"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(medicalDetails);"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"        String trimmedMedDetails \u003d medicalDetails.trim();"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MedicalDetails.isValidMedicalDetails(trimmedMedDetails)) {"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"            throw new ParseException(MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"        return new MedicalDetails(trimmedMedDetails);"},{"lineNumber":128,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":"     * Parses a {@code String schoolResidence} into an {@code schoolResidence}."},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"     * @throws ParseException if the given {@code schoolResidence} is invalid."},{"lineNumber":150,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"fairyinabottle4"},"content":"    public static SchoolResidence parseSchoolRes(Optional\u003cString\u003e schoolResidence) throws ParseException {"},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(schoolResidence);"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"        if (schoolResidence.isEmpty()) {"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"            return new SchoolResidence(\"Does not live on campus\");"},{"lineNumber":155,"author":{"gitId":"fairyinabottle4"},"content":"        } else {"},{"lineNumber":156,"author":{"gitId":"fairyinabottle4"},"content":"            String trimmedSchoolRes \u003d schoolResidence.get().trim();"},{"lineNumber":157,"author":{"gitId":"fairyinabottle4"},"content":"            if (!SchoolResidence.isValidResidence(trimmedSchoolRes)) {"},{"lineNumber":158,"author":{"gitId":"fairyinabottle4"},"content":"                throw new ParseException(SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitId":"fairyinabottle4"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"fairyinabottle4"},"content":"            return new SchoolResidence(trimmedSchoolRes);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":63,"-":100}},{"path":"src/main/java/seedu/address/model/person/MatriculationNumber.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"public class MatriculationNumber {"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Matriculation numbers should be of the format A + \""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"            + \"7 digit numeric sequence + alphabet.\";"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String FIRST_CHARACTER \u003d \"A\";"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String NUMERIC_SEQUENCE \u003d \"\\\\d{7}\";"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String LAST_CHARACTER \u003d \"[A-Z]\";"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALIDATION_REGEX \u003d FIRST_CHARACTER + NUMERIC_SEQUENCE + LAST_CHARACTER;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructor for a MatriculationNumber object."},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     * @param matriculationNumber The string of the matriculation number."},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"    public MatriculationNumber(String matriculationNumber) {"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(matriculationNumber);"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidMatric(matriculationNumber), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d matriculationNumber;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns if a given string is a valid matriculation number."},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidMatric(String test) {"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MatriculationNumber // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MatriculationNumber) other).value)); // state check"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":56}},{"path":"src/main/java/seedu/address/model/person/MedicalDetails.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":" * Represents a Person\u0027s medical details in the address book."},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMedicalDetails(String)}"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":" */"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"public class MedicalDetails {"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"MedicalDetails can take any values, and it should not be blank.\""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"            + \"If there is nothing worthy of reporting, enter \u0027none\u0027.\";"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code MedicalDetails}."},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"     * @param medicalDetails valid medical details."},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    public MedicalDetails(String medicalDetails) {"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(medicalDetails);"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidMedicalDetails(medicalDetails), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d medicalDetails;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if a given string is a valid email."},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidMedicalDetails(String test) {"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MedicalDetails // instanceof handles nulls"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MedicalDetails) other).value)); // state check"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":58}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    private final MatriculationNumber matriculationNumber;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    private final VaccinationStatus vaccinationStatus;"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    private final MedicalDetails medicalDetails;"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    private final SchoolResidence schoolResidence;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    public Person(Name name, MatriculationNumber matriculationNumber, Phone phone, Email email, Address address,"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"                  VaccinationStatus vaccinationStatus, MedicalDetails medicalDetails, SchoolResidence schoolResidence) {"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        requireAllNonNull(name, phone, email, address);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d medicalDetails;"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        this.schoolResidence \u003d schoolResidence;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    public MatriculationNumber getMatriculationNumber() {"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"        return this.matriculationNumber;"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    public VaccinationStatus getVaccinationStatus() {"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        return vaccinationStatus;"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    public MedicalDetails getMedicalDetails() {"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"        return medicalDetails;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"    public SchoolResidence getSchoolResidence() {"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"        return schoolResidence;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":"        return Objects.hash(name, phone, email, address);"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":25,"-":102}},{"path":"src/main/java/seedu/address/model/person/SchoolResidence.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"public class SchoolResidence {"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    private static final List\u003cString\u003e listResidences \u003d Arrays.asList(\"PGPH\", \"PGPR\", \"KE7H\", \"SH\", \"KRH\", \"TH\", \"EH\","},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"            \"RH\", \"RVRC\", \"YNC\", \"TC\", \"CAPT\", \"RC4\", \"USP\", \"UTR\");"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"The residence entered should be one of the following: \\n\""},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"            + listResidences.toString();"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code SchoolResidence}."},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"     * @param schoolResidence A valid SchoolResidence."},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    public SchoolResidence(String schoolResidence) {"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(schoolResidence);"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidResidence(schoolResidence), MESSAGE_CONSTRAINTS);"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d schoolResidence;"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if the given string is a valid status."},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"     * @param test the string whose format is to be checked."},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"     * @return true if test is a valid residence, false otherwise."},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidResidence(String test) {"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        boolean result \u003d listResidences.contains(test.toUpperCase())"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"                || test.equalsIgnoreCase(\"Does not live on campus\");"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        return result;"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MatriculationNumber // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MatriculationNumber) other).value)); // state check"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":58}},{"path":"src/main/java/seedu/address/model/person/VaccinationStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"fairyinabottle4"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":3,"author":{"gitId":"fairyinabottle4"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"public class VaccinationStatus {"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Vaccination status should only be of the format \u0027vaccinated\u0027 \""},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"            + \"or \u0027not vaccinated\u0027 \";"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    public final String value;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"     * Constructs an {@code VaccinationStatus}."},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"     * @param vaccinationStatus A valid VaccinationStatus."},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    public VaccinationStatus(String vaccinationStatus) {"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"        requireNonNull(vaccinationStatus);"},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"        checkArgument(isValidStatus(vaccinationStatus), MESSAGE_CONSTRAINTS);"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"        value \u003d vaccinationStatus;"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"     * Returns true if the given string is a valid status."},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"     * @param test the string whose format is to be checked."},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"     * @return true if test is a valid statis, false otherwise."},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    public static boolean isValidStatus(String test) {"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"        boolean result \u003d test.equals(\"not vaccinated\") || test.equals(\"vaccinated\");"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"        return result;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        return value;"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"                || (other instanceof MatriculationNumber // instanceof handles nulls"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"                \u0026\u0026 value.equals(((MatriculationNumber) other).value)); // state check"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"    public int hashCode() {"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        return value.hashCode();"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":51}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Alex Yeoh\"), new MatriculationNumber(\"A0182345T\"), new Phone(\"87438807\"),"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"alexyeoh@example.com\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"                new VaccinationStatus(\"vaccinated\"), new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Bernice Yu\"), new MatriculationNumber(\"A0175678U\"), new Phone(\"99272758\"),"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"berniceyu@example.com\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"not vaccinated\"), new MedicalDetails(\"shellfish allergy\"),"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"                    new SchoolResidence(\"PGPH\")),"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new MatriculationNumber(\"A0164567V\"), new Phone(\"93210283\"),"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"charlotte@example.com\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"vaccinated\"), new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"David Li\"), new MatriculationNumber(\"A0209875D\"), new Phone(\"91031282\"),"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"lidavid@example.com\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"not vaccinated\"), new MedicalDetails(\"history of anaphylaxis\"),"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"                    new SchoolResidence(\"PGPH\")),"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new MatriculationNumber(\"A0214432E\"), new Phone(\"92492021\"),"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"irfan@example.com\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"vaccinated\"), new MedicalDetails(\"none\"), new SchoolResidence(\"PGPH\")),"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new MatriculationNumber(\"A0221234N\"), new Phone(\"92624417\"),"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"                    new Email(\"royb@example.com\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"                    new VaccinationStatus(\"not vaccinated\"), new MedicalDetails(\"penicillin allergy\"),"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"                    new SchoolResidence(\"PGPH\"))"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":25,"-":27}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    private final String matriculationNumber;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    private final String vaccinationStatus;"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    private final String medicalDetails;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"    private final String schoolResidence;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"matriculationNumber\") String matriculationNumber,"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"phone\") String phone,"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"vaccinationStatus\") String vaccinationStatus,"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"medicalDetails\") String medicalDetails,"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"                             @JsonProperty(\"schoolResidence\") String schoolResidence) {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d matriculationNumber;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d vaccinationStatus;"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d medicalDetails;"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"        this.schoolResidence \u003d schoolResidence;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d source.getMatriculationNumber().value;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        vaccinationStatus \u003d source.getVaccinationStatus().value;"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d source.getMedicalDetails().value;"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"        schoolResidence \u003d source.getSchoolResidence().value;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"        if (matriculationNumber \u003d\u003d null) {"},{"lineNumber":83,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"                    MatriculationNumber.class.getSimpleName()));"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MatriculationNumber.isValidMatric(matriculationNumber)) {"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"        final MatriculationNumber modelMatric \u003d new MatriculationNumber(matriculationNumber);"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"        if (vaccinationStatus \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"                    VaccinationStatus.class.getSimpleName()));"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"        if (!VaccinationStatus.isValidStatus(vaccinationStatus)) {"},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"        final VaccinationStatus modelVacStatus \u003d new VaccinationStatus(vaccinationStatus);"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"        if (medicalDetails \u003d\u003d null) {"},{"lineNumber":128,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":"                    MedicalDetails.class.getSimpleName()));"},{"lineNumber":130,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"        if (!MedicalDetails.isValidMedicalDetails(medicalDetails)) {"},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"        final MedicalDetails modelMedDetails \u003d new MedicalDetails(medicalDetails);"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"        if (!SchoolResidence.isValidResidence(schoolResidence)) {"},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"            throw new IllegalValueException(SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"        final SchoolResidence modelSchoolRes \u003d new SchoolResidence(schoolResidence);"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(modelName, modelMatric, modelPhone, modelEmail, modelAddress, modelVacStatus,"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"                modelMedDetails, modelSchoolRes);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":60,"-":86}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w10-4.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":1,"-":101}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":11,"author":{"gitId":"-"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    private Label matriculationNumber;"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"    private Label vaccinationStatus;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":51,"author":{"gitId":"fairyinabottle4"},"content":"        //to be added in the future when the space in the PersonCard is added"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"        //matriculationNumber.setText(person.getMatriculationNumber().value);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        //to be added in the future when the space in the PersonCard is added"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"        //vaccinationStatus.setText(person.getVaccinationStatus().value);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":7,"-":70}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"    \"address\": \"4th street\","},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":20,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":9,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A3456789D\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":8,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"shellfish allergy\","},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":12,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A4567890E\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":20,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A5678901F\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A6789012G\","},{"lineNumber":33,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"pollen allergy\","},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A7890123H\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A8901234I\","},{"lineNumber":51,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"vaccinated\","},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"bee sting allergy\","},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":57,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"    \"matriculationNumber\" : \"A9012345J\","},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":61,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":62,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"    \"vaccinationStatus\" : \"not vaccinated\","},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"    \"medicalDetails\" : \"none\","},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    \"schoolResidence\" : \"RVRC\""},{"lineNumber":66,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":28,"-":39}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_AMY + STATUS_DESC_AMY + DETAILS_DESC_AMY;"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":6,"-":159}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":8,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_MATRIC_AMY \u003d \"A0199264N\";"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_MATRIC_BOB \u003d \"A0245431K\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_STATUS_AMY \u003d \"vaccinated\";"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_STATUS_BOB \u003d \"not vaccinated\";"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_DETAILS_AMY \u003d \"none\";"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_DETAILS_BOB \u003d \"peanut allergy\";"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_RESIDENCE_AMY \u003d \"RC4\";"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String VALID_RESIDENCE_BOB \u003d \"CAPT\";"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MATRIC_DESC_AMY \u003d \" \" + PREFIX_MATRICULATION_NUMBER + VALID_MATRIC_AMY;"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String MATRIC_DESC_BOB \u003d \" \" + PREFIX_MATRICULATION_NUMBER + VALID_MATRIC_BOB;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_VACCINATION_STATUS + VALID_STATUS_AMY;"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_VACCINATION_STATUS + VALID_STATUS_BOB;"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DETAILS_DESC_AMY \u003d \" \" + PREFIX_MEDICAL_DETAILS + VALID_DETAILS_AMY;"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DETAILS_DESC_BOB \u003d \" \" + PREFIX_MEDICAL_DETAILS + VALID_DETAILS_BOB;"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String RESIDENCE_DESC_AMY \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + VALID_RESIDENCE_AMY;"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String RESIDENCE_DESC_BOB \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + VALID_RESIDENCE_BOB;"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_MATRIC_DESC \u003d \" \" + PREFIX_MATRICULATION_NUMBER"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"            + \"A01Z34567F\"; // \u0027Z\u0027 not allowed in matriculation number"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_STATUS_DESC \u003d \" \" + PREFIX_VACCINATION_STATUS + \"v@ccin@ted\";"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_DETAILS_DESC \u003d \" \" + PREFIX_MEDICAL_DETAILS;"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String INVALID_RESIDENCE_DESC \u003d \" \" + PREFIX_SCHOOL_RESIDENCE + \"rc5\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withMatric(VALID_MATRIC_AMY)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_AMY).withMedDetails(VALID_DETAILS_AMY)"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"                .withSchoolRes(VALID_RESIDENCE_AMY).build();"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withMatric(VALID_MATRIC_BOB)"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":"                .withVacStatus(VALID_STATUS_BOB).withMedDetails(VALID_DETAILS_BOB)"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":"                .withSchoolRes(VALID_RESIDENCE_BOB).build();"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":130,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":32,"-":119}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":31,"author":{"gitId":"-"},"content":" */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"                .build();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"                .withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":142,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"-":170}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DETAILS_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAILS_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":16,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESIDENCE_DESC;"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_AMY;"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MATRIC_DESC_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESIDENCE_DESC_AMY;"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.RESIDENCE_DESC_BOB;"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_AMY;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.STATUS_DESC_BOB;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_BOB;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_BOB;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple matriculation numbers - last matric number accepted"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + MATRIC_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":79,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":80,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":84,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":92,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple vaccination statuses - last vaccination status accepted"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + MATRIC_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + STATUS_DESC_AMY + DETAILS_DESC_BOB"},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":97,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple medical details  - last medical details accepted"},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + MATRIC_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_AMY + DETAILS_DESC_BOB"},{"lineNumber":102,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_BOB,"},{"lineNumber":103,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"        // multiple school residences  - last school residences accepted"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + MATRIC_DESC_AMY + PHONE_DESC_BOB"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"                        + RESIDENCE_DESC_AMY,"},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).build();"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + MATRIC_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_AMY + STATUS_DESC_AMY + DETAILS_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":"        // missing matriculation number prefix"},{"lineNumber":128,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB"},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB"},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"                        + VALID_ADDRESS_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"        // missing vaccination status prefix"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":145,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + VALID_STATUS_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        // missing medical details prefix"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_MATRIC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + VALID_DETAILS_BOB, expectedMessage);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":152,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_MATRIC_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"                        + VALID_ADDRESS_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB, expectedMessage);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":159,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":160,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":161,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":162,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid matriculation number"},{"lineNumber":163,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_MATRIC_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"                MatriculationNumber.MESSAGE_CONSTRAINTS);"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":168,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"},{"lineNumber":169,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":170,"author":{"gitId":"fairyinabottle4"},"content":"                Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":173,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"},{"lineNumber":174,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":175,"author":{"gitId":"fairyinabottle4"},"content":"                Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":178,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":179,"author":{"gitId":"fairyinabottle4"},"content":"                + INVALID_ADDRESS_DESC + STATUS_DESC_BOB + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":180,"author":{"gitId":"fairyinabottle4"},"content":"                Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":181,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":182,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid vaccination status"},{"lineNumber":183,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":184,"author":{"gitId":"fairyinabottle4"},"content":"                + ADDRESS_DESC_BOB + INVALID_STATUS_DESC + DETAILS_DESC_BOB + RESIDENCE_DESC_BOB,"},{"lineNumber":185,"author":{"gitId":"fairyinabottle4"},"content":"                VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid medical details"},{"lineNumber":188,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":189,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_BOB + STATUS_DESC_BOB + INVALID_DETAILS_DESC + RESIDENCE_DESC_BOB,"},{"lineNumber":190,"author":{"gitId":"fairyinabottle4"},"content":"                MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"fairyinabottle4"},"content":"        // invalid school residence"},{"lineNumber":193,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":194,"author":{"gitId":"fairyinabottle4"},"content":"                        + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + INVALID_RESIDENCE_DESC,"},{"lineNumber":195,"author":{"gitId":"fairyinabottle4"},"content":"                SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":199,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + MATRIC_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":200,"author":{"gitId":"fairyinabottle4"},"content":"                        + INVALID_ADDRESS_DESC + STATUS_DESC_BOB + DETAILS_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":203,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + MATRIC_DESC_BOB + PHONE_DESC_BOB"},{"lineNumber":204,"author":{"gitId":"fairyinabottle4"},"content":"                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + STATUS_DESC_BOB + DETAILS_DESC_BOB + DETAILS_DESC_BOB,"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":116,"-":91}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_DETAILS_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_RESIDENCE_DESC;"},{"lineNumber":15,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_STATUS_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":21,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_DETAILS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_AMY;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_RESIDENCE_AMY;"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_STATUS_AMY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1 o/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MATRIC_DESC,"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"                MatriculationNumber.MESSAGE_CONSTRAINTS); // invalid matric number"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_STATUS_DESC, VaccinationStatus.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \" 1\" + INVALID_DETAILS_DESC, MedicalDetails.MESSAGE_CONSTRAINTS);"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_RESIDENCE_DESC, SchoolResidence.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"                        + VALID_PHONE_AMY, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                .withMatric(VALID_MATRIC_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"                .withAddress(VALID_ADDRESS_AMY).withVacStatus(VALID_STATUS_AMY).withSchoolRes(VALID_RESIDENCE_AMY)"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"                .withMedDetails(VALID_DETAILS_BOB).build();"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":168,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":169,"author":{"gitId":"fairyinabottle4"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB;"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":172,"author":{"gitId":"fairyinabottle4"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":175,"author":{"gitId":"-"},"content":""},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":190,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":192,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":28,"-":168}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"-":99}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":1,"-":78}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":44,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":2,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":13,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":14,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":17,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":18,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_MATRICULATION_NUMBER \u003d \"A12345X\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_VACCINATION_STATUS \u003d \"vaccinate\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_MEDICAL_DETAILS \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String INVALID_SCHOOL_RESIDENCE \u003d \"tembu\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_MATRICULATION_NUMBER \u003d BENSON.getMatriculationNumber().toString();"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_VACCINATION_STATUS \u003d BENSON.getVaccinationStatus().toString();"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_MEDICAL_DETAILS \u003d BENSON.getMedicalDetails().value;"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"    private static final String VALID_SCHOOL_RESIDENCE \u003d BENSON.getSchoolResidence().value;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":48,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidMatriculationNumber_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, INVALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":64,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":65,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d MatriculationNumber.MESSAGE_CONSTRAINTS;"},{"lineNumber":66,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":67,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":69,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullMatriculationNumber_throwsIllegalValueException() {"},{"lineNumber":71,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_PHONE, VALID_EMAIL,"},{"lineNumber":72,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MatriculationNumber.class.getSimpleName());"},{"lineNumber":74,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":77,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":81,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":82,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, null,"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":98,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS,"},{"lineNumber":99,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"                null, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS,"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"                        VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, null, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidVaccinationStatus_throwsIllegalValueException() {"},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, INVALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":133,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d VaccinationStatus.MESSAGE_CONSTRAINTS;"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":137,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":138,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullVaccinationStatus_throwsIllegalValueException() {"},{"lineNumber":139,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":140,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, null, VALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":141,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, VaccinationStatus.class.getSimpleName());"},{"lineNumber":142,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":143,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidMedicalDetails_throwsIllegalValueException() {"},{"lineNumber":147,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":148,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, INVALID_MEDICAL_DETAILS, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":149,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d MedicalDetails.MESSAGE_CONSTRAINTS;"},{"lineNumber":150,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_nullMedicalDetails_throwsIllegalValueException() {"},{"lineNumber":155,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":156,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, null, VALID_SCHOOL_RESIDENCE);"},{"lineNumber":157,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, MedicalDetails.class.getSimpleName());"},{"lineNumber":158,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"fairyinabottle4"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"fairyinabottle4"},"content":"    public void toModelType_invalidSchoolResidence_throwsIllegalValueException() {"},{"lineNumber":163,"author":{"gitId":"fairyinabottle4"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_MATRICULATION_NUMBER, VALID_PHONE,"},{"lineNumber":164,"author":{"gitId":"fairyinabottle4"},"content":"                VALID_EMAIL, VALID_ADDRESS, VALID_VACCINATION_STATUS, VALID_MEDICAL_DETAILS, INVALID_SCHOOL_RESIDENCE);"},{"lineNumber":165,"author":{"gitId":"fairyinabottle4"},"content":"        String expectedMessage \u003d SchoolResidence.MESSAGE_CONSTRAINTS;"},{"lineNumber":166,"author":{"gitId":"fairyinabottle4"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":167,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":78,"-":90}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":7,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":12,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":35,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMatriculationNumber(person.getMatriculationNumber());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setVaccinationStatus(person.getVaccinationStatus());"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMedicalDetails(person.getMedicalDetails());"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setSchoolResidence(person.getSchoolResidence());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code MatricuationNumber} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withMatric(String matric) {"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMatriculationNumber(new MatriculationNumber(matric));"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code vaccinationStatus} of the {@code vaccinationStatus} that we are building."},{"lineNumber":86,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withVacStatus(String vaccinationStatus) {"},{"lineNumber":88,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setVaccinationStatus(new VaccinationStatus(vaccinationStatus));"},{"lineNumber":89,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code medicalDetails} of the {@code medicalDetails} that we are building."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withMedDetails(String medicalDetails) {"},{"lineNumber":96,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setMedicalDetails(new MedicalDetails(medicalDetails));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"fairyinabottle4"},"content":"     * Sets the {@code schoolResidence} of the {@code schoolResidence} that we are building."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"fairyinabottle4"},"content":"    public EditPersonDescriptorBuilder withSchoolRes(String schoolResidence) {"},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.setSchoolResidence(new SchoolResidence(schoolResidence));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":30,"-":81}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MatriculationNumber;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.MedicalDetails;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.SchoolResidence;"},{"lineNumber":11,"author":{"gitId":"fairyinabottle4"},"content":"import seedu.address.model.person.VaccinationStatus;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":19,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_MATRIC \u003d \"A0192376F\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_VAC_STATUS \u003d \"not vaccinated\";"},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_MED_DETAILS \u003d \"none\";"},{"lineNumber":25,"author":{"gitId":"fairyinabottle4"},"content":"    public static final String DEFAULT_SCHOOL_RESIDENCE \u003d \"RVRC\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    private MatriculationNumber matriculationNumber;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":32,"author":{"gitId":"fairyinabottle4"},"content":"    private VaccinationStatus vaccinationStatus;"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"    private MedicalDetails medicalDetails;"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"    private SchoolResidence schoolResidence;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":41,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d new MatriculationNumber(DEFAULT_MATRIC);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"        vaccinationStatus \u003d new VaccinationStatus(DEFAULT_VAC_STATUS);"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d new MedicalDetails(DEFAULT_MED_DETAILS);"},{"lineNumber":47,"author":{"gitId":"fairyinabottle4"},"content":"        schoolResidence \u003d new SchoolResidence(DEFAULT_SCHOOL_RESIDENCE);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"        matriculationNumber \u003d personToCopy.getMatriculationNumber();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"        vaccinationStatus \u003d personToCopy.getVaccinationStatus();"},{"lineNumber":60,"author":{"gitId":"fairyinabottle4"},"content":"        medicalDetails \u003d personToCopy.getMedicalDetails();"},{"lineNumber":61,"author":{"gitId":"fairyinabottle4"},"content":"        schoolResidence \u003d personToCopy.getSchoolResidence();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code MatriculationNumber} of the {@code Person} that we are building"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withMatric(String matric) {"},{"lineNumber":76,"author":{"gitId":"fairyinabottle4"},"content":"        this.matriculationNumber \u003d new MatriculationNumber(matric);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code VaccinationStatus} of the {@code Person} that we are building"},{"lineNumber":106,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withVacStatus(String vaccinationStatus) {"},{"lineNumber":108,"author":{"gitId":"fairyinabottle4"},"content":"        this.vaccinationStatus \u003d new VaccinationStatus(vaccinationStatus);"},{"lineNumber":109,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":110,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":112,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code MedicalDetails} of the {@code Person} that we are building"},{"lineNumber":114,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withMedDetails(String medicalDetails) {"},{"lineNumber":116,"author":{"gitId":"fairyinabottle4"},"content":"        this.medicalDetails \u003d new MedicalDetails(medicalDetails);"},{"lineNumber":117,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":118,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":120,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"fairyinabottle4"},"content":"     *Sets the {@code schoolResidence} of the {@code Person} that we are building"},{"lineNumber":122,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"fairyinabottle4"},"content":"    public PersonBuilder withSchoolRes(String schoolResidence) {"},{"lineNumber":124,"author":{"gitId":"fairyinabottle4"},"content":"        this.schoolResidence \u003d new SchoolResidence(schoolResidence);"},{"lineNumber":125,"author":{"gitId":"fairyinabottle4"},"content":"        return this;"},{"lineNumber":126,"author":{"gitId":"fairyinabottle4"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"fairyinabottle4"},"content":""},{"lineNumber":128,"author":{"gitId":"fairyinabottle4"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"fairyinabottle4"},"content":"     * Builds a new Person object."},{"lineNumber":130,"author":{"gitId":"fairyinabottle4"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"fairyinabottle4"},"content":"     * @return a person object."},{"lineNumber":132,"author":{"gitId":"fairyinabottle4"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":134,"author":{"gitId":"fairyinabottle4"},"content":"        return new Person(name, matriculationNumber, phone, email, address, vaccinationStatus, medicalDetails,"},{"lineNumber":135,"author":{"gitId":"fairyinabottle4"},"content":"                schoolResidence);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":54,"-":84}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRICULATION_NUMBER;"},{"lineNumber":6,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICAL_DETAILS;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL_RESIDENCE;"},{"lineNumber":10,"author":{"gitId":"fairyinabottle4"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_VACCINATION_STATUS;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_MATRICULATION_NUMBER + person.getMatriculationNumber().value + \" \");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_VACCINATION_STATUS + person.getVaccinationStatus().value + \" \");"},{"lineNumber":38,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_MEDICAL_DETAILS + person.getMedicalDetails().value + \" \");"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"        sb.append(PREFIX_SCHOOL_RESIDENCE + person.getSchoolResidence().value + \" \");"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getMatriculationNumber().ifPresent(matriculationNumber -\u003e sb.append(PREFIX_MATRICULATION_NUMBER)"},{"lineNumber":50,"author":{"gitId":"fairyinabottle4"},"content":"                .append(matriculationNumber.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getVaccinationStatus().ifPresent(vaccinationStatus -\u003e sb.append(PREFIX_VACCINATION_STATUS)"},{"lineNumber":55,"author":{"gitId":"fairyinabottle4"},"content":"                .append(vaccinationStatus.value).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getMedicalDetails().ifPresent(medicalDetails -\u003e sb.append(PREFIX_MEDICAL_DETAILS)"},{"lineNumber":57,"author":{"gitId":"fairyinabottle4"},"content":"                .append(medicalDetails.value).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"        descriptor.getSchoolResidence().ifPresent(schoolResidence -\u003e sb.append(PREFIX_SCHOOL_RESIDENCE)"},{"lineNumber":59,"author":{"gitId":"fairyinabottle4"},"content":"                .append(schoolResidence.value).append(\" \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":16,"-":46}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":21,"author":{"gitId":"-"},"content":" */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\").withMatric(\"A3456789D\")"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":26,"author":{"gitId":"fairyinabottle4"},"content":"            .withPhone(\"94351253\").withVacStatus(\"vaccinated\").withMedDetails(\"history of anaphylaxis\")"},{"lineNumber":27,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").build();"},{"lineNumber":28,"author":{"gitId":"fairyinabottle4"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\").withMatric(\"A4567890E\")"},{"lineNumber":29,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":30,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withVacStatus(\"not vaccinated\").withMedDetails(\"none\")"},{"lineNumber":31,"author":{"gitId":"fairyinabottle4"},"content":"            .build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":33,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A5678901F\").withEmail(\"heinz@example.com\").withVacStatus(\"vaccinated\")"},{"lineNumber":34,"author":{"gitId":"fairyinabottle4"},"content":"            .withMedDetails(\"none\").withAddress(\"wall street\").build();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":36,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A6789012G\").withEmail(\"cornelia@example.com\")"},{"lineNumber":37,"author":{"gitId":"fairyinabottle4"},"content":"            .withAddress(\"10th street\").withMedDetails(\"none\").withVacStatus(\"not vaccinated\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":39,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A7890123H\").withEmail(\"werner@example.com\")"},{"lineNumber":40,"author":{"gitId":"fairyinabottle4"},"content":"            .withVacStatus(\"not vaccinated\").withMedDetails(\"none\").withAddress(\"michegan ave\").build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":42,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A8901234I\").withEmail(\"lydia@example.com\").withVacStatus(\"vaccinated\")"},{"lineNumber":43,"author":{"gitId":"fairyinabottle4"},"content":"            .withMedDetails(\"none\").withAddress(\"little tokyo\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":45,"author":{"gitId":"fairyinabottle4"},"content":"            .withSchoolRes(\"RVRC\").withMatric(\"A9012345J\").withEmail(\"anna@example.com\").withVacStatus(\"not vaccinated\")"},{"lineNumber":46,"author":{"gitId":"fairyinabottle4"},"content":"            .withMedDetails(\"none\").withAddress(\"4th street\").build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":56,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"fairyinabottle4"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"fairyinabottle4":19,"-":60}}]
