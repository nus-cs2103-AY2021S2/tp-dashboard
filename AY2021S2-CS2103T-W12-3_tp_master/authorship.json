[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W12-3/tp/actions)"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"* The `Link.me` project is a client managing program for insurance agents, both experienced"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"and inexperienced."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"* The overall design is very client-oriented, as personal details and other information will"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"be displayed under a client."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"  * Meetings and events will be shown in a client-list format as well."},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"* The project is an ongoing software project for a desktop application (called _Link.me_) used for client management."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"  * The project is written in OOP fashion with a dash of FP in stream usage."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**."}],"authorContributionMap":{"georgepwhuang":10,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"HuaiZe"},"content":"### Damith "},{"lineNumber":13,"author":{"gitId":"HuaiZe"},"content":"Damith Chatura Rajapakse"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/johndoe.png\" width\u003d\"200px\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[homepage](http://www.comp.nus.edu.sg/~damithch)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Project Advisor"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"KnitidCeladon23"},"content":"### Kenny Chew Pu Yang"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"KnitidCeladon23"},"content":"\u003cimg src\u003d\"images/knitidceladon23.png\" width\u003d\"200px\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"KnitidCeladon23"},"content":"[[github](http://github.com/KnitidCeladon23)]"},{"lineNumber":25,"author":{"gitId":"KnitidCeladon23"},"content":"[[portfolio](team/kennychew.md)]"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"KnitidCeladon23"},"content":"* Role: Developer"},{"lineNumber":28,"author":{"gitId":"KnitidCeladon23"},"content":"* Responsibilities: Testing"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"### Huang, Po-Wei"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"\u003cimg src\u003d\"images/georgepwhuang.png\" width\u003d\"200px\"\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"[[github](http://github.com/georgepwhuang)] [[portfolio](team/georgepwhuang.md)]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"* Responsibilities: Deliverables and deadlines + IntelliJ "},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"HuaiZe"},"content":"### Koh Huai Ze"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"HuaiZe"},"content":"\u003cimg src\u003d\"images/huaize.png\" width\u003d\"200px\"\u003e"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"HuaiZe"},"content":"[[github](http://github.com/HuaiZe)]"},{"lineNumber":44,"author":{"gitId":"HuaiZe"},"content":"[[portfolio](team/huaize.md)]"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":47,"author":{"gitId":"HuaiZe"},"content":"* Responsibilities: Documentation, Code Quality"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"### Shuyang"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Shuyang0"},"content":"\u003cimg src\u003d\"images/shuyang0.png\" width\u003d\"200px\"\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"[[github](http://github.com/Shuyang0)]"},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"[[portfolio](team/shuyang.md)]"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"* Responsibilities: Integration, Git expert"}],"authorContributionMap":{"KnitidCeladon23":6,"georgepwhuang":4,"Shuyang0":5,"HuaiZe":7,"-":35}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"KnitidCeladon23"},"content":"* is an insurance agent"},{"lineNumber":240,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts"},{"lineNumber":241,"author":{"gitId":"KnitidCeladon23"},"content":"* has a need to maintain close relations with clients over a long time period (usually 10+ years)"},{"lineNumber":242,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types"},{"lineNumber":243,"author":{"gitId":"-"},"content":"* can type fast"},{"lineNumber":244,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions"},{"lineNumber":245,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":246,"author":{"gitId":"-"},"content":""},{"lineNumber":247,"author":{"gitId":"KnitidCeladon23"},"content":"**Value proposition**:"},{"lineNumber":248,"author":{"gitId":"KnitidCeladon23"},"content":"* manage contacts faster than a typical mouse/GUI driven app"},{"lineNumber":249,"author":{"gitId":"KnitidCeladon23"},"content":"* maintain notes on their client, their needs, their likes/dislikes, insurance plans, applications for insurance claims, etc."},{"lineNumber":250,"author":{"gitId":"KnitidCeladon23"},"content":"* get automated reminders about upcoming meetups/ notifications if they haven’t contacted clients in a long time."},{"lineNumber":251,"author":{"gitId":"-"},"content":""},{"lineNumber":252,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":255,"author":{"gitId":"-"},"content":""},{"lineNumber":256,"author":{"gitId":"-"},"content":"| Priority | As a …​                                 | I want to …​                                             | So that I can…​                                                           |"},{"lineNumber":257,"author":{"gitId":"Shuyang0"},"content":"| -------- | ------------------------------------------ | ----------------------------------------------------------- | ---------------------------------------------------------------------------- |"},{"lineNumber":258,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | add a new client                                            |                                                                              |"},{"lineNumber":259,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | view a list of all clients                                  | get an overview of all my clients                                            |"},{"lineNumber":260,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | view a specific client and all of his/her information       | look up their personal information                                           |"},{"lineNumber":261,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | delete a client                                             | remove clients that I am no longer serving                                   |"},{"lineNumber":262,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | edit a client                                               | update clients\u0027 information without having to delete and add a new entry     |"},{"lineNumber":263,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent with many clients          | find a client by name                                       | locate details of client without having to go through the entire list        |"},{"lineNumber":264,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent with many clients          | filter clients by tag                                       | locate clients with a certain tag, without going through the entire list     |"},{"lineNumber":265,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | new user                                   | clear all entries                                           | remove sample data and make it ready for me to use                           |"},{"lineNumber":266,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | add contact information of each client                      | be able to conveniently check their contact when I need to get in touch      |"},{"lineNumber":267,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | add important dates (e.g. birthdays) related to each client | keep track of client\u0027s personal information more easily                      |"},{"lineNumber":268,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | check the age of each client                                | know if their insurance plan should be updated/ changed, as they get older   |"},{"lineNumber":269,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | add the current insurance plan of each client               | be aware of their current insurance requirements and coverage                |"},{"lineNumber":270,"author":{"gitId":"Shuyang0"},"content":"| `* * *`  | insurance agent                            | schedule meetings with people or groups of people           | keep track of upcoming meetings                                              |"},{"lineNumber":271,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | user with many persons in the address book | sort clients by criteria (name/age/premium/contract length) | locate clients more easily                                                   |"},{"lineNumber":272,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | new user                                   | see usage instructions                                      | refer to instructions when I forget how to use the App                       |"},{"lineNumber":273,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | first-time user                            | see sample entries already in the app                       | get a good idea of the functionalities of the app before deciding to use it  |"},{"lineNumber":274,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | forgetful insurance agent                  | reminders when clients\u0027 important dates are approaching     | prepare a meaningful greeting/ gift                                          |"},{"lineNumber":275,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | insurance agent                            | add likes \u0026 dislikes of each client                         | be thoughtful to them and prepare appropriate gifts                          |"},{"lineNumber":276,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | insurance agent                            | take notes about the personality of each client             | deal with them in a more effective way                                       |"},{"lineNumber":277,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | meticulous insurance agent                 | take notes about the insurance needs of each client         | recommend relevant plans and offerings                                       |"},{"lineNumber":278,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | insurance agent                            | track the status of claims made on behalf of clients        | update clients of the claims progress                                        |"},{"lineNumber":279,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | insurance agent                            | archive clients                                             | separate clients who have passed or have switched providers                  |"},{"lineNumber":280,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | insurance agent                            | pin clients to the top of the app                           | easily access clients that I am currently actively dealing with              |"},{"lineNumber":281,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | inexperienced insurance agent              | add photographs of each client                              | more easily identify them                                                    |"},{"lineNumber":282,"author":{"gitId":"Shuyang0"},"content":"| `* * `   | expert user                                | create my own categories for grouping clients               | better organise and group my client contacts                                 |"},{"lineNumber":283,"author":{"gitId":"Shuyang0"},"content":"| `* `     | first-time user                            | go through an interactive tutorial                          | learn how to use the app                                                     |"},{"lineNumber":284,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | suggestions on what to do for clients\u0027 important dates      | save time on brainstorming for a gift                                        |"},{"lineNumber":285,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | add hobbies of each client                                  | recommend certain plans if they partake in high-risk activities              |"},{"lineNumber":286,"author":{"gitId":"Shuyang0"},"content":"| `* `     | social media savvy insurance agent         | add social media accounts of each client                    | keep up to date with their lifes and be attentive                            |"},{"lineNumber":287,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | track the total claims amount made by each client           | recommend better plans and offerings if needed                               |"},{"lineNumber":288,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | add info on the insurance plans of clients\u0027 family members  | give insurance advice for client\u0027s family                                    |"},{"lineNumber":289,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | add info on the previous insurance plans of each client     | have a reference when recommending insurance plans                           |"},{"lineNumber":290,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent with few clients           | add potential clients                                       | contact and find new clients                                                 |"},{"lineNumber":291,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | track the financial status of each client                   | better recommend plans, such as for investment                               |"},{"lineNumber":292,"author":{"gitId":"Shuyang0"},"content":"| `* `     | insurance agent                            | add basic medical information of each client                | refuse new contracts in case of terminal illness                             |"},{"lineNumber":293,"author":{"gitId":"Shuyang0"},"content":"| `* `     | expert user                                | create my own shortcuts for commonly performed actions      | save time on these actions                                                   |"},{"lineNumber":294,"author":{"gitId":"Shuyang0"},"content":"| `* `     | expert user                                | disable certain UI elements that I do not use               | have a cleaner UI                                                            |"},{"lineNumber":295,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":296,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":297,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":298,"author":{"gitId":"Shuyang0"},"content":"*{More may be added}*"},{"lineNumber":299,"author":{"gitId":"-"},"content":""},{"lineNumber":300,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":303,"author":{"gitId":"-"},"content":""},{"lineNumber":304,"author":{"gitId":"georgepwhuang"},"content":"**Use case: Add a person**"},{"lineNumber":305,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":306,"author":{"gitId":"georgepwhuang"},"content":"**MSS**"},{"lineNumber":307,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":308,"author":{"gitId":"georgepwhuang"},"content":"1.  User adds a person with corresponding information."},{"lineNumber":309,"author":{"gitId":"georgepwhuang"},"content":"2.  AddressBook shows the list of persons."},{"lineNumber":310,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":311,"author":{"gitId":"georgepwhuang"},"content":"    Use case ends."},{"lineNumber":312,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":313,"author":{"gitId":"georgepwhuang"},"content":"**Extensions**"},{"lineNumber":314,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":315,"author":{"gitId":"georgepwhuang"},"content":"* 1a. The user\u0027s input format is invalid."},{"lineNumber":316,"author":{"gitId":"georgepwhuang"},"content":"  "},{"lineNumber":317,"author":{"gitId":"georgepwhuang"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":318,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":319,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 1."},{"lineNumber":320,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":321,"author":{"gitId":"georgepwhuang"},"content":"* 1b. The given tag is invalid/nonexistent."},{"lineNumber":322,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":323,"author":{"gitId":"georgepwhuang"},"content":"    * 1b1. AddressBook shows an error message."},{"lineNumber":324,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":325,"author":{"gitId":"georgepwhuang"},"content":"      Use case ends."},{"lineNumber":326,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":327,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":328,"author":{"gitId":"georgepwhuang"},"content":"**Use case: Edit a person**"},{"lineNumber":329,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":330,"author":{"gitId":"georgepwhuang"},"content":"**MSS**"},{"lineNumber":331,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":332,"author":{"gitId":"georgepwhuang"},"content":"1.  User requests to list persons"},{"lineNumber":333,"author":{"gitId":"georgepwhuang"},"content":"2.  AddressBook shows the list of persons"},{"lineNumber":334,"author":{"gitId":"georgepwhuang"},"content":"3.  User requests to edit a specific person in the list"},{"lineNumber":335,"author":{"gitId":"georgepwhuang"},"content":"4.  AddressBook edits the person"},{"lineNumber":336,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":337,"author":{"gitId":"georgepwhuang"},"content":"    Use case ends."},{"lineNumber":338,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":339,"author":{"gitId":"georgepwhuang"},"content":"**Extensions**"},{"lineNumber":340,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":341,"author":{"gitId":"georgepwhuang"},"content":"* 2a. The list is empty."},{"lineNumber":342,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":343,"author":{"gitId":"georgepwhuang"},"content":"  Use case ends."},{"lineNumber":344,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":345,"author":{"gitId":"georgepwhuang"},"content":"* 3a. The given index is invalid."},{"lineNumber":346,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":347,"author":{"gitId":"georgepwhuang"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":348,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":349,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 2."},{"lineNumber":350,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":351,"author":{"gitId":"georgepwhuang"},"content":"* 3b. No optional fields are given."},{"lineNumber":352,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":353,"author":{"gitId":"georgepwhuang"},"content":"    * 3b1. AddressBook shows an error message."},{"lineNumber":354,"author":{"gitId":"georgepwhuang"},"content":"      "},{"lineNumber":355,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 2."},{"lineNumber":356,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":357,"author":{"gitId":"georgepwhuang"},"content":"* 3c. The user input is invalid."},{"lineNumber":358,"author":{"gitId":"georgepwhuang"},"content":"  "},{"lineNumber":359,"author":{"gitId":"georgepwhuang"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":360,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":361,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 2."},{"lineNumber":362,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":363,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":364,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"**Use case: Delete a person**"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":370,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons"},{"lineNumber":371,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":372,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person"},{"lineNumber":373,"author":{"gitId":"-"},"content":""},{"lineNumber":374,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":377,"author":{"gitId":"-"},"content":""},{"lineNumber":378,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":379,"author":{"gitId":"-"},"content":""},{"lineNumber":380,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"KnitidCeladon23"},"content":"**Use case: Scheduling a meetup with a client**"},{"lineNumber":389,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":390,"author":{"gitId":"KnitidCeladon23"},"content":"**MSS**"},{"lineNumber":391,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":392,"author":{"gitId":"KnitidCeladon23"},"content":"1.  User requests to list clients"},{"lineNumber":393,"author":{"gitId":"KnitidCeladon23"},"content":"2.  AddressBook shows a list of clients"},{"lineNumber":394,"author":{"gitId":"KnitidCeladon23"},"content":"3.  User requests to schedule a meeting a specific client in the list at a specified date and time"},{"lineNumber":395,"author":{"gitId":"KnitidCeladon23"},"content":"4.  AddressBook adds the specified client, as well as the specified date and time of the meeting, to the schedule list"},{"lineNumber":396,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":397,"author":{"gitId":"KnitidCeladon23"},"content":"    Use case ends."},{"lineNumber":398,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":399,"author":{"gitId":"KnitidCeladon23"},"content":"**Extensions**"},{"lineNumber":400,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":401,"author":{"gitId":"KnitidCeladon23"},"content":"* 2a. The list is empty."},{"lineNumber":402,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":403,"author":{"gitId":"KnitidCeladon23"},"content":"  Use case ends."},{"lineNumber":404,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":405,"author":{"gitId":"KnitidCeladon23"},"content":"* 3a. The given index is invalid."},{"lineNumber":406,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":407,"author":{"gitId":"KnitidCeladon23"},"content":"    * 3a1. AddressBook shows an error message."},{"lineNumber":408,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":409,"author":{"gitId":"KnitidCeladon23"},"content":"      Use case resumes at step 2."},{"lineNumber":410,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":411,"author":{"gitId":"KnitidCeladon23"},"content":"* 3b. The given date-and-time has an invalid syntax (eg. user input HH:MM_yyyy-mm-dd instead of yyyy-mm-dd_HH:MM"},{"lineNumber":412,"author":{"gitId":"KnitidCeladon23"},"content":"  (correct version))"},{"lineNumber":413,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":414,"author":{"gitId":"KnitidCeladon23"},"content":"    * 3b1. AddressBook shows an error message and reminds the user of the correct format."},{"lineNumber":415,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":416,"author":{"gitId":"KnitidCeladon23"},"content":"      Use case resumes at step 2."},{"lineNumber":417,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":418,"author":{"gitId":"KnitidCeladon23"},"content":"* 3c. The given date-and-time is invalid (eg. user input 2020-02-31_14:30)"},{"lineNumber":419,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":420,"author":{"gitId":"KnitidCeladon23"},"content":"    * 3c1. AddressBook shows an error message"},{"lineNumber":421,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":422,"author":{"gitId":"KnitidCeladon23"},"content":"      Use case resumes at step 2."},{"lineNumber":423,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":424,"author":{"gitId":"KnitidCeladon23"},"content":"* 3d. The given date-and-time coincides with the meeting with another client (eg. user is meeting client no.24601 at"},{"lineNumber":425,"author":{"gitId":"KnitidCeladon23"},"content":"  2020/2/28 2:30 pm but is also meeting client no.24600 at the same time)"},{"lineNumber":426,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":427,"author":{"gitId":"KnitidCeladon23"},"content":"    * 3d1. AddressBook alerts the user that the meeting coincides with another meeting with a specified client"},{"lineNumber":428,"author":{"gitId":"KnitidCeladon23"},"content":"      and asks the user to double-check the meeting time (request user to input Y/N to proceed or cancel)."},{"lineNumber":429,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":430,"author":{"gitId":"KnitidCeladon23"},"content":"      If Y, use case continues to step 4. If N, user case resumes at step 2."},{"lineNumber":431,"author":{"gitId":"-"},"content":""},{"lineNumber":432,"author":{"gitId":"georgepwhuang"},"content":"**Use case: Filter according to tag**"},{"lineNumber":433,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":434,"author":{"gitId":"georgepwhuang"},"content":"**MSS**"},{"lineNumber":435,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":436,"author":{"gitId":"georgepwhuang"},"content":"1.  User requests to search for persons according to tag."},{"lineNumber":437,"author":{"gitId":"georgepwhuang"},"content":"2.  AddressBook shows the list of persons"},{"lineNumber":438,"author":{"gitId":"georgepwhuang"},"content":"    "},{"lineNumber":439,"author":{"gitId":"georgepwhuang"},"content":"    Use case ends."},{"lineNumber":440,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":441,"author":{"gitId":"georgepwhuang"},"content":"**Extensions**"},{"lineNumber":442,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":443,"author":{"gitId":"georgepwhuang"},"content":"* 1a. The list is empty."},{"lineNumber":444,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":445,"author":{"gitId":"georgepwhuang"},"content":"  Use case ends."},{"lineNumber":446,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":447,"author":{"gitId":"georgepwhuang"},"content":"* 2a. The given tag is invalid/nonexistent."},{"lineNumber":448,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":449,"author":{"gitId":"georgepwhuang"},"content":"    * 2a1. AddressBook shows an error message."},{"lineNumber":450,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":451,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 1."},{"lineNumber":452,"author":{"gitId":"georgepwhuang"},"content":"    "},{"lineNumber":453,"author":{"gitId":"georgepwhuang"},"content":"**Use case: Filter according to tag**"},{"lineNumber":454,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":455,"author":{"gitId":"georgepwhuang"},"content":"**MSS**"},{"lineNumber":456,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":457,"author":{"gitId":"georgepwhuang"},"content":"1.  User requests to search for persons according to tag."},{"lineNumber":458,"author":{"gitId":"georgepwhuang"},"content":"2.  AddressBook shows the list of persons"},{"lineNumber":459,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":460,"author":{"gitId":"georgepwhuang"},"content":"    Use case ends."},{"lineNumber":461,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":462,"author":{"gitId":"georgepwhuang"},"content":"**Extensions**"},{"lineNumber":463,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":464,"author":{"gitId":"georgepwhuang"},"content":"* 1a. The list is empty."},{"lineNumber":465,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":466,"author":{"gitId":"georgepwhuang"},"content":"  Use case ends."},{"lineNumber":467,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":468,"author":{"gitId":"georgepwhuang"},"content":"* 2a. The given tag is invalid/nonexistent."},{"lineNumber":469,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":470,"author":{"gitId":"georgepwhuang"},"content":"    * 2a1. AddressBook shows an error message."},{"lineNumber":471,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":472,"author":{"gitId":"georgepwhuang"},"content":"      Use case resumes at step 1."},{"lineNumber":473,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":474,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":475,"author":{"gitId":"-"},"content":""},{"lineNumber":476,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":477,"author":{"gitId":"-"},"content":""},{"lineNumber":478,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":479,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":480,"author":{"gitId":"HuaiZe"},"content":"2.  The software should not use any OS-dependent libraries and OS-specific features."},{"lineNumber":481,"author":{"gitId":"HuaiZe"},"content":"3.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":482,"author":{"gitId":"HuaiZe"},"content":"4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":483,"author":{"gitId":"HuaiZe"},"content":"5.  The software should work without requiring an installer."},{"lineNumber":484,"author":{"gitId":"HuaiZe"},"content":"6.  The software should not depend on a remote server."},{"lineNumber":485,"author":{"gitId":"HuaiZe"},"content":"7.  The data should be stored locally and should be in a human editable text file."},{"lineNumber":486,"author":{"gitId":"HuaiZe"},"content":"8.  The software should be packaged into a single JAR file."},{"lineNumber":487,"author":{"gitId":"HuaiZe"},"content":"9.  The project is expected to adhere to a schedule that delivers a new iteration every two weeks."},{"lineNumber":488,"author":{"gitId":"HuaiZe"},"content":"10. The project JAR file should not exceed 100MB."},{"lineNumber":489,"author":{"gitId":"HuaiZe"},"content":"11. Project PDF files should not exceed 15MB each."},{"lineNumber":490,"author":{"gitId":"HuaiZe"},"content":"12. The Developer Guide and User Guide should be PDF-friendly and should not contain expandable panels, embedded videos and animated GIFs."},{"lineNumber":491,"author":{"gitId":"-"},"content":""},{"lineNumber":492,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":493,"author":{"gitId":"-"},"content":""},{"lineNumber":494,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":495,"author":{"gitId":"-"},"content":""},{"lineNumber":496,"author":{"gitId":"georgepwhuang"},"content":"* **Mainstream OS**: Windows, Linux, Unix, macOS"},{"lineNumber":497,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":498,"author":{"gitId":"HuaiZe"},"content":"* **Tag**: ..."},{"lineNumber":499,"author":{"gitId":"-"},"content":""},{"lineNumber":500,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":501,"author":{"gitId":"-"},"content":""},{"lineNumber":502,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":503,"author":{"gitId":"-"},"content":""},{"lineNumber":504,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":505,"author":{"gitId":"-"},"content":""},{"lineNumber":506,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":507,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":508,"author":{"gitId":"-"},"content":""},{"lineNumber":509,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":510,"author":{"gitId":"-"},"content":""},{"lineNumber":511,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":512,"author":{"gitId":"-"},"content":""},{"lineNumber":513,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":514,"author":{"gitId":"-"},"content":""},{"lineNumber":515,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":516,"author":{"gitId":"-"},"content":""},{"lineNumber":517,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":518,"author":{"gitId":"-"},"content":""},{"lineNumber":519,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":520,"author":{"gitId":"-"},"content":""},{"lineNumber":521,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":522,"author":{"gitId":"-"},"content":""},{"lineNumber":523,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":524,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":525,"author":{"gitId":"-"},"content":""},{"lineNumber":526,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":527,"author":{"gitId":"-"},"content":""},{"lineNumber":528,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":529,"author":{"gitId":"-"},"content":""},{"lineNumber":530,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":531,"author":{"gitId":"-"},"content":""},{"lineNumber":532,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":533,"author":{"gitId":"-"},"content":""},{"lineNumber":534,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":535,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":536,"author":{"gitId":"-"},"content":""},{"lineNumber":537,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":538,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":539,"author":{"gitId":"-"},"content":""},{"lineNumber":540,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":541,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":542,"author":{"gitId":"-"},"content":""},{"lineNumber":543,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":544,"author":{"gitId":"-"},"content":""},{"lineNumber":545,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":546,"author":{"gitId":"-"},"content":""},{"lineNumber":547,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":548,"author":{"gitId":"-"},"content":""},{"lineNumber":549,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":550,"author":{"gitId":"-"},"content":""},{"lineNumber":551,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"KnitidCeladon23":50,"Shuyang0":42,"georgepwhuang":104,"HuaiZe":12,"-":343}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"Link.me is a **desktop app aimed at insurance agents for managing clients, optimized for use via a "},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). "},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"If you can type fast, Link.me can get your contact management tasks done faster than traditional GUI apps."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  {:toc}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"1. Download the latest `linkme.jar` from [here](https://github.com/AY2021S2-CS2103T-W12-3/tp/releases)."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for `Link.me`."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    * **`list`** : Lists all contacts."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the app."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    * **`clear`** : Deletes all contacts."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    * **`exit`** : Exits the app."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"KnitidCeladon23"},"content":"  e.g. `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":56,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"KnitidCeladon23"},"content":"* If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":62,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"KnitidCeladon23"},"content":"Shows a message explaining how to access the help page."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"Adds a person to the app."},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"Shuyang0"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] [g/GENDER] [b/BIRTHDAY] [c/CONTRACT_START_DATE] [pn/INSURANCE_PLAN_NAME] [p$/INSURANCE_PREMIUM] [c$/AMOUNT_CLAIMED_TO_DATE]​`"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":89,"author":{"gitId":"Shuyang0"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01 t/Investment g/M b/1995-01-01 c/2010-01-01 pn/Pro-Achiever p$/$2400 c$/$0`"},{"lineNumber":90,"author":{"gitId":"Shuyang0"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/Life g/F pn/Guaranteed Protect Plus p$/$1500`"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"Shows a list of all persons in the app."},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"Edits an existing person in the app."},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"HuaiZe"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG] [g/GENDER] [b/BIRTHDAY]"},{"lineNumber":103,"author":{"gitId":"HuaiZe"},"content":"[c/CONTRACT_START_DATE] [pn/INSURANCE_PLAN_NAME] [p$/INSURANCE_PREMIUM] [c$/AMOUNT_CLAIMED_TO_DATE]`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":108,"author":{"gitId":"KnitidCeladon23"},"content":"* When editing tags, the existing tags of the person will be removed i.e. adding of tags is not cumulative."},{"lineNumber":109,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":111,"author":{"gitId":"HuaiZe"},"content":"* For other optional fields excluding tags, you may type `[FIELD_TYPE]/` to clear the field."},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":115,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":116,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":117,"author":{"gitId":"HuaiZe"},"content":"*  `edit 2 t/medical pn/Protecc Life p$/` Edits the insurance tag of the 2nd person to be `medical`, edits the plan name to `Protecc Life` and clears the insurance premium field."},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords."},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"KnitidCeladon23"},"content":"* The search is case-insensitive. e.g. `hans` will match `Hans`"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* Only the name is searched."},{"lineNumber":128,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":130,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":133,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":134,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":135,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"georgepwhuang"},"content":"Deletes the specified person from the app."},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":145,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":148,"author":{"gitId":"georgepwhuang"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the app."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"georgepwhuang"},"content":"Clears all entries from the app."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"georgepwhuang"},"content":"### Scheduling/Unscheduling a meetup with a client : `schedule`"},{"lineNumber":164,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":165,"author":{"gitId":"georgepwhuang"},"content":"#### Scheduling a meetup."},{"lineNumber":166,"author":{"gitId":"georgepwhuang"},"content":"Schedule a date and time with a specified client in the app."},{"lineNumber":167,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":168,"author":{"gitId":"georgepwhuang"},"content":"Format: `schedule INDEX m/DESCRIPTION @ DATE_TIME`"},{"lineNumber":169,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":170,"author":{"gitId":"KnitidCeladon23"},"content":"* Adds the client at the specified `INDEX`, and the `DATE_TIME` of the meeting, to the schedule list."},{"lineNumber":171,"author":{"gitId":"KnitidCeladon23"},"content":"* The `INDEX` refers to the index number shown in the displayed person list."},{"lineNumber":172,"author":{"gitId":"KnitidCeladon23"},"content":"* The `INDEX` **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":173,"author":{"gitId":"KnitidCeladon23"},"content":"* `DATE_TIME` refers to the date and time of the scheduled meeting"},{"lineNumber":174,"author":{"gitId":"georgepwhuang"},"content":"* `DATE_TIME` should be inputted in the specific datetime format `yyyy-mm-dd HH:MM`"},{"lineNumber":175,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":176,"author":{"gitId":"KnitidCeladon23"},"content":"Example:"},{"lineNumber":177,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":178,"author":{"gitId":"georgepwhuang"},"content":"* `schedule 24601 m/Insurance Plan @ 2020-02-28 14:30` schedules a Insurance Plan meeting with client no.24601 "},{"lineNumber":179,"author":{"gitId":"georgepwhuang"},"content":"  at 2020/2/28 2:30 pm."},{"lineNumber":180,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":181,"author":{"gitId":"georgepwhuang"},"content":"#### Unscheduling a meetup"},{"lineNumber":182,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":183,"author":{"gitId":"georgepwhuang"},"content":"Unscheduling meetups with a certain client."},{"lineNumber":184,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":185,"author":{"gitId":"georgepwhuang"},"content":"Format: `schedule INDEX m/remove`"},{"lineNumber":186,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":187,"author":{"gitId":"georgepwhuang"},"content":"* Removes a scheduled meeting with the client at the specified `INDEX`."},{"lineNumber":188,"author":{"gitId":"georgepwhuang"},"content":"* The `INDEX` refers to the index number shown in the displayed person list."},{"lineNumber":189,"author":{"gitId":"georgepwhuang"},"content":"* The `INDEX` **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":190,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":191,"author":{"gitId":"georgepwhuang"},"content":"Example:"},{"lineNumber":192,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":193,"author":{"gitId":"georgepwhuang"},"content":"* `schedule 24601 m/remove` removes meetings scheduled with client 24601."},{"lineNumber":194,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":195,"author":{"gitId":"KnitidCeladon23"},"content":""},{"lineNumber":196,"author":{"gitId":"georgepwhuang"},"content":"### Filtering by tag : `filter`"},{"lineNumber":197,"author":{"gitId":"georgepwhuang"},"content":"Filters the contacts by tag."},{"lineNumber":198,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":199,"author":{"gitId":"georgepwhuang"},"content":"Format: `filter TAG`"},{"lineNumber":200,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":201,"author":{"gitId":"georgepwhuang"},"content":"Lists all contacts that have a matching tag."},{"lineNumber":202,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":203,"author":{"gitId":"georgepwhuang"},"content":"Only tags that are exactly the same will be matched."},{"lineNumber":204,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":205,"author":{"gitId":"georgepwhuang"},"content":"Examples:"},{"lineNumber":206,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":207,"author":{"gitId":"georgepwhuang"},"content":"`filter medical` returns every contact with the tag `medical`"},{"lineNumber":208,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"HuaiZe"},"content":"Link.me data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"HuaiZe"},"content":"Link.me data are saved as a JSON file `[JAR file location]/data/linkme.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":216,"author":{"gitId":"-"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":218,"author":{"gitId":"HuaiZe"},"content":"If your changes to the data file makes its format invalid, Link.me will discard all data and start with an empty data file at the next run."},{"lineNumber":219,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":226,"author":{"gitId":"HuaiZe"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Link.me home folder."},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":233,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":234,"author":{"gitId":"georgepwhuang"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] [g/GENDER] [b/BIRTHDAY] [c/CONTRACT_START_DATE] [pn/INSURANCE_PLAN_NAME] [p$/INSURANCE_PREMIUM] [c$/AMOUNT_CLAIMED_TO_DATE]`"},{"lineNumber":235,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":236,"author":{"gitId":"georgepwhuang"},"content":"**Delete** | `delete INDEX`"},{"lineNumber":237,"author":{"gitId":"georgepwhuang"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG] [g/GENDER] [b/BIRTHDAY] [c/CONTRACT_START_DATE] [pn/INSURANCE_PLAN_NAME] [p$/INSURANCE_PREMIUM] [c$/AMOUNT_CLAIMED_TO_DATE]`"},{"lineNumber":238,"author":{"gitId":"georgepwhuang"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":239,"author":{"gitId":"georgepwhuang"},"content":"**Filter** | `filter TAG`"},{"lineNumber":240,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":241,"author":{"gitId":"-"},"content":"**Help** | `help`"},{"lineNumber":242,"author":{"gitId":"georgepwhuang"},"content":"**Schedule** | `schedule INDEX DATE_TIME`"}],"authorContributionMap":{"georgepwhuang":53,"KnitidCeladon23":16,"Shuyang0":3,"HuaiZe":8,"-":162}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"title: Link.me"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"[![CI Status](https://github.com/AY2021S2-CS2103T-W12-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S2-CS2103T-W12-3/tp/actions)"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"[![codecov](https://codecov.io/gh/AY2021S2-CS2103T-W12-3/tp/branch/master/graph/badge.svg)](https://app.codecov.io/gh/AY2021S2-CS2103T-W12-3/tp)"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"**Link.me is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"* If you are interested in using Link.me, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"* If you are interested about developing Link.me, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"**Acknowledgements**"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"georgepwhuang":6,"-":13}},{"path":"docs/team/georgepwhuang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"---"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"title: Huang Po-Wei\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"---"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"## Project: Link.me"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s2.github.io/tp-dashboard/?search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2021-02-19\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026zFR\u003dfalse\u0026tabType\u003dauthorship\u0026tabAuthor\u003dgeorgepwhuang\u0026tabRepo\u003dAY2021S2-CS2103T-W12-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003d)"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"georgepwhuang":46}},{"path":"docs/team/huaize.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"HuaiZe"},"content":"---"},{"lineNumber":2,"author":{"gitId":"HuaiZe"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"HuaiZe"},"content":"title: Koh Huai Ze\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"HuaiZe"},"content":"---"},{"lineNumber":5,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":6,"author":{"gitId":"HuaiZe"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":8,"author":{"gitId":"HuaiZe"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":10,"author":{"gitId":"HuaiZe"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":12,"author":{"gitId":"HuaiZe"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"HuaiZe"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"HuaiZe"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"HuaiZe"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"HuaiZe"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":18,"author":{"gitId":"HuaiZe"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":20,"author":{"gitId":"HuaiZe"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":22,"author":{"gitId":"HuaiZe"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"HuaiZe"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":25,"author":{"gitId":"HuaiZe"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"HuaiZe"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"HuaiZe"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":29,"author":{"gitId":"HuaiZe"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"HuaiZe"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"HuaiZe"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"HuaiZe"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"HuaiZe"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"HuaiZe"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":36,"author":{"gitId":"HuaiZe"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"HuaiZe"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"HuaiZe"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"HuaiZe"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"HuaiZe"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":42,"author":{"gitId":"HuaiZe"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"HuaiZe"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"HuaiZe"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"HuaiZe"},"content":""},{"lineNumber":46,"author":{"gitId":"HuaiZe"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"HuaiZe":46}},{"path":"docs/team/kennychew.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"KnitidCeladon23"},"content":"---"},{"lineNumber":2,"author":{"gitId":"KnitidCeladon23"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"KnitidCeladon23"},"content":"title: Kenny Chew\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"KnitidCeladon23"},"content":"---"},{"lineNumber":5,"author":{"gitId":"KnitidCeladon23"},"content":""}],"authorContributionMap":{"KnitidCeladon23":5}},{"path":"docs/team/shuyang.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Shuyang0"},"content":"---"},{"lineNumber":2,"author":{"gitId":"Shuyang0"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Shuyang0"},"content":"title: Shuyang\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"---"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"## [to be updated] Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"Shuyang0"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"Shuyang0":46}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings."},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable."},{"lineNumber":10,"author":{"gitId":"-"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;"},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    private static final double DEFAULT_WIDTH \u003d 1000;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well."},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":1,"-":78}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_GENDER + \"GENDER \""},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_BIRTHDATE + \"BIRTHDATE \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_GENDER + \"M \""},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_BIRTHDATE + \"1995-05-01 \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public AddCommand(Person person) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":6,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":34,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":35,"author":{"gitId":"-"},"content":" */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"            + \"[\" + PREFIX_GENDER + \"GENDER] \""},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"            + \"[\" + PREFIX_BIRTHDATE + \"BIRTHDATE] \""},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":52,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\""},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"            + PREFIX_BIRTHDATE + \"1995-05-01\";"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":107,"author":{"gitId":"Shuyang0"},"content":"        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"},{"lineNumber":108,"author":{"gitId":"Shuyang0"},"content":"        Birthdate updatedBirthdate \u003d editPersonDescriptor.getBirthdate().orElse(personToEdit.getBirthdate());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"Shuyang0"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress,"},{"lineNumber":112,"author":{"gitId":"georgepwhuang"},"content":"                updatedGender, updatedBirthdate, updatedTags).setMeeting(personToEdit.getMeeting());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":142,"author":{"gitId":"Shuyang0"},"content":"        private Gender gender;"},{"lineNumber":143,"author":{"gitId":"Shuyang0"},"content":"        private Birthdate birthdate;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":149,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":157,"author":{"gitId":"Shuyang0"},"content":"            setGender(toCopy.gender);"},{"lineNumber":158,"author":{"gitId":"Shuyang0"},"content":"            setBirthdate(toCopy.birthdate);"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":163,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":164,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":166,"author":{"gitId":"Shuyang0"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, gender, birthdate, tags);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"Shuyang0"},"content":"        public void setGender(Gender gender) {"},{"lineNumber":202,"author":{"gitId":"Shuyang0"},"content":"            this.gender \u003d gender;"},{"lineNumber":203,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":205,"author":{"gitId":"Shuyang0"},"content":"        public Optional\u003cGender\u003e getGender() {"},{"lineNumber":206,"author":{"gitId":"Shuyang0"},"content":"            return Optional.ofNullable(gender);"},{"lineNumber":207,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":209,"author":{"gitId":"Shuyang0"},"content":"        public void setBirthdate(Birthdate birthdate) {"},{"lineNumber":210,"author":{"gitId":"Shuyang0"},"content":"            this.birthdate \u003d birthdate;"},{"lineNumber":211,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":213,"author":{"gitId":"Shuyang0"},"content":"        public Optional\u003cBirthdate\u003e getBirthdate() {"},{"lineNumber":214,"author":{"gitId":"Shuyang0"},"content":"            return Optional.ofNullable(birthdate);"},{"lineNumber":215,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":217,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":218,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}."},{"lineNumber":219,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally."},{"lineNumber":220,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":226,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":227,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":228,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null."},{"lineNumber":229,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":240,"author":{"gitId":"-"},"content":""},{"lineNumber":241,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":243,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":247,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":248,"author":{"gitId":"-"},"content":""},{"lineNumber":249,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":250,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":251,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":252,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":253,"author":{"gitId":"Shuyang0"},"content":"                    \u0026\u0026 getGender().equals(e.getGender())"},{"lineNumber":254,"author":{"gitId":"Shuyang0"},"content":"                    \u0026\u0026 getBirthdate().equals(e.getBirthdate())"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":34,"georgepwhuang":1,"-":223}},{"path":"src/main/java/seedu/address/logic/commands/ScheduleCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":" * Schedules a meeting with a person identified using it\u0027s displayed index from the address book."},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    public static final String COMMAND_WORD \u003d \"schedule\";"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"            + \": Schedules a meeting with the person identified by the \""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"            + \"index number used in the displayed person list.\\n\""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"            + PREFIX_MEETING + \"MEETING_DESCRIPTION @ yyyy-mm-dd HH:MM\\n\""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 m/ Insurance Plan @ 2021-03-05 14:50\";"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MESSAGE_SCHEDULE_PERSON_SUCCESS \u003d \"Scheduled Meeting with Person: %1$s %2$s\";"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MESSAGE_UNSCHEDULE_PERSON_SUCCESS \u003d \"Unscheduled Meeting with Person: %1$s\";"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"    private final Index targetIndex;"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    private final Optional\u003cMeeting\u003e meeting;"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"     * Constructor for Schedule Command"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"    public ScheduleCommand(Index targetIndex, Meeting meeting) {"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"        this.meeting \u003d Optional.ofNullable(meeting);"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"        requireNonNull(model);"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"        Person personToSchedule \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        Person updatedPerson \u003d personToSchedule.setMeeting(meeting);"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"        model.setPerson(personToSchedule, updatedPerson);"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        String result \u003d meeting.map(x -\u003e String.format(MESSAGE_SCHEDULE_PERSON_SUCCESS, updatedPerson.getName(), x))"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"                .orElse(String.format(MESSAGE_UNSCHEDULE_PERSON_SUCCESS, updatedPerson.getName()));"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"        return new CommandResult(result);"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"                || (other instanceof ScheduleCommand // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"                \u0026\u0026 targetIndex.equals(((ScheduleCommand) other).targetIndex) // state check"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"                \u0026\u0026 meeting.equals(((ScheduleCommand) other).meeting));"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":71}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"                        PREFIX_ADDRESS, PREFIX_GENDER, PREFIX_BIRTHDATE, PREFIX_TAG);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER,"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"                PREFIX_BIRTHDATE) || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":50,"author":{"gitId":"Shuyang0"},"content":"        Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get());"},{"lineNumber":51,"author":{"gitId":"Shuyang0"},"content":"        Birthdate birthdate \u003d ParserUtil.parseBirthdate(argMultimap.getValue(PREFIX_BIRTHDATE).get());"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"        Person person \u003d new Person(name, phone, email, address, gender, birthdate, tagList);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return new AddCommand(person);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":11,"-":56}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":"        case ScheduleCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"            return new ScheduleCommandParser().parse(arguments);"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    public static final Prefix PREFIX_BIRTHDATE \u003d new Prefix(\"b/\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    public static final Prefix PREFIX_MEETING \u003d new Prefix(\"m/\");"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":2,"georgepwhuang":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"                        PREFIX_ADDRESS, PREFIX_GENDER, PREFIX_BIRTHDATE, PREFIX_TAG);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"        if (argMultimap.getValue(PREFIX_GENDER).isPresent()) {"},{"lineNumber":62,"author":{"gitId":"Shuyang0"},"content":"            editPersonDescriptor.setGender(ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER).get()));"},{"lineNumber":63,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Shuyang0"},"content":"        if (argMultimap.getValue(PREFIX_BIRTHDATE).isPresent()) {"},{"lineNumber":65,"author":{"gitId":"Shuyang0"},"content":"            editPersonDescriptor.setBirthdate(ParserUtil.parseBirthdate(argMultimap.getValue(PREFIX_BIRTHDATE).get()));"},{"lineNumber":66,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":10,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Shuyang0"},"content":"     * Parses a {@code String gender} into an {@code Gender}."},{"lineNumber":103,"author":{"gitId":"Shuyang0"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":104,"author":{"gitId":"Shuyang0"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Shuyang0"},"content":"     * @throws ParseException if the given {@code gender} is invalid."},{"lineNumber":106,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Shuyang0"},"content":"    public static Gender parseGender(String gender) throws ParseException {"},{"lineNumber":108,"author":{"gitId":"Shuyang0"},"content":"        requireNonNull(gender);"},{"lineNumber":109,"author":{"gitId":"Shuyang0"},"content":"        String trimmedGender \u003d gender.trim();"},{"lineNumber":110,"author":{"gitId":"Shuyang0"},"content":"        if (!seedu.address.model.person.Gender.isValidGender(trimmedGender)) {"},{"lineNumber":111,"author":{"gitId":"Shuyang0"},"content":"            throw new ParseException(Gender.MESSAGE_CONSTRAINTS);"},{"lineNumber":112,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Shuyang0"},"content":"        return new Gender(trimmedGender);"},{"lineNumber":114,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":116,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"Shuyang0"},"content":"     * Parses a {@code String birthday} into an {@code Birthdate}."},{"lineNumber":118,"author":{"gitId":"Shuyang0"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":119,"author":{"gitId":"Shuyang0"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"Shuyang0"},"content":"     * @throws ParseException if the given {@code birthday} is invalid."},{"lineNumber":121,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"Shuyang0"},"content":"    public static Birthdate parseBirthdate(String birthdate) throws ParseException {"},{"lineNumber":123,"author":{"gitId":"Shuyang0"},"content":"        requireNonNull(birthdate);"},{"lineNumber":124,"author":{"gitId":"Shuyang0"},"content":"        String trimmedBirthdate \u003d birthdate.trim();"},{"lineNumber":125,"author":{"gitId":"Shuyang0"},"content":"        if (!seedu.address.model.person.Birthdate.isValidBirthdate(trimmedBirthdate)) {"},{"lineNumber":126,"author":{"gitId":"Shuyang0"},"content":"            throw new ParseException(Birthdate.MESSAGE_CONSTRAINTS);"},{"lineNumber":127,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Shuyang0"},"content":"        return new Birthdate(trimmedBirthdate);"},{"lineNumber":129,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid."},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return tagSet;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":158,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"georgepwhuang"},"content":"     * Parses a {@code String meeting} into an {@code Meeting}."},{"lineNumber":160,"author":{"gitId":"georgepwhuang"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":161,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"georgepwhuang"},"content":"     * @throws ParseException if the given {@code meeting} is invalid."},{"lineNumber":163,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"georgepwhuang"},"content":"    public static Meeting parseMeeting(String meeting) throws ParseException {"},{"lineNumber":165,"author":{"gitId":"georgepwhuang"},"content":"        requireNonNull(meeting);"},{"lineNumber":166,"author":{"gitId":"georgepwhuang"},"content":"        String trimmedMeeting \u003d meeting.trim();"},{"lineNumber":167,"author":{"gitId":"georgepwhuang"},"content":"        if (trimmedMeeting.equals(\"remove\")) {"},{"lineNumber":168,"author":{"gitId":"georgepwhuang"},"content":"            return null;"},{"lineNumber":169,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"georgepwhuang"},"content":"        if (!Meeting.isValidMeeting(trimmedMeeting)) {"},{"lineNumber":171,"author":{"gitId":"georgepwhuang"},"content":"            throw new ParseException(Meeting.MESSAGE_CONSTRAINTS);"},{"lineNumber":172,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"georgepwhuang"},"content":"        return new Meeting(trimmedMeeting);"},{"lineNumber":174,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":19,"Shuyang0":32,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/ScheduleCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"public class ScheduleCommandParser implements Parser\u003cScheduleCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"     * Parses the given {@code String} of arguments in the context of the ScheduleCommand"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"     * and returns a ScheduleCommand object for execution."},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    public ScheduleCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        requireNonNull(args);"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"                PREFIX_MEETING);"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        Index index;"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        } catch (ParseException pe) {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"                    ScheduleCommand.MESSAGE_USAGE), pe);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"        if (argMultimap.getValue(PREFIX_MEETING).isPresent()) {"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"            Meeting meeting \u003d ParserUtil.parseMeeting(argMultimap.getValue(PREFIX_MEETING).get());"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"            return new ScheduleCommand(index, meeting);"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"            throw new ParseException(Meeting.MESSAGE_CONSTRAINTS);"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":43}},{"path":"src/main/java/seedu/address/model/meeting/Meeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"public class Meeting implements Comparable\u003cMeeting\u003e {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Meetings should be of the format \""},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"            + \"\\\"description @ yyyy-mm-dd HH:MM\\\", and the description should not be blank.\";"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"    public static final String DATETIME_CONSTRAINTS \u003d \"The input date and time must be existent.\";"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    // alphanumeric and special characters"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":"    private static final String DESCRIPTION_REGEX \u003d \".+\";"},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    private static final String FOUR_DIGIT_REGEX \u003d \"[0-9]{4}\";"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    private static final String TWO_DIGIT_REGEX \u003d \"[0-9]{2}\";"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    public static final String VALIDATION_REGEX \u003d DESCRIPTION_REGEX + \" @ \""},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"            + FOUR_DIGIT_REGEX + \"-\" + TWO_DIGIT_REGEX + \"-\" + TWO_DIGIT_REGEX + \" \""},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"            + TWO_DIGIT_REGEX + \":\" + TWO_DIGIT_REGEX;"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    public final String original;"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    public final String value;"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    public final LocalDateTime dateTime;"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"     * Constructs an {@code Meeting}."},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"     * @param meeting A valid meeting."},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    public Meeting(String meeting) {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        requireNonNull(meeting);"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        checkArgument(isValidMeeting(meeting), MESSAGE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        String[] fragments \u003d meeting.split(\" @ \", 2);"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        LocalDateTime parsedDt \u003d generateDateTime(fragments[1], DATETIME_CONSTRAINTS);"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"        original \u003d meeting;"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        value \u003d fragments[0];"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        dateTime \u003d parsedDt;"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"     * Returns if a given string is a valid meeting."},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"    public static boolean isValidMeeting(String meeting) {"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"        return meeting.matches(VALIDATION_REGEX);"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"     * Converts the Meeting time into a datetime format"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"     * @param datetime     Meeting Time in String format"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"     * @param errorMessage Error Message if the format is invalid"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"    public static LocalDateTime generateDateTime(String datetime, String errorMessage) {"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"            return LocalDateTime.parse(datetime, DateTimeFormatter.ofPattern(\"yyyy-MM-d H:m\"));"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"            throw new IllegalArgumentException(errorMessage);"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        return value + \" @ \" + dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\"));"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"                || (other instanceof Meeting // instanceof handles nulls"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"                \u0026\u0026 dateTime.equals(((Meeting) other).dateTime)); // state check"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    public int hashCode() {"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"        return dateTime.hashCode();"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"    @Override"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"    public int compareTo(Meeting o) {"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":"        return dateTime.compareTo(o.dateTime);"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":82}},{"path":"src/main/java/seedu/address/model/person/Birthdate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Shuyang0"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":3,"author":{"gitId":"Shuyang0"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":" * Represents a Person\u0027s birthdate in the address book."},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"public class Birthdate {"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"            \"Birthdate should be given in the form YYYY-MM-DD and be between 1900-01-01 and \""},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"                    + \"the current date. It should not be blank\";"},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"    public final LocalDate value;"},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Shuyang0"},"content":"     * Constructs a {@code Birthdate}."},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Shuyang0"},"content":"     * @param birthdate A valid birthdate."},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"    public Birthdate(String birthdate) throws DateTimeParseException {"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":"        requireNonNull(birthdate);"},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"        checkArgument(isValidBirthdate(birthdate), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"        this.value \u003d LocalDate.parse(birthdate);"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"     * Returns true if a given string is a valid birthdate."},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"    public static boolean isValidBirthdate (String test) {"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"            LocalDate.parse(test);"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"            return isValidBirthdate(LocalDate.parse(test));"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"    public static boolean isValidBirthdate (LocalDate test) {"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"        return test.isBefore(LocalDate.now()) \u0026\u0026 test.isAfter(LocalDate.parse(\"1900-01-01\"));"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":47,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Shuyang0"},"content":"        return value.toString();"},{"lineNumber":51,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"    public boolean equals(Object other) {"},{"lineNumber":55,"author":{"gitId":"Shuyang0"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"                || (other instanceof Birthdate // instanceof handles nulls"},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"                \u0026\u0026 value.equals(((Birthdate) other).value)); // state check"},{"lineNumber":58,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":60,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"    public int hashCode() {"},{"lineNumber":62,"author":{"gitId":"Shuyang0"},"content":"        return value.hashCode();"},{"lineNumber":63,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":65,"author":{"gitId":"Shuyang0"},"content":"}"}],"authorContributionMap":{"Shuyang0":65}},{"path":"src/main/java/seedu/address/model/person/Gender.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Shuyang0"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":3,"author":{"gitId":"Shuyang0"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"public class Gender {"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"            \"Gender should be either \\\"M\\\"(male) or \\\"F\\\"(female) or \\\"N\\\"(non-binary), and it should not be blank\";"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"    public final String value;"},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"     * Constructs a {@code Gender}."},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"     * @param gender A valid gender."},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":"    public Gender(String gender) {"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"        requireNonNull(gender);"},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":"        checkArgument(isValidGender(gender), MESSAGE_CONSTRAINTS);"},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"        if (gender.equals(\"M\")) {"},{"lineNumber":21,"author":{"gitId":"Shuyang0"},"content":"            gender \u003d \"Male\";"},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"        } else if (gender.equals(\"F\")) {"},{"lineNumber":23,"author":{"gitId":"Shuyang0"},"content":"            gender \u003d \"Female\";"},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"        } else if (gender.equals(\"N\")) {"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"            gender \u003d \"Non-binary\";"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"        this.value \u003d gender;"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"     * Returns true if a given string is a valid gender."},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"    public static boolean isValidGender (String test) {"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"        return test.equals(\"M\") || test.equals(\"F\") || test.equals(\"N\")"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"                || test.equals(\"Male\") || test.equals(\"Female\") || test.equals(\"Non-binary\");"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"        return value;"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    public boolean equals(Object other) {"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":47,"author":{"gitId":"Shuyang0"},"content":"                || (other instanceof Gender // instanceof handles nulls"},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"                \u0026\u0026 value.equals(((Gender) other).value)); // state check"},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":51,"author":{"gitId":"Shuyang0"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"Shuyang0"},"content":"    public int hashCode() {"},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"        return value.hashCode();"},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Shuyang0"},"content":"}"}],"authorContributionMap":{"Shuyang0":55}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"    private final Gender gender;"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"    private final Birthdate birthdate;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"    //Functional fields"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"    private final Optional\u003cMeeting\u003e meeting;"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"    public Person(Name name, Phone phone, Email email, Address address,"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"                  Gender gender, Birthdate birthdate, Set\u003cTag\u003e tags) {"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"        this(name, phone, email, address, gender, birthdate, tags, Optional.empty());"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"     * Full Constructor that is only called internally for testing."},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Gender gender, Birthdate birthdate,"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"                  Set\u003cTag\u003e tags, Optional\u003cMeeting\u003e meeting) {"},{"lineNumber":47,"author":{"gitId":"Shuyang0"},"content":"        requireAllNonNull(name, phone, email, address, gender, birthdate, tags);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":52,"author":{"gitId":"Shuyang0"},"content":"        this.gender \u003d gender;"},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"        this.birthdate \u003d birthdate;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"        this.meeting \u003d meeting;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Shuyang0"},"content":"    public Gender getGender() {"},{"lineNumber":75,"author":{"gitId":"Shuyang0"},"content":"        return gender;"},{"lineNumber":76,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":78,"author":{"gitId":"Shuyang0"},"content":"    public Birthdate getBirthdate() {"},{"lineNumber":79,"author":{"gitId":"Shuyang0"},"content":"        return birthdate;"},{"lineNumber":80,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":"     * Returns an Optional object containing a Meeting."},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"    public Optional\u003cMeeting\u003e getMeeting() {"},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":"        return meeting;"},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":"     * Creates a Person object identical to the original, but contains a new Meeting."},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"    public Person setMeeting(Optional\u003cMeeting\u003e meeting) {"},{"lineNumber":101,"author":{"gitId":"Shuyang0"},"content":"        return new Person(name, phone, email, address, gender, birthdate, tags, meeting);"},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":136,"author":{"gitId":"Shuyang0"},"content":"                \u0026\u0026 otherPerson.getGender().equals(getGender())"},{"lineNumber":137,"author":{"gitId":"Shuyang0"},"content":"                \u0026\u0026 otherPerson.getBirthdate().equals(getBirthdate())"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags());"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":144,"author":{"gitId":"Shuyang0"},"content":"        return Objects.hash(name, phone, email, address, gender, birthdate, tags);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":156,"author":{"gitId":"Shuyang0"},"content":"                .append(getAddress())"},{"lineNumber":157,"author":{"gitId":"Shuyang0"},"content":"                .append(\"; Gender: \")"},{"lineNumber":158,"author":{"gitId":"Shuyang0"},"content":"                .append(getGender())"},{"lineNumber":159,"author":{"gitId":"Shuyang0"},"content":"                .append(\"; Birthdate: \")"},{"lineNumber":160,"author":{"gitId":"Shuyang0"},"content":"                .append(getBirthdate());"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":24,"Shuyang0":27,"-":119}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Gender(\"M\"), new Birthdate(\"1992-05-06\"),"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":"                getTagSet(\"investment\")),"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Gender(\"F\"), new Birthdate(\"1995-12-24\"),"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"                getTagSet(\"life\", \"medical\")),"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Gender(\"F\"), new Birthdate(\"1990-01-06\"),"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"                getTagSet(\"life\")),"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Gender(\"M\"),"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"                new Birthdate(\"1997-02-16\"), getTagSet(\"medical\")),"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Gender(\"M\"), new Birthdate(\"1975-07-09\"),"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"                getTagSet(\"investment\")),"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Gender(\"N\"), new Birthdate(\"1985-06-30\"),"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"                getTagSet(\"life\"))"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .map(Tag::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":14,"-":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"    private final String gender;"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"    private final String birthdate;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    private final String meeting;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"                             @JsonProperty(\"gender\") String gender, @JsonProperty(\"birthdate\") String birthdate,"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"                             @JsonProperty(\"meeting\") String meeting) {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"        this.gender \u003d gender;"},{"lineNumber":54,"author":{"gitId":"Shuyang0"},"content":"        this.birthdate \u003d birthdate;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        this.meeting \u003d meeting;"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":69,"author":{"gitId":"Shuyang0"},"content":"        gender \u003d source.getGender().value;"},{"lineNumber":70,"author":{"gitId":"Shuyang0"},"content":"        birthdate \u003d source.getBirthdate().value.toString();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"        meeting \u003d source.getMeeting().map(x -\u003e x.original).orElse(null);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"Shuyang0"},"content":"        if (gender \u003d\u003d null) {"},{"lineNumber":121,"author":{"gitId":"Shuyang0"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"},{"lineNumber":122,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"Shuyang0"},"content":"        if (!Gender.isValidGender(gender)) {"},{"lineNumber":124,"author":{"gitId":"Shuyang0"},"content":"            throw new IllegalValueException(Gender.MESSAGE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Shuyang0"},"content":"        final Gender modelGender \u003d new Gender(gender);"},{"lineNumber":127,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":128,"author":{"gitId":"Shuyang0"},"content":"        if (birthdate \u003d\u003d null) {"},{"lineNumber":129,"author":{"gitId":"Shuyang0"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":130,"author":{"gitId":"Shuyang0"},"content":"                    Birthdate.class.getSimpleName()));"},{"lineNumber":131,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Shuyang0"},"content":"        if (!Birthdate.isValidBirthdate(birthdate)) {"},{"lineNumber":133,"author":{"gitId":"Shuyang0"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":134,"author":{"gitId":"Shuyang0"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Shuyang0"},"content":"        final Birthdate modelBirthdate \u003d new Birthdate(birthdate);"},{"lineNumber":136,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":137,"author":{"gitId":"georgepwhuang"},"content":"        final Optional\u003cMeeting\u003e modelMeeting;"},{"lineNumber":138,"author":{"gitId":"georgepwhuang"},"content":"        if (meeting \u003d\u003d null) {"},{"lineNumber":139,"author":{"gitId":"georgepwhuang"},"content":"            modelMeeting \u003d Optional.empty();"},{"lineNumber":140,"author":{"gitId":"georgepwhuang"},"content":"        } else {"},{"lineNumber":141,"author":{"gitId":"georgepwhuang"},"content":"            modelMeeting \u003d Optional.of(meeting).map(Meeting::new);"},{"lineNumber":142,"author":{"gitId":"georgepwhuang"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"},{"lineNumber":145,"author":{"gitId":"Shuyang0"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelGender, modelBirthdate,"},{"lineNumber":146,"author":{"gitId":"Shuyang0"},"content":"                modelTags, modelMeeting);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":14,"Shuyang0":28,"-":107}},{"path":"src/main/java/seedu/address/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2021s2-cs2103t-w12-3.github.io/tp/UserGuide.html\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow."},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *         if this method is called during animation or layout processing."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window."},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":1,"-":101}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"    private Label gender;"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    private Label birthdate;"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    private Label meeting;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":62,"author":{"gitId":"Shuyang0"},"content":"        gender.setText(person.getGender().value);"},{"lineNumber":63,"author":{"gitId":"Shuyang0"},"content":"        birthdate.setText(\"DOB: \" + person.getBirthdate().value.toString());"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"        meeting.setText(person.getMeeting().map(Meeting::toString).orElse(\"No Meetings Scheduled\"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        person.getTags().stream()"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":4,"Shuyang0":6,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"      \u003cLabel fx:id\u003d\"birthdate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$birthdate\" /\u003e"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"      \u003cLabel fx:id\u003d\"meeting\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$meeting\" /\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Shuyang0":2,"georgepwhuang":1,"-":36}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidAndValidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Valid Person\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"    \"address\": \"4th street\","},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1990-01-01\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\": \"Person With Invalid Phone Field\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\": \"948asdf2424\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"    \"address\": \"4th street\","},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Non-binary\","},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"2001-10-30\""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":6,"-":11}},{"path":"src/test/data/JsonAddressBookStorageTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\","},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"    \"address\": \"4th street\","},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1990-01-01\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1992-02-02\","},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"    \"tagged\": [ \"investment\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    \"address\": \"4th street\","},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1992-02-02\""},{"lineNumber":17,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":6,"-":12}},{"path":"src/test/data/JsonSerializableAddressBookTest/invalidPersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Hans Muster\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"invalid@email!3e\","},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"    \"address\": \"4th street\","},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Male\","},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1998-06-15\""},{"lineNumber":9,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":7}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1992-02-02\","},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"    \"tagged\" : [ \"investment\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Male\","},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1996-09-30\","},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"    \"tagged\" : [ \"life\", \"medical\" ]"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":21,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Male\","},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1965-08-09\","},{"lineNumber":26,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Non-binary\","},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1990-10-10\","},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"    \"tagged\" : [ \"investment\" ]"},{"lineNumber":35,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"2000-01-05\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":45,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":46,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":47,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Female\","},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1950-01-02\","},{"lineNumber":50,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":53,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":54,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"    \"gender\" : \"Male\","},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"    \"birthdate\" : \"1945-10-10\","},{"lineNumber":58,"author":{"gitId":"-"},"content":"    \"tagged\" : [ ]"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":17,"-":43}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":85,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_AMY + GENDER_DESC_AMY + BIRTHDATE_DESC_AMY;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":153,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":161}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEETING;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":29,"author":{"gitId":"-"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_GENDER_AMY \u003d \"Female\";"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_GENDER_BOB \u003d \"Male\";"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_BIRTHDATE_AMY \u003d \"2000-01-05\";"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_BIRTHDATE_BOB \u003d \"1960-05-08\";"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_TAG_LIFE \u003d \"life\";"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    public static final String VALID_TAG_MEDICAL \u003d \"medical\";"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    public static final String VALID_MEETING_PRANK \u003d \"Prank @ 2020-04-01 18:00\";"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    public static final String VALID_MEETING_STH \u003d \"Something @ 2021-03-06 12:45\";"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"},{"lineNumber":58,"author":{"gitId":"Shuyang0"},"content":"    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"},{"lineNumber":59,"author":{"gitId":"Shuyang0"},"content":"    public static final String BIRTHDATE_DESC_AMY \u003d \" \" + PREFIX_BIRTHDATE + VALID_BIRTHDATE_AMY;"},{"lineNumber":60,"author":{"gitId":"Shuyang0"},"content":"    public static final String BIRTHDATE_DESC_BOB \u003d \" \" + PREFIX_BIRTHDATE + VALID_BIRTHDATE_BOB;"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"    public static final String TAG_DESC_LIFE \u003d \" \" + PREFIX_TAG + VALID_TAG_LIFE;"},{"lineNumber":62,"author":{"gitId":"Shuyang0"},"content":"    public static final String TAG_DESC_MEDICAL \u003d \" \" + PREFIX_TAG + VALID_TAG_MEDICAL;"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MEETING_DESC_PRANK \u003d \" \" + PREFIX_MEETING + VALID_MEETING_PRANK;"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"    public static final String MEETING_DESC_STH \u003d \" \" + PREFIX_MEETING + VALID_MEETING_STH;"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":70,"author":{"gitId":"Shuyang0"},"content":"    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"Z\"; // not a valid gender"},{"lineNumber":71,"author":{"gitId":"Shuyang0"},"content":"    public static final String INVALID_BIRTHDATE_DESC \u003d \" \" + PREFIX_BIRTHDATE + \"2059-01-01\"; // cannot be unborn"},{"lineNumber":72,"author":{"gitId":"Shuyang0"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"life*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    public static final String INVALID_MEETING_DESC \u003d \" \" + PREFIX_MEETING + \"Prank @ Tomorrow\"; // not datetime format"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":84,"author":{"gitId":"Shuyang0"},"content":"                .withGender(VALID_GENDER_AMY).withBirthdate(VALID_BIRTHDATE_AMY)"},{"lineNumber":85,"author":{"gitId":"Shuyang0"},"content":"                .withTags(VALID_TAG_LIFE).build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":88,"author":{"gitId":"Shuyang0"},"content":"                .withGender(VALID_GENDER_BOB).withBirthdate(VALID_BIRTHDATE_BOB)"},{"lineNumber":89,"author":{"gitId":"Shuyang0"},"content":"                .withTags(VALID_TAG_LIFE, VALID_TAG_MEDICAL).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":127,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":21,"georgepwhuang":6,"-":121}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LIFE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand."},{"lineNumber":32,"author":{"gitId":"-"},"content":" */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":58,"author":{"gitId":"Shuyang0"},"content":"                .withTags(VALID_TAG_LIFE).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_LIFE).build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":170}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"Shuyang0"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_MEDICAL).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":2,"-":56}},{"path":"src/test/java/seedu/address/logic/commands/ScheduleCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_STH;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING_PRANK;"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING_STH;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"class ScheduleCommandTest {"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    void execute_validIndexUnfilteredList_success() {"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        Person personToSchedule \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToSchedule);"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        Person editedPerson \u003d personInList.withMeeting(VALID_MEETING_STH).build();"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_SECOND_PERSON, MEETING_STH);"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        String expectedMessage \u003d"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"                String.format(ScheduleCommand.MESSAGE_SCHEDULE_PERSON_SUCCESS, personToSchedule.getName(), MEETING_STH);"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        expectedModel.setPerson(personToSchedule, editedPerson);"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"        assertCommandSuccess(scheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, MEETING_STH);"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"        assertCommandFailure(scheduleCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        Person personToSchedule \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(personToSchedule);"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"        Person editedPerson \u003d personInList.withMeeting(VALID_MEETING_STH).build();"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, MEETING_STH);"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        String expectedMessage \u003d"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"                String.format(ScheduleCommand.MESSAGE_SCHEDULE_PERSON_SUCCESS, personToSchedule.getName(), MEETING_STH);"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"        expectedModel.setPerson(personToSchedule, editedPerson);"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":"        assertCommandSuccess(scheduleCommand, model, expectedMessage, expectedModel);"},{"lineNumber":71,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":73,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"georgepwhuang"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":75,"author":{"gitId":"georgepwhuang"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":76,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":77,"author":{"gitId":"georgepwhuang"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":78,"author":{"gitId":"georgepwhuang"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":79,"author":{"gitId":"georgepwhuang"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":80,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleCommand \u003d new ScheduleCommand(outOfBoundIndex, MEETING_STH);"},{"lineNumber":82,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":83,"author":{"gitId":"georgepwhuang"},"content":"        assertCommandFailure(scheduleCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":86,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"georgepwhuang"},"content":"    void testEquals() {"},{"lineNumber":88,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleFirstSthCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, MEETING_STH);"},{"lineNumber":89,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleSecondSthCommand \u003d new ScheduleCommand(INDEX_SECOND_PERSON, MEETING_STH);"},{"lineNumber":90,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleFirstPrankCommand \u003d new ScheduleCommand(INDEX_FIRST_PERSON, MEETING_PRANK);"},{"lineNumber":91,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":92,"author":{"gitId":"georgepwhuang"},"content":"        // same object -\u003e returns true"},{"lineNumber":93,"author":{"gitId":"georgepwhuang"},"content":"        assertTrue(scheduleFirstSthCommand.equals(scheduleFirstSthCommand));"},{"lineNumber":94,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":95,"author":{"gitId":"georgepwhuang"},"content":"        // same values -\u003e returns true"},{"lineNumber":96,"author":{"gitId":"georgepwhuang"},"content":"        ScheduleCommand scheduleFirstSthCommandCopy \u003d new ScheduleCommand(INDEX_FIRST_PERSON, MEETING_STH);"},{"lineNumber":97,"author":{"gitId":"georgepwhuang"},"content":"        assertTrue(scheduleFirstSthCommand.equals(scheduleFirstSthCommandCopy));"},{"lineNumber":98,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"        // different types -\u003e returns false"},{"lineNumber":100,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(scheduleFirstSthCommandCopy.equals(1));"},{"lineNumber":101,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":102,"author":{"gitId":"georgepwhuang"},"content":"        // null -\u003e returns false"},{"lineNumber":103,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(scheduleFirstSthCommandCopy.equals(null));"},{"lineNumber":104,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":105,"author":{"gitId":"georgepwhuang"},"content":"        // different person -\u003e returns false"},{"lineNumber":106,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(scheduleFirstSthCommandCopy.equals(scheduleSecondSthCommand));"},{"lineNumber":107,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":108,"author":{"gitId":"georgepwhuang"},"content":"        // different meeting -\u003e returns false"},{"lineNumber":109,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(scheduleFirstSthCommandCopy.equals(scheduleFirstPrankCommand));"},{"lineNumber":110,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":111}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDATE_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LIFE;"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MEDICAL;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LIFE;"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_LIFE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":60,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_LIFE,"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_LIFE,"},{"lineNumber":66,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":70,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_LIFE,"},{"lineNumber":71,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_LIFE,"},{"lineNumber":76,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":80,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_LIFE,"},{"lineNumber":81,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPerson));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted"},{"lineNumber":84,"author":{"gitId":"Shuyang0"},"content":"        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_LIFE, VALID_TAG_MEDICAL)"},{"lineNumber":85,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":87,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE,"},{"lineNumber":88,"author":{"gitId":"Shuyang0"},"content":"                new AddCommand(expectedPersonMultipleTags));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // zero tags"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"},{"lineNumber":95,"author":{"gitId":"Shuyang0"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"},{"lineNumber":96,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_AMY + BIRTHDATE_DESC_AMY, new AddCommand(expectedPerson));"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":128,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":136,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":140,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":141,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":142,"author":{"gitId":"Shuyang0"},"content":"        // invalid gender"},{"lineNumber":143,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":144,"author":{"gitId":"Shuyang0"},"content":"                + INVALID_GENDER_DESC + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE,"},{"lineNumber":145,"author":{"gitId":"Shuyang0"},"content":"                Gender.MESSAGE_CONSTRAINTS);"},{"lineNumber":146,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":147,"author":{"gitId":"Shuyang0"},"content":"        // invalid birthdate"},{"lineNumber":148,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":149,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + INVALID_BIRTHDATE_DESC + TAG_DESC_MEDICAL + TAG_DESC_LIFE,"},{"lineNumber":150,"author":{"gitId":"Shuyang0"},"content":"                Birthdate.MESSAGE_CONSTRAINTS);"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // invalid tag"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":154,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + INVALID_TAG_DESC + TAG_DESC_LIFE, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":157,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":158,"author":{"gitId":"Shuyang0"},"content":"                + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":162,"author":{"gitId":"Shuyang0"},"content":"                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + BIRTHDATE_DESC_BOB + TAG_DESC_MEDICAL + TAG_DESC_LIFE,"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":46,"-":119}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.BIRTHDATE_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_LIFE;"},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MEDICAL;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LIFE;"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error"},{"lineNumber":103,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_LIFE + TAG_DESC_MEDICAL + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":104,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_LIFE + TAG_EMPTY + TAG_DESC_MEDICAL, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitId":"Shuyang0"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_LIFE + TAG_DESC_MEDICAL, Tag.MESSAGE_CONSTRAINTS);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":115,"author":{"gitId":"Shuyang0"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_LIFE + GENDER_DESC_AMY"},{"lineNumber":116,"author":{"gitId":"Shuyang0"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_MEDICAL + BIRTHDATE_DESC_AMY;"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":120,"author":{"gitId":"Shuyang0"},"content":"                .withGender(VALID_GENDER_AMY).withBirthdate(VALID_BIRTHDATE_AMY)"},{"lineNumber":121,"author":{"gitId":"Shuyang0"},"content":"                .withTags(VALID_TAG_MEDICAL, VALID_TAG_LIFE).build();"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":167,"author":{"gitId":"Shuyang0"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_LIFE;"},{"lineNumber":168,"author":{"gitId":"Shuyang0"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_LIFE).build();"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":177,"author":{"gitId":"Shuyang0"},"content":"                + TAG_DESC_LIFE + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_LIFE"},{"lineNumber":178,"author":{"gitId":"Shuyang0"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_MEDICAL;"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":181,"author":{"gitId":"Shuyang0"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_LIFE, VALID_TAG_MEDICAL)"},{"lineNumber":182,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":20,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"    private static final String INVALID_TAG \u003d \"#life\";"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"    private static final String INVALID_MEETING \u003d \"blah\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"    private static final String VALID_TAG_1 \u003d \"life\";"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"    private static final String VALID_TAG_2 \u003d \"medical\";"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    private static final String VALID_MEETING \u003d \"Prank @ 2021-04-01 18:30\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"-"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":200,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"georgepwhuang"},"content":"    public void parseMeeting_null_throwsNullPointerException() {"},{"lineNumber":202,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMeeting((String) null));"},{"lineNumber":203,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":205,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":206,"author":{"gitId":"georgepwhuang"},"content":"    public void parseMeeting_invalidValue_throwsParseException() {"},{"lineNumber":207,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseMeeting(INVALID_MEETING));"},{"lineNumber":208,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":209,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":210,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":211,"author":{"gitId":"georgepwhuang"},"content":"    public void parseMeeting_validValueWithoutWhitespace_returnsMeeting() throws Exception {"},{"lineNumber":212,"author":{"gitId":"georgepwhuang"},"content":"        Meeting expectedMeeting \u003d new Meeting(VALID_MEETING);"},{"lineNumber":213,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(expectedMeeting, ParserUtil.parseMeeting(VALID_MEETING));"},{"lineNumber":214,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":215,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":216,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":217,"author":{"gitId":"georgepwhuang"},"content":"    public void parseMeeting_validValueWithWhitespace_returnsTrimmedMeeting() throws Exception {"},{"lineNumber":218,"author":{"gitId":"georgepwhuang"},"content":"        String meetingWithWhitespace \u003d WHITESPACE + VALID_MEETING + WHITESPACE;"},{"lineNumber":219,"author":{"gitId":"georgepwhuang"},"content":"        Meeting expectedMeeting \u003d new Meeting(VALID_MEETING);"},{"lineNumber":220,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(expectedMeeting, ParserUtil.parseMeeting(meetingWithWhitespace));"},{"lineNumber":221,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":26,"Shuyang0":3,"-":193}},{"path":"src/test/java/seedu/address/logic/parser/ScheduleCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_MEETING_DESC;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.MEETING_DESC_PRANK;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING_PRANK;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.logic.commands.ScheduleCommand;"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"class ScheduleCommandParserTest {"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ScheduleCommand.MESSAGE_USAGE);"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"    private final ScheduleCommandParser parser \u003d new ScheduleCommandParser();"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    public void parse_validArgs_returnsScheduleCommand() {"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"        assertParseSuccess(parser, \"1 \" + MEETING_DESC_PRANK, new ScheduleCommand(INDEX_FIRST_PERSON, MEETING_PRANK));"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"-5 \" + MEETING_DESC_PRANK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"0\" + MEETING_DESC_PRANK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"a\" + MEETING_DESC_PRANK, MESSAGE_INVALID_FORMAT);"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        assertParseFailure(parser, \"1\" + INVALID_MEETING_DESC, Meeting.MESSAGE_CONSTRAINTS); // invalid meeting"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":39}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_MEDICAL)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"Shuyang0"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_MEDICAL)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":99}},{"path":"src/test/java/seedu/address/model/meeting/MeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"class MeetingTest {"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Meeting(null));"},{"lineNumber":14,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":16,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"georgepwhuang"},"content":"    public void constructor_invalidMeeting_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"        String invalidMeeting \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(invalidMeeting));"},{"lineNumber":20,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"georgepwhuang"},"content":"    void isValidMeeting() {"},{"lineNumber":24,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(NullPointerException.class, () -\u003e Meeting.isValidMeeting(null));"},{"lineNumber":25,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":26,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"\")); // empty string"},{"lineNumber":27,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\" \")); // spaces only"},{"lineNumber":28,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":29,"author":{"gitId":"georgepwhuang"},"content":"        // missing parts"},{"lineNumber":30,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\" @ 2020-04-01 18:00\")); // missing local part"},{"lineNumber":31,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank2020-04-01 18:00\")); // missing \u0027@\u0027 symbol"},{"lineNumber":32,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @ \")); // missing datetime"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":34,"author":{"gitId":"georgepwhuang"},"content":"        // invalid parts"},{"lineNumber":35,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @ Tomorrow\")); // not a datetime input"},{"lineNumber":36,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @ 2020/04/01 18:00\")); // wrong datetime format"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @ 2020-4-1 6:00\")); // missing digits in datetime"},{"lineNumber":38,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank@ 2020-04-01 18:00\")); // no space before @"},{"lineNumber":39,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @2020-04-01 18:00\")); // no space after @"},{"lineNumber":40,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @ 2020-04-01 18:00  \")); // trailing space"},{"lineNumber":41,"author":{"gitId":"georgepwhuang"},"content":"        assertFalse(Meeting.isValidMeeting(\"Prank @@ 2020-04-01 18:00  \")); // double \u0027@\u0027 symbol"},{"lineNumber":42,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":43,"author":{"gitId":"georgepwhuang"},"content":"        // valid meeting"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"        assertTrue(Meeting.isValidMeeting(\"Prank @ 2020-04-01 18:00\"));"},{"lineNumber":45,"author":{"gitId":"georgepwhuang"},"content":"        assertTrue(Meeting.isValidMeeting(\"Something @ 2021-03-06 12:45\"));"},{"lineNumber":46,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":48,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"georgepwhuang"},"content":"    void generateDateTime() {"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        String invalidDateTime \u003d \"\";"},{"lineNumber":51,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(NullPointerException.class, () -\u003e Meeting.generateDateTime(null, null));"},{"lineNumber":52,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":53,"author":{"gitId":"georgepwhuang"},"content":"                Meeting.generateDateTime(\"2020-18-56 12:34\", invalidDateTime));"},{"lineNumber":54,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e"},{"lineNumber":55,"author":{"gitId":"georgepwhuang"},"content":"                Meeting.generateDateTime(\"2020-02-28 70:34\", invalidDateTime));"},{"lineNumber":56,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":57,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"2020-04-01T18:00\", Meeting.generateDateTime(\"2020-04-01 18:00\", invalidDateTime).toString());"},{"lineNumber":58,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"2020-02-28T12:45\", Meeting.generateDateTime(\"2020-02-28 12:45\", invalidDateTime).toString());"},{"lineNumber":59,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(\"2020-02-29T12:45\", Meeting.generateDateTime(\"2020-02-31 12:45\", invalidDateTime).toString());"},{"lineNumber":60,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":61}},{"path":"src/test/java/seedu/address/model/person/BirthdateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Shuyang0"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":3,"author":{"gitId":"Shuyang0"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"public class BirthdateTest {"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Birthdate((String) null));"},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"        String invalidBirthdate \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Birthdate(invalidBirthdate));"},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Shuyang0"},"content":"    public void isValidGender() {"},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(NullPointerException.class, () -\u003e Birthdate.isValidBirthdate((String) null));"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(Birthdate.isValidBirthdate(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(Birthdate.isValidBirthdate(\"2020-02-31\")); // date doesn\u0027t exist"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Birthdate.isValidBirthdate(\"2019-01-05\"));"},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Birthdate.isValidBirthdate(\"2000-01-01\"));"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Birthdate.isValidBirthdate(\"1980-12-25\"));"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"}"}],"authorContributionMap":{"Shuyang0":36}},{"path":"src/test/java/seedu/address/model/person/GenderTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Shuyang0"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":3,"author":{"gitId":"Shuyang0"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"public class GenderTest {"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Shuyang0"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Gender(null));"},{"lineNumber":14,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Shuyang0"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"        String invalidGender \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":22,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"Shuyang0"},"content":"    public void isValidGender() {"},{"lineNumber":24,"author":{"gitId":"Shuyang0"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"},{"lineNumber":26,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"        // invalid addresses"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(Gender.isValidGender(\"\")); // empty string"},{"lineNumber":29,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(Gender.isValidGender(\" \")); // spaces only"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"        // valid addresses"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Gender.isValidGender(\"M\"));"},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Gender.isValidGender(\"F\"));"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"        assertTrue(Gender.isValidGender(\"N\"));"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"}"}],"authorContributionMap":{"Shuyang0":36}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_STH;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":13,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":19,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE)"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"                .withGender(VALID_GENDER_BOB).withBirthdate(VALID_BIRTHDATE_BOB)"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"                .withTags(VALID_TAG_MEDICAL).build();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"    public void addMeeting() {"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(ALICE, ALICE.setMeeting(null));"},{"lineNumber":65,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":66,"author":{"gitId":"georgepwhuang"},"content":"        Meeting meetingSth \u003d new Meeting(VALID_MEETING_STH);"},{"lineNumber":67,"author":{"gitId":"georgepwhuang"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withMeeting(VALID_MEETING_STH).build();"},{"lineNumber":68,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(editedAlice, ALICE.setMeeting(Optional.ofNullable(meetingSth)));"},{"lineNumber":69,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"Shuyang0"},"content":"        // different genders -\u003e returns false"},{"lineNumber":106,"author":{"gitId":"Shuyang0"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withGender(VALID_GENDER_BOB).build();"},{"lineNumber":107,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":108,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":109,"author":{"gitId":"Shuyang0"},"content":"        // different birthdates -\u003e returns false"},{"lineNumber":110,"author":{"gitId":"Shuyang0"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withBirthdate(VALID_BIRTHDATE_BOB).build();"},{"lineNumber":111,"author":{"gitId":"Shuyang0"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":112,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false"},{"lineNumber":114,"author":{"gitId":"Shuyang0"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_MEDICAL).build();"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":14,"Shuyang0":16,"-":87}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_MEDICAL)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"Shuyang0"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_MEDICAL)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":3,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING_PRANK;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":20,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":22,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":30,"author":{"gitId":"Shuyang0"},"content":"    private static final String INVALID_GENDER \u003d \"banana\";"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"    private static final String INVALID_BIRTHDATE \u003d \"1890-01-01\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":33,"author":{"gitId":"georgepwhuang"},"content":"    private static final String INVALID_MEETING \u003d \"Tomorrow\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"    private static final String VALID_GENDER \u003d BENSON.getGender().toString();"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"    private static final String VALID_BIRTHDATE \u003d BENSON.getBirthdate().toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitId":"georgepwhuang"},"content":"    private static final String VALID_MEETING \u003d MEETING_PRANK.original;"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":55,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":63,"author":{"gitId":"georgepwhuang"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":64,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":65,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":73,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":74,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"georgepwhuang"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":82,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":83,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":91,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":92,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":99,"author":{"gitId":"georgepwhuang"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":100,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":101,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":109,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_GENDER,"},{"lineNumber":110,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":117,"author":{"gitId":"georgepwhuang"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":118,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_GENDER,"},{"lineNumber":119,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"Shuyang0"},"content":"    public void toModelType_invalidGender_throwsIllegalValueException() {"},{"lineNumber":126,"author":{"gitId":"Shuyang0"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":127,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_GENDER,"},{"lineNumber":128,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":129,"author":{"gitId":"Shuyang0"},"content":"        String expectedMessage \u003d Gender.MESSAGE_CONSTRAINTS;"},{"lineNumber":130,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":131,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":133,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"Shuyang0"},"content":"    public void toModelType_nullGender_throwsIllegalValueException() {"},{"lineNumber":135,"author":{"gitId":"Shuyang0"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":136,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":137,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING);"},{"lineNumber":138,"author":{"gitId":"Shuyang0"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"},{"lineNumber":139,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":140,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":142,"author":{"gitId":"Shuyang0"},"content":"    /*@Test"},{"lineNumber":143,"author":{"gitId":"Shuyang0"},"content":"    public void toModelType_invalidBirthdate_throwsIllegalValueException() {"},{"lineNumber":144,"author":{"gitId":"Shuyang0"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":145,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":146,"author":{"gitId":"Shuyang0"},"content":"                        INVALID_BIRTHDATE,VALID_TAGS, VALID_MEETING);"},{"lineNumber":147,"author":{"gitId":"Shuyang0"},"content":"        String expectedMessage \u003d Birthdate.MESSAGE_CONSTRAINTS;"},{"lineNumber":148,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":149,"author":{"gitId":"Shuyang0"},"content":"    }*/"},{"lineNumber":150,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":151,"author":{"gitId":"Shuyang0"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"Shuyang0"},"content":"    public void toModelType_nullBirthdate_throwsIllegalValueException() {"},{"lineNumber":153,"author":{"gitId":"Shuyang0"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":154,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":155,"author":{"gitId":"Shuyang0"},"content":"                        null, VALID_TAGS, VALID_MEETING);"},{"lineNumber":156,"author":{"gitId":"Shuyang0"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Birthdate.class.getSimpleName());"},{"lineNumber":157,"author":{"gitId":"Shuyang0"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":158,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":165,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":166,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, invalidTags, VALID_MEETING);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":171,"author":{"gitId":"georgepwhuang"},"content":"    public void toModelType_invalidMeeting_throwsIllegalArgumentException() {"},{"lineNumber":172,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":173,"author":{"gitId":"georgepwhuang"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":174,"author":{"gitId":"georgepwhuang"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":175,"author":{"gitId":"Shuyang0"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":176,"author":{"gitId":"Shuyang0"},"content":"                        VALID_BIRTHDATE, VALID_TAGS, INVALID_MEETING);"},{"lineNumber":177,"author":{"gitId":"georgepwhuang"},"content":"        assertThrows(IllegalArgumentException.class, person::toModelType);"},{"lineNumber":178,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":180,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":181,"author":{"gitId":"georgepwhuang"},"content":"    public void toModelType_nullMeeting_success() throws Exception {"},{"lineNumber":182,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":183,"author":{"gitId":"georgepwhuang"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":184,"author":{"gitId":"georgepwhuang"},"content":"        Person person;"},{"lineNumber":185,"author":{"gitId":"Shuyang0"},"content":"        person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":186,"author":{"gitId":"Shuyang0"},"content":"                VALID_BIRTHDATE, VALID_TAGS, null)"},{"lineNumber":187,"author":{"gitId":"georgepwhuang"},"content":"                .toModelType();"},{"lineNumber":188,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(BENSON, person);"},{"lineNumber":189,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":191,"author":{"gitId":"georgepwhuang"},"content":"    @Test"},{"lineNumber":192,"author":{"gitId":"georgepwhuang"},"content":"    public void toModelType_validMeeting_success() throws Exception {"},{"lineNumber":193,"author":{"gitId":"georgepwhuang"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":194,"author":{"gitId":"georgepwhuang"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"},{"lineNumber":195,"author":{"gitId":"georgepwhuang"},"content":"        Person person;"},{"lineNumber":196,"author":{"gitId":"Shuyang0"},"content":"        person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,"},{"lineNumber":197,"author":{"gitId":"Shuyang0"},"content":"                VALID_BIRTHDATE, VALID_TAGS, VALID_MEETING)"},{"lineNumber":198,"author":{"gitId":"georgepwhuang"},"content":"                .toModelType();"},{"lineNumber":199,"author":{"gitId":"georgepwhuang"},"content":"        assertEquals(BENSON.setMeeting(Optional.ofNullable(MEETING_PRANK)), person);"},{"lineNumber":200,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":35,"Shuyang0":66,"-":101}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"        descriptor.setGender(person.getGender());"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"        descriptor.setBirthdate(person.getBirthdate());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Shuyang0"},"content":"     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":80,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Shuyang0"},"content":"    public EditPersonDescriptorBuilder withGender(String gender) {"},{"lineNumber":82,"author":{"gitId":"Shuyang0"},"content":"        descriptor.setGender(new Gender(gender));"},{"lineNumber":83,"author":{"gitId":"Shuyang0"},"content":"        return this;"},{"lineNumber":84,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":86,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Shuyang0"},"content":"     * Sets the {@code Birthdate} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":88,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Shuyang0"},"content":"    public EditPersonDescriptorBuilder withBirthdate(String birthdate) {"},{"lineNumber":90,"author":{"gitId":"Shuyang0"},"content":"        descriptor.setBirthdate(new Birthdate(birthdate));"},{"lineNumber":91,"author":{"gitId":"Shuyang0"},"content":"        return this;"},{"lineNumber":92,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":20,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Birthdate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"Shuyang0"},"content":"import seedu.address.model.person.Gender;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":27,"author":{"gitId":"Shuyang0"},"content":"    public static final String DEFAULT_GENDER \u003d \"Female\";"},{"lineNumber":28,"author":{"gitId":"Shuyang0"},"content":"    public static final String DEFAULT_BIRTHDATE \u003d \"1990-01-01\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":34,"author":{"gitId":"Shuyang0"},"content":"    private Gender gender;"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"    private Birthdate birthdate;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":37,"author":{"gitId":"georgepwhuang"},"content":"    private Optional\u003cMeeting\u003e meeting;"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":47,"author":{"gitId":"Shuyang0"},"content":"        gender \u003d new Gender(DEFAULT_GENDER);"},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"        birthdate \u003d new Birthdate(DEFAULT_BIRTHDATE);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"georgepwhuang"},"content":"        meeting \u003d Optional.empty();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"        gender \u003d personToCopy.getGender();"},{"lineNumber":62,"author":{"gitId":"Shuyang0"},"content":"        birthdate \u003d personToCopy.getBirthdate();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"},{"lineNumber":64,"author":{"gitId":"georgepwhuang"},"content":"        meeting \u003d personToCopy.getMeeting();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Shuyang0"},"content":"     * Sets the {@code Gender} of the {@code Person} that we are building."},{"lineNumber":101,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"Shuyang0"},"content":"    public PersonBuilder withGender(String gender) {"},{"lineNumber":103,"author":{"gitId":"Shuyang0"},"content":"        this.gender \u003d new Gender(gender);"},{"lineNumber":104,"author":{"gitId":"Shuyang0"},"content":"        return this;"},{"lineNumber":105,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":107,"author":{"gitId":"Shuyang0"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Shuyang0"},"content":"     * Sets the {@code Birthdate} of the {@code Person} that we are building."},{"lineNumber":109,"author":{"gitId":"Shuyang0"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Shuyang0"},"content":"    public PersonBuilder withBirthdate(String birthdate) {"},{"lineNumber":111,"author":{"gitId":"Shuyang0"},"content":"        this.birthdate \u003d new Birthdate(birthdate);"},{"lineNumber":112,"author":{"gitId":"Shuyang0"},"content":"        return this;"},{"lineNumber":113,"author":{"gitId":"Shuyang0"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Shuyang0"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"georgepwhuang"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"georgepwhuang"},"content":"     * Sets the {@code Meeting} of the {@code Person} that we are building."},{"lineNumber":125,"author":{"gitId":"georgepwhuang"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"georgepwhuang"},"content":"    public PersonBuilder withMeeting(String meeting) {"},{"lineNumber":127,"author":{"gitId":"georgepwhuang"},"content":"        this.meeting \u003d Optional.ofNullable(new Meeting(meeting));"},{"lineNumber":128,"author":{"gitId":"georgepwhuang"},"content":"        return this;"},{"lineNumber":129,"author":{"gitId":"georgepwhuang"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":132,"author":{"gitId":"Shuyang0"},"content":"        return new Person(name, phone, email, address, gender, birthdate, tags, meeting);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"georgepwhuang":13,"Shuyang0":27,"-":95}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDATE;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"        sb.append(PREFIX_BIRTHDATE + person.getBirthdate().value.toString() + \" \");"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach("},{"lineNumber":42,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"        descriptor.getGender().ifPresent(gender -\u003e sb.append(PREFIX_GENDER).append(gender.value).append(\" \"));"},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"        descriptor.getBirthdate().ifPresent(birthdate -\u003e sb.append(PREFIX_BIRTHDATE)"},{"lineNumber":58,"author":{"gitId":"Shuyang0"},"content":"                    .append(birthdate.value).append(\" \"));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":7,"-":62}},{"path":"src/test/java/seedu/address/testutil/TypicalMeetings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"georgepwhuang"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":3,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_PRANK;"},{"lineNumber":4,"author":{"gitId":"georgepwhuang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEETING_STH;"},{"lineNumber":5,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":6,"author":{"gitId":"georgepwhuang"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":7,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":8,"author":{"gitId":"georgepwhuang"},"content":"public class TypicalMeetings {"},{"lineNumber":9,"author":{"gitId":"georgepwhuang"},"content":""},{"lineNumber":10,"author":{"gitId":"georgepwhuang"},"content":"    public static final Meeting MEETING_STH \u003d new Meeting(VALID_MEETING_STH);"},{"lineNumber":11,"author":{"gitId":"georgepwhuang"},"content":"    public static final Meeting MEETING_PRANK \u003d new Meeting(VALID_MEETING_PRANK);"},{"lineNumber":12,"author":{"gitId":"georgepwhuang"},"content":"}"}],"authorContributionMap":{"georgepwhuang":12}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_AMY;"},{"lineNumber":6,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDATE_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"},{"lineNumber":10,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":15,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_LIFE;"},{"lineNumber":16,"author":{"gitId":"Shuyang0"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MEDICAL;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":31,"author":{"gitId":"Shuyang0"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\").withPhone(\"94351253\")"},{"lineNumber":32,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"F\").withBirthdate(\"1992-02-02\")"},{"lineNumber":33,"author":{"gitId":"Shuyang0"},"content":"            .withTags(\"investment\").build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":35,"author":{"gitId":"Shuyang0"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\").withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":36,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"M\").withBirthdate(\"1996-09-30\")"},{"lineNumber":37,"author":{"gitId":"Shuyang0"},"content":"            .withTags(\"life\", \"medical\").build();"},{"lineNumber":38,"author":{"gitId":"Shuyang0"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\")"},{"lineNumber":39,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"95352563\").withEmail(\"heinz@example.com\").withAddress(\"wall street\")"},{"lineNumber":40,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"M\").withBirthdate(\"1965-08-09\").build();"},{"lineNumber":41,"author":{"gitId":"Shuyang0"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\")"},{"lineNumber":42,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"87652533\").withEmail(\"cornelia@example.com\").withAddress(\"10th street\")"},{"lineNumber":43,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"N\").withBirthdate(\"1990-10-10\")"},{"lineNumber":44,"author":{"gitId":"Shuyang0"},"content":"            .withTags(\"investment\").build();"},{"lineNumber":45,"author":{"gitId":"Shuyang0"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\")"},{"lineNumber":46,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"9482224\").withEmail(\"werner@example.com\").withAddress(\"michegan ave\")"},{"lineNumber":47,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"F\").withBirthdate(\"2000-01-05\").build();"},{"lineNumber":48,"author":{"gitId":"Shuyang0"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\")"},{"lineNumber":49,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"9482427\").withEmail(\"lydia@example.com\").withAddress(\"little tokyo\")"},{"lineNumber":50,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"F\").withBirthdate(\"1950-01-02\").build();"},{"lineNumber":51,"author":{"gitId":"Shuyang0"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\")"},{"lineNumber":52,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"9482442\").withEmail(\"anna@example.com\").withAddress(\"4th street\")"},{"lineNumber":53,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"M\").withBirthdate(\"1945-10-10\").build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":56,"author":{"gitId":"Shuyang0"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"},{"lineNumber":57,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"8482424\").withEmail(\"stefan@example.com\").withAddress(\"little india\")"},{"lineNumber":58,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"M\").withBirthdate(\"1994-06-29\").build();"},{"lineNumber":59,"author":{"gitId":"Shuyang0"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"},{"lineNumber":60,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(\"8482131\").withEmail(\"hans@example.com\").withAddress(\"chicago ave\")"},{"lineNumber":61,"author":{"gitId":"Shuyang0"},"content":"            .withGender(\"F\").withBirthdate(\"1990-03-02\").build();"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":64,"author":{"gitId":"Shuyang0"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":65,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":66,"author":{"gitId":"Shuyang0"},"content":"            .withGender(VALID_GENDER_AMY).withBirthdate(VALID_BIRTHDATE_AMY)"},{"lineNumber":67,"author":{"gitId":"Shuyang0"},"content":"            .withTags(VALID_TAG_LIFE).build();"},{"lineNumber":68,"author":{"gitId":"Shuyang0"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":69,"author":{"gitId":"Shuyang0"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":70,"author":{"gitId":"Shuyang0"},"content":"            .withGender(VALID_GENDER_BOB).withBirthdate(VALID_BIRTHDATE_BOB)"},{"lineNumber":71,"author":{"gitId":"Shuyang0"},"content":"            .withTags(VALID_TAG_MEDICAL, VALID_TAG_LIFE).build();"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Shuyang0":42,"-":49}}]
