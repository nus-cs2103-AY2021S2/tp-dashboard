[{"path":".github/run-checks.sh","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"-"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"-"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"      # This can be set to 0 temporarily to ignore eof, trailing... tests. Set this to 1 later."},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":"        ret\u003d0"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    fi"},{"lineNumber":11,"author":{"gitId":"-"},"content":"done"},{"lineNumber":12,"author":{"gitId":"-"},"content":"exit $ret"}],"authorContributionMap":{"totoyoyo":2,"-":10}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"# MeetBuddy"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"MeetBuddy is a desktop application to help manage your social life."},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"****"}],"authorContributionMap":{"totoyoyo":6,"-":2}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":"    // TAKE THIS OUT LATER"},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"    ignoreFailures \u003d true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    afterEvaluate {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        })"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    reports {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        html.enabled \u003d true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        xml.enabled \u003d true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    archiveName \u003d \u0027addressbook.jar\u0027"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"totoyoyo":2,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"### Heng Yi Qun"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"\u003cimg src\u003d\"images/hengyiqun.png\" width\u003d\"200px\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"[[github](http://github.com/hengyiqun)]"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/hengyiqun.md)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"* Responsibilities: Features"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"### ToTo Tokaeo"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"\u003cimg src\u003d\"images/totoyoyo.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"[[github](http://github.com/totoyoyo)]"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"[[portfolio](team/totoyoyo.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"* Responsibilities: Dates and Time Management"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"### Maurice Mok"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"\u003cimg src\u003d\"images/maurice2n97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"[[homepage](https://github.com/Maurice2n97)]"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"[[github](https://github.com/Maurice2n97)]"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/maurice2n97.md)]"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"### Chen Yuheng"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"\u003cimg src\u003d\"images/skinnychenpi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"[[github](http://github.com/skinnychenpi)]"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"[[portfolio](team/skinnychenpi.md)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"* Responsibilities: Undecided"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"totoyoyo":5,"Maurice2n97":4,"skinnychenpi":6,"hengyiqun":6,"-":32}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"* Computing minor students in NUS who like typing, and is most of the week spent moving about meeting people for his internship, lectures, or social life, have busy workdays."},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"* Wants to manage school life and social life together in one app, with meetups for projects, lectures, social activities, and family all organised."},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"* Would like to keep track of contacts and organise them as well for easy searching and easy remembering."},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"* Can type fast"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"* Prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app."},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"Can manage social life and academics by toggling between two modes \u003c-\u003e school activities and non-school activities. Better time management - Priorities of meetups can be ranked and less time to schedule meetings with friends, as well as keep track of existing meetings."},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"Arrange activities with many people -\u003e events not only tie with single contacts but with a group of contacts that can be added inside. Stay connected -\u003e Keep in touch with old contacts or remove them by querying for old contacts . Keep a log and diary of past meetups, and small bios of people ,as well as images."},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"Users would be better able to manage their social and academic commitments by toggling between both modes. With the option to rank/prioritise meetups, users can experience better time management, and can stay connected with many people easily. The app also maintains a diary of past meetups, with the inclusion of images and bios of the people."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":262,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"},{"lineNumber":264,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":265,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"| `* *`    | user                                       | assign priorities for contacts | arrange my contacts and future tasks better                            |"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"| `*`      | user with many persons in the MeetBuddy address book | sort persons by name           | locate a person easily                                                 |"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Use case: Delete a person**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows a list of persons"},{"lineNumber":281,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"4.  MeetBuddy deletes the person"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"skinnychenpi"},"content":"    * 3a1. MeetBuddy shows an error message."},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"**Use case: Assigning priorities to contacts**"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"**MSS**"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"1.  User requests to add a contact with priority"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows the list of persons after adding."},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"    Use case ends."},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"**Extensions**"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"* 1a. The priority is out of range."},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"  Use case ends."},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"New features on V1.2"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"5.  Assign priorities to contacts"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"6.  Notes about the contact."},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"7.  Sort contacts by (priorities/name/groups)"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"8.  Last meetup date for each contact"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":328,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":329,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"4.  The response to any use action should become visible within 2 seconds."},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"5.  The source code should be open source."},{"lineNumber":332,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":337,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":363,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":374,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"skinnychenpi":45,"-":345}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"MeetBuddy is a **desktop app for managing contacts and daily tasks, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MeetBuddy can get your contact management as well as task management done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"1. Download the latest `meetbuddy.jar` from [here](https://github.com/AY2021S2-CS2103-T16-2/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MeetBuddy."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"  e.g `n/NAME [g/GROUP]` can be used as `n/John Doe g/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"  e.g. `[g/GROUP]…​` can be used as ` ` (i.e. 0 times), `g/friend`, `g/friend g/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"Adds a person to the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]…​`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"A person can have any number of groups (including 0)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"* Assigning Priorities:"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"  Format:"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"  `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS pr/PRIORITY [no/NOTES] d/DATE`"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"  PRIORITY can be {1,2,3,4,5}"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":97,"author":{"gitId":"hengyiqun"},"content":"* `add n/Betsy Crowe g/CS2103 e/betsycrowe@example.com a/Newgate Prison p/1234567 g/badminton`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"hengyiqun"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [g/GROUP]…​`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":113,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"* When editing groups, the existing groups of the person will be removed i.e adding of groups is not cumulative."},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"* You can remove all the person’s groups by typing `g/` without"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"    specifying any groups after it."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"*  `edit 2 n/Betsy Crower g/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing groups."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"Finds persons whose names or whose groups contain any of the given keywords."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"* Both the name and group are searched."},{"lineNumber":131,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"* Persons whose name or group matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":133,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":137,"author":{"gitId":"hengyiqun"},"content":"* `find badminton` returns the list of contacts that are in the badminton group"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":148,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book."},{"lineNumber":153,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"### Sorting of contacts : `sort`"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"Sorts the contacts displayed according to a specified field."},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"FormatL `sort FIELDNAME`"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"* Sorts according to the field specified by `FIELDNAME`"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"* `FIELDNAME` is only restricted to the following cases:"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by name : `name`"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by priority (Coming in v1.3) : `priority`"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by last seen date (Coming in v1.3) : `lastSeenDate`"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"Examples:"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run."},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":209,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":210,"author":{"gitId":"hengyiqun"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [g/GROUP]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/CS2106 g/badminton`"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":212,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":213,"author":{"gitId":"hengyiqun"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [g/GROUP]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":214,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":215,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":216,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"Maurice2n97":14,"skinnychenpi":12,"hengyiqun":16,"-":174}},{"path":"docs/team/hengyiqun.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"title: Yi Qun\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"hengyiqun":1,"-":45}},{"path":"docs/team/maurice2n97.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"title: Maurice\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"Maurice2n97":1,"-":45}},{"path":"docs/team/totoyoyo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"---"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"title: ToTo Tokaeo\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"---"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"totoyoyo":46}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.MeetBuddyParser;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Model model;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private final MeetBuddyParser meetBuddyParser;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.model \u003d model;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        meetBuddyParser \u003d new MeetBuddyParser();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        CommandResult commandResult;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        Command command \u003d meetBuddyParser.parseCommand(commandText);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return commandResult;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return model.getAddressBook();"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":4,"-":77}},{"path":"src/main/java/seedu/address/logic/commands/persons/AddPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \""},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \""},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \""},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \""},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\\n\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \""},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \""},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \""},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \""},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_GROUP + \"friends \""},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"            + PREFIX_GROUP + \"owesMoney\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private final Person toAdd;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"     * Creates an AddPersonCommand to add the specified {@code Person}"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonCommand(Person person) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(person);"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        toAdd \u003d person;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (model.hasPerson(toAdd)) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        model.addPerson(toAdd);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof AddPersonCommand // instanceof handles nulls"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 toAdd.equals(((AddPersonCommand) other).toAdd));"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":8,"hengyiqun":4,"-":57}},{"path":"src/main/java/seedu/address/logic/commands/persons/ClearPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Clears the address book."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ClearPersonCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":4,"-":21}},{"path":"src/main/java/seedu/address/logic/commands/persons/DeletePersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonCommand(Index targetIndex) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof DeletePersonCommand // instanceof handles nulls"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 targetIndex.equals(((DeletePersonCommand) other).targetIndex)); // state check"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":7,"-":48}},{"path":"src/main/java/seedu/address/logic/commands/persons/EditPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommand extends Command {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \""},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \""},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \""},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \""},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"            + \"[\" + PREFIX_GROUP + \"GROUP]...\\n\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \""},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private final Index index;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public EditPersonCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(index);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"        this.index \u003d index;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}."},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e updatedGroups \u003d editPersonDescriptor.getGroups().orElse(personToEdit.getGroups());"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedGroups);"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        if (!(other instanceof EditPersonCommand)) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand e \u003d (EditPersonCommand) other;"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return index.equals(e.index)"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * corresponding field value of the person."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        private Name name;"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Phone phone;"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Email email;"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Address address;"},{"lineNumber":134,"author":{"gitId":"hengyiqun"},"content":"        private Set\u003cGroup\u003e groups;"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         * Copy constructor."},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally."},{"lineNumber":141,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            setName(toCopy.name);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);"},{"lineNumber":147,"author":{"gitId":"hengyiqun"},"content":"            setGroups(toCopy.groups);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited."},{"lineNumber":152,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {"},{"lineNumber":154,"author":{"gitId":"hengyiqun"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, groups);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        public void setName(Name name) {"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            this.name \u003d name;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"            this.email \u003d email;"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            this.address \u003d address;"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":190,"author":{"gitId":"hengyiqun"},"content":"         * Sets {@code groups} to this object\u0027s {@code groups}."},{"lineNumber":191,"author":{"gitId":"hengyiqun"},"content":"         * A defensive copy of {@code groups} is used internally."},{"lineNumber":192,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":193,"author":{"gitId":"hengyiqun"},"content":"        public void setGroups(Set\u003cGroup\u003e groups) {"},{"lineNumber":194,"author":{"gitId":"hengyiqun"},"content":"            this.groups \u003d (groups !\u003d null) ? new HashSet\u003c\u003e(groups) : null;"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"        /**"},{"lineNumber":198,"author":{"gitId":"hengyiqun"},"content":"         * Returns an unmodifiable group set, which throws {@code UnsupportedOperationException}"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * if modification is attempted."},{"lineNumber":200,"author":{"gitId":"hengyiqun"},"content":"         * Returns {@code Optional#empty()} if {@code groups} is null."},{"lineNumber":201,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":202,"author":{"gitId":"hengyiqun"},"content":"        public Optional\u003cSet\u003cGroup\u003e\u003e getGroups() {"},{"lineNumber":203,"author":{"gitId":"hengyiqun"},"content":"            return (groups !\u003d null) ? Optional.of(Collections.unmodifiableSet(groups)) : Optional.empty();"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // short circuit if same object"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                return true;"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":212,"author":{"gitId":"-"},"content":""},{"lineNumber":213,"author":{"gitId":"-"},"content":"            // instanceof handles nulls"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {"},{"lineNumber":215,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"            // state check"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())"},{"lineNumber":222,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())"},{"lineNumber":225,"author":{"gitId":"hengyiqun"},"content":"                    \u0026\u0026 getGroups().equals(e.getGroups());"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":7,"hengyiqun":18,"-":203}},{"path":"src/main/java/seedu/address/logic/commands/persons/FindPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords."},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public FindPersonCommand(NameContainsKeywordsPredicate predicate) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new CommandResult("},{"lineNumber":35,"author":{"gitId":"-"},"content":"                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof FindPersonCommand // instanceof handles nulls"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 predicate.equals(((FindPersonCommand) other).predicate)); // state check"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":7,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/persons/ListPersonCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user."},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class ListPersonCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        requireNonNull(model);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":4,"-":22}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final Prefix PREFIX_GROUP \u003d new Prefix(\"g/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":1,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/MeetBuddyParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.*;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.AddPersonCommandParser;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.DeletePersonCommandParser;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.EditPersonCommandParser;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.FindPersonCommandParser;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Parses user input."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"public class MeetBuddyParser {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        switch (commandWord) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        case AddPersonCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            return new AddPersonCommandParser().parse(arguments);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        case EditPersonCommand.COMMAND_WORD:"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            return new EditPersonCommandParser().parse(arguments);"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        case DeletePersonCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"            return new DeletePersonCommandParser().parse(arguments);"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        case ClearPersonCommand.COMMAND_WORD:"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"            return new ClearPersonCommand();"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        case FindPersonCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"            return new FindPersonCommandParser().parse(arguments);"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        case ListPersonCommand.COMMAND_WORD:"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"            return new ListPersonCommand();"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new ExitCommand();"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new HelpCommand();"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        default:"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":19,"-":57}},{"path":"src/main/java/seedu/address/logic/parser/ParseDateUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" * A utility class for parsing/formatting LocalDateTimes into ISO format."},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class ParseDateUtil {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MESSAGE_INVALID_DATE_FORMAT \u003d"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"            \"The date should be of the following format : YYYY-MM-DD HH:MM\";"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter ISO_DATE_FORMATTER_NO_SECONDS \u003d"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * Formats a LocalDateTime object into the appropriate ISO string, with the seconds"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     * stripped."},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * @param dateTime the dateTime object to be formateed."},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * @return the formatted string"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public static String formatDateTime(LocalDateTime dateTime) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        return dateTime.format(ISO_DATE_FORMATTER_NO_SECONDS);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     * Parses a string into LocalDateTime."},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * @param dateTime the string must be in the format yyyy-MM-dd HH:mm"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * @return the LocalDateTime."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     * @throws ParseException if the dateTime string is of incorrect format"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDateTime parseDateTime(String dateTime) throws ParseException {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            return LocalDateTime.parse(dateTime, ISO_DATE_FORMATTER_NO_SECONDS);"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            throw new ParseException(MESSAGE_INVALID_DATE_FORMAT);"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":45}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":20,"author":{"gitId":"-"},"content":" */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ParserUtil {"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * trimmed."},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(name);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}."},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(phone);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid."},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(address);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(email);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"     * Parses a {@code String group} into a {@code group}."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"     * @throws ParseException if the given {@code group} is invalid."},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"    public static Group parseGroup(String group) throws ParseException {"},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(group);"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        String trimmedGroup \u003d group.trim();"},{"lineNumber":107,"author":{"gitId":"hengyiqun"},"content":"        if (!Group.isValidGroupName(trimmedGroup)) {"},{"lineNumber":108,"author":{"gitId":"hengyiqun"},"content":"            throw new ParseException(Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"hengyiqun"},"content":"        return new Group(trimmedGroup);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e}."},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"    public static Set\u003cGroup\u003e parseGroups(Collection\u003cString\u003e groups) throws ParseException {"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(groups);"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e groupSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"        for (String groupName : groups) {"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"            groupSet.add(parseGroup(groupName));"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"hengyiqun"},"content":"        return groupSet;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":16,"-":108}},{"path":"src/main/java/seedu/address/logic/parser/meetings/AddMeetingCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.meetings;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.*;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class AddMeetingCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e tagList \u003d ParserUtil.parseGroups(argMultimap.getAllValues(PREFIX_GROUP));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        return new AddPersonCommand(person);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10,"hengyiqun":4,"-":46}},{"path":"src/main/java/seedu/address/logic/parser/persons/AddPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.*;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new AddPersonCommand object"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandParser implements Parser\u003cAddPersonCommand\u003e {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPersonCommand"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an AddPersonCommand object for execution."},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public AddPersonCommand parse(String args) throws ParseException {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupList \u003d ParserUtil.parseGroups(argMultimap.getAllValues(PREFIX_GROUP));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"        Person person \u003d new Person(name, phone, email, address, groupList);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        return new AddPersonCommand(person);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}."},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10,"hengyiqun":5,"-":46}},{"path":"src/main/java/seedu/address/logic/parser/persons/DeletePersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new DeletePersonCommand object"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandParser implements Parser\u003cDeletePersonCommand\u003e {"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the DeletePersonCommand"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * and returns a DeletePersonCommand object for execution."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public DeletePersonCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"            return new DeletePersonCommand(index);"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        } catch (ParseException pe) {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException("},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE), pe);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":31}},{"path":"src/main/java/seedu/address/logic/parser/persons/EditPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentMultimap;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ArgumentTokenizer;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.ParserUtil;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new EditPersonCommand object"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandParser implements Parser\u003cEditPersonCommand\u003e {"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the EditPersonCommand"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * and returns an EditPersonCommand object for execution."},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public EditPersonCommand parse(String args) throws ParseException {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireNonNull(args);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GROUP);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Index index;"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE), pe);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"hengyiqun"},"content":"        parseGroupsForEdit(argMultimap.getAllValues(PREFIX_GROUP)).ifPresent(editPersonDescriptor::setGroups);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"            throw new ParseException(EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        return new EditPersonCommand(index, editPersonDescriptor);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"     * Parses {@code Collection\u003cString\u003e groups} into a {@code Set\u003cGroup\u003e} if {@code groups} is non-empty."},{"lineNumber":73,"author":{"gitId":"hengyiqun"},"content":"     * If {@code groups} contain only one element which is an empty string, it will be parsed into a"},{"lineNumber":74,"author":{"gitId":"hengyiqun"},"content":"     * {@code Set\u003cGroup\u003e} containing zero groups."},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"    private Optional\u003cSet\u003cGroup\u003e\u003e parseGroupsForEdit(Collection\u003cString\u003e groups) throws ParseException {"},{"lineNumber":77,"author":{"gitId":"hengyiqun"},"content":"        assert groups !\u003d null;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        if (groups.isEmpty()) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return Optional.empty();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        Collection\u003cString\u003e groupSet \u003d groups.size() \u003d\u003d 1 \u0026\u0026 groups.contains(\"\") ? Collections.emptySet() : groups;"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        return Optional.of(ParserUtil.parseGroups(groupSet));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":15,"hengyiqun":12,"-":59}},{"path":"src/main/java/seedu/address/logic/parser/persons/FindPersonCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.parser.persons;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.Parser;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" * Parses input arguments and creates a new FindPersonCommand object"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandParser implements Parser\u003cFindPersonCommand\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the given {@code String} of arguments in the context of the FindPersonCommand"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * and returns a FindPersonCommand object for execution."},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public FindPersonCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException("},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        return new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10,"-":24}},{"path":"src/main/java/seedu/address/model/group/Group.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":" * Represents a Group in the address book."},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidGroupName(String)}"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":" */"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"public class Group {"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Group names should be alphanumeric\";"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}\\\\s]+\";"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public final String groupName;"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code Group}."},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"     * @param groupName A valid group name."},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    public Group(String groupName) {"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        requireNonNull(groupName);"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        checkArgument(isValidGroupName(groupName), MESSAGE_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"     * Returns true if a given string is a valid group name."},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    public static boolean isValidGroupName(String test) {"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"                || (other instanceof Group // instanceof handles nulls"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 groupName.equals(((Group) other).groupName)); // state check"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        return groupName.hashCode();"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"        return \u0027[\u0027 + groupName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"}"}],"authorContributionMap":{"hengyiqun":54}},{"path":"src/main/java/seedu/address/model/meeting/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ParseDateUtil;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s DateTime in a meeting."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"public class DateTime implements Comparable\u003cDateTime\u003e {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should use YYYY-MM-DD HH:MM format\";"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public static final DateTimeFormatter VALIDATION_DATETIME_FORMAT \u003d ParseDateUtil.ISO_DATE_FORMATTER_NO_SECONDS;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public final LocalDateTime value;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code DateTime}.{}"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"     * @param dateTime A valid DateTime number."},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime(String dateTime) {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(dateTime);"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        value \u003d LocalDateTime.parse(dateTime, VALIDATION_DATETIME_FORMAT);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code DateTime}"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * @param value a LocalDateTime object"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    public DateTime(LocalDateTime value) {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(value);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        this.value \u003d value;"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid DateTime number."},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidDateTime(String test) {"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"            LocalDateTime.parse(test, VALIDATION_DATETIME_FORMAT);"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"            return false;"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        return true;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"     * Formats the LocalDateTime attribute,"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * @return the ISO formatted string of LocalDateTime"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    public String toIsoFormatString() {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        return ParseDateUtil.formatDateTime(value);"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    public int compareTo(DateTime other) {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        if (value.isBefore(other.value)) {"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"            return -1;"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        return 1;"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        return value.toString();"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.DateTime // instanceof handles nulls"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.meeting.DateTime) other).value)); // state check"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        return value.hashCode();"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":27,"skinnychenpi":65}},{"path":"src/main/java/seedu/address/model/meeting/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s Description in the meeting book."},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; should always be valid.}"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"public class Description {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullDescription;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code Description}."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * @param description A valid Description."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public Description(String description) {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        requireNonNull(description);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        fullDescription \u003d description;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription;"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Description // instanceof handles nulls"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 fullDescription.equals(((seedu.address.model.meeting.Description) other)"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                                .fullDescription)); // state check"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription.hashCode();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":6,"skinnychenpi":37}},{"path":"src/main/java/seedu/address/model/meeting/Meeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Objects;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * Represents a meeting in MeetBuddy."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"public class Meeting {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            \"The start date time of a meeting should be strictly earlier than the terminate date time.\";"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    // Identity fields"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime start;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime terminate;"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    // Data fields"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    private final Priority priority;"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private final Description description;"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    private final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public Meeting(Name name, DateTime start, DateTime terminate, Priority priority,"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"                   Description description, Set\u003cGroup\u003e groups) {"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(name, start, terminate, priority, description, groups);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidStartTerminate(start, terminate), MESSAGE_CONSTRAINTS);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        this.name \u003d name;"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d start;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d terminate;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d priority;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d description;"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        this.groups.addAll(groups);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    public Name getName() {"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        return name;"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getStart() {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        return start;"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getTerminate() {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return terminate;"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    public Priority getPriority() {"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        return priority;"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    public Description getDescription() {"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        return description;"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"     * Returns an immutable group set, which throws {@code UnsupportedOperationException}"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * if modification is attempted."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cGroup\u003e getGroups() {"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"        return Collections.unmodifiableSet(groups);"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same name, start and terminate time. (Use identify fields only)"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a weaker notion of equality between two meetings."},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isSameMeeting(Meeting otherMeeting) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        if (otherMeeting \u003d\u003d this) {"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"            return true;"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting !\u003d null"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getName().equals(getName())"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate());"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given date time for the meeting is valid."},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidStartTerminate(DateTime start, DateTime terminate) {"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        return start.compareTo(terminate) \u003d\u003d -1;"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same identity and data fields."},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a stronger notion of equality between two meetings."},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"            return true;"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        if (!(other instanceof Meeting)) {"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"            return false;"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"        Meeting otherMeeting \u003d (Meeting) other;"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting.getName().equals(getName())"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate())"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getPriority().equals(getPriority())"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"},{"lineNumber":119,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 otherMeeting.getGroups().equals(getGroups());"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":125,"author":{"gitId":"hengyiqun"},"content":"        return Objects.hash(name, start, terminate, priority, description, groups);"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(getName())"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Start: \")"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"                .append(getStart())"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Terminate: \")"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"                .append(getTerminate())"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Priority: \")"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"                .append(getPriority())"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Description: \")"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"                .append(getDescription());"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":141,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groups \u003d getGroups();"},{"lineNumber":142,"author":{"gitId":"hengyiqun"},"content":"        if (!groups.isEmpty()) {"},{"lineNumber":143,"author":{"gitId":"hengyiqun"},"content":"            builder.append(\"; Groups: \");"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"            groups.forEach(builder::append);"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        return builder.toString();"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":4,"skinnychenpi":131,"hengyiqun":14}},{"path":"src/main/java/seedu/address/model/meeting/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s name in the meeting book."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 fullName.equals(((seedu.address.model.meeting.Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":59}},{"path":"src/main/java/seedu/address/model/meeting/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s priority in the meeting."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Priority {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only vary from 1 to 5.\";"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[1-5]*$\";"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public final int priority;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs an {@code Priority}."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority A valid priority."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    public Priority(String priority) {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(priority);"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d Integer.parseInt(priority);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid priority."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidPriority(String priority) {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        return priority.matches(VALIDATION_REGEX);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        return Integer.toString(priority);"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Priority // instanceof handles nulls"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 priority \u003d\u003d (((seedu.address.model.meeting.Priority) other).priority)); // state check"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":3,"skinnychenpi":48}},{"path":"src/main/java/seedu/address/model/meeting/UniqueMeetingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * A list of meetings that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}."},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":" * As such, adding and updating of meetings uses Meeting#isSameMeeting(Meeting) for equality"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" * so as to ensure that the meeting being added or updated is"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" * unique in terms of identity in the UniqueMeetingList. However, the removal of a meeting uses Meeting#equals(Object)"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * so as to ensure that the meeting with exactly the same fields will be removed."},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * @see Meeting#isSameMeeting(Meeting)"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if the list contains an equivalent meeting as the given argument."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public boolean contains(Meeting toCheck) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameMeeting);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a meeting to the list."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must not already exist in the list."},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    public void add(Meeting toAdd) {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        internalList.add(toAdd);"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     * {@code target} must exist in the list."},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list."},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting(Meeting target, Meeting editedMeeting) {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(target, editedMeeting);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        internalList.set(index, editedMeeting);"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     * Removes the equivalent meeting from the list."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must exist in the list."},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    public void remove(Meeting toRemove) {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(UniqueMeetingList replacement) {"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(replacement);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the contents of this list with {@code meetings}."},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     * {@code meetings} must not contain duplicate meetings."},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(List\u003cMeeting\u003e meetings) {"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(meetings);"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        if (!meetingsAreUnique(meetings)) {"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(meetings);"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"        return internalUnmodifiableList;"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"    public Iterator\u003cMeeting\u003e iterator() {"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.iterator();"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof UniqueMeetingList // instanceof handles nulls"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.hashCode();"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if {@code meetings} contains only unique meetings."},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"                    return false;"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        return true;"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":5,"skinnychenpi":133}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class DuplicateMeetingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    public DuplicateMeetingException() {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Operation would result in duplicate meetings\");"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":12}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingNotFoundException() {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Can\u0027t find the meeting in the UniqueMeetingList.\");"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book."},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":15,"author":{"gitId":"-"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"    private final Set\u003cGroup\u003e groups \u003d new HashSet\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cGroup\u003e groups) {"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"        requireAllNonNull(name, phone, email, address, groups);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"        this.groups.addAll(groups);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"     * Returns an immutable group set, which throws {@code UnsupportedOperationException}"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"hengyiqun"},"content":"    public Set\u003cGroup\u003e getGroups() {"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"        return Collections.unmodifiableSet(groups);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name."},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getName().equals(getName());"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons."},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"},{"lineNumber":95,"author":{"gitId":"hengyiqun"},"content":"                \u0026\u0026 otherPerson.getGroups().equals(getGroups());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        return Objects.hash(name, phone, email, address, groups);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        builder.append(getName())"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                .append(getPhone())"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                .append(getEmail())"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                .append(getAddress());"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groups \u003d getGroups();"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"        if (!groups.isEmpty()) {"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"            builder.append(\"; Groups: \");"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":"            groups.forEach(builder::append);"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return builder.toString();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":""},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":14,"-":109}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new Person[] {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"friends\")),"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"colleagues\", \"friends\")),"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"neighbours\")),"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"family\")),"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"classmates\")),"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"                getGroupSet(\"colleagues\"))"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        };"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"     * Returns a group set containing the list of strings given."},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"    public static Set\u003cGroup\u003e getGroupSet(String... strings) {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"                .map(Group::new)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":10,"-":50}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedGroup.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":"import com.fasterxml.jackson.annotation.JsonValue;"},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":" * Jackson-friendly version of {@link Group}."},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":" */"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"class JsonAdaptedGroup {"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    private final String groupName;"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"     * Constructs a {@code JsonAdaptedGroup} with the given {@code groupName}."},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    @JsonCreator"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedGroup(String groupName) {"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"        this.groupName \u003d groupName;"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"     * Converts a given {@code Group} into this class for Jackson use."},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"    public JsonAdaptedGroup(Group source) {"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"        groupName \u003d source.groupName;"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    @JsonValue"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    public String getGroupName() {"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"        return groupName;"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"     * Converts this Jackson-friendly adapted group object into the model\u0027s {@code Group} object."},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted group."},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"    public Group toModelType() throws IllegalValueException {"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"        if (!Group.isValidGroupName(groupName)) {"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"            throw new IllegalValueException(Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        return new Group(groupName);"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":48,"author":{"gitId":"hengyiqun"},"content":"}"}],"authorContributionMap":{"hengyiqun":48}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedMeeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.ParseDateUtil;"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Name;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" * Jackson-friendly version of {@link seedu.address.model.meeting.Meeting}."},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedMeeting {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Meeting\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    private final String name;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private final String startDateTime;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private final String endDateTime;"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private final String description;"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private final String priority;"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cJsonAdaptedGroup\u003e group \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     * Constructs a {@code JsonAdoptedMeeting} with the given meeting details."},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    @JsonCreator"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    public JsonAdaptedMeeting(@JsonProperty(\"name\") String name,"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"startDateTime\") String startDateTime,"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"endDateTime\") String endDateTime,"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"description\") String description,"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                              @JsonProperty(\"priority\") String priority,"},{"lineNumber":47,"author":{"gitId":"hengyiqun"},"content":"                              @JsonProperty(\"group\") List\u003cJsonAdaptedGroup\u003e group) {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        this.name \u003d name;"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        this.startDateTime \u003d startDateTime;"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        this.endDateTime \u003d endDateTime;"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        this.priority \u003d priority;"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"        if (group !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"            this.group.addAll(group);"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * Converts a given {@code Meeting} into this class for Jackson use."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    public JsonAdaptedMeeting(Meeting source) {"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        startDateTime \u003d ParseDateUtil.formatDateTime(source.getStart().value);"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        endDateTime \u003d ParseDateUtil.formatDateTime(source.getTerminate().value);"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        description \u003d source.getDescription().fullDescription;"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        priority \u003d source.getPriority().toString();"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        group.addAll(source.getGroups().stream()"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"                .map(JsonAdaptedGroup::new)"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * Converts this Jackson-friendly adapted meeting object into the model\u0027s {@code Meeting} object."},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted meeting."},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    public Meeting toModelType() throws IllegalValueException {"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        final List\u003cGroup\u003e meetingGroups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        for (JsonAdaptedGroup g: group) {"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"            meetingGroups.add(g.toModelType());"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        if (startDateTime \u003d\u003d null || endDateTime \u003d\u003d null) {"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException("},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        if (!DateTime.isValidDateTime(startDateTime) || !DateTime.isValidDateTime(endDateTime)) {"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"        final DateTime modelStart \u003d new DateTime(startDateTime);"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        final DateTime modelTerminate \u003d new DateTime(endDateTime);"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException("},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        final Description modelDescription \u003d new Description(description);"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"        if (priority \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"                    Priority.class.getSimpleName()));"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        if (!Priority.isValidPriority(priority)) {"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        final Priority modelPriority \u003d new Priority(priority);"},{"lineNumber":121,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e modelTags \u003d new HashSet\u003c\u003e(meetingGroups);"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"            return new Meeting(modelName, modelStart, modelTerminate,"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"                    modelPriority, modelDescription, modelTags);"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalValueException(e.getMessage());"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":""}],"authorContributionMap":{"Maurice2n97":120,"hengyiqun":11}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}."},{"lineNumber":22,"author":{"gitId":"-"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    private final List\u003cJsonAdaptedGroup\u003e grouped \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details."},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"            @JsonProperty(\"group\") List\u003cJsonAdaptedGroup\u003e group) {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"        if (group !\u003d null) {"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"            this.grouped.addAll(group);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use."},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"        grouped.addAll(source.getGroups().stream()"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"                .map(JsonAdaptedGroup::new)"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person."},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {"},{"lineNumber":68,"author":{"gitId":"hengyiqun"},"content":"        final List\u003cGroup\u003e personGroups \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"        for (JsonAdaptedGroup group : grouped) {"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"            personGroups.add(group.toModelType());"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"hengyiqun"},"content":"        final Set\u003cGroup\u003e modelGroups \u003d new HashSet\u003c\u003e(personGroups);"},{"lineNumber":106,"author":{"gitId":"hengyiqun"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelGroups);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":12,"-":97}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Name;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":33,"author":{"gitId":"-"},"content":" */"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    private static ObservableList\u003cMeeting\u003e meetingObservableList \u003d FXCollections.observableArrayList();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private PersonListPanel personListPanel;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    private MeetingDashboard meetingDashboard;"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private StackPane personListPanelPlaceholder;"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    private StackPane meetingDashboardPlaceholder;"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Set dependencies"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Configure the UI"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        setAccelerators();"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return primaryStage;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        /*"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":106,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":112,"author":{"gitId":"-"},"content":"         *"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":114,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":115,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":116,"author":{"gitId":"-"},"content":"         */"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                event.consume();"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"        //for now I just create a custom meeting and put in a observable List, to test the UI."},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d \"A regular meeting. Nothing special. Clear up a few documents.\";"},{"lineNumber":144,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e setGroups \u003d new HashSet\u003c\u003e();"},{"lineNumber":145,"author":{"gitId":"hengyiqun"},"content":"        setGroups.add(new Group(\"Hello\"));"},{"lineNumber":146,"author":{"gitId":"hengyiqun"},"content":"        setGroups.add(new Group(\"TestGroup\"));"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"        meetingObservableList.add(new Meeting(new Name(\"A very long meeting\"),"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-02-03 12:00\"),"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-02-03 14:00\"),"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"                new Priority(\"1\"),"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"                new Description(description), setGroups));"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"        meetingObservableList.add(new Meeting(new Name(\"Sample Meeting\"),"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-10-03 12:00\"),"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-12-03 14:00\"),"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"                new Priority(\"4\"),"},{"lineNumber":157,"author":{"gitId":"hengyiqun"},"content":"                new Description(description), setGroups));"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"        meetingObservableList.add(new Meeting(new Name(\"The next Meeting\"),"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-10-03 12:00\"),"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"                new DateTime(\"2021-12-03 14:00\"),"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"                new Priority(\"4\"),"},{"lineNumber":164,"author":{"gitId":"hengyiqun"},"content":"                new Description(description), setGroups));"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"        // can delete  up to here .."},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"        meetingDashboard \u003d new MeetingDashboard(meetingObservableList);"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"        meetingDashboardPlaceholder.getChildren().add(meetingDashboard.getRoot());"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened."},{"lineNumber":185,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    public void handleHelp() {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            helpWindow.show();"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        } else {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            helpWindow.focus();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"    void show() {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        primaryStage.show();"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":200,"author":{"gitId":"-"},"content":"     * Closes the application."},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    private void handleExit() {"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        helpWindow.hide();"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        primaryStage.hide();"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public PersonListPanel getPersonListPanel() {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        return personListPanel;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"-"},"content":""},{"lineNumber":215,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":217,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"},{"lineNumber":225,"author":{"gitId":"-"},"content":""},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                handleHelp();"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                handleExit();"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":233,"author":{"gitId":"-"},"content":""},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return commandResult;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            throw e;"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":38,"hengyiqun":7,"-":196}},{"path":"src/main/java/seedu/address/ui/MeetingCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * An UI component that displays information of a {@code Meeting}."},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"public class MeetingCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"MeetingCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public final Meeting meeting;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    private HBox meetingPane;"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private Label name;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private Label id;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private Label startDate;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private Label endDate;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private Label description;"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private Label priority;"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    private FlowPane tags;"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code meetingCard} with the given {@code meeting} and index to display."},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingCard(Meeting meeting, int displayedIndex) {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        this.meeting \u003d meeting;"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        name.setText(meeting.getName().toString());"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        startDate.setText(meeting.getStart().toString());"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        endDate.setText(meeting.getTerminate().toString());"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        description.setText(meeting.getDescription().toString());"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        priority.setText(meeting.getPriority().toString());"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"        meeting.getGroups().stream()"},{"lineNumber":51,"author":{"gitId":"hengyiqun"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.groupName))"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.groupName)));"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object other) {"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        // short circuit if same object"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        // instanceof handles nulls"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        if (!(other instanceof MeetingCard)) {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"            return false;"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        // state check"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        MeetingCard card \u003d (MeetingCard) other;"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"                \u0026\u0026 meeting.equals(card.meeting);"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":74,"hengyiqun":3}},{"path":"src/main/java/seedu/address/ui/MeetingDashboard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" * Dashboard containing the list of meetings."},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"public class MeetingDashboard extends UiPart\u003cRegion\u003e {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FXML \u003d \"MeetingDashboard.fxml\";"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(MeetingDashboard.class);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private ListView\u003cMeeting\u003e meetingListView;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code PersonListPanel} with the given {@code ObservableList}."},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public MeetingDashboard(ObservableList\u003cMeeting\u003e meetingObservableList) {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        super(FXML);"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        meetingListView.setItems(meetingObservableList);"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        meetingListView.setCellFactory(listView -\u003e new MeetingListViewCell());"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Meeting} using a {@code MeetingCard}."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    class MeetingListViewCell extends ListCell\u003cMeeting\u003e {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        protected void updateItem(Meeting meeting, boolean empty) {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            super.updateItem(meeting, empty);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            if (empty || meeting \u003d\u003d null) {"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                setGraphic(null);"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                setText(null);"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"                setGraphic(new MeetingCard(meeting, getIndex() + 1).getRoot());"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":51}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}."},{"lineNumber":14,"author":{"gitId":"-"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public final Person person;"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * Creates a {@code PersonCard} with the given {@code Person} and index to display."},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.person \u003d person;"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        name.setText(person.getName().fullName);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        person.getGroups().stream()"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.groupName))"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.groupName)));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":1,"hengyiqun":3,"-":73}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":59,"author":{"gitId":"totoyoyo"},"content":"    -fx-border-color: transparent transparent derive(-fx-base, 80%) transparent;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":".table-view .column-header .label {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":".split-pane {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":".list-view {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    -fx-padding: 0;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":".list-cell {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap: 0;"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":".list-cell:filled:even {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:odd {"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}"},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:selected {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":".list-cell .label {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"},{"lineNumber":118,"author":{"gitId":"-"},"content":""},{"lineNumber":119,"author":{"gitId":"-"},"content":".cell_big_label {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":".cell_small_label {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":".stack-pane {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":".pane-with-border {"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 10%);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    -fx-border-top-width: 1px;"},{"lineNumber":139,"author":{"gitId":"-"},"content":"}"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":".status-bar {"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":".result-display {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":".result-display .label {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":".status-bar .label {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":".status-bar-with-border {"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":167,"author":{"gitId":"-"},"content":"}"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":".status-bar-with-border .label {"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}"},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":".grid-pane {"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;"},{"lineNumber":177,"author":{"gitId":"-"},"content":"}"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":".context-menu {"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu .label {"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}"},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":".menu-bar {"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar .label {"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"},{"lineNumber":201,"author":{"gitId":"-"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":".menu .left-container {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-background-color: black;"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"/*"},{"lineNumber":207,"author":{"gitId":"-"},"content":" * Metro style Push Button"},{"lineNumber":208,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira"},{"lineNumber":209,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"},{"lineNumber":210,"author":{"gitId":"-"},"content":" */"},{"lineNumber":211,"author":{"gitId":"-"},"content":".button {"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;"},{"lineNumber":221,"author":{"gitId":"-"},"content":"}"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":".button:hover {"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: white;"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    -fx-text-fill: #1d1d1d;"},{"lineNumber":230,"author":{"gitId":"-"},"content":"}"},{"lineNumber":231,"author":{"gitId":"-"},"content":""},{"lineNumber":232,"author":{"gitId":"-"},"content":".button:focused {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}"},{"lineNumber":239,"author":{"gitId":"-"},"content":""},{"lineNumber":240,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":243,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":244,"author":{"gitId":"-"},"content":"}"},{"lineNumber":245,"author":{"gitId":"-"},"content":""},{"lineNumber":246,"author":{"gitId":"-"},"content":".button:default {"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;"},{"lineNumber":248,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;"},{"lineNumber":249,"author":{"gitId":"-"},"content":"}"},{"lineNumber":250,"author":{"gitId":"-"},"content":""},{"lineNumber":251,"author":{"gitId":"-"},"content":".button:default:hover {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}"},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":".dialog-pane {"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}"},{"lineNumber":262,"author":{"gitId":"-"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;"},{"lineNumber":265,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;"},{"lineNumber":266,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    -fx-fill: white;"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":278,"author":{"gitId":"-"},"content":"}"},{"lineNumber":279,"author":{"gitId":"-"},"content":""},{"lineNumber":280,"author":{"gitId":"-"},"content":".scroll-bar {"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar .thumb {"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;"},{"lineNumber":287,"author":{"gitId":"-"},"content":"}"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;"},{"lineNumber":292,"author":{"gitId":"-"},"content":"}"},{"lineNumber":293,"author":{"gitId":"-"},"content":""},{"lineNumber":294,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}"},{"lineNumber":297,"author":{"gitId":"-"},"content":""},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}"},{"lineNumber":301,"author":{"gitId":"-"},"content":""},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}"},{"lineNumber":305,"author":{"gitId":"-"},"content":""},{"lineNumber":306,"author":{"gitId":"-"},"content":"#cardPane {"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;"},{"lineNumber":308,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;"},{"lineNumber":309,"author":{"gitId":"-"},"content":"}"},{"lineNumber":310,"author":{"gitId":"-"},"content":""},{"lineNumber":311,"author":{"gitId":"-"},"content":"#commandTypeLabel {"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;"},{"lineNumber":313,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;"},{"lineNumber":314,"author":{"gitId":"-"},"content":"}"},{"lineNumber":315,"author":{"gitId":"-"},"content":""},{"lineNumber":316,"author":{"gitId":"-"},"content":"#commandTextField {"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;"},{"lineNumber":318,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;"},{"lineNumber":320,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"Maurice2n97"},"content":"#filterField, #personListPanel, #personWebpage, #meetingDashboardPlaceholder {"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}"},{"lineNumber":330,"author":{"gitId":"-"},"content":""},{"lineNumber":331,"author":{"gitId":"-"},"content":"#resultDisplay .content {"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;"},{"lineNumber":333,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;"},{"lineNumber":334,"author":{"gitId":"-"},"content":"}"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"#tags {"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;"},{"lineNumber":339,"author":{"gitId":"-"},"content":"}"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"#tags .label {"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;"},{"lineNumber":343,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;"},{"lineNumber":344,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;"},{"lineNumber":345,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;"},{"lineNumber":348,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"totoyoyo":1,"Maurice2n97":1,"-":346}},{"path":"src/main/resources/view/HelpWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":"\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\""},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"         xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003cicons\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/icons\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cscene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        \u003cScene\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003cHBox alignment\u003d\"CENTER\"\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"                \u003cchildren\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                    \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                        \u003cHBox.margin\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                            \u003cInsets right\u003d\"5.0\"/\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                        \u003c/HBox.margin\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                    \u003c/Label\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                        \u003cHBox.margin\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                            \u003cInsets left\u003d\"5.0\"/\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003c/HBox.margin\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                    \u003c/Button\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003copaqueInsets\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/opaqueInsets\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        \u003c/Scene\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    \u003c/scene\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"totoyoyo":3,"-":37}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.stage.Stage?\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cscene\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cScene\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"      \u003cBorderPane prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        \u003ctop\u003e"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            \u003cVBox prefHeight\u003d\"150.0\"\u003e"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"               \u003cchildren\u003e"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"              \u003cMenuBar fx:id\u003d\"menuBar\" maxHeight\u003d\"25.0\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                  \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                  \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                \u003c/Menu\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"              \u003c/MenuBar\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      "},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"              \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"25.0\" prefHeight\u003d\"25.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e"},{"lineNumber":41,"author":{"gitId":"-"},"content":"      "},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" minHeight\u003d\"90.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                \u003cpadding\u003e"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u003c/padding\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":"              \u003c/StackPane\u003e"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/children\u003e"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/VBox\u003e"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/top\u003e"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        \u003cbottom\u003e"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            \u003cVBox maxHeight\u003d\"-Infinity\" minHeight\u003d\"-Infinity\"\u003e"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"               \u003cchildren\u003e"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"                 \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"               \u003c/children\u003e"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/VBox\u003e"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/bottom\u003e"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        \u003cleft\u003e"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        \u003cVBox fx:id\u003d\"personList\" prefWidth\u003d\"222.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":61,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/left\u003e"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"          \u003ccenter\u003e"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"               \u003cStackPane fx:id \u003d \"meetingDashboardPlaceholder\"  BorderPane.alignment\u003d\"CENTER\" /\u003e"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"          \u003c/center\u003e"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        "},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"      \u003c/BorderPane\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e"},{"lineNumber":74,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Maurice2n97":32,"-":43}},{"path":"src/main/resources/view/MeetingCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"\u003cHBox id\u003d\"meetingPane\" fx:id\u003d\"meetingPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        \u003cVBox HBox.hgrow\u003d\"ALWAYS\" spacing\u003d\"10\"\u003e"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"            \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"10.0\" VBox.vgrow\u003d\"NEVER\"\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cchildren\u003e"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"id\" text\u003d\"Label\"/\u003e"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"name\" text\u003d\"A VERY LONG MEETING\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cInsets top\u003d\"5.0\"/\u003e"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox spacing\u003d\"10.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cLabel text\u003d\"Priority Level:\"/\u003e"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cLabel fx:id\u003d\"priority\" wrapText\u003d\"false\"/\u003e"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                \u003cFlowPane fx:id\u003d\"tags\"/\u003e"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                \u003cHBox spacing\u003d\"10.0\"\u003e"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                    \u003cchildren\u003e"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel text\u003d\"From : \" HBox.hgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"startDate\" text\u003d\"start date\" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel text\u003d\"to\" HBox.hgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                        \u003cLabel fx:id\u003d\"endDate\" text\u003d\"end date \" wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"/\u003e"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                    \u003c/children\u003e"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                \u003c/HBox\u003e"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                \u003cLabel fx:id\u003d\"description\" text\u003d\"Description\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/children\u003e"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/VBox\u003e"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    \u003cpadding\u003e"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        \u003cInsets top\u003d\"5.0\" bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\"/\u003e"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/padding\u003e"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Maurice2n97":42}},{"path":"src/main/resources/view/MeetingDashboard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.ListView?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    \u003cListView fx:id\u003d\"meetingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c/VBox\u003e"}],"authorContributionMap":{"Maurice2n97":7}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                    \u003cminWidth\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    \u003c/minWidth\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003c/Label\u003e"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003c/HBox\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \u003c/GridPane\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e"}],"authorContributionMap":{"Maurice2n97":4,"-":31}},{"path":"src/test/data/JsonSerializableAddressBookTest/duplicatePersonAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"persons\": [ {"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"email\": \"alice@example.com\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"address\": \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"friends\" ]"},{"lineNumber":8,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    \"name\": \"Alice Pauline\","},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"phone\": \"94351253\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"email\": \"pauline@example.com\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\""},{"lineNumber":13,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":1,"-":13}},{"path":"src/test/data/JsonSerializableAddressBookTest/typicalPersonsAddressBook.json","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"{"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  \"_comment\": \"AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook()\","},{"lineNumber":3,"author":{"gitId":"-"},"content":"  \"persons\" : [ {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    \"name\" : \"Alice Pauline\","},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \"phone\" : \"94351253\","},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \"email\" : \"alice@example.com\","},{"lineNumber":7,"author":{"gitId":"-"},"content":"    \"address\" : \"123, Jurong West Ave 6, #08-111\","},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"friends\" ]"},{"lineNumber":9,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    \"name\" : \"Benson Meier\","},{"lineNumber":11,"author":{"gitId":"-"},"content":"    \"phone\" : \"98765432\","},{"lineNumber":12,"author":{"gitId":"-"},"content":"    \"email\" : \"johnd@example.com\","},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \"address\" : \"311, Clementi Ave 2, #02-25\","},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"owesMoney\", \"friends\" ]"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \"name\" : \"Carl Kurz\","},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \"phone\" : \"95352563\","},{"lineNumber":18,"author":{"gitId":"-"},"content":"    \"email\" : \"heinz@example.com\","},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \"address\" : \"wall street\","},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    \"name\" : \"Daniel Meier\","},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \"phone\" : \"87652533\","},{"lineNumber":24,"author":{"gitId":"-"},"content":"    \"email\" : \"cornelia@example.com\","},{"lineNumber":25,"author":{"gitId":"-"},"content":"    \"address\" : \"10th street\","},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ \"friends\" ]"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \"name\" : \"Elle Meyer\","},{"lineNumber":29,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482224\","},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \"email\" : \"werner@example.com\","},{"lineNumber":31,"author":{"gitId":"-"},"content":"    \"address\" : \"michegan ave\","},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    \"name\" : \"Fiona Kunz\","},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482427\","},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \"email\" : \"lydia@example.com\","},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \"address\" : \"little tokyo\","},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  }, {"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    \"name\" : \"George Best\","},{"lineNumber":41,"author":{"gitId":"-"},"content":"    \"phone\" : \"9482442\","},{"lineNumber":42,"author":{"gitId":"-"},"content":"    \"email\" : \"anna@example.com\","},{"lineNumber":43,"author":{"gitId":"-"},"content":"    \"address\" : \"4th street\","},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"    \"group\": [ ]"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  } ]"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":7,"-":39}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.ListPersonCommand;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private Logic logic;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        String listCommand \u003d ListPersonCommand.COMMAND_WORD;"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(listCommand, ListPersonCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Execute add command"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        String addCommand \u003d AddPersonCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;"},{"lineNumber":84,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withGroups().build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            String expectedMessage) {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called."},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            super(filePath);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":5,"hengyiqun":1,"-":156}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPersonCommand}."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandIntegrationTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new AddPersonCommand(validPerson), model,"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"                String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(new AddPersonCommand(personInList), model, AddPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":6,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/AddPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPersonCommand(null));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        CommandResult commandResult \u003d new AddPersonCommand(validPerson).execute(modelStub);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(String.format(AddPersonCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addPersonCommand \u003d new AddPersonCommand(validPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(CommandException.class, AddPersonCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addPersonCommand.execute(modelStub));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addAliceCommand \u003d new AddPersonCommand(alice);"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addBobCommand \u003d new AddPersonCommand(bob);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand addAliceCommandCopy \u003d new AddPersonCommand(alice);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"-"},"content":""},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person."},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private final Person person;"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"            this.person \u003d person;"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added."},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            requireNonNull(person);"},{"lineNumber":186,"author":{"gitId":"-"},"content":"            personsAdded.add(person);"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {"},{"lineNumber":191,"author":{"gitId":"-"},"content":"            return new AddressBook();"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10,"-":185}},{"path":"src/test/java/seedu/address/logic/commands/ClearPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.ClearPersonCommand;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class ClearPersonCommandTest {"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ClearPersonCommand(), model, ClearPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":4,"-":29}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":27,"author":{"gitId":"-"},"content":" */"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_HUSBAND \u003d \"husband\";"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"    public static final String VALID_GROUP_FRIEND \u003d \"friend\";"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    public static final String GROUP_DESC_FRIEND \u003d \" \" + PREFIX_GROUP + VALID_GROUP_FRIEND;"},{"lineNumber":50,"author":{"gitId":"hengyiqun"},"content":"    public static final String GROUP_DESC_HUSBAND \u003d \" \" + PREFIX_GROUP + VALID_GROUP_HUSBAND;"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":56,"author":{"gitId":"hengyiqun"},"content":"    public static final String INVALID_GROUP_DESC \u003d \" \" + PREFIX_GROUP + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    static {"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":67,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":70,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND).build();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}."},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            Model expectedModel) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // only do so by copying its components."},{"lineNumber":108,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":3,"hengyiqun":8,"-":118}},{"path":"src/test/java/seedu/address/logic/commands/DeletePersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" * {@code DeletePersonCommand}."},{"lineNumber":25,"author":{"gitId":"-"},"content":" */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandTest {"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(DeletePersonCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(deletePersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deletePersonCommand \u003d new DeletePersonCommand(outOfBoundIndex);"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(deletePersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deleteFirstCommand \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deleteSecondCommand \u003d new DeletePersonCommand(INDEX_SECOND_PERSON);"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand deleteFirstCommandCopy \u003d new DeletePersonCommand(INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one."},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":16,"-":94}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.ClearPersonCommand;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditPersonCommand."},{"lineNumber":34,"author":{"gitId":"-"},"content":" */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandTest {"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, descriptor);"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":60,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND).build();"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"                .withPhone(VALID_PHONE_BOB).withGroups(VALID_GROUP_HUSBAND).build();"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(indexLastPerson, descriptor);"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"},{"lineNumber":94,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(EditPersonCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(editPersonCommand, model, expectedMessage, expectedModel);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_SECOND_PERSON, descriptor);"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON,"},{"lineNumber":120,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, EditPersonCommand.MESSAGE_DUPLICATE_PERSON);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex, descriptor);"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * but smaller than size of address book"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand editPersonCommand \u003d new EditPersonCommand(outOfBoundIndex,"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandFailure(editPersonCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        final EditPersonCommand standardCommand \u003d new EditPersonCommand(INDEX_FIRST_PERSON, DESC_AMY);"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand commandWithSameValues \u003d new EditPersonCommand(INDEX_FIRST_PERSON, copyDescriptor);"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));"},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(standardCommand.equals(new ClearPersonCommand()));"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":170,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_SECOND_PERSON, DESC_AMY)));"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false"},{"lineNumber":173,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(standardCommand.equals(new EditPersonCommand(INDEX_FIRST_PERSON, DESC_BOB)));"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":30,"hengyiqun":4,"-":141}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"hengyiqun"},"content":"        // different groups -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGroups(VALID_GROUP_HUSBAND).build();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":1,"hengyiqun":3,"-":54}},{"path":"src/test/java/seedu/address/logic/commands/FindPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.CARL;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ELLE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.FIONA;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) for {@code FindPersonCommand}."},{"lineNumber":26,"author":{"gitId":"-"},"content":" */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandTest {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":34,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findFirstCommand \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findSecondCommand \u003d new FindPersonCommand(secondPredicate);"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand findFirstCommandCopy \u003d new FindPersonCommand(firstPredicate);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d new FindPersonCommand(predicate);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":8,"-":76}},{"path":"src/test/java/seedu/address/logic/commands/ListPersonCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.ListPersonCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListPersonCommand."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"public class ListPersonCommandTest {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model expectedModel;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setUp() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertCommandSuccess(new ListPersonCommand(), model, ListPersonCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":5,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/MeetingCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"//import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"//import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"//import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"//import java.util.List;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingCommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_NAME_MEETING1 \u003d \"CS2103 Conference\";"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_NAME_MEETING2 \u003d \"NUS Seminar\";"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING1 \u003d \"2021-01-01 19:00\";"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING2 \u003d \"2021-03-15 17:00\";"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING1 \u003d \"2021-01-01 20:00\";"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING2 \u003d \"2021-03-15 18:00\";"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING1 \u003d \"2\";"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING2 \u003d \"5\";"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_DESCRIPTION_MEETING1 \u003d \"CS2103 Conference Test\";"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_DESCRIPTION_MEETING2 \u003d \"NUS Seminar Test\";"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TAG_MEETING1 \u003d \"SoC\";"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TAG_MEETING2 \u003d \"University\";"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"//    public static final EditPersonCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"//    public static final EditPersonCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"//    static {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"//        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"//                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"//                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"//        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"//     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"//     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"//     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"//                                            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"//        try {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"//            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"//            assertEquals(expectedCommandResult, result);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"//            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"//        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"//            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"//     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"//     * that takes a string {@code expectedMessage}."},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"//                                            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"//        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"//        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"//     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"//     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"//     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"//     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"//        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"//        // only do so by copying its components."},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"//        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"//        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"//        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"//     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"//     * {@code model}\u0027s address book."},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"//    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"//        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"//        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"//        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"//        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":130}},{"path":"src/test/java/seedu/address/logic/parser/AddPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_HUSBAND;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.AddPersonCommandParser;"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":38,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":41,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"public class AddPersonCommandParserTest {"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    private AddPersonCommandParser parser \u003d new AddPersonCommandParser();"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(BOB).withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // whitespace only preamble"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"},{"lineNumber":65,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"},{"lineNumber":69,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPerson));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"hengyiqun"},"content":"        // multiple groups - all accepted"},{"lineNumber":72,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPersonMultipleGroups \u003d new PersonBuilder(BOB).withGroups(VALID_GROUP_FRIEND, VALID_GROUP_HUSBAND)"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, new AddPersonCommand(expectedPersonMultipleGroups));"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {"},{"lineNumber":81,"author":{"gitId":"hengyiqun"},"content":"        // zero group"},{"lineNumber":82,"author":{"gitId":"hengyiqun"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withGroups().build();"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                new AddPersonCommand(expectedPerson));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE);"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // missing name prefix"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // missing phone prefix"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // missing email prefix"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // missing address prefix"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // all prefixes missing"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                expectedMessage);"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // invalid name"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":116,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // invalid phone"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":120,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // invalid email"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // invalid address"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"},{"lineNumber":128,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"        // invalid group"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"                + INVALID_GROUP_DESC + VALID_GROUP_FRIEND, Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // non-empty preamble"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"},{"lineNumber":140,"author":{"gitId":"hengyiqun"},"content":"                + ADDRESS_DESC_BOB + GROUP_DESC_HUSBAND + GROUP_DESC_FRIEND,"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPersonCommand.MESSAGE_USAGE));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":7,"hengyiqun":25,"-":111}},{"path":"src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {"},{"lineNumber":58,"author":{"gitId":"hengyiqun"},"content":"        String argsString \u003d \"  some random string /g group with leading and trailing spaces \";"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":1,"-":149}},{"path":"src/test/java/seedu/address/logic/parser/DeletePersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.DeletePersonCommandParser;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * outside of the DeletePersonCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * same path through the DeletePersonCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitId":"-"},"content":" */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"public class DeletePersonCommandParserTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private DeletePersonCommandParser parser \u003d new DeletePersonCommandParser();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, \"1\", new DeletePersonCommand(INDEX_FIRST_PERSON));"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeletePersonCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":8,"-":25}},{"path":"src/test/java/seedu/address/logic/parser/EditPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_GROUP_DESC;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_FRIEND;"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.GROUP_DESC_HUSBAND;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":27,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand;"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.EditPersonCommandParser;"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":44,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"public class EditPersonCommandParserTest {"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"    private static final String GROUP_EMPTY \u003d \" \" + PREFIX_GROUP;"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPersonCommand.MESSAGE_USAGE);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    private EditPersonCommandParser parser \u003d new EditPersonCommandParser();"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // no index specified"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // no field specified"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"1\", EditPersonCommand.MESSAGE_NOT_EDITED);"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // no index and no field specified"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // negative index"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // zero index"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"},{"lineNumber":89,"author":{"gitId":"hengyiqun"},"content":"        assertParseFailure(parser, \"1\" + INVALID_GROUP_DESC, Group.MESSAGE_CONSTRAINTS); // invalid tag"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"hengyiqun"},"content":"        // while parsing {@code PREFIX_GROUP} alone will reset the groups of the {@code Person} being edited,"},{"lineNumber":99,"author":{"gitId":"hengyiqun"},"content":"        // parsing it together with a valid group results in error"},{"lineNumber":100,"author":{"gitId":"hengyiqun"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND + GROUP_DESC_HUSBAND + GROUP_EMPTY, Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        assertParseFailure(parser, \"1\" + GROUP_DESC_FRIEND + GROUP_EMPTY + GROUP_DESC_HUSBAND, Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":102,"author":{"gitId":"hengyiqun"},"content":"        assertParseFailure(parser, \"1\" + GROUP_EMPTY + GROUP_DESC_FRIEND + GROUP_DESC_HUSBAND, Group.MESSAGE_CONSTRAINTS);"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;"},{"lineNumber":112,"author":{"gitId":"hengyiqun"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + GROUP_DESC_HUSBAND"},{"lineNumber":113,"author":{"gitId":"hengyiqun"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + GROUP_DESC_FRIEND;"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":117,"author":{"gitId":"hengyiqun"},"content":"                .withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND).build();"},{"lineNumber":118,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // name"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"        // phone"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // email"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // address"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":162,"author":{"gitId":"-"},"content":""},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // tags"},{"lineNumber":164,"author":{"gitId":"hengyiqun"},"content":"        userInput \u003d targetIndex.getOneBased() + GROUP_DESC_FRIEND;"},{"lineNumber":165,"author":{"gitId":"hengyiqun"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"},{"lineNumber":174,"author":{"gitId":"hengyiqun"},"content":"                + GROUP_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + GROUP_DESC_FRIEND"},{"lineNumber":175,"author":{"gitId":"hengyiqun"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + GROUP_DESC_HUSBAND;"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"},{"lineNumber":178,"author":{"gitId":"hengyiqun"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_FRIEND, VALID_GROUP_HUSBAND)"},{"lineNumber":179,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":180,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // no other valid values specified"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":191,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // other valid values specified"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"},{"lineNumber":196,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":198,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":199,"author":{"gitId":"skinnychenpi"},"content":"        expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;"},{"lineNumber":206,"author":{"gitId":"hengyiqun"},"content":"        String userInput \u003d targetIndex.getOneBased() + GROUP_EMPTY;"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"hengyiqun"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGroups().build();"},{"lineNumber":209,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand expectedCommand \u003d new EditPersonCommand(targetIndex, descriptor);"},{"lineNumber":210,"author":{"gitId":"-"},"content":""},{"lineNumber":211,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":18,"hengyiqun":25,"-":170}},{"path":"src/test/java/seedu/address/logic/parser/FindPersonCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.FindPersonCommand;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.parser.persons.FindPersonCommandParser;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"public class FindPersonCommandParserTest {"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private FindPersonCommandParser parser \u003d new FindPersonCommandParser();"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindPersonCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand expectedFindPersonCommand \u003d"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"                new FindPersonCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindPersonCommand);"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindPersonCommand);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":9,"-":26}},{"path":"src/test/java/seedu/address/logic/parser/MeetBuddyParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.*;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.DeletePersonCommand;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"public class MeetBuddyParserTest {"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    private final MeetBuddyParser parser \u003d new MeetBuddyParser();"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        AddPersonCommand command \u003d (AddPersonCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new AddPersonCommand(person), command);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD) instanceof ClearPersonCommand);"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ClearPersonCommand.COMMAND_WORD + \" 3\") instanceof ClearPersonCommand);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        DeletePersonCommand command \u003d (DeletePersonCommand) parser.parseCommand("},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"                DeletePersonCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new DeletePersonCommand(INDEX_FIRST_PERSON), command);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        EditPersonCommand command \u003d (EditPersonCommand) parser.parseCommand(EditPersonCommand.COMMAND_WORD + \" \""},{"lineNumber":57,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new EditPersonCommand(INDEX_FIRST_PERSON, descriptor), command);"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"        FindPersonCommand command \u003d (FindPersonCommand) parser.parseCommand("},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"                FindPersonCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(new FindPersonCommand(new NameContainsKeywordsPredicate(keywords)), command);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD) instanceof ListPersonCommand);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(parser.parseCommand(ListPersonCommand.COMMAND_WORD + \" 3\") instanceof ListPersonCommand);"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":19,"-":78}},{"path":"src/test/java/seedu/address/logic/parser/ParseDateUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.time.Month;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class ParseDateUtilTest {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INCORRECT_DATE_STRING \u003d \"22-09-04 7890\";"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private static final String CORRECT_DATE_STRING \u003d \"2020-01-12 23:59\";"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    private static final LocalDateTime CORRECT_LOCAL_DATETIME \u003d"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            LocalDateTime.of(2020, Month.JANUARY, 12,23,59,0);"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public void formatDateTime_validValue_returnsFormattedString() {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        String formattedDateTime  \u003d ParseDateUtil.formatDateTime(CORRECT_LOCAL_DATETIME);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(formattedDateTime, CORRECT_DATE_STRING);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public void parseDateTime_validValue_returnsLocalDateTime() throws ParseException {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        LocalDateTime localDateTime \u003d ParseDateUtil.parseDateTime(CORRECT_DATE_STRING);"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(localDateTime, CORRECT_LOCAL_DATETIME);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public void parseDateTime_invalidValue_throwsParseException() {"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(ParseException.class,()-\u003e {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            ParseDateUtil.parseDateTime(INCORRECT_DATE_STRING);"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        });"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":37}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    private static final String INVALID_GROUP \u003d \"#friend\";"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"    private static final String VALID_GROUP_1 \u003d \"friend\";"},{"lineNumber":35,"author":{"gitId":"hengyiqun"},"content":"    private static final String VALID_GROUP_2 \u003d \"neighbour\";"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":152,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_null_throwsNullPointerException() {"},{"lineNumber":153,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroup(null));"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_invalidValue_throwsParseException() {"},{"lineNumber":158,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroup(INVALID_GROUP));"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"-"},"content":""},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":162,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_validValueWithoutWhitespace_returnsGroup() throws Exception {"},{"lineNumber":163,"author":{"gitId":"hengyiqun"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);"},{"lineNumber":164,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(VALID_GROUP_1));"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"-"},"content":""},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroup_validValueWithWhitespace_returnsTrimmedGroup() throws Exception {"},{"lineNumber":169,"author":{"gitId":"hengyiqun"},"content":"        String groupWithWhitespace \u003d WHITESPACE + VALID_GROUP_1 + WHITESPACE;"},{"lineNumber":170,"author":{"gitId":"hengyiqun"},"content":"        Group expectedGroup \u003d new Group(VALID_GROUP_1);"},{"lineNumber":171,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroup, ParserUtil.parseGroup(groupWithWhitespace));"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_null_throwsNullPointerException() {"},{"lineNumber":176,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseGroups(null));"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_collectionWithInvalidGroups_throwsParseException() {"},{"lineNumber":181,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, INVALID_GROUP)));"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":185,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":186,"author":{"gitId":"hengyiqun"},"content":"        assertTrue(ParserUtil.parseGroups(Collections.emptyList()).isEmpty());"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitId":"hengyiqun"},"content":"    public void parseGroups_collectionWithValidGroups_returnsGroupSet() throws Exception {"},{"lineNumber":191,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e actualGroupSet \u003d ParserUtil.parseGroups(Arrays.asList(VALID_GROUP_1, VALID_GROUP_2));"},{"lineNumber":192,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e expectedGroupSet \u003d new HashSet\u003cGroup\u003e(Arrays.asList(new Group(VALID_GROUP_1), new Group(VALID_GROUP_2)));"},{"lineNumber":193,"author":{"gitId":"-"},"content":""},{"lineNumber":194,"author":{"gitId":"hengyiqun"},"content":"        assertEquals(expectedGroupSet, actualGroupSet);"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":25,"-":171}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);"},{"lineNumber":76,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return persons;"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":3,"-":99}},{"path":"src/test/java/seedu/address/model/group/GroupTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"hengyiqun"},"content":"package seedu.address.model.group;"},{"lineNumber":2,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":4,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":5,"author":{"gitId":"hengyiqun"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"public class GroupTest {"},{"lineNumber":8,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"hengyiqun"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Group(null));"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"    public void constructor_invalidGroupName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"        String invalidGroupName \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Group(invalidGroupName));"},{"lineNumber":18,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"hengyiqun"},"content":"    public void isValidGroupName() {"},{"lineNumber":22,"author":{"gitId":"hengyiqun"},"content":"        // null tag name"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(NullPointerException.class, () -\u003e Group.isValidGroupName(null));"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":""},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"}"}],"authorContributionMap":{"hengyiqun":26}},{"path":"src/test/java/seedu/address/model/meeting/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"class DateTimeTest {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateTime((String) null));"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"        String invalidDateTime \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidDateTime() {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        // null address"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        // invalid DateTime"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2020/01/02 19:00\"));"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-13-02 18:00\"));"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-11-02 25:00\"));"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        // valid DateTime"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(DateTime.isValidDateTime(\"2021-11-02 23:00\"));"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":34}},{"path":"src/test/java/seedu/address/model/meeting/MeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"class MeetingTest {"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    private static final Name NAME \u003d new Name(\"CS2103 seminar\");"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime START \u003d new DateTime(\"2021-03-11 15:04\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime TERMINATE \u003d new DateTime(\"2021-03-11 16:04\");"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private static final Priority PRIORITY \u003d new Priority(\"4\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private static final Description DESCRIPTION \u003d new Description(\"This is the time skinnychenpi write this test.\");"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"    private static final Group GROUP \u003d new Group(\"MeetingTest\");"},{"lineNumber":20,"author":{"gitId":"hengyiqun"},"content":"    private Set\u003cGroup\u003e GROUPS \u003d new HashSet\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public void isSameMeeting() {"},{"lineNumber":24,"author":{"gitId":"hengyiqun"},"content":"        Meeting meeting \u003d new Meeting(NAME, START, TERMINATE, PRIORITY, DESCRIPTION, GROUPS);"},{"lineNumber":25,"author":{"gitId":"hengyiqun"},"content":"        Meeting meeting2 \u003d new Meeting(NAME, START, TERMINATE, new Priority(\"1\"), new Description(\"Test\"), GROUPS);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(meeting.isSameMeeting(meeting2));"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"        Meeting meeting3 \u003d new Meeting(NAME, new DateTime(\"2020-03-10 15:04\"), TERMINATE, PRIORITY, DESCRIPTION, GROUPS);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(meeting.isSameMeeting(meeting3));"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidMeeting() {"},{"lineNumber":34,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(NAME, TERMINATE, TERMINATE, PRIORITY, DESCRIPTION, GROUPS));"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        // Check if start time later than terminate time will throw an error."},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(NAME, TERMINATE, START, PRIORITY, DESCRIPTION, GROUPS));"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"//    @Test"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"//        Person person \u003d new PersonBuilder().build();"},{"lineNumber":43,"author":{"gitId":"hengyiqun"},"content":"//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getGroups().remove(0));"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":36,"hengyiqun":9}},{"path":"src/test/java/seedu/address/model/meeting/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class PriorityTest {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_outOfRangePriority_throwsIllegalArgumentException() {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"6\";"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidPriority() {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        // null priority"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // invalid priority"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"0\"));"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"9\"));"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"2.2\"));"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        // valid priority"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"1\"));"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"3\")); // one character"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":44}},{"path":"src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.MeetingBuilder;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING2;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"class UniqueMeetingListTest {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(uniqueMeetingList.contains(MEETING1));"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(MEETING1));"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":40,"author":{"gitId":"hengyiqun"},"content":"        Meeting editedMeeting1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withGroups(\"RandomTag\")"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"                .build();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(editedMeeting1));"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(MEETING1));"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, MEETING1));"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, null));"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING1));"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonIsSamePerson_success() {"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING1);"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING1);"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasSameIdentity_success() {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":83,"author":{"gitId":"hengyiqun"},"content":"        Meeting editedMEETING1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withGroups(\"randomTag\")"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                .build();"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, editedMEETING1);"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(editedMEETING1);"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING2);"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING2);"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING2));"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(MEETING1));"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.remove(MEETING1);"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nulluniqueMeetingList_throwsNullPointerException() {"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvideduniqueMeetingList() {"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(expecteduniqueMeetingList);"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nullList_throwsNullPointerException() {"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_list_replacesOwnListWithProvidedList() {"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e personList \u003d Collections.singletonList(MEETING2);"},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(personList);"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e listWithDuplicatePersons \u003d Arrays.asList(MEETING1, MEETING1);"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicatePersons));"},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":"                -\u003e uniqueMeetingList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":163,"hengyiqun":2}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();"},{"lineNumber":23,"author":{"gitId":"hengyiqun"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getGroups().remove(0));"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"                .withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND).build();"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"hengyiqun"},"content":"        // different groups -\u003e returns false"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withGroups(VALID_GROUP_HUSBAND).build();"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":5,"-":86}},{"path":"src/test/java/seedu/address/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":45,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":88,"author":{"gitId":"hengyiqun"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND)"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                .build();"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"-"},"content":""},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":3,"-":167}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedMeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.DateTime;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Description;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.meeting.Priority;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"public class JsonAdaptedMeetingTest {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_NAME \u003d \"NANI%\";"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_PRIORITY \u003d \"7\";"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_START \u003d \"2020:5:6 42:25\";"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_END \u003d \"2020-4-0 99:99\";"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_TAG \u003d \"@What\";"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_NAME \u003d MEETING1.getName().fullName;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_DESCRIPTION \u003d MEETING1.getDescription().fullDescription;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_START \u003d MEETING1.getStart().toIsoFormatString();"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_END \u003d MEETING1.getTerminate().toIsoFormatString();"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private static final String VALID_PRIORITY \u003d MEETING1.getPriority().toString();"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":36,"author":{"gitId":"hengyiqun"},"content":"    private static final List\u003cJsonAdaptedGroup\u003e VALID_TAGS \u003d MEETING1.getGroups().stream()"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            .map(JsonAdaptedGroup::new)"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"            .collect(Collectors.toList());"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_validMeetingDetails_success() throws Exception {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d new JsonAdaptedMeeting(MEETING1);"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(jsonMeeting.toModelType(), MEETING1);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(INVALID_NAME, VALID_START, VALID_END,"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(null, VALID_START, VALID_END,"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidStartTime_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, INVALID_START, VALID_END,"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullStartTime_throwsIllegalValueException() {"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , null, VALID_END,"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidEndTime_throwsIllegalValueException() {"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, INVALID_END,"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullEndTime_throwsIllegalValueException() {"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, null,"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullDescription_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, VALID_END,"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"                        null, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidPriority_throwsIllegalValueException() {"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, VALID_END,"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, INVALID_PRIORITY, VALID_TAGS);"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_nullPriority_throwsIllegalValueException() {"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_START, VALID_END,"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, null, VALID_TAGS);"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d String.format("},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"                JsonAdaptedMeeting.MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"        List\u003cJsonAdaptedGroup\u003e invalidJsonGroups \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":133,"author":{"gitId":"hengyiqun"},"content":"        invalidJsonGroups.add(new JsonAdaptedGroup(INVALID_TAG));"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME, VALID_START, VALID_END,"},{"lineNumber":136,"author":{"gitId":"hengyiqun"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, invalidJsonGroups);"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, jsonMeeting::toModelType);"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"    public void toModelType_swappedStartEndTimes_throwsIllegalValueException() {"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        assertTrue(VALID_END.compareTo(VALID_START) \u003d\u003d 1);"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"        JsonAdaptedMeeting jsonMeeting \u003d"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"                new JsonAdaptedMeeting(VALID_NAME , VALID_END, VALID_START,"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"                        VALID_DESCRIPTION, VALID_PRIORITY, VALID_TAGS);"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"        String expectedMessage \u003d Meeting.MESSAGE_CONSTRAINTS;"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, jsonMeeting::toModelType);"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":148,"hengyiqun":5}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"},{"lineNumber":31,"author":{"gitId":"hengyiqun"},"content":"    private static final List\u003cJsonAdaptedGroup\u003e VALID_TAGS \u003d BENSON.getGroups().stream()"},{"lineNumber":32,"author":{"gitId":"hengyiqun"},"content":"            .map(JsonAdaptedGroup::new)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":89,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":103,"author":{"gitId":"hengyiqun"},"content":"        List\u003cJsonAdaptedGroup\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":104,"author":{"gitId":"hengyiqun"},"content":"        invalidTags.add(new JsonAdaptedGroup(INVALID_TAG));"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":4,"-":106}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects."},{"lineNumber":17,"author":{"gitId":"-"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());"},{"lineNumber":39,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(person.getGroups());"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"hengyiqun"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code EditPersonDescriptor}"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building."},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"hengyiqun"},"content":"    public EditPersonDescriptorBuilder withGroups(String... groups) {"},{"lineNumber":79,"author":{"gitId":"hengyiqun"},"content":"        Set\u003cGroup\u003e groupSet \u003d Stream.of(groups).map(Group::new).collect(Collectors.toSet());"},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"        descriptor.setGroups(groupSet);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":1,"hengyiqun":6,"-":80}},{"path":"src/test/java/seedu/address/testutil/MeetingBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * A utility class to help with building Meeting objects."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingBuilder {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_NAME \u003d \"CS2103 Lectures\";"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_START \u003d \"2021-03-12 14:00\";"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_TERMINATE \u003d \"2021-03-12 16:00\";"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"5\";"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Taught by Mr.Damith.\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private Name name;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime start;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime terminate;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private Priority priority;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private Description description;"},{"lineNumber":26,"author":{"gitId":"hengyiqun"},"content":"    private Set\u003cGroup\u003e groups;"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Creates a {@code MeetingBuilder} with the default details."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d new DateTime(DEFAULT_START);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d new DateTime(DEFAULT_TERMINATE);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * Initializes the MeetingBuilder with the data of {@code MeetingToCopy}."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder(Meeting meetingToCopy) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        name \u003d meetingToCopy.getName();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d meetingToCopy.getStart();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d meetingToCopy.getTerminate();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d meetingToCopy.getPriority();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d meetingToCopy.getDescription();"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e(meetingToCopy.getGroups());"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Name} of the {@code Meeting} that we are building."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"hengyiqun"},"content":"     * Parses the {@code groups} into a {@code Set\u003cGroup\u003e} and set it to the {@code Meeting} that we are building."},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    public MeetingBuilder withGroups(String ... groups) {"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        this.groups \u003d SampleDataUtil.getGroupSet(groups);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the start date time of the {@code Meeting} that we are building."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withStart(String start) {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d new DateTime(start);"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the terminate date time of the {@code Meeting} that we are building."},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withTerminate(String terminate) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d new DateTime(terminate);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Priority} of the {@code Meeting} that we are building."},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withPriority(String priority) {"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Description} of the {@code Meeting} that we are building."},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withDescription(String description) {"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting build() {"},{"lineNumber":101,"author":{"gitId":"hengyiqun"},"content":"        return new Meeting(name, start, terminate, priority, description, groups);"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":96,"hengyiqun":8}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects."},{"lineNumber":16,"author":{"gitId":"-"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;"},{"lineNumber":28,"author":{"gitId":"hengyiqun"},"content":"    private Set\u003cGroup\u003e groups;"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details."},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}."},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();"},{"lineNumber":49,"author":{"gitId":"hengyiqun"},"content":"        groups \u003d new HashSet\u003c\u003e(personToCopy.getGroups());"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building."},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"hengyiqun"},"content":"    public PersonBuilder withGroups(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"hengyiqun"},"content":"        this.groups \u003d SampleDataUtil.getGroupSet(tags);"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building."},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building."},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building."},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"-"},"content":""},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {"},{"lineNumber":93,"author":{"gitId":"hengyiqun"},"content":"        return new Person(name, phone, email, address, groups);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":7,"-":89}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":7,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_GROUP;"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.AddPersonCommand;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.logic.commands.persons.EditPersonCommand.EditPersonDescriptor;"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":14,"author":{"gitId":"hengyiqun"},"content":"import seedu.address.model.group.Group;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person."},{"lineNumber":18,"author":{"gitId":"-"},"content":" */"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonUtil {"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns an add command string for adding the {@code person}."},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static String getAddCommand(Person person) {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        return AddPersonCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details."},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"        person.getGroups().stream().forEach("},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            s -\u003e sb.append(PREFIX_GROUP + s.groupName + \" \")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"},{"lineNumber":52,"author":{"gitId":"hengyiqun"},"content":"        if (descriptor.getGroups().isPresent()) {"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"            Set\u003cGroup\u003e tags \u003d descriptor.getGroups().get();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"                sb.append(PREFIX_GROUP);"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"hengyiqun"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_GROUP).append(s.groupName).append(\" \"));"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"skinnychenpi":3,"hengyiqun":8,"-":51}},{"path":"src/test/java/seedu/address/testutil/TypicalMeetings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_NAME_MEETING1;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_NAME_MEETING2;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_START_MEETING1;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_START_MEETING2;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TERMINATE_MEETING1;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TERMINATE_MEETING2;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_PRIORITY_MEETING1;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_PRIORITY_MEETING2;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING1;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING2;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TAG_MEETING1;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TAG_MEETING2;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"public class TypicalMeetings {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    // Manually added - Meeting\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING1 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING1).withStart(VALID_START_MEETING1)"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            .withTerminate(VALID_TERMINATE_MEETING1).withPriority(VALID_PRIORITY_MEETING1).withDescription(VALID_DESCRIPTION_MEETING1)"},{"lineNumber":30,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(VALID_TAG_MEETING1).build();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING2 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING2).withStart(VALID_START_MEETING2)"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            .withTerminate(VALID_TERMINATE_MEETING2).withPriority(VALID_PRIORITY_MEETING2).withDescription(VALID_DESCRIPTION_MEETING2)"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(VALID_TAG_MEETING2).build();"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING3 \u003d new MeetingBuilder().withName(\"CS2103 ONLINE Lecture\")"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-11 14:00\").withTerminate(\"2020-03-11 16:00\")"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Damith\")"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Lectures\").build();"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING4 \u003d new MeetingBuilder().withName(\"CS2106 ONLINE Lecture\")"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-10 10:00\").withTerminate(\"2020-03-10 12:00\")"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Djordje\")"},{"lineNumber":42,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Lectures\").build();"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING5 \u003d new MeetingBuilder().withName(\"Chess Club Meetings\")"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-17 10:00\").withTerminate(\"2020-03-17 12:00\")"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"3\").withDescription(\"Bring your chess board\")"},{"lineNumber":46,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"Extracurricular\").build();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    // Still don\u0027t know what this part is doing, will check later."},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"//    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"//     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"//    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"//        AddressBook ab \u003d new AddressBook();"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"//        for (Person person : getTypicalPersons()) {"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"//            ab.addPerson(person);"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"//        return ab;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    public static List\u003cMeeting\u003e getTypicalMeetings() {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING1, MEETING2, MEETING3, MEETING4, MEETING5));"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"Maurice2n97":1,"skinnychenpi":63,"hengyiqun":5}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_FRIEND;"},{"lineNumber":12,"author":{"gitId":"hengyiqun"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_GROUP_HUSBAND;"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":23,"author":{"gitId":"-"},"content":" */"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class TypicalPersons {"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")"},{"lineNumber":29,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"friends\").build();"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"},{"lineNumber":33,"author":{"gitId":"hengyiqun"},"content":"            .withGroups(\"owesMoney\", \"friends\").build();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"},{"lineNumber":37,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withGroups(\"friends\").build();"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    // Manually added"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"},{"lineNumber":53,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGroups(VALID_GROUP_FRIEND).build();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"},{"lineNumber":55,"author":{"gitId":"hengyiqun"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGroups(VALID_GROUP_HUSBAND, VALID_GROUP_FRIEND)"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            .build();"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            ab.addPerson(person);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return ab;"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"hengyiqun":7,"-":69}}]
