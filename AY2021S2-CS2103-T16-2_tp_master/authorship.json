[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"[![Java CI](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2021S2-CS2103-T16-2/tp/actions/workflows/gradle.yml)"},{"lineNumber":2,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"# MeetBuddy"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"MeetBuddy is a desktop application to help manage your social life."},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"****"}],"authorContributionMap":{"totoyoyo":6,"-":2}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"hengyiqun"},"content":"### Heng Yi Qun"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"hengyiqun"},"content":"\u003cimg src\u003d\"images/hengyiqun.png\" width\u003d\"200px\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"hengyiqun"},"content":"[[github](http://github.com/hengyiqun)]"},{"lineNumber":16,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/hengyiqun.md)]"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":19,"author":{"gitId":"hengyiqun"},"content":"* Responsibilities: Features"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"### ToTo Tokaeo"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":"\u003cimg src\u003d\"images/totoyoyo.png\" width\u003d\"200px\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"[[github](http://github.com/totoyoyo)]"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"[[portfolio](team/totoyoyo.md)]"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"* Responsibilities: Dates and Time Management"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"### Maurice Mok"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"\u003cimg src\u003d\"images/maurice2n97.png\" width\u003d\"200px\"\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"[[homepage](https://github.com/Maurice2n97)]"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"[[github](https://github.com/Maurice2n97)]"},{"lineNumber":38,"author":{"gitId":"hengyiqun"},"content":"[[portfolio](team/maurice2n97.md)]"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"### Chen Yuheng"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"\u003cimg src\u003d\"images/skinnychenpi.png\" width\u003d\"200px\"\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"[[github](http://github.com/skinnychenpi)]"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"[[portfolio](team/skinnychenpi.md)]"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Role: Developer"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"* Responsibilities: Undecided"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"totoyoyo":5,"Maurice2n97":4,"skinnychenpi":6,"hengyiqun":6,"-":32}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Setting up, getting started**"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md)."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Design**"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"### Architecture"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"},{"lineNumber":31,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":32,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App."},{"lineNumber":39,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor."},{"lineNumber":40,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory."},{"lineNumber":41,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"Each of the four components,"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component."},{"lineNumber":46,"author":{"gitId":"-"},"content":"* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"The sections below give more details of each component."},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"### UI component"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":65,"author":{"gitId":"-"},"content":"[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"The `UI` component,"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Listens for changes to `Model` data so that the UI can be updated with the modified data."},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Logic component"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"![Structure of the Logic Component](images/LogicClassDiagram.png)"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"**API** :"},{"lineNumber":81,"author":{"gitId":"-"},"content":"[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"1. `Logic` uses the `AddressBookParser` class to parse the user command."},{"lineNumber":84,"author":{"gitId":"-"},"content":"1. This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":85,"author":{"gitId":"-"},"content":"1. The command execution can affect the `Model` (e.g. adding a person)."},{"lineNumber":86,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":87,"author":{"gitId":"-"},"content":"1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":94,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"-"},"content":"### Model component"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"-"},"content":"![Structure of the Model Component](images/ModelClassDiagram.png)"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"The `Model`,"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences."},{"lineNumber":105,"author":{"gitId":"-"},"content":"* stores the address book data."},{"lineNumber":106,"author":{"gitId":"-"},"content":"* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":107,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":""},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"},{"lineNumber":111,"author":{"gitId":"-"},"content":"![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"},{"lineNumber":112,"author":{"gitId":"-"},"content":""},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":114,"author":{"gitId":"-"},"content":""},{"lineNumber":115,"author":{"gitId":"-"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Storage component"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"![Structure of the Storage Component](images/StorageClassDiagram.png)"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Storage` component,"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":124,"author":{"gitId":"-"},"content":"* can save the address book data in json format and read it back."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"### Common classes"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package."},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"## **Implementation**"},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"#### Proposed Implementation"},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history."},{"lineNumber":143,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."},{"lineNumber":147,"author":{"gitId":"-"},"content":""},{"lineNumber":148,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."},{"lineNumber":151,"author":{"gitId":"-"},"content":""},{"lineNumber":152,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)"},{"lineNumber":153,"author":{"gitId":"-"},"content":""},{"lineNumber":154,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."},{"lineNumber":155,"author":{"gitId":"-"},"content":""},{"lineNumber":156,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."},{"lineNumber":159,"author":{"gitId":"-"},"content":""},{"lineNumber":160,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)"},{"lineNumber":161,"author":{"gitId":"-"},"content":""},{"lineNumber":162,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."},{"lineNumber":163,"author":{"gitId":"-"},"content":""},{"lineNumber":164,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"},{"lineNumber":171,"author":{"gitId":"-"},"content":"than attempting to perform the undo."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."},{"lineNumber":190,"author":{"gitId":"-"},"content":""},{"lineNumber":191,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"![CommitActivityDiagram](images/CommitActivityDiagram.png)"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"#### Design consideration:"},{"lineNumber":202,"author":{"gitId":"-"},"content":""},{"lineNumber":203,"author":{"gitId":"-"},"content":"##### Aspect: How undo \u0026 redo executes"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":206,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement."},{"lineNumber":207,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage."},{"lineNumber":208,"author":{"gitId":"-"},"content":""},{"lineNumber":209,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by"},{"lineNumber":210,"author":{"gitId":"-"},"content":"  itself."},{"lineNumber":211,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."},{"lineNumber":212,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":213,"author":{"gitId":"-"},"content":""},{"lineNumber":214,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_"},{"lineNumber":215,"author":{"gitId":"-"},"content":""},{"lineNumber":216,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving"},{"lineNumber":217,"author":{"gitId":"-"},"content":""},{"lineNumber":218,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":""},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":222,"author":{"gitId":"-"},"content":""},{"lineNumber":223,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)"},{"lineNumber":227,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)"},{"lineNumber":228,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)"},{"lineNumber":229,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**"},{"lineNumber":234,"author":{"gitId":"-"},"content":""},{"lineNumber":235,"author":{"gitId":"-"},"content":"### Product scope"},{"lineNumber":236,"author":{"gitId":"-"},"content":""},{"lineNumber":237,"author":{"gitId":"-"},"content":"**Target user profile**:"},{"lineNumber":238,"author":{"gitId":"-"},"content":""},{"lineNumber":239,"author":{"gitId":"skinnychenpi"},"content":"* Computing minor students in NUS who like typing, and is most of the week spent moving about meeting people for his internship, lectures, or social life, have busy workdays."},{"lineNumber":240,"author":{"gitId":"skinnychenpi"},"content":"* Wants to manage school life and social life together in one app, with meetups for projects, lectures, social activities, and family all organised."},{"lineNumber":241,"author":{"gitId":"skinnychenpi"},"content":"* Would like to keep track of contacts and organise them as well for easy searching and easy remembering."},{"lineNumber":242,"author":{"gitId":"skinnychenpi"},"content":"* Can type fast"},{"lineNumber":243,"author":{"gitId":"skinnychenpi"},"content":"* Prefers typing to mouse interactions"},{"lineNumber":244,"author":{"gitId":"skinnychenpi"},"content":"* Is reasonably comfortable using CLI apps"},{"lineNumber":245,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":246,"author":{"gitId":"skinnychenpi"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app."},{"lineNumber":247,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":248,"author":{"gitId":"skinnychenpi"},"content":"Can manage social life and academics by toggling between two modes \u003c-\u003e school activities and non-school activities. Better time management - Priorities of meetups can be ranked and less time to schedule meetings with friends, as well as keep track of existing meetings."},{"lineNumber":249,"author":{"gitId":"skinnychenpi"},"content":"Arrange activities with many people -\u003e events not only tie with single contacts but with a group of contacts that can be added inside. Stay connected -\u003e Keep in touch with old contacts or remove them by querying for old contacts . Keep a log and diary of past meetups, and small bios of people ,as well as images."},{"lineNumber":250,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":251,"author":{"gitId":"skinnychenpi"},"content":"Users would be better able to manage their social and academic commitments by toggling between both modes. With the option to rank/prioritise meetups, users can experience better time management, and can stay connected with many people easily. The app also maintains a diary of past meetups, with the inclusion of images and bios of the people."},{"lineNumber":252,"author":{"gitId":"-"},"content":""},{"lineNumber":253,"author":{"gitId":"-"},"content":""},{"lineNumber":254,"author":{"gitId":"-"},"content":""},{"lineNumber":255,"author":{"gitId":"-"},"content":"### User stories"},{"lineNumber":256,"author":{"gitId":"-"},"content":""},{"lineNumber":257,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"},{"lineNumber":258,"author":{"gitId":"-"},"content":""},{"lineNumber":259,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"},{"lineNumber":260,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"},{"lineNumber":261,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |"},{"lineNumber":262,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |"},{"lineNumber":263,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |"},{"lineNumber":264,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |"},{"lineNumber":265,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |"},{"lineNumber":266,"author":{"gitId":"skinnychenpi"},"content":"| `* *`    | user                                       | assign priorities for contacts | arrange my contacts and future tasks better                            |"},{"lineNumber":267,"author":{"gitId":"skinnychenpi"},"content":"| `*`      | user with many persons in the MeetBuddy address book | sort persons by name           | locate a person easily                                                 |"},{"lineNumber":268,"author":{"gitId":"-"},"content":""},{"lineNumber":269,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":270,"author":{"gitId":"-"},"content":""},{"lineNumber":271,"author":{"gitId":"-"},"content":"### Use cases"},{"lineNumber":272,"author":{"gitId":"-"},"content":""},{"lineNumber":273,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)"},{"lineNumber":274,"author":{"gitId":"-"},"content":""},{"lineNumber":275,"author":{"gitId":"-"},"content":"**Use case: Delete a person**"},{"lineNumber":276,"author":{"gitId":"-"},"content":""},{"lineNumber":277,"author":{"gitId":"-"},"content":"**MSS**"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"1.  User requests to list persons"},{"lineNumber":280,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows a list of persons"},{"lineNumber":281,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list"},{"lineNumber":282,"author":{"gitId":"skinnychenpi"},"content":"4.  MeetBuddy deletes the person"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    Use case ends."},{"lineNumber":286,"author":{"gitId":"-"},"content":""},{"lineNumber":287,"author":{"gitId":"-"},"content":"**Extensions**"},{"lineNumber":288,"author":{"gitId":"-"},"content":""},{"lineNumber":289,"author":{"gitId":"-"},"content":"* 2a. The list is empty."},{"lineNumber":290,"author":{"gitId":"-"},"content":""},{"lineNumber":291,"author":{"gitId":"-"},"content":"  Use case ends."},{"lineNumber":292,"author":{"gitId":"-"},"content":""},{"lineNumber":293,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":294,"author":{"gitId":"-"},"content":""},{"lineNumber":295,"author":{"gitId":"skinnychenpi"},"content":"    * 3a1. MeetBuddy shows an error message."},{"lineNumber":296,"author":{"gitId":"-"},"content":""},{"lineNumber":297,"author":{"gitId":"-"},"content":"      Use case resumes at step 2."},{"lineNumber":298,"author":{"gitId":"-"},"content":""},{"lineNumber":299,"author":{"gitId":"skinnychenpi"},"content":"**Use case: Assigning priorities to contacts**"},{"lineNumber":300,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":301,"author":{"gitId":"skinnychenpi"},"content":"**MSS**"},{"lineNumber":302,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":303,"author":{"gitId":"skinnychenpi"},"content":"1.  User requests to add a contact with priority"},{"lineNumber":304,"author":{"gitId":"skinnychenpi"},"content":"2.  MeetBuddy shows the list of persons after adding."},{"lineNumber":305,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":306,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":307,"author":{"gitId":"skinnychenpi"},"content":"    Use case ends."},{"lineNumber":308,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":309,"author":{"gitId":"skinnychenpi"},"content":"**Extensions**"},{"lineNumber":310,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":311,"author":{"gitId":"skinnychenpi"},"content":"* 1a. The priority is out of range."},{"lineNumber":312,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":313,"author":{"gitId":"skinnychenpi"},"content":"    * 1a1. AddressBook shows an error message."},{"lineNumber":314,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":315,"author":{"gitId":"skinnychenpi"},"content":"  Use case ends."},{"lineNumber":316,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":317,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":318,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":319,"author":{"gitId":"skinnychenpi"},"content":"New features on V1.2"},{"lineNumber":320,"author":{"gitId":"skinnychenpi"},"content":"5.  Assign priorities to contacts"},{"lineNumber":321,"author":{"gitId":"skinnychenpi"},"content":"6.  Notes about the contact."},{"lineNumber":322,"author":{"gitId":"skinnychenpi"},"content":"7.  Sort contacts by (priorities/name/groups)"},{"lineNumber":323,"author":{"gitId":"skinnychenpi"},"content":"8.  Last meetup date for each contact"},{"lineNumber":324,"author":{"gitId":"-"},"content":""},{"lineNumber":325,"author":{"gitId":"-"},"content":"### Non-Functional Requirements"},{"lineNumber":326,"author":{"gitId":"-"},"content":""},{"lineNumber":327,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed."},{"lineNumber":328,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."},{"lineNumber":329,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":330,"author":{"gitId":"skinnychenpi"},"content":"4.  The response to any use action should become visible within 2 seconds."},{"lineNumber":331,"author":{"gitId":"skinnychenpi"},"content":"5.  The source code should be open source."},{"lineNumber":332,"author":{"gitId":"-"},"content":"*{More to be added}*"},{"lineNumber":333,"author":{"gitId":"-"},"content":""},{"lineNumber":334,"author":{"gitId":"-"},"content":"### Glossary"},{"lineNumber":335,"author":{"gitId":"-"},"content":""},{"lineNumber":336,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X"},{"lineNumber":337,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others"},{"lineNumber":338,"author":{"gitId":"-"},"content":""},{"lineNumber":339,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":340,"author":{"gitId":"-"},"content":""},{"lineNumber":341,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**"},{"lineNumber":342,"author":{"gitId":"-"},"content":""},{"lineNumber":343,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":344,"author":{"gitId":"-"},"content":""},{"lineNumber":345,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"},{"lineNumber":346,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing."},{"lineNumber":347,"author":{"gitId":"-"},"content":""},{"lineNumber":348,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":349,"author":{"gitId":"-"},"content":""},{"lineNumber":350,"author":{"gitId":"-"},"content":"### Launch and shutdown"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"1. Initial launch"},{"lineNumber":353,"author":{"gitId":"-"},"content":""},{"lineNumber":354,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder"},{"lineNumber":355,"author":{"gitId":"-"},"content":""},{"lineNumber":356,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":357,"author":{"gitId":"-"},"content":""},{"lineNumber":358,"author":{"gitId":"-"},"content":"1. Saving window preferences"},{"lineNumber":359,"author":{"gitId":"-"},"content":""},{"lineNumber":360,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window."},{"lineNumber":361,"author":{"gitId":"-"},"content":""},{"lineNumber":362,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"},{"lineNumber":363,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained."},{"lineNumber":364,"author":{"gitId":"-"},"content":""},{"lineNumber":365,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":366,"author":{"gitId":"-"},"content":""},{"lineNumber":367,"author":{"gitId":"-"},"content":"### Deleting a person"},{"lineNumber":368,"author":{"gitId":"-"},"content":""},{"lineNumber":369,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown"},{"lineNumber":370,"author":{"gitId":"-"},"content":""},{"lineNumber":371,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."},{"lineNumber":372,"author":{"gitId":"-"},"content":""},{"lineNumber":373,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e"},{"lineNumber":374,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."},{"lineNumber":375,"author":{"gitId":"-"},"content":""},{"lineNumber":376,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."},{"lineNumber":378,"author":{"gitId":"-"},"content":""},{"lineNumber":379,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      Expected: Similar to previous."},{"lineNumber":381,"author":{"gitId":"-"},"content":""},{"lineNumber":382,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"},{"lineNumber":383,"author":{"gitId":"-"},"content":""},{"lineNumber":384,"author":{"gitId":"-"},"content":"### Saving data"},{"lineNumber":385,"author":{"gitId":"-"},"content":""},{"lineNumber":386,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files"},{"lineNumber":387,"author":{"gitId":"-"},"content":""},{"lineNumber":388,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"},{"lineNumber":389,"author":{"gitId":"-"},"content":""},{"lineNumber":390,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_"}],"authorContributionMap":{"skinnychenpi":45,"-":345}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"MeetBuddy is a **desktop app for managing contacts and daily tasks, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, MeetBuddy can get your contact management as well as task management done faster than traditional GUI apps."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Quick start"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer."},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"1. Download the latest `meetbuddy.jar` from [here](https://github.com/AY2021S2-CS2103-T16-2/tp/releases)."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MeetBuddy."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * **`list`** : Lists all contacts."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * **`delete`**`3` : Deletes the 3rd contact shown in the current list."},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * **`clear`** : Deletes all contacts."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * **`exit`** : Exits the app."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken."},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"### Viewing help : `help`"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page."},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Format: `help`"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Adding a person: `add`"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"-"},"content":"Adds a person to the address book."},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"hengyiqun"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG] [g/GROUP]…​`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"},{"lineNumber":83,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"* Assigning Priorities:"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"  Format:"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"  `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS pr/PRIORITY [no/NOTES] d/DATE`"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"  PRIORITY can be {1,2,3,4,5}"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"},{"lineNumber":97,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"### Listing all persons : `list`"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"-"},"content":"Format: `list`"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"-"},"content":"### Editing a person : `edit`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"Edits an existing person in the address book."},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":112,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided."},{"lineNumber":113,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values."},{"lineNumber":114,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."},{"lineNumber":115,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    specifying any tags after it."},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":119,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."},{"lineNumber":120,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"hengyiqun"},"content":"Finds persons whose names or whose groups contain any of the given keywords."},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"},{"lineNumber":130,"author":{"gitId":"hengyiqun"},"content":"* Both the name and group are searched."},{"lineNumber":131,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`"},{"lineNumber":132,"author":{"gitId":"hengyiqun"},"content":"* Persons whose name or group matching at least one keyword will be returned (i.e. `OR` search)."},{"lineNumber":133,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":136,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`"},{"lineNumber":137,"author":{"gitId":"hengyiqun"},"content":"* `find badminton` returns the list of contacts that are in the badminton group"},{"lineNumber":138,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e"},{"lineNumber":139,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book."},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"-"},"content":"Format: `delete INDEX`"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`."},{"lineNumber":148,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list."},{"lineNumber":149,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Examples:"},{"lineNumber":152,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book."},{"lineNumber":153,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command."},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"### Sorting of contacts : `sort`"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"Sorts the contacts displayed according to a specified field."},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"FormatL `sort FIELDNAME`"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"* Sorts according to the field specified by `FIELDNAME`"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"* `FIELDNAME` is only restricted to the following cases:"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by name : `name`"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by priority (Coming in v1.3) : `priority`"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"    * Sort by last seen date (Coming in v1.3) : `lastSeenDate`"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"Examples:"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"Clears all entries from the address book."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Format: `clear`"},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Exits the program."},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"-"},"content":"Format: `exit`"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"### Saving the data"},{"lineNumber":182,"author":{"gitId":"-"},"content":""},{"lineNumber":183,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":184,"author":{"gitId":"-"},"content":""},{"lineNumber":185,"author":{"gitId":"-"},"content":"### Editing the data file"},{"lineNumber":186,"author":{"gitId":"-"},"content":""},{"lineNumber":187,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file."},{"lineNumber":188,"author":{"gitId":"-"},"content":""},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"},{"lineNumber":190,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run."},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003c/div\u003e"},{"lineNumber":192,"author":{"gitId":"-"},"content":""},{"lineNumber":193,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"_Details coming soon ..._"},{"lineNumber":196,"author":{"gitId":"-"},"content":""},{"lineNumber":197,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":198,"author":{"gitId":"-"},"content":""},{"lineNumber":199,"author":{"gitId":"-"},"content":"## FAQ"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"},{"lineNumber":202,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder."},{"lineNumber":203,"author":{"gitId":"-"},"content":""},{"lineNumber":204,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"## Command summary"},{"lineNumber":207,"author":{"gitId":"-"},"content":""},{"lineNumber":208,"author":{"gitId":"-"},"content":"Action | Format, Examples"},{"lineNumber":209,"author":{"gitId":"-"},"content":"--------|------------------"},{"lineNumber":210,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"},{"lineNumber":211,"author":{"gitId":"-"},"content":"**Clear** | `clear`"},{"lineNumber":212,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`"},{"lineNumber":213,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`"},{"lineNumber":214,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`"},{"lineNumber":215,"author":{"gitId":"-"},"content":"**List** | `list`"},{"lineNumber":216,"author":{"gitId":"-"},"content":"**Help** | `help`"}],"authorContributionMap":{"Maurice2n97":14,"skinnychenpi":12,"hengyiqun":5,"-":185}},{"path":"docs/team/hengyiqun.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"hengyiqun"},"content":"title: Yi Qun\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"hengyiqun":1,"-":45}},{"path":"docs/team/maurice2n97.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"title: Maurice\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"Maurice2n97":1,"-":45}},{"path":"docs/team/totoyoyo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"totoyoyo"},"content":"---"},{"lineNumber":2,"author":{"gitId":"totoyoyo"},"content":"layout: page"},{"lineNumber":3,"author":{"gitId":"totoyoyo"},"content":"title: ToTo Tokaeo\u0027s Project Portfolio Page"},{"lineNumber":4,"author":{"gitId":"totoyoyo"},"content":"---"},{"lineNumber":5,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":6,"author":{"gitId":"totoyoyo"},"content":"## Project: AddressBook Level 3"},{"lineNumber":7,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":8,"author":{"gitId":"totoyoyo"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."},{"lineNumber":9,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":10,"author":{"gitId":"totoyoyo"},"content":"Given below are my contributions to the project."},{"lineNumber":11,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":12,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added the ability to undo/redo previous commands."},{"lineNumber":13,"author":{"gitId":"totoyoyo"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."},{"lineNumber":14,"author":{"gitId":"totoyoyo"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."},{"lineNumber":15,"author":{"gitId":"totoyoyo"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."},{"lineNumber":16,"author":{"gitId":"totoyoyo"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"},{"lineNumber":17,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":18,"author":{"gitId":"totoyoyo"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."},{"lineNumber":19,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":20,"author":{"gitId":"totoyoyo"},"content":"* **Code contributed**: [RepoSense link]()"},{"lineNumber":21,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":22,"author":{"gitId":"totoyoyo"},"content":"* **Project management**:"},{"lineNumber":23,"author":{"gitId":"totoyoyo"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"},{"lineNumber":24,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":25,"author":{"gitId":"totoyoyo"},"content":"* **Enhancements to existing features**:"},{"lineNumber":26,"author":{"gitId":"totoyoyo"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"},{"lineNumber":27,"author":{"gitId":"totoyoyo"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"},{"lineNumber":28,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":29,"author":{"gitId":"totoyoyo"},"content":"* **Documentation**:"},{"lineNumber":30,"author":{"gitId":"totoyoyo"},"content":"    * User Guide:"},{"lineNumber":31,"author":{"gitId":"totoyoyo"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()"},{"lineNumber":32,"author":{"gitId":"totoyoyo"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"},{"lineNumber":33,"author":{"gitId":"totoyoyo"},"content":"    * Developer Guide:"},{"lineNumber":34,"author":{"gitId":"totoyoyo"},"content":"        * Added implementation details of the `delete` feature."},{"lineNumber":35,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":36,"author":{"gitId":"totoyoyo"},"content":"* **Community**:"},{"lineNumber":37,"author":{"gitId":"totoyoyo"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"},{"lineNumber":38,"author":{"gitId":"totoyoyo"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"},{"lineNumber":39,"author":{"gitId":"totoyoyo"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"},{"lineNumber":40,"author":{"gitId":"totoyoyo"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"},{"lineNumber":41,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":42,"author":{"gitId":"totoyoyo"},"content":"* **Tools**:"},{"lineNumber":43,"author":{"gitId":"totoyoyo"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())"},{"lineNumber":44,"author":{"gitId":"totoyoyo"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo"},{"lineNumber":45,"author":{"gitId":"totoyoyo"},"content":""},{"lineNumber":46,"author":{"gitId":"totoyoyo"},"content":"* _{you can add/remove categories in the list above}_"}],"authorContributionMap":{"totoyoyo":46}},{"path":"src/main/java/seedu/address/model/meeting/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s DateTime in a meeting."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidDateTime(String)}"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"public class DateTime implements Comparable\u003cDateTime\u003e{"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"DateTime should use YYYY-MM-DD HH:MM format\";"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public static final DateTimeFormatter VALIDATION_DATETIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public final LocalDateTime value;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code DateTime}."},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * @param dateTime A valid DateTime number."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime(String dateTime) {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(dateTime);"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        value \u003d LocalDateTime.parse(dateTime, VALIDATION_DATETIME_FORMAT);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid DateTime number."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidDateTime(String test) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"            LocalDateTime.parse(test, VALIDATION_DATETIME_FORMAT);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            return false;"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        return true;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    public int compareTo(DateTime other) {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        if (value.isBefore(other.value)) {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            return -1;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return 1;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"        return value.toString();"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.DateTime // instanceof handles nulls"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 value.equals(((seedu.address.model.meeting.DateTime) other).value)); // state check"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        return value.hashCode();"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":69}},{"path":"src/main/java/seedu/address/model/meeting/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s Description in the meeting book."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; should always be valid.}"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Description {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullDescription;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code Description}."},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     * @param Description A valid Description."},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    public Description(String Description) {"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(Description);"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"        fullDescription \u003d Description;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Description // instanceof handles nulls"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 fullDescription.equals(((seedu.address.model.meeting.Description) other).fullDescription)); // state check"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        return fullDescription.hashCode();"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":44}},{"path":"src/main/java/seedu/address/model/meeting/Meeting.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Objects;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":" * Represents a meeting in MeetBuddy."},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"public class Meeting {"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"            \"The start date time of a meeting should be strictly earlier than the terminate date time.\";"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    // Identity fields"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private final Name name;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime start;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private final DateTime terminate;"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    // Data fields"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    private final Priority priority;"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    private final Description description;"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     * Every field must be present and not null."},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting(Name name, DateTime start, DateTime terminate, Priority priority, Description description, Set\u003cTag\u003e tags) {"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(name, start, terminate, priority, description, tags);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidStartTerminate(start, terminate), MESSAGE_CONSTRAINTS);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        this.name \u003d name;"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d start;"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d terminate;"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d priority;"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d description;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        this.tags.addAll(tags);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    public Name getName() {"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        return name;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getStart() {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        return start;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    public DateTime getTerminate() {"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"        return terminate;"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    public Priority getPriority() {"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        return priority;"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"    public Description getDescription() {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"        return description;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"     * if modification is attempted."},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"        return Collections.unmodifiableSet(tags);"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same name, start and terminate time. (Use identify fields only)"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a weaker notion of equality between two meetings."},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"    public boolean isSameMeeting(Meeting otherMeeting) {"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        if (otherMeeting \u003d\u003d this) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"            return true;"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting !\u003d null"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getName().equals(getName())"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate());"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given date time for the meeting is valid."},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidStartTerminate(DateTime start, DateTime terminate) {"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        return start.compareTo(terminate) \u003d\u003d -1;"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if both meetings have the same identity and data fields."},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"     * This defines a stronger notion of equality between two meetings."},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"            return true;"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        if (!(other instanceof Meeting)) {"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"            return false;"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"        Meeting otherMeeting \u003d (Meeting) other;"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"        return otherMeeting.getName().equals(getName())"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getStart().equals(getStart())"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTerminate().equals(getTerminate())"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getPriority().equals(getPriority())"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getDescription().equals(getDescription())"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 otherMeeting.getTags().equals(getTags());"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"        return Objects.hash(name, start, terminate, priority, description, tags);"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        builder.append(getName())"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Start: \")"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"                .append(getStart())"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Terminate: \")"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"                .append(getTerminate())"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Priority: \")"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"                .append(getPriority())"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"                .append(\"; Description: \")"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"                .append(getDescription());"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        Set\u003cTag\u003e tags \u003d getTags();"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        if (!tags.isEmpty()) {"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"            builder.append(\"; Tags: \");"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"            tags.forEach(builder::append);"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"        return builder.toString();"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":146}},{"path":"src/main/java/seedu/address/model/meeting/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s name in the meeting book."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    /*"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        fullName \u003d name;"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid name."},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return test.matches(VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 fullName.equals(((seedu.address.model.meeting.Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":59}},{"path":"src/main/java/seedu/address/model/meeting/Priority.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":" * Represents a Meeting\u0027s priority in the meeting."},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPriority(String)}"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class Priority {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority can only vary from 1 to 5.\";"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"    public final int priority;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[1-5]*$\";"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"     * Constructs an {@code Priority}."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"     * @param priority A valid priority."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public Priority(String priority) {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(priority);"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d Integer.parseInt(priority);"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if a given string is a valid priority."},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public static boolean isValidPriority(String priority) {"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        return priority.matches(VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        return Integer.toString(priority);"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof seedu.address.model.meeting.Priority // instanceof handles nulls"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 priority \u003d\u003d (((seedu.address.model.meeting.Priority) other).priority)); // state check"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":49}},{"path":"src/main/java/seedu/address/model/meeting/UniqueMeetingList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":" * A list of meetings that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":" * A meeting is considered unique by comparing using {@code Meeting#isSameMeeting(Meeting)}. As such, adding and updating of"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":" * meetings uses Meeting#isSameMeeting(Meeting) for equality so as to ensure that the meeting being added or updated is"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":" * unique in terms of identity in the UniqueMeetingList. However, the removal of a meeting uses Meeting#equals(Object) so"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":" * as to ensure that the meeting with exactly the same fields will be removed."},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":" * Supports a minimal set of list operations."},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":" *"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":" * @see Meeting#isSameMeeting(Meeting)"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"public class UniqueMeetingList implements Iterable\u003cMeeting\u003e {"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    private final ObservableList\u003cMeeting\u003e internalUnmodifiableList \u003d"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"            FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if the list contains an equivalent meeting as the given argument."},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public boolean contains(Meeting toCheck) {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toCheck);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameMeeting);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"     * Adds a meeting to the list."},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must not already exist in the list."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public void add(Meeting toAdd) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toAdd);"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        if (contains(toAdd)) {"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        internalList.add(toAdd);"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the meeting {@code target} in the list with {@code editedMeeting}."},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * {@code target} must exist in the list."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting identity of {@code editedMeeting} must not be the same as another existing meeting in the list."},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting(Meeting target, Meeting editedMeeting) {"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(target, editedMeeting);"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        if (!target.isSameMeeting(editedMeeting) \u0026\u0026 contains(editedMeeting)) {"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"        internalList.set(index, editedMeeting);"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"     * Removes the equivalent meeting from the list."},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"     * The meeting must exist in the list."},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    public void remove(Meeting toRemove) {"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(toRemove);"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        if (!internalList.remove(toRemove)) {"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"            throw new MeetingNotFoundException();"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(UniqueMeetingList replacement) {"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"        requireNonNull(replacement);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(replacement.internalList);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"     * Replaces the contents of this list with {@code meetings}."},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"     * {@code meetings} must not contain duplicate meetings."},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings(List\u003cMeeting\u003e meetings) {"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        requireAllNonNull(meetings);"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"        if (!meetingsAreUnique(meetings)) {"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"            throw new DuplicateMeetingException();"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        internalList.setAll(meetings);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"    public ObservableList\u003cMeeting\u003e asUnmodifiableObservableList() {"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"        return internalUnmodifiableList;"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"    public Iterator\u003cMeeting\u003e iterator() {"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.iterator();"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"    public boolean equals(Object other) {"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"                || (other instanceof UniqueMeetingList // instanceof handles nulls"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"                \u0026\u0026 internalList.equals(((UniqueMeetingList) other).internalList));"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    @Override"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"    public int hashCode() {"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"        return internalList.hashCode();"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"     * Returns true if {@code meetings} contains only unique meetings."},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    private boolean meetingsAreUnique(List\u003cMeeting\u003e meetings) {"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"        for (int i \u003d 0; i \u003c meetings.size() - 1; i++) {"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"            for (int j \u003d i + 1; j \u003c meetings.size(); j++) {"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"                if (meetings.get(i).isSameMeeting(meetings.get(j))) {"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"                    return false;"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"        return true;"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":137}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/DuplicateMeetingException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" * identity)."},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"public class DuplicateMeetingException extends RuntimeException {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"    public DuplicateMeetingException() {"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Operation would result in duplicate meetings\");"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"}"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""}],"authorContributionMap":{"skinnychenpi":12}},{"path":"src/main/java/seedu/address/model/meeting/exceptions/MeetingNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting.exceptions;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":" * Signals that the operation is unable to find the specified person."},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingNotFoundException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingNotFoundException() {"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"        super(\"Can\u0027t find the meeting in the UniqueMeetingList.\");"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":10}},{"path":"src/test/java/seedu/address/logic/commands/MeetingCommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"//import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.commons.core.index.Index;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.AddressBook;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.person.NameContainsKeywordsPredicate;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.model.person.Person;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"//import seedu.address.testutil.EditPersonDescriptorBuilder;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" * Contains helper methods for testing commands."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingCommandTestUtil {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_NAME_MEETING1 \u003d \"CS2103 Conference\";"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_NAME_MEETING2 \u003d \"NUS Seminar\";"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING1 \u003d \"2021-01-01 19:00\";"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_START_MEETING2 \u003d \"2021-03-15 17:00\";"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING1 \u003d \"2021-01-01 20:00\";"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TERMINATE_MEETING2 \u003d \"2021-03-15 18:00\";"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING1 \u003d \"2\";"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_PRIORITY_MEETING2 \u003d \"5\";"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_DESCRIPTION_MEETING1 \u003d \"CS2103 Conference Test\";"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_DESCRIPTION_MEETING2 \u003d \"NUS Seminar Test\";"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TAG_MEETING1 \u003d \"SoC\";"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    public static final String VALID_TAG_MEETING2 \u003d \"University\";"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"//    public static final EditCommand.EditPersonDescriptor DESC_AMY;"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"//    public static final EditCommand.EditPersonDescriptor DESC_BOB;"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"//    static {"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"//        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"//                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"//                .withTags(VALID_TAG_FRIEND).build();"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"//        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"//                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"//                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"//     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"//     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"//     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"//                                            Model expectedModel) {"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"//        try {"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"//            CommandResult result \u003d command.execute(actualModel);"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":"//            assertEquals(expectedCommandResult, result);"},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"//            assertEquals(expectedModel, actualModel);"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"//        } catch (CommandException ce) {"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"//            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"//     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"//     * that takes a string {@code expectedMessage}."},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"//                                            Model expectedModel) {"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"//        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"//        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"//     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"//     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":"//     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"//     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"//    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"//        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"//        // only do so by copying its components."},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"//        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":"//        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"//        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(expectedAddressBook, actualModel.getAddressBook());"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"//     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"//     * {@code model}\u0027s address book."},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":"//    public static void showPersonAtIndex(Model model, Index targetIndex) {"},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"//        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"//        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"//        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"//        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"//        assertEquals(1, model.getFilteredPersonList().size());"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":130}},{"path":"src/test/java/seedu/address/model/meeting/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.DateTime;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"class DateTimeTest {"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"        String invalidDateTime \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidDateTime() {"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"        // null address"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        // invalid DateTime"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2020/01/02 19:00\"));"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-13-02 18:00\"));"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(DateTime.isValidDateTime(\"2021-11-02 25:00\"));"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        // valid DateTime"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(DateTime.isValidDateTime(\"2021-11-02 23:00\"));"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":36}},{"path":"src/test/java/seedu/address/model/meeting/MeetingTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"class MeetingTest {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    private static final Name NAME \u003d new Name(\"CS2103 seminar\");"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime START \u003d new DateTime(\"2021-03-11 15:04\");"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    private static final DateTime TERMINATE \u003d new DateTime(\"2021-03-11 16:04\");"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    private static final Priority PRIORITY \u003d new Priority(\"4\");"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    private static final Description DESCRIPTION \u003d new Description(\"This is the time skinnychenpi write this test.\");"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"    private static final Tag TAG \u003d new Tag(\"MeetingTest\");"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cTag\u003e TAGS \u003d new HashSet\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void isSameMeeting() {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting \u003d new Meeting(NAME, START, TERMINATE, PRIORITY, DESCRIPTION, TAGS);"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting2 \u003d new Meeting(NAME, START, TERMINATE, new Priority(\"1\"), new Description(\"Test\"), TAGS);"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(meeting.isSameMeeting(meeting2));"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"        Meeting meeting3 \u003d new Meeting(NAME, new DateTime(\"2020-03-10 15:04\"), TERMINATE, PRIORITY, DESCRIPTION, TAGS);"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(meeting.isSameMeeting(meeting3));"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidMeeting() {"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(NAME, TERMINATE, TERMINATE, PRIORITY, DESCRIPTION, TAGS));"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        // Check if start time later than terminate time will throw an error."},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Meeting(NAME, TERMINATE, START, PRIORITY, DESCRIPTION, TAGS));"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"//    @Test"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"//    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"//        Person person \u003d new PersonBuilder().build();"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"//        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":46}},{"path":"src/test/java/seedu/address/model/meeting/PriorityTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"public class PriorityTest {"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_invalidPriority_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    public void constructor_outOfRangePriority_throwsIllegalArgumentException() {"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"        String invalidPriority \u003d \"6\";"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public void isValidPriority() {"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"        // null priority"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        // invalid priority"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\" \")); // spaces only"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"0\"));"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"9\"));"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(Priority.isValidPriority(\"2.2\"));"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"        // valid priority"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"1\"));"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(Priority.isValidPriority(\"3\")); // one character"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":44}},{"path":"src/test/java/seedu/address/model/meeting/UniqueMeetingListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.model.meeting;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.DuplicateMeetingException;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.exceptions.MeetingNotFoundException;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.testutil.MeetingBuilder;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.Assert.assertThrows;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING1;"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING2;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING3;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING4;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.testutil.TypicalMeetings.MEETING5;"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"class UniqueMeetingListTest {"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private final UniqueMeetingList uniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_nullPerson_throwsNullPointerException() {"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.contains(null));"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personNotInList_returnsFalse() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        assertFalse(uniqueMeetingList.contains(MEETING1));"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personInList_returnsTrue() {"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(MEETING1));"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        Meeting editedMeeting1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withTags(\"RandomTag\")"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"                .build();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        assertTrue(uniqueMeetingList.contains(editedMeeting1));"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    public void add_nullPerson_throwsNullPointerException() {"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.add(null));"},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.add(MEETING1));"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullTargetPerson_throwsNullPointerException() {"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(null, MEETING1));"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_nullEditedPerson_throwsNullPointerException() {"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, null));"},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_targetPersonNotInList_throwsPersonNotFoundException() {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING1));"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonIsSamePerson_success() {"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING1);"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING1);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasSameIdentity_success() {"},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"        Meeting editedMEETING1 \u003d new MeetingBuilder(MEETING1).withPriority(\"1\").withTags(\"randomTag\")"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"                .build();"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, editedMEETING1);"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(editedMEETING1);"},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasDifferentIdentity_success() {"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeeting(MEETING1, MEETING2);"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeeting_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"},{"lineNumber":106,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":107,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING2);"},{"lineNumber":108,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeeting(MEETING1, MEETING2));"},{"lineNumber":109,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":111,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_nullPerson_throwsNullPointerException() {"},{"lineNumber":113,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.remove(null));"},{"lineNumber":114,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":116,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"},{"lineNumber":118,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(MeetingNotFoundException.class, () -\u003e uniqueMeetingList.remove(MEETING1));"},{"lineNumber":119,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":121,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"skinnychenpi"},"content":"    public void remove_existingPerson_removesPerson() {"},{"lineNumber":123,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":124,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.remove(MEETING1);"},{"lineNumber":125,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":126,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":127,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":129,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":130,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nulluniqueMeetingList_throwsNullPointerException() {"},{"lineNumber":131,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((UniqueMeetingList) null));"},{"lineNumber":132,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":134,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_uniqueMeetingList_replacesOwnListWithProvideduniqueMeetingList() {"},{"lineNumber":136,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":137,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":138,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":139,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(expecteduniqueMeetingList);"},{"lineNumber":140,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":141,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":143,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_nullList_throwsNullPointerException() {"},{"lineNumber":145,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueMeetingList.setMeetings((List\u003cMeeting\u003e) null));"},{"lineNumber":146,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":148,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":149,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_list_replacesOwnListWithProvidedList() {"},{"lineNumber":150,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.add(MEETING1);"},{"lineNumber":151,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e personList \u003d Collections.singletonList(MEETING2);"},{"lineNumber":152,"author":{"gitId":"skinnychenpi"},"content":"        uniqueMeetingList.setMeetings(personList);"},{"lineNumber":153,"author":{"gitId":"skinnychenpi"},"content":"        UniqueMeetingList expecteduniqueMeetingList \u003d new UniqueMeetingList();"},{"lineNumber":154,"author":{"gitId":"skinnychenpi"},"content":"        expecteduniqueMeetingList.add(MEETING2);"},{"lineNumber":155,"author":{"gitId":"skinnychenpi"},"content":"        assertEquals(expecteduniqueMeetingList, uniqueMeetingList);"},{"lineNumber":156,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":158,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":159,"author":{"gitId":"skinnychenpi"},"content":"    public void setMeetings_listWithDuplicatePersons_throwsDuplicatePersonException() {"},{"lineNumber":160,"author":{"gitId":"skinnychenpi"},"content":"        List\u003cMeeting\u003e listWithDuplicatePersons \u003d Arrays.asList(MEETING1, MEETING1);"},{"lineNumber":161,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(DuplicateMeetingException.class, () -\u003e uniqueMeetingList.setMeetings(listWithDuplicatePersons));"},{"lineNumber":162,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":164,"author":{"gitId":"skinnychenpi"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"skinnychenpi"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":166,"author":{"gitId":"skinnychenpi"},"content":"        assertThrows(UnsupportedOperationException.class, ()"},{"lineNumber":167,"author":{"gitId":"skinnychenpi"},"content":"                -\u003e uniqueMeetingList.asUnmodifiableObservableList().remove(0));"},{"lineNumber":168,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":169}},{"path":"src/test/java/seedu/address/testutil/MeetingBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.*;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":" * A utility class to help with building Meeting objects."},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"public class MeetingBuilder {"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_NAME \u003d \"CS2103 Lectures\";"},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_START \u003d \"2021-03-12 14:00\";"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_TERMINATE \u003d \"2021-03-12 16:00\";"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_PRIORITY \u003d \"5\";"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Taught by Mr.Damith.\";"},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"    private Name name;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime start;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":"    private DateTime terminate;"},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"    private Priority priority;"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":"    private Description description;"},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"     * Creates a {@code MeetingBuilder} with the default details."},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder() {"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d new DateTime(DEFAULT_START);"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d new DateTime(DEFAULT_TERMINATE);"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d new Priority(DEFAULT_PRIORITY);"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d new Description(DEFAULT_DESCRIPTION);"},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"        tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"     * Initializes the MeetingBuilder with the data of {@code MeetingToCopy}."},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder(Meeting meetingToCopy) {"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"        name \u003d meetingToCopy.getName();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"        start \u003d meetingToCopy.getStart();"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"        terminate \u003d meetingToCopy.getTerminate();"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"        priority \u003d meetingToCopy.getPriority();"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"        description \u003d meetingToCopy.getDescription();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":"        tags \u003d new HashSet\u003c\u003e(meetingToCopy.getTags());"},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Name} of the {@code Meeting} that we are building."},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withName(String name) {"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Meeting} that we are building."},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withTags(String ... tags) {"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the start date time of the {@code Meeting} that we are building."},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withStart(String start) {"},{"lineNumber":72,"author":{"gitId":"skinnychenpi"},"content":"        this.start \u003d new DateTime(start);"},{"lineNumber":73,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":74,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":76,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the terminate date time of the {@code Meeting} that we are building."},{"lineNumber":78,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withTerminate(String terminate) {"},{"lineNumber":80,"author":{"gitId":"skinnychenpi"},"content":"        this.terminate \u003d new DateTime(terminate);"},{"lineNumber":81,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":82,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":84,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Priority} of the {@code Meeting} that we are building."},{"lineNumber":86,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withPriority(String priority) {"},{"lineNumber":88,"author":{"gitId":"skinnychenpi"},"content":"        this.priority \u003d new Priority(priority);"},{"lineNumber":89,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":90,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":92,"author":{"gitId":"skinnychenpi"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"skinnychenpi"},"content":"     * Sets the {@code Description} of the {@code Meeting} that we are building."},{"lineNumber":94,"author":{"gitId":"skinnychenpi"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"skinnychenpi"},"content":"    public MeetingBuilder withDescription(String description) {"},{"lineNumber":96,"author":{"gitId":"skinnychenpi"},"content":"        this.description \u003d new Description(description);"},{"lineNumber":97,"author":{"gitId":"skinnychenpi"},"content":"        return this;"},{"lineNumber":98,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":100,"author":{"gitId":"skinnychenpi"},"content":"    public Meeting build() {"},{"lineNumber":101,"author":{"gitId":"skinnychenpi"},"content":"        return new Meeting(name, start, terminate, priority, description, tags);"},{"lineNumber":102,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":104,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":104}},{"path":"src/test/java/seedu/address/testutil/TypicalMeetings.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"skinnychenpi"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":3,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_NAME_MEETING1;"},{"lineNumber":4,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_NAME_MEETING2;"},{"lineNumber":5,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_START_MEETING1;"},{"lineNumber":6,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_START_MEETING2;"},{"lineNumber":7,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TERMINATE_MEETING1;"},{"lineNumber":8,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TERMINATE_MEETING2;"},{"lineNumber":9,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_PRIORITY_MEETING1;"},{"lineNumber":10,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_PRIORITY_MEETING2;"},{"lineNumber":11,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING1;"},{"lineNumber":12,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_DESCRIPTION_MEETING2;"},{"lineNumber":13,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TAG_MEETING1;"},{"lineNumber":14,"author":{"gitId":"skinnychenpi"},"content":"import static seedu.address.logic.commands.MeetingCommandTestUtil.VALID_TAG_MEETING2;"},{"lineNumber":15,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":16,"author":{"gitId":"skinnychenpi"},"content":"import java.util.ArrayList;"},{"lineNumber":17,"author":{"gitId":"skinnychenpi"},"content":"import java.util.Arrays;"},{"lineNumber":18,"author":{"gitId":"skinnychenpi"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":20,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.AddressBook;"},{"lineNumber":21,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.meeting.Meeting;"},{"lineNumber":22,"author":{"gitId":"skinnychenpi"},"content":"import seedu.address.model.person.Person;"},{"lineNumber":23,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":24,"author":{"gitId":"skinnychenpi"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"skinnychenpi"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests."},{"lineNumber":26,"author":{"gitId":"skinnychenpi"},"content":" */"},{"lineNumber":27,"author":{"gitId":"skinnychenpi"},"content":"public class TypicalMeetings {"},{"lineNumber":28,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":29,"author":{"gitId":"skinnychenpi"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"},{"lineNumber":30,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING1 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING1).withStart(VALID_START_MEETING1)"},{"lineNumber":31,"author":{"gitId":"skinnychenpi"},"content":"            .withTerminate(VALID_TERMINATE_MEETING1).withPriority(VALID_PRIORITY_MEETING1).withDescription(VALID_DESCRIPTION_MEETING1)"},{"lineNumber":32,"author":{"gitId":"skinnychenpi"},"content":"            .withTags(VALID_TAG_MEETING1).build();"},{"lineNumber":33,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING2 \u003d new MeetingBuilder().withName(VALID_NAME_MEETING2).withStart(VALID_START_MEETING2)"},{"lineNumber":34,"author":{"gitId":"skinnychenpi"},"content":"            .withTerminate(VALID_TERMINATE_MEETING2).withPriority(VALID_PRIORITY_MEETING2).withDescription(VALID_DESCRIPTION_MEETING2)"},{"lineNumber":35,"author":{"gitId":"skinnychenpi"},"content":"            .withTags(VALID_TAG_MEETING2).build();"},{"lineNumber":36,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":37,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING3 \u003d new MeetingBuilder().withName(\"CS2103 ONLINE Lecture\")"},{"lineNumber":38,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-11 14:00\").withTerminate(\"2020-03-11 16:00\")"},{"lineNumber":39,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Damith\")"},{"lineNumber":40,"author":{"gitId":"skinnychenpi"},"content":"            .withTags(\"Lectures\").build();"},{"lineNumber":41,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING4 \u003d new MeetingBuilder().withName(\"CS2106 ONLINE Lecture\")"},{"lineNumber":42,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-10 10:00\").withTerminate(\"2020-03-10 12:00\")"},{"lineNumber":43,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"5\").withDescription(\"Taught by Djordje\")"},{"lineNumber":44,"author":{"gitId":"skinnychenpi"},"content":"            .withTags(\"Lectures\").build();"},{"lineNumber":45,"author":{"gitId":"skinnychenpi"},"content":"    public static final Meeting MEETING5 \u003d new MeetingBuilder().withName(\"Chess Club Meetings\")"},{"lineNumber":46,"author":{"gitId":"skinnychenpi"},"content":"            .withStart(\"2020-03-17 10:00\").withTerminate(\"2020-03-17 12:00\")"},{"lineNumber":47,"author":{"gitId":"skinnychenpi"},"content":"            .withPriority(\"3\").withDescription(\"Bring your chess board\")"},{"lineNumber":48,"author":{"gitId":"skinnychenpi"},"content":"            .withTags(\"Extracurricular\").build();"},{"lineNumber":49,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":50,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":51,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":52,"author":{"gitId":"skinnychenpi"},"content":"    // Still don\u0027t know what this part is doing, will check later."},{"lineNumber":53,"author":{"gitId":"skinnychenpi"},"content":"//    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"},{"lineNumber":54,"author":{"gitId":"skinnychenpi"},"content":"//"},{"lineNumber":55,"author":{"gitId":"skinnychenpi"},"content":"//    private TypicalPersons() {} // prevents instantiation"},{"lineNumber":56,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":57,"author":{"gitId":"skinnychenpi"},"content":"//    /**"},{"lineNumber":58,"author":{"gitId":"skinnychenpi"},"content":"//     * Returns an {@code AddressBook} with all the typical persons."},{"lineNumber":59,"author":{"gitId":"skinnychenpi"},"content":"//     */"},{"lineNumber":60,"author":{"gitId":"skinnychenpi"},"content":"//    public static AddressBook getTypicalAddressBook() {"},{"lineNumber":61,"author":{"gitId":"skinnychenpi"},"content":"//        AddressBook ab \u003d new AddressBook();"},{"lineNumber":62,"author":{"gitId":"skinnychenpi"},"content":"//        for (Person person : getTypicalPersons()) {"},{"lineNumber":63,"author":{"gitId":"skinnychenpi"},"content":"//            ab.addPerson(person);"},{"lineNumber":64,"author":{"gitId":"skinnychenpi"},"content":"//        }"},{"lineNumber":65,"author":{"gitId":"skinnychenpi"},"content":"//        return ab;"},{"lineNumber":66,"author":{"gitId":"skinnychenpi"},"content":"//    }"},{"lineNumber":67,"author":{"gitId":"skinnychenpi"},"content":""},{"lineNumber":68,"author":{"gitId":"skinnychenpi"},"content":"    public static List\u003cMeeting\u003e getTypicalMeetings() {"},{"lineNumber":69,"author":{"gitId":"skinnychenpi"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(MEETING1, MEETING2, MEETING3, MEETING4, MEETING5));"},{"lineNumber":70,"author":{"gitId":"skinnychenpi"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"skinnychenpi"},"content":"}"}],"authorContributionMap":{"skinnychenpi":71}}]
